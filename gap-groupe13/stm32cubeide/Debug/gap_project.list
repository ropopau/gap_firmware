
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008804  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  080089a4  080089a4  000099a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009338  08009338  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009338  08009338  0000a338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009340  08009340  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009340  08009340  0000a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009344  08009344  0000a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009348  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000074  080093bc  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  080093bc  0000b680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ed6  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003445  00000000  00000000  0001cf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000203c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1f  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199bc  00000000  00000000  00021b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001110e  00000000  00000000  0003b4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913a2  00000000  00000000  0004c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000dd9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e1818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800898c 	.word	0x0800898c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800898c 	.word	0x0800898c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <cmd_ping_callback>:

#include "gapcli_cmd_callback.h"


void cmd_ping_callback(gapcom_handle_t *handle, const void *proto_msg)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	gapcom_respond_ping(handle, GAPErrorCode_GAP_OK);
 80005c6:	2100      	movs	r1, #0
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f002 fe75 	bl	80032b8 <gapcom_respond_ping>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <close_sender>:
static UART_HandleTypeDef *huart2_handle;

static gapcom_handle_t *gapcom_handle_instance;

int close_sender(gapcom_sender_t *self)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <open_sender>:

int open_sender(gapcom_sender_t *self)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	return 0;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <send_sender>:

ssize_t send_sender(gapcom_sender_t *self, const uint8_t *buf, size_t len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit_IT(huart2_handle, buf, len);
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <send_sender+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	b292      	uxth	r2, r2
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fc28 	bl	8001e70 <HAL_UART_Transmit_IT>
 8000620:	4603      	mov	r3, r0
 8000622:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <send_sender+0x2a>
        return (ssize_t)len;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	e001      	b.n	8000632 <send_sender+0x2e>
    } else {
        return -1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000090 	.word	0x20000090

08000640 <create_gapcom_instance>:
		.open = open_sender,
		.send = send_sender
};

void create_gapcom_instance(UART_HandleTypeDef *handle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	huart2_handle = handle;
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <create_gapcom_instance+0x3c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]
	gapcom_handle_instance = gapcom_create();
 800064e:	f002 fb69 	bl	8002d24 <gapcom_create>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <create_gapcom_instance+0x40>)
 8000656:	6013      	str	r3, [r2, #0]
	gapcom_set_sender_impl(gapcom_handle_instance, &gapcom_sender_t_impl);
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <create_gapcom_instance+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4909      	ldr	r1, [pc, #36]	@ (8000684 <create_gapcom_instance+0x44>)
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fb90 	bl	8002d84 <gapcom_set_sender_impl>
	gapcom_install_callback(gapcom_handle_instance, cmd_ping_callback,GAPCOM_MSG_MIN);
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <create_gapcom_instance+0x40>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	4907      	ldr	r1, [pc, #28]	@ (8000688 <create_gapcom_instance+0x48>)
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fb9b 	bl	8002da8 <gapcom_install_callback>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000090 	.word	0x20000090
 8000680:	20000094 	.word	0x20000094
 8000684:	20000000 	.word	0x20000000
 8000688:	080005bd 	.word	0x080005bd

0800068c <receive_gapcom_incoming_uart_message>:

void receive_gapcom_incoming_uart_message(uint8_t *buf, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
	gapcom_accept(gapcom_handle_instance, buf, size);
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <receive_gapcom_incoming_uart_message+0x24>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	887a      	ldrh	r2, [r7, #2]
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fb9a 	bl	8002dda <gapcom_accept>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000094 	.word	0x20000094

080006b4 <init_log>:


UART_HandleTypeDef *huart_handler;

void init_log(UART_HandleTypeDef *huart)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	huart_handler = huart;
 80006bc:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <init_log+0x1c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000098 	.word	0x20000098

080006d4 <send_log>:

void send_log(enum VERBOSITY_LEVEL verbosity, const char *message)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 80006da:	af00      	add	r7, sp, #0
 80006dc:	4602      	mov	r2, r0
 80006de:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006e2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80006e6:	6019      	str	r1, [r3, #0]
 80006e8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006ec:	f2a3 4309 	subw	r3, r3, #1033	@ 0x409
 80006f0:	701a      	strb	r2, [r3, #0]
	char *level = "[Info]";
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <send_log+0xa4>)
 80006f4:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
	if (verbosity == VERBOSITY_DEBUG)
 80006f8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006fc:	f2a3 4309 	subw	r3, r3, #1033	@ 0x409
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d103      	bne.n	800070e <send_log+0x3a>
	{
		level = "[Debug]";
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <send_log+0xa8>)
 8000708:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800070c:	e014      	b.n	8000738 <send_log+0x64>
	}
	else if (verbosity == VERBOSITY_WARNING)
 800070e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000712:	f2a3 4309 	subw	r3, r3, #1033	@ 0x409
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d103      	bne.n	8000724 <send_log+0x50>
	{
		level = "[Warning]";
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <send_log+0xac>)
 800071e:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000722:	e009      	b.n	8000738 <send_log+0x64>
	}
	else if (verbosity == VERBOSITY_ERROR)
 8000724:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000728:	f2a3 4309 	subw	r3, r3, #1033	@ 0x409
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d102      	bne.n	8000738 <send_log+0x64>
	{
		level = "[Error]";
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <send_log+0xb0>)
 8000734:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
	}
	char buf[1024];
	sprintf(buf, "%s %s\r\n", level, message);
 8000738:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800073c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000740:	f107 000c 	add.w	r0, r7, #12
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800074a:	490f      	ldr	r1, [pc, #60]	@ (8000788 <send_log+0xb4>)
 800074c:	f007 f99a 	bl	8007a84 <siprintf>
	HAL_UART_Transmit_IT(huart_handler, (uint8_t*)buf, strlen(buf));
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <send_log+0xb8>)
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fd41 	bl	80001e0 <strlen>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4620      	mov	r0, r4
 800076a:	f001 fb81 	bl	8001e70 <HAL_UART_Transmit_IT>
}
 800076e:	bf00      	nop
 8000770:	f207 4714 	addw	r7, r7, #1044	@ 0x414
 8000774:	46bd      	mov	sp, r7
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	080089a4 	.word	0x080089a4
 800077c:	080089ac 	.word	0x080089ac
 8000780:	080089b4 	.word	0x080089b4
 8000784:	080089c0 	.word	0x080089c0
 8000788:	080089c8 	.word	0x080089c8
 800078c:	20000098 	.word	0x20000098

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fb10 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f820 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f8d4 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f87c 	bl	800089c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007a4:	f000 f8a4 	bl	80008f0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  create_gapcom_instance(&huart6);
 80007a8:	4808      	ldr	r0, [pc, #32]	@ (80007cc <main+0x3c>)
 80007aa:	f7ff ff49 	bl	8000640 <create_gapcom_instance>
  HAL_UART_Receive_IT(&huart6, rx_buff, 6);
 80007ae:	2206      	movs	r2, #6
 80007b0:	4907      	ldr	r1, [pc, #28]	@ (80007d0 <main+0x40>)
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <main+0x3c>)
 80007b4:	f001 fb92 	bl	8001edc <HAL_UART_Receive_IT>
  init_log(&huart2);
 80007b8:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <main+0x44>)
 80007ba:	f7ff ff7b 	bl	80006b4 <init_log>
  send_log(VERBOSITY_INFO, "GAP system booted");
 80007be:	4906      	ldr	r1, [pc, #24]	@ (80007d8 <main+0x48>)
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff ff87 	bl	80006d4 <send_log>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c6:	bf00      	nop
 80007c8:	e7fd      	b.n	80007c6 <main+0x36>
 80007ca:	bf00      	nop
 80007cc:	200000e4 	.word	0x200000e4
 80007d0:	2000012c 	.word	0x2000012c
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	080089d0 	.word	0x080089d0

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2230      	movs	r2, #48	@ 0x30
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 fa44 	bl	8007c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <SystemClock_Config+0xb8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <SystemClock_Config+0xb8>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <SystemClock_Config+0xb8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <SystemClock_Config+0xbc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000828:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <SystemClock_Config+0xbc>)
 800082a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <SystemClock_Config+0xbc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	2310      	movs	r3, #16
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fe65 	bl	8001520 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800085c:	f000 f8cc 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f001 f8c8 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000886:	f000 f8b7 	bl	80009f8 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	@ 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f001 fa7c 	bl	8001dd0 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f88b 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000009c 	.word	0x2000009c
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <MX_USART6_UART_Init+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 8000904:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000908:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 8000912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000916:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USART6_UART_Init+0x50>)
 800092c:	f001 fa50 	bl	8001dd0 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 f85f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000e4 	.word	0x200000e4
 8000944:	40011400 	.word	0x40011400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_GPIO_Init+0x7c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <MX_GPIO_Init+0x7c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_GPIO_Init+0x7c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_GPIO_Init+0x7c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <MX_GPIO_Init+0x7c>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_GPIO_Init+0x7c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <MX_GPIO_Init+0x80>)
 800099c:	f000 fda6 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009a0:	2320      	movs	r3, #32
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_GPIO_Init+0x80>)
 80009b8:	f000 fc14 	bl	80011e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart6, rx_buff, 6);
 80009d4:	2206      	movs	r2, #6
 80009d6:	4906      	ldr	r1, [pc, #24]	@ (80009f0 <HAL_UART_RxCpltCallback+0x24>)
 80009d8:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <HAL_UART_RxCpltCallback+0x28>)
 80009da:	f001 fa7f 	bl	8001edc <HAL_UART_Receive_IT>
	receive_gapcom_incoming_uart_message(rx_buff, 6);
 80009de:	2106      	movs	r1, #6
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <HAL_UART_RxCpltCallback+0x24>)
 80009e2:	f7ff fe53 	bl	800068c <receive_gapcom_incoming_uart_message>


}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000012c 	.word	0x2000012c
 80009f4:	200000e4 	.word	0x200000e4

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	@ 0x30
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3a      	ldr	r2, [pc, #232]	@ (8000b5c <HAL_UART_MspInit+0x108>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d134      	bne.n	8000ae0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	4b39      	ldr	r3, [pc, #228]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a38      	ldr	r2, [pc, #224]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4b32      	ldr	r3, [pc, #200]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a31      	ldr	r2, [pc, #196]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <HAL_UART_MspInit+0x110>)
 8000aca:	f000 fb8b 	bl	80011e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2026      	movs	r0, #38	@ 0x26
 8000ad4:	f000 fabd 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad8:	2026      	movs	r0, #38	@ 0x26
 8000ada:	f000 fad6 	bl	800108a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ade:	e038      	b.n	8000b52 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <HAL_UART_MspInit+0x114>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d133      	bne.n	8000b52 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_UART_MspInit+0x10c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b22:	23c0      	movs	r3, #192	@ 0xc0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b32:	2308      	movs	r3, #8
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <HAL_UART_MspInit+0x118>)
 8000b3e:	f000 fb51 	bl	80011e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2047      	movs	r0, #71	@ 0x47
 8000b48:	f000 fa83 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b4c:	2047      	movs	r0, #71	@ 0x47
 8000b4e:	f000 fa9c 	bl	800108a <HAL_NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3730      	adds	r7, #48	@ 0x30
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40011400 	.word	0x40011400
 8000b6c:	40020800 	.word	0x40020800

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 f949 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART2_IRQHandler+0x10>)
 8000bd6:	f001 f9a7 	bl	8001f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000009c 	.word	0x2000009c

08000be4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <USART6_IRQHandler+0x10>)
 8000bea:	f001 f99d 	bl	8001f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000e4 	.word	0x200000e4

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
  }
  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f007 f816 	bl	8007d34 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20018000 	.word	0x20018000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	2000052c 	.word	0x2000052c
 8000d3c:	20000680 	.word	0x20000680

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f006 ffd5 	bl	8007d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fcfb 	bl	8000790 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000da8:	08009348 	.word	0x08009348
  ldr r2, =_sbss
 8000dac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000db0:	20000680 	.word	0x20000680

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f92b 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe0a 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f943 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e38:	f000 f90b 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	20000014 	.word	0x20000014
 8000e58:	20000010 	.word	0x20000010

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000014 	.word	0x20000014
 8000e80:	20000530 	.word	0x20000530

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000530 	.word	0x20000530

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff feda 	bl	8000e84 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d008      	beq.n	80010f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e052      	b.n	8001196 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0216 	bic.w	r2, r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800110e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <HAL_DMA_Abort+0x62>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0208 	bic.w	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001140:	e013      	b.n	800116a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001142:	f7ff fe9f 	bl	8000e84 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b05      	cmp	r3, #5
 800114e:	d90c      	bls.n	800116a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2220      	movs	r2, #32
 8001154:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e015      	b.n	8001196 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e4      	bne.n	8001142 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117c:	223f      	movs	r2, #63	@ 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d004      	beq.n	80011bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00c      	b.n	80011d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2205      	movs	r2, #5
 80011c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e159      	b.n	80014b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8148 	bne.w	80014ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a2 	beq.w	80014ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b57      	ldr	r3, [pc, #348]	@ (80014cc <HAL_GPIO_Init+0x2e8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a56      	ldr	r2, [pc, #344]	@ (80014cc <HAL_GPIO_Init+0x2e8>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b54      	ldr	r3, [pc, #336]	@ (80014cc <HAL_GPIO_Init+0x2e8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a52      	ldr	r2, [pc, #328]	@ (80014d0 <HAL_GPIO_Init+0x2ec>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a49      	ldr	r2, [pc, #292]	@ (80014d4 <HAL_GPIO_Init+0x2f0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x202>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a48      	ldr	r2, [pc, #288]	@ (80014d8 <HAL_GPIO_Init+0x2f4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1fe>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <HAL_GPIO_Init+0x2f8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1fa>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a46      	ldr	r2, [pc, #280]	@ (80014e0 <HAL_GPIO_Init+0x2fc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1f6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a45      	ldr	r2, [pc, #276]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1f2>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4935      	ldr	r1, [pc, #212]	@ (80014d0 <HAL_GPIO_Init+0x2ec>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a2f      	ldr	r2, [pc, #188]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145a:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147e:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a8:	4a0f      	ldr	r2, [pc, #60]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f aea2 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40013c00 	.word	0x40013c00

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e267      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d075      	beq.n	800162a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800153e:	4b88      	ldr	r3, [pc, #544]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b04      	cmp	r3, #4
 8001548:	d00c      	beq.n	8001564 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154a:	4b85      	ldr	r3, [pc, #532]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001552:	2b08      	cmp	r3, #8
 8001554:	d112      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001556:	4b82      	ldr	r3, [pc, #520]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4b7e      	ldr	r3, [pc, #504]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d05b      	beq.n	8001628 <HAL_RCC_OscConfig+0x108>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d157      	bne.n	8001628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e242      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x74>
 8001586:	4b76      	ldr	r3, [pc, #472]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a75      	ldr	r2, [pc, #468]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xb0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b70      	ldr	r3, [pc, #448]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xb0>
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a68      	ldr	r2, [pc, #416]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b66      	ldr	r3, [pc, #408]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a65      	ldr	r2, [pc, #404]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc54 	bl	8000e84 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc50 	bl	8000e84 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e207      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xc0>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fc40 	bl	8000e84 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fc3c 	bl	8000e84 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	@ 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1f3      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b51      	ldr	r3, [pc, #324]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0xe8>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001636:	4b4a      	ldr	r3, [pc, #296]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x152>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1c7      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4937      	ldr	r1, [pc, #220]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_OscConfig+0x244>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fbf5 	bl	8000e84 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fbf1 	bl	8000e84 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1a8      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4925      	ldr	r1, [pc, #148]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_RCC_OscConfig+0x244>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fbd4 	bl	8000e84 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fbd0 	bl	8000e84 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e187      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d036      	beq.n	8001778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d016      	beq.n	8001740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_RCC_OscConfig+0x248>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fbb4 	bl	8000e84 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff fbb0 	bl	8000e84 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e167      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_OscConfig+0x240>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x200>
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_RCC_OscConfig+0x248>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff fb9d 	bl	8000e84 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	e00e      	b.n	800176c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fb99 	bl	8000e84 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d907      	bls.n	800176c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e150      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
 8001760:	40023800 	.word	0x40023800
 8001764:	42470000 	.word	0x42470000
 8001768:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ea      	bne.n	800174e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8097 	beq.w	80018b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b81      	ldr	r3, [pc, #516]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b7d      	ldr	r3, [pc, #500]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a7c      	ldr	r2, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	4b77      	ldr	r3, [pc, #476]	@ (8001994 <HAL_RCC_OscConfig+0x474>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	4b74      	ldr	r3, [pc, #464]	@ (8001994 <HAL_RCC_OscConfig+0x474>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a73      	ldr	r2, [pc, #460]	@ (8001994 <HAL_RCC_OscConfig+0x474>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb59 	bl	8000e84 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff fb55 	bl	8000e84 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e10c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001994 <HAL_RCC_OscConfig+0x474>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x2ea>
 80017fc:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001800:	4a63      	ldr	r2, [pc, #396]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	@ 0x70
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x324>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x30c>
 8001812:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a5e      	ldr	r2, [pc, #376]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
 800181e:	4b5c      	ldr	r3, [pc, #368]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a5b      	ldr	r2, [pc, #364]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x324>
 800182c:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001830:	4a57      	ldr	r2, [pc, #348]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	@ 0x70
 8001838:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183c:	4a54      	ldr	r2, [pc, #336]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d015      	beq.n	8001878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fb1a 	bl	8000e84 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff fb16 	bl	8000e84 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0cb      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	4b49      	ldr	r3, [pc, #292]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ee      	beq.n	8001854 <HAL_RCC_OscConfig+0x334>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fb04 	bl	8000e84 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fb00 	bl	8000e84 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0b5      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	4b3e      	ldr	r3, [pc, #248]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	4a38      	ldr	r2, [pc, #224]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a1 	beq.w	8001a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d05c      	beq.n	8001984 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d141      	bne.n	8001956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_RCC_OscConfig+0x478>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fad4 	bl	8000e84 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fad0 	bl	8000e84 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e087      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	491b      	ldr	r1, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x478>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff faa9 	bl	8000e84 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff faa5 	bl	8000e84 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e05c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x416>
 8001954:	e054      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_RCC_OscConfig+0x478>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fa92 	bl	8000e84 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fa8e 	bl	8000e84 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e045      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_RCC_OscConfig+0x470>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x444>
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e038      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000
 8001998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_RCC_OscConfig+0x4ec>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d028      	beq.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d121      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11a      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cc      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b68      	ldr	r3, [pc, #416]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d90c      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b65      	ldr	r3, [pc, #404]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a58      	ldr	r2, [pc, #352]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d044      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b3f      	ldr	r3, [pc, #252]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e067      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4934      	ldr	r1, [pc, #208]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff f9c0 	bl	8000e84 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff f9bc 	bl	8000e84 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f920 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08008ee4 	.word	0x08008ee4
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	20000010 	.word	0x20000010

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b090      	sub	sp, #64	@ 0x40
 8001be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4b59      	ldr	r3, [pc, #356]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d00d      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	f200 80a1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0e:	e09b      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b53      	ldr	r3, [pc, #332]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c14:	e09b      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c16:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c1a:	e098      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c26:	4b4d      	ldr	r3, [pc, #308]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d028      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c32:	4b4a      	ldr	r3, [pc, #296]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	099b      	lsrs	r3, r3, #6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c44:	2100      	movs	r1, #0
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c48:	fb03 f201 	mul.w	r2, r3, r1
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	fb00 f303 	mul.w	r3, r0, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	4a43      	ldr	r2, [pc, #268]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c56:	fba0 1202 	umull	r1, r2, r0, r2
 8001c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c62:	4413      	add	r3, r2
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	61fa      	str	r2, [r7, #28]
 8001c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c76:	f7fe fb0b 	bl	8000290 <__aeabi_uldivmod>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4613      	mov	r3, r2
 8001c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c82:	e053      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c84:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	617a      	str	r2, [r7, #20]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c96:	f04f 0b00 	mov.w	fp, #0
 8001c9a:	4652      	mov	r2, sl
 8001c9c:	465b      	mov	r3, fp
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	0159      	lsls	r1, r3, #5
 8001ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cac:	0150      	lsls	r0, r2, #5
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	ebb2 080a 	subs.w	r8, r2, sl
 8001cb6:	eb63 090b 	sbc.w	r9, r3, fp
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cce:	ebb2 0408 	subs.w	r4, r2, r8
 8001cd2:	eb63 0509 	sbc.w	r5, r3, r9
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	00eb      	lsls	r3, r5, #3
 8001ce0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce4:	00e2      	lsls	r2, r4, #3
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461d      	mov	r5, r3
 8001cea:	eb14 030a 	adds.w	r3, r4, sl
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	eb45 030b 	adc.w	r3, r5, fp
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d16:	2200      	movs	r2, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d20:	f7fe fab6 	bl	8000290 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3740      	adds	r7, #64	@ 0x40
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	017d7840 	.word	0x017d7840

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	08008ef4 	.word	0x08008ef4

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dac:	f7ff ffdc 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0b5b      	lsrs	r3, r3, #13
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4903      	ldr	r1, [pc, #12]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08008ef4 	.word	0x08008ef4

08001dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e042      	b.n	8001e68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fe2c 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	@ 0x24
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fd11 	bl	800283c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d121      	bne.n	8001ece <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_UART_Transmit_IT+0x26>
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e01a      	b.n	8001ed0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	88fa      	ldrh	r2, [r7, #6]
 8001ea4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2221      	movs	r2, #33	@ 0x21
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ec8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d112      	bne.n	8001f1c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_UART_Receive_IT+0x26>
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00b      	b.n	8001f1e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 faba 	bl	800248c <UART_Start_Receive_IT>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	e000      	b.n	8001f1e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_UART_IRQHandler+0x66>
 8001f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fb99 	bl	80026be <UART_Receive_IT>
      return;
 8001f8c:	e25b      	b.n	8002446 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80de 	beq.w	8002154 <HAL_UART_IRQHandler+0x22c>
 8001f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fa8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80d1 	beq.w	8002154 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_UART_IRQHandler+0xae>
 8001fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_UART_IRQHandler+0xd2>
 8001fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_UART_IRQHandler+0xf6>
 8002006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f043 0204 	orr.w	r2, r3, #4
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800201e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d011      	beq.n	800204e <HAL_UART_IRQHandler+0x126>
 800202a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f043 0208 	orr.w	r2, r3, #8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 81f2 	beq.w	800243c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_UART_IRQHandler+0x14e>
 8002064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb24 	bl	80026be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002080:	2b40      	cmp	r3, #64	@ 0x40
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_UART_IRQHandler+0x17a>
 800209a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d04f      	beq.n	8002142 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fa2c 	bl	8002500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b2:	2b40      	cmp	r3, #64	@ 0x40
 80020b4:	d141      	bne.n	800213a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3314      	adds	r3, #20
 80020bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020c4:	e853 3f00 	ldrex	r3, [r3]
 80020c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80020cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3314      	adds	r3, #20
 80020de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80020e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80020e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80020ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80020fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1d9      	bne.n	80020b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d013      	beq.n	8002132 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210e:	4a7e      	ldr	r2, [pc, #504]	@ (8002308 <HAL_UART_IRQHandler+0x3e0>)
 8002110:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f841 	bl	800119e <HAL_DMA_Abort_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800212c:	4610      	mov	r0, r2
 800212e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	e00e      	b.n	8002150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f994 	bl	8002460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002138:	e00a      	b.n	8002150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f990 	bl	8002460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	e006      	b.n	8002150 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f98c 	bl	8002460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800214e:	e175      	b.n	800243c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	bf00      	nop
    return;
 8002152:	e173      	b.n	800243c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	2b01      	cmp	r3, #1
 800215a:	f040 814f 	bne.w	80023fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8148 	beq.w	80023fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800216c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8141 	beq.w	80023fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	2b40      	cmp	r3, #64	@ 0x40
 800219c:	f040 80b6 	bne.w	800230c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8145 	beq.w	8002440 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021be:	429a      	cmp	r2, r3
 80021c0:	f080 813e 	bcs.w	8002440 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d6:	f000 8088 	beq.w	80022ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	330c      	adds	r3, #12
 80021e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e8:	e853 3f00 	ldrex	r3, [r3]
 80021ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80021f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	330c      	adds	r3, #12
 8002202:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800220a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002212:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002216:	e841 2300 	strex	r3, r2, [r1]
 800221a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800221e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1d9      	bne.n	80021da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3314      	adds	r3, #20
 800222c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002230:	e853 3f00 	ldrex	r3, [r3]
 8002234:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3314      	adds	r3, #20
 8002246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800224a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800224e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002250:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002252:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800225c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e1      	bne.n	8002226 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3314      	adds	r3, #20
 8002282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002286:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002288:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800228c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800228e:	e841 2300 	strex	r3, r2, [r1]
 8002292:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1e3      	bne.n	8002262 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	330c      	adds	r3, #12
 80022ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022b2:	e853 3f00 	ldrex	r3, [r3]
 80022b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80022b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ba:	f023 0310 	bic.w	r3, r3, #16
 80022be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80022cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80022d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80022da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e3      	bne.n	80022a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe feea 	bl	80010be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f8b7 	bl	8002474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002306:	e09b      	b.n	8002440 <HAL_UART_IRQHandler+0x518>
 8002308:	080025c7 	.word	0x080025c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002314:	b29b      	uxth	r3, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 808e 	beq.w	8002444 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8089 	beq.w	8002444 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002348:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002356:	647a      	str	r2, [r7, #68]	@ 0x44
 8002358:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800235c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800235e:	e841 2300 	strex	r3, r2, [r1]
 8002362:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e3      	bne.n	8002332 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3314      	adds	r3, #20
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	e853 3f00 	ldrex	r3, [r3]
 8002378:	623b      	str	r3, [r7, #32]
   return(result);
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3314      	adds	r3, #20
 800238a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800238e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800239c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e3      	bne.n	800236a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	e853 3f00 	ldrex	r3, [r3]
 80023be:	60fb      	str	r3, [r7, #12]
   return(result);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0310 	bic.w	r3, r3, #16
 80023c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80023d4:	61fa      	str	r2, [r7, #28]
 80023d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	e841 2300 	strex	r3, r2, [r1]
 80023e0:	617b      	str	r3, [r7, #20]
   return(result);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e3      	bne.n	80023b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f83d 	bl	8002474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023fa:	e023      	b.n	8002444 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_UART_IRQHandler+0x4f4>
 8002408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800240c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f8ea 	bl	80025ee <UART_Transmit_IT>
    return;
 800241a:	e014      	b.n	8002446 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800241c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <HAL_UART_IRQHandler+0x51e>
 8002428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800242c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f92a 	bl	800268e <UART_EndTransmit_IT>
    return;
 800243a:	e004      	b.n	8002446 <HAL_UART_IRQHandler+0x51e>
    return;
 800243c:	bf00      	nop
 800243e:	e002      	b.n	8002446 <HAL_UART_IRQHandler+0x51e>
      return;
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <HAL_UART_IRQHandler+0x51e>
      return;
 8002444:	bf00      	nop
  }
}
 8002446:	37e8      	adds	r7, #232	@ 0xe8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	88fa      	ldrh	r2, [r7, #6]
 80024aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2222      	movs	r2, #34	@ 0x22
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0220 	orr.w	r2, r2, #32
 80024f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002500:	b480      	push	{r7}
 8002502:	b095      	sub	sp, #84	@ 0x54
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800251e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	330c      	adds	r3, #12
 8002526:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002528:	643a      	str	r2, [r7, #64]	@ 0x40
 800252a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800252e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e5      	bne.n	8002508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	61fb      	str	r3, [r7, #28]
   return(result);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3314      	adds	r3, #20
 800255a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800255c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002564:	e841 2300 	strex	r3, r2, [r1]
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e5      	bne.n	800253c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	2b01      	cmp	r3, #1
 8002576:	d119      	bne.n	80025ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	e853 3f00 	ldrex	r3, [r3]
 8002586:	60bb      	str	r3, [r7, #8]
   return(result);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f023 0310 	bic.w	r3, r3, #16
 800258e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002598:	61ba      	str	r2, [r7, #24]
 800259a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259c:	6979      	ldr	r1, [r7, #20]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	e841 2300 	strex	r3, r2, [r1]
 80025a4:	613b      	str	r3, [r7, #16]
   return(result);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e5      	bne.n	8002578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025ba:	bf00      	nop
 80025bc:	3754      	adds	r7, #84	@ 0x54
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff ff3d 	bl	8002460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b21      	cmp	r3, #33	@ 0x21
 8002600:	d13e      	bne.n	8002680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260a:	d114      	bne.n	8002636 <UART_Transmit_IT+0x48>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d110      	bne.n	8002636 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	1c9a      	adds	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]
 8002634:	e008      	b.n	8002648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6211      	str	r1, [r2, #32]
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29b      	uxth	r3, r3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4619      	mov	r1, r3
 8002656:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10f      	bne.n	800267c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800266a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800267a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fecc 	bl	800244c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b08c      	sub	sp, #48	@ 0x30
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b22      	cmp	r3, #34	@ 0x22
 80026d0:	f040 80ae 	bne.w	8002830 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026dc:	d117      	bne.n	800270e <UART_Receive_IT+0x50>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d113      	bne.n	800270e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
 800270c:	e026      	b.n	800275c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002720:	d007      	beq.n	8002732 <UART_Receive_IT+0x74>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <UART_Receive_IT+0x82>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e008      	b.n	8002752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800274c:	b2da      	uxtb	r2, r3
 800274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4619      	mov	r1, r3
 800276a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800276c:	2b00      	cmp	r3, #0
 800276e:	d15d      	bne.n	800282c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0220 	bic.w	r2, r2, #32
 800277e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800278e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d135      	bne.n	8002822 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	613b      	str	r3, [r7, #16]
   return(result);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f023 0310 	bic.w	r3, r3, #16
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027dc:	623a      	str	r2, [r7, #32]
 80027de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	69f9      	ldr	r1, [r7, #28]
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e5      	bne.n	80027bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d10a      	bne.n	8002814 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fe2a 	bl	8002474 <HAL_UARTEx_RxEventCallback>
 8002820:	e002      	b.n	8002828 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe f8d2 	bl	80009cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e002      	b.n	8002832 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e000      	b.n	8002832 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3730      	adds	r7, #48	@ 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b0c0      	sub	sp, #256	@ 0x100
 8002842:	af00      	add	r7, sp, #0
 8002844:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	ea40 0301 	orr.w	r3, r0, r1
 8002864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	431a      	orrs	r2, r3
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	431a      	orrs	r2, r3
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002894:	f021 010c 	bic.w	r1, r1, #12
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028a2:	430b      	orrs	r3, r1
 80028a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b6:	6999      	ldr	r1, [r3, #24]
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	ea40 0301 	orr.w	r3, r0, r1
 80028c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b8f      	ldr	r3, [pc, #572]	@ (8002b08 <UART_SetConfig+0x2cc>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d005      	beq.n	80028dc <UART_SetConfig+0xa0>
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b8d      	ldr	r3, [pc, #564]	@ (8002b0c <UART_SetConfig+0x2d0>)
 80028d8:	429a      	cmp	r2, r3
 80028da:	d104      	bne.n	80028e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028dc:	f7ff fa64 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 80028e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028e4:	e003      	b.n	80028ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028e6:	f7ff fa4b 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 80028ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f8:	f040 810c 	bne.w	8002b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002906:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800290a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800290e:	4622      	mov	r2, r4
 8002910:	462b      	mov	r3, r5
 8002912:	1891      	adds	r1, r2, r2
 8002914:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002916:	415b      	adcs	r3, r3
 8002918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800291a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800291e:	4621      	mov	r1, r4
 8002920:	eb12 0801 	adds.w	r8, r2, r1
 8002924:	4629      	mov	r1, r5
 8002926:	eb43 0901 	adc.w	r9, r3, r1
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800293e:	4690      	mov	r8, r2
 8002940:	4699      	mov	r9, r3
 8002942:	4623      	mov	r3, r4
 8002944:	eb18 0303 	adds.w	r3, r8, r3
 8002948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800294c:	462b      	mov	r3, r5
 800294e:	eb49 0303 	adc.w	r3, r9, r3
 8002952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002962:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800296a:	460b      	mov	r3, r1
 800296c:	18db      	adds	r3, r3, r3
 800296e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002970:	4613      	mov	r3, r2
 8002972:	eb42 0303 	adc.w	r3, r2, r3
 8002976:	657b      	str	r3, [r7, #84]	@ 0x54
 8002978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800297c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002980:	f7fd fc86 	bl	8000290 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4b61      	ldr	r3, [pc, #388]	@ (8002b10 <UART_SetConfig+0x2d4>)
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	011c      	lsls	r4, r3, #4
 8002992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800299c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	1891      	adds	r1, r2, r2
 80029aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029ac:	415b      	adcs	r3, r3
 80029ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029b4:	4641      	mov	r1, r8
 80029b6:	eb12 0a01 	adds.w	sl, r2, r1
 80029ba:	4649      	mov	r1, r9
 80029bc:	eb43 0b01 	adc.w	fp, r3, r1
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d4:	4692      	mov	sl, r2
 80029d6:	469b      	mov	fp, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	eb1a 0303 	adds.w	r3, sl, r3
 80029de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029e2:	464b      	mov	r3, r9
 80029e4:	eb4b 0303 	adc.w	r3, fp, r3
 80029e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a00:	460b      	mov	r3, r1
 8002a02:	18db      	adds	r3, r3, r3
 8002a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a06:	4613      	mov	r3, r2
 8002a08:	eb42 0303 	adc.w	r3, r2, r3
 8002a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a16:	f7fd fc3b 	bl	8000290 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4b3b      	ldr	r3, [pc, #236]	@ (8002b10 <UART_SetConfig+0x2d4>)
 8002a22:	fba3 2301 	umull	r2, r3, r3, r1
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2264      	movs	r2, #100	@ 0x64
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	1acb      	subs	r3, r1, r3
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a36:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <UART_SetConfig+0x2d4>)
 8002a38:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a44:	441c      	add	r4, r3
 8002a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	1891      	adds	r1, r2, r2
 8002a5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a60:	415b      	adcs	r3, r3
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a68:	4641      	mov	r1, r8
 8002a6a:	1851      	adds	r1, r2, r1
 8002a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a6e:	4649      	mov	r1, r9
 8002a70:	414b      	adcs	r3, r1
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a80:	4659      	mov	r1, fp
 8002a82:	00cb      	lsls	r3, r1, #3
 8002a84:	4651      	mov	r1, sl
 8002a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a8a:	4651      	mov	r1, sl
 8002a8c:	00ca      	lsls	r2, r1, #3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	4642      	mov	r2, r8
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a9c:	464b      	mov	r3, r9
 8002a9e:	460a      	mov	r2, r1
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002abc:	460b      	mov	r3, r1
 8002abe:	18db      	adds	r3, r3, r3
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	eb42 0303 	adc.w	r3, r2, r3
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ad2:	f7fd fbdd 	bl	8000290 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <UART_SetConfig+0x2d4>)
 8002adc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	2164      	movs	r1, #100	@ 0x64
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3332      	adds	r3, #50	@ 0x32
 8002aee:	4a08      	ldr	r2, [pc, #32]	@ (8002b10 <UART_SetConfig+0x2d4>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	f003 0207 	and.w	r2, r3, #7
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4422      	add	r2, r4
 8002b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b04:	e106      	b.n	8002d14 <UART_SetConfig+0x4d8>
 8002b06:	bf00      	nop
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b26:	4642      	mov	r2, r8
 8002b28:	464b      	mov	r3, r9
 8002b2a:	1891      	adds	r1, r2, r2
 8002b2c:	6239      	str	r1, [r7, #32]
 8002b2e:	415b      	adcs	r3, r3
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b36:	4641      	mov	r1, r8
 8002b38:	1854      	adds	r4, r2, r1
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	eb43 0501 	adc.w	r5, r3, r1
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	00eb      	lsls	r3, r5, #3
 8002b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4e:	00e2      	lsls	r2, r4, #3
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	18e3      	adds	r3, r4, r3
 8002b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	eb45 0303 	adc.w	r3, r5, r3
 8002b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b82:	4629      	mov	r1, r5
 8002b84:	008b      	lsls	r3, r1, #2
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	008a      	lsls	r2, r1, #2
 8002b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b94:	f7fd fb7c 	bl	8000290 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4b60      	ldr	r3, [pc, #384]	@ (8002d20 <UART_SetConfig+0x4e4>)
 8002b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	011c      	lsls	r4, r3, #4
 8002ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	61b9      	str	r1, [r7, #24]
 8002bc0:	415b      	adcs	r3, r3
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc8:	4641      	mov	r1, r8
 8002bca:	1851      	adds	r1, r2, r1
 8002bcc:	6139      	str	r1, [r7, #16]
 8002bce:	4649      	mov	r1, r9
 8002bd0:	414b      	adcs	r3, r1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be0:	4659      	mov	r1, fp
 8002be2:	00cb      	lsls	r3, r1, #3
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bea:	4651      	mov	r1, sl
 8002bec:	00ca      	lsls	r2, r1, #3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	189b      	adds	r3, r3, r2
 8002bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	460a      	mov	r2, r1
 8002c00:	eb42 0303 	adc.w	r3, r2, r3
 8002c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c20:	4649      	mov	r1, r9
 8002c22:	008b      	lsls	r3, r1, #2
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	008a      	lsls	r2, r1, #2
 8002c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c32:	f7fd fb2d 	bl	8000290 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <UART_SetConfig+0x4e4>)
 8002c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2264      	movs	r2, #100	@ 0x64
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	1acb      	subs	r3, r1, r3
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	3332      	adds	r3, #50	@ 0x32
 8002c50:	4a33      	ldr	r2, [pc, #204]	@ (8002d20 <UART_SetConfig+0x4e4>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c5c:	441c      	add	r4, r3
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c66:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	415b      	adcs	r3, r3
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	1851      	adds	r1, r2, r1
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	4649      	mov	r1, r9
 8002c84:	414b      	adcs	r3, r1
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c94:	4659      	mov	r1, fp
 8002c96:	00cb      	lsls	r3, r1, #3
 8002c98:	4651      	mov	r1, sl
 8002c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	00ca      	lsls	r2, r1, #3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4642      	mov	r2, r8
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cae:	464b      	mov	r3, r9
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	eb42 0303 	adc.w	r3, r2, r3
 8002cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	008b      	lsls	r3, r1, #2
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cda:	4641      	mov	r1, r8
 8002cdc:	008a      	lsls	r2, r1, #2
 8002cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ce2:	f7fd fad5 	bl	8000290 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <UART_SetConfig+0x4e4>)
 8002cec:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	2164      	movs	r1, #100	@ 0x64
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	3332      	adds	r3, #50	@ 0x32
 8002cfe:	4a08      	ldr	r2, [pc, #32]	@ (8002d20 <UART_SetConfig+0x4e4>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4422      	add	r2, r4
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d20:	51eb851f 	.word	0x51eb851f

08002d24 <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 8002d2a:	f243 3114 	movw	r1, #13076	@ 0x3314
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f004 fca4 	bl	800767c <calloc>
 8002d34:	4603      	mov	r3, r0
 8002d36:	607b      	str	r3, [r7, #4]
    if (!handle)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d019      	beq.n	8002d72 <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 fa1c 	bl	8006180 <TF_InitStatic>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	70fb      	strb	r3, [r7, #3]
    if (!status)
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4909      	ldr	r1, [pc, #36]	@ (8002d80 <gapcom_create+0x5c>)
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fb23 	bl	80063a8 <TF_AddGenericListener>

    goto end;
 8002d62:	e007      	b.n	8002d74 <gapcom_create+0x50>
        goto free_handle;
 8002d64:	bf00      	nop

free_handle:
    free(handle);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f004 fca4 	bl	80076b4 <free>
    handle = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	e000      	b.n	8002d74 <gapcom_create+0x50>
        goto end;
 8002d72:	bf00      	nop
end:
    return handle;
 8002d74:	687b      	ldr	r3, [r7, #4]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	08002e4d 	.word	0x08002e4d

08002d84 <gapcom_set_sender_impl>:
        free(handle);
    }
}

void gapcom_set_sender_impl(gapcom_handle_t* handle, gapcom_sender_t* sender_impl)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    handle->sender_impl = sender_impl;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d94:	461a      	mov	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <gapcom_install_callback>:

void gapcom_install_callback(
    gapcom_handle_t* handle,
    gapcom_callback_t callback,
    gapcom_msg_t msg_type)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	71fb      	strb	r3, [r7, #7]
    if (msg_type < GAPCOM_MSG_MIN || msg_type > GAPCOM_MSG_MAX)
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2b0e      	cmp	r3, #14
 8002dba:	d808      	bhi.n	8002dce <gapcom_install_callback+0x26>
        log_com("Unexpected msg_type for callback: %u", msg_type);
        return;
    }
    else
    {
        handle->user_callback[msg_type] = callback;
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	e000      	b.n	8002dd0 <gapcom_install_callback+0x28>
        return;
 8002dce:	bf00      	nop
    }
}
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <gapcom_accept>:
{
    handle->user_callback[msg_type] = NULL;
}

void gapcom_accept(gapcom_handle_t* handle, const uint8_t* buf, size_t len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
    log_com("Accepting message");
    /* CAUTION: TinyFrame offers no way of checking if this succeeded ! */
    TF_Accept(&handle->tf_handle, buf, len);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fc13 	bl	8006618 <TF_Accept>
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8002e02:	2218      	movs	r2, #24
 8002e04:	2100      	movs	r1, #0
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f004 ff36 	bl	8007c78 <memset>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <TF_WriteImpl>:
#include <pb_decode.h>
#include <stdint.h>
#include <unistd.h>

void TF_WriteImpl(TinyFrame* tf_handle, const uint8_t* buf, uint32_t len)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
    ssize_t bytes_sent;
    gapcom_handle_t* handle;
    gapcom_sender_t* sender;

    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	61bb      	str	r3, [r7, #24]
    sender = handle->sender_impl;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e2e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8002e32:	617b      	str	r3, [r7, #20]
    bytes_sent = sender->send(sender, buf, len);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	6978      	ldr	r0, [r7, #20]
 8002e3e:	4798      	blx	r3
 8002e40:	6138      	str	r0, [r7, #16]
    if (bytes_sent < 0)
    {
        log_com("Failed to send message, returned %lld", bytes_sent);
    }
}
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b0a3      	sub	sp, #140	@ 0x8c
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6178      	str	r0, [r7, #20]
 8002e54:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	88db      	ldrh	r3, [r3, #6]
 8002e68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e6c:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 8002e78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 81e0 	beq.w	8003240 <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f103 011a 	add.w	r1, r3, #26
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	8b1b      	ldrh	r3, [r3, #24]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fb3a 	bl	8003508 <pb_istream_from_buffer>
 8002e94:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002e98:	463b      	mov	r3, r7
 8002e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	88db      	ldrh	r3, [r3, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11a      	bne.n	8002ede <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 8002eae:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002eb2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002eb6:	49b9      	ldr	r1, [pc, #740]	@ (800319c <gapcom_tf_id_listener+0x350>)
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fc5f 	bl	800477c <pb_decode>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002ec4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 81bc 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8002ece:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002eda:	4798      	blx	r3
 8002edc:	e1b3      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	88db      	ldrh	r3, [r3, #6]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d11a      	bne.n	8002f1c <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 8002eec:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002ef0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ef4:	49aa      	ldr	r1, [pc, #680]	@ (80031a0 <gapcom_tf_id_listener+0x354>)
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 fc40 	bl	800477c <pb_decode>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f02:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 819d 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8002f0c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002f10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f12:	4611      	mov	r1, r2
 8002f14:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f18:	4798      	blx	r3
 8002f1a:	e194      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	88db      	ldrh	r3, [r3, #6]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d11a      	bne.n	8002f5a <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 8002f2a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002f2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f32:	499c      	ldr	r1, [pc, #624]	@ (80031a4 <gapcom_tf_id_listener+0x358>)
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 fc21 	bl	800477c <pb_decode>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f40:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 817e 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8002f4a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f50:	4611      	mov	r1, r2
 8002f52:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f56:	4798      	blx	r3
 8002f58:	e175      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	88db      	ldrh	r3, [r3, #6]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d11a      	bne.n	8002f98 <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8002f68:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002f6c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f70:	498d      	ldr	r1, [pc, #564]	@ (80031a8 <gapcom_tf_id_listener+0x35c>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fc02 	bl	800477c <pb_decode>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f7e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 815f 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8002f88:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002f8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f8e:	4611      	mov	r1, r2
 8002f90:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f94:	4798      	blx	r3
 8002f96:	e156      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	88db      	ldrh	r3, [r3, #6]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d11a      	bne.n	8002fd6 <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 8002fa6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002faa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002fae:	497f      	ldr	r1, [pc, #508]	@ (80031ac <gapcom_tf_id_listener+0x360>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 fbe3 	bl	800477c <pb_decode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002fbc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8140 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8002fc6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fcc:	4611      	mov	r1, r2
 8002fce:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002fd2:	4798      	blx	r3
 8002fd4:	e137      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	88db      	ldrh	r3, [r3, #6]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d11a      	bne.n	8003014 <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 8002fe4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002fe8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002fec:	4970      	ldr	r1, [pc, #448]	@ (80031b0 <gapcom_tf_id_listener+0x364>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fbc4 	bl	800477c <pb_decode>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002ffa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8121 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8003004:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800300a:	4611      	mov	r1, r2
 800300c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003010:	4798      	blx	r3
 8003012:	e118      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	88db      	ldrh	r3, [r3, #6]
 8003018:	2b06      	cmp	r3, #6
 800301a:	d11d      	bne.n	8003058 <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 800301c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8003028:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800302c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003030:	4960      	ldr	r1, [pc, #384]	@ (80031b4 <gapcom_tf_id_listener+0x368>)
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fba2 	bl	800477c <pb_decode>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800303e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80ff 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8003048:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800304c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800304e:	4611      	mov	r1, r2
 8003050:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003054:	4798      	blx	r3
 8003056:	e0f6      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	88db      	ldrh	r3, [r3, #6]
 800305c:	2b07      	cmp	r3, #7
 800305e:	d11a      	bne.n	8003096 <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 8003066:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800306a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800306e:	4952      	ldr	r1, [pc, #328]	@ (80031b8 <gapcom_tf_id_listener+0x36c>)
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fb83 	bl	800477c <pb_decode>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800307c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80e0 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 8003086:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800308a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800308c:	4611      	mov	r1, r2
 800308e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003092:	4798      	blx	r3
 8003094:	e0d7      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	88db      	ldrh	r3, [r3, #6]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d11a      	bne.n	80030d4 <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 80030a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80030a8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030ac:	4943      	ldr	r1, [pc, #268]	@ (80031bc <gapcom_tf_id_listener+0x370>)
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 fb64 	bl	800477c <pb_decode>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80030ba:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80c1 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 80030c4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80030c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030ca:	4611      	mov	r1, r2
 80030cc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030d0:	4798      	blx	r3
 80030d2:	e0b8      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	88db      	ldrh	r3, [r3, #6]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d120      	bne.n	800311e <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80030e2:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 80030ee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80030f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030f6:	4932      	ldr	r1, [pc, #200]	@ (80031c0 <gapcom_tf_id_listener+0x374>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 fb3f 	bl	800477c <pb_decode>
 80030fe:	4603      	mov	r3, r0
 8003100:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003104:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 809c 	beq.w	8003246 <gapcom_tf_id_listener+0x3fa>
 800310e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003114:	4611      	mov	r1, r2
 8003116:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800311a:	4798      	blx	r3
 800311c:	e093      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	88db      	ldrh	r3, [r3, #6]
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d119      	bne.n	800315a <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 800312c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003130:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003134:	4923      	ldr	r1, [pc, #140]	@ (80031c4 <gapcom_tf_id_listener+0x378>)
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fb20 	bl	800477c <pb_decode>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003142:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003146:	2b00      	cmp	r3, #0
 8003148:	d07d      	beq.n	8003246 <gapcom_tf_id_listener+0x3fa>
 800314a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800314e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003150:	4611      	mov	r1, r2
 8003152:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003156:	4798      	blx	r3
 8003158:	e075      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	88db      	ldrh	r3, [r3, #6]
 800315e:	2b0b      	cmp	r3, #11
 8003160:	d134      	bne.n	80031cc <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 8003162:	f107 0320 	add.w	r3, r7, #32
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 800316c:	f107 0220 	add.w	r2, r7, #32
 8003170:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003174:	4914      	ldr	r1, [pc, #80]	@ (80031c8 <gapcom_tf_id_listener+0x37c>)
 8003176:	4618      	mov	r0, r3
 8003178:	f001 fb00 	bl	800477c <pb_decode>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003182:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003186:	2b00      	cmp	r3, #0
 8003188:	d05d      	beq.n	8003246 <gapcom_tf_id_listener+0x3fa>
 800318a:	f107 0220 	add.w	r2, r7, #32
 800318e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003190:	4611      	mov	r1, r2
 8003192:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003196:	4798      	blx	r3
 8003198:	e055      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
 800319a:	bf00      	nop
 800319c:	08008f04 	.word	0x08008f04
 80031a0:	08008f28 	.word	0x08008f28
 80031a4:	08008f4c 	.word	0x08008f4c
 80031a8:	08008f70 	.word	0x08008f70
 80031ac:	08008f94 	.word	0x08008f94
 80031b0:	08008fb8 	.word	0x08008fb8
 80031b4:	08008fe0 	.word	0x08008fe0
 80031b8:	08009004 	.word	0x08009004
 80031bc:	08009024 	.word	0x08009024
 80031c0:	08009050 	.word	0x08009050
 80031c4:	08009070 	.word	0x08009070
 80031c8:	080090a4 	.word	0x080090a4
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	88db      	ldrh	r3, [r3, #6]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d118      	bne.n	8003206 <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 80031d4:	2300      	movs	r3, #0
 80031d6:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 80031d8:	f107 021c 	add.w	r2, r7, #28
 80031dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80031e0:	491b      	ldr	r1, [pc, #108]	@ (8003250 <gapcom_tf_id_listener+0x404>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 faca 	bl	800477c <pb_decode>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80031ee:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d027      	beq.n	8003246 <gapcom_tf_id_listener+0x3fa>
 80031f6:	f107 021c 	add.w	r2, r7, #28
 80031fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031fc:	4611      	mov	r1, r2
 80031fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003202:	4798      	blx	r3
 8003204:	e01f      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	88db      	ldrh	r3, [r3, #6]
 800320a:	2b0d      	cmp	r3, #13
 800320c:	d11a      	bne.n	8003244 <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 800320e:	2300      	movs	r3, #0
 8003210:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 8003212:	f107 0218 	add.w	r2, r7, #24
 8003216:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800321a:	490e      	ldr	r1, [pc, #56]	@ (8003254 <gapcom_tf_id_listener+0x408>)
 800321c:	4618      	mov	r0, r3
 800321e:	f001 faad 	bl	800477c <pb_decode>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003228:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <gapcom_tf_id_listener+0x3fa>
 8003230:	f107 0218 	add.w	r2, r7, #24
 8003234:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003236:	4611      	mov	r1, r2
 8003238:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800323c:	4798      	blx	r3
 800323e:	e002      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
        goto end;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 8003244:	bf00      	nop
    return TF_STAY;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	378c      	adds	r7, #140	@ 0x8c
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}
 8003250:	080090c8 	.word	0x080090c8
 8003254:	080090ec 	.word	0x080090ec

08003258 <gapcom_encapsulate_tf>:

int gapcom_encapsulate_tf(
    gapcom_handle_t* handle,
    gapcom_msg_t msg_type,
    int msg_len)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	460b      	mov	r3, r1
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	72fb      	strb	r3, [r7, #11]
    /* Build TinyFrame frame pointing to payload */
    TF_ClearMsg(&handle->tf_msg);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 800326c:	3320      	adds	r3, #32
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fdc3 	bl	8002dfa <TF_ClearMsg>
    handle->tf_msg.type = msg_type;
 8003274:	7afb      	ldrb	r3, [r7, #11]
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800327e:	f8a3 2266 	strh.w	r2, [r3, #614]	@ 0x266
    handle->tf_msg.data = (const uint8_t*)(&handle->sendbuf);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 8003288:	3334      	adds	r3, #52	@ 0x34
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003290:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    handle->tf_msg.len = (TF_LEN)msg_len;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800329e:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
    /* When the payload is empty (which can happen with protobuf, for example
     * with a single numeric field with value 0 : it will get compressed and
     * interpreted as 0 upon decoding) the payload CRC is not appended by
     * TinyFrame. Otherwise, we do have a payload CRC as a footer.
     */
    if (msg_len > 0)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	dd01      	ble.n	80032ac <gapcom_encapsulate_tf+0x54>
        return GAPCOM_TF_HEADER_SIZE_BYTES + GAPCOM_TF_FOOTER_SIZE_BYTES;
 80032a8:	230d      	movs	r3, #13
 80032aa:	e000      	b.n	80032ae <gapcom_encapsulate_tf+0x56>
    else
        return GAPCOM_TF_HEADER_SIZE_BYTES;
 80032ac:	230b      	movs	r3, #11
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <gapcom_respond_ping>:
 ************************/

int gapcom_respond_ping(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b092      	sub	sp, #72	@ 0x48
 80032bc:	af00      	add	r7, sp, #0
 80032be:	61f8      	str	r0, [r7, #28]
 80032c0:	460b      	mov	r3, r1
 80032c2:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPPingResp resp = GAPPingResp_init_zero;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 80032ce:	7efb      	ldrb	r3, [r7, #27]
 80032d0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPPingResp_fields, resp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032da:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 80032de:	3334      	adds	r3, #52	@ 0x34
 80032e0:	4638      	mov	r0, r7
 80032e2:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 80032e6:	4619      	mov	r1, r3
 80032e8:	f001 fe1a 	bl	8004f20 <pb_ostream_from_buffer>
 80032ec:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80032f0:	463d      	mov	r5, r7
 80032f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80032fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003302:	4919      	ldr	r1, [pc, #100]	@ (8003368 <gapcom_respond_ping+0xb0>)
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fa78 	bl	80057fa <pb_encode>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003310:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <gapcom_respond_ping+0x66>
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	643b      	str	r3, [r7, #64]	@ 0x40
 800331c:	e002      	b.n	8003324 <gapcom_respond_ping+0x6c>
 800331e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003322:	643b      	str	r3, [r7, #64]	@ 0x40
 8003324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003328:	4413      	add	r3, r2
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 800332c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003332:	d012      	beq.n	800335a <gapcom_respond_ping+0xa2>
    {
        log_com("Failed to encode Ping protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_PING_RESP, ret);
 8003334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003336:	2101      	movs	r1, #1
 8003338:	69f8      	ldr	r0, [r7, #28]
 800333a:	f7ff ff8d 	bl	8003258 <gapcom_encapsulate_tf>
 800333e:	4602      	mov	r2, r0
 8003340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003342:	4413      	add	r3, r2
 8003344:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 800334e:	3320      	adds	r3, #32
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f003 fe68 	bl	8007028 <TF_Respond>
 8003358:	e000      	b.n	800335c <gapcom_respond_ping+0xa4>
        goto end;
 800335a:	bf00      	nop

end:
    return ret;
 800335c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800335e:	4618      	mov	r0, r3
 8003360:	3748      	adds	r7, #72	@ 0x48
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	bf00      	nop
 8003368:	08008f28 	.word	0x08008f28

0800336c <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	441a      	add	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	68b8      	ldr	r0, [r7, #8]
 8003396:	f004 fcfa 	bl	8007d8e <memcpy>
    }
    
    return true;
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
    if (count == 0)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <pb_read+0x16>
        return true;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e05f      	b.n	800347a <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d123      	bne.n	8003408 <pb_read+0x64>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003484 <pb_read+0xe0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01e      	beq.n	8003408 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 80033ca:	e011      	b.n	80033f0 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80033cc:	f107 0310 	add.w	r3, r7, #16
 80033d0:	2210      	movs	r2, #16
 80033d2:	4619      	mov	r1, r3
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff ffe5 	bl	80033a4 <pb_read>
 80033da:	4603      	mov	r3, r0
 80033dc:	f083 0301 	eor.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <pb_read+0x46>
				return false;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e047      	b.n	800347a <pb_read+0xd6>
			
			count -= 16;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3b10      	subs	r3, #16
 80033ee:	607b      	str	r3, [r7, #4]
		while (count > 16)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d8ea      	bhi.n	80033cc <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 80033f6:	f107 0310 	add.w	r3, r7, #16
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4619      	mov	r1, r3
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ffd0 	bl	80033a4 <pb_read>
 8003404:	4603      	mov	r3, r0
 8003406:	e038      	b.n	800347a <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d90b      	bls.n	800342a <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <pb_read+0x7c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	e000      	b.n	8003422 <pb_read+0x7e>
 8003420:	4b19      	ldr	r3, [pc, #100]	@ (8003488 <pb_read+0xe4>)
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	60d3      	str	r3, [r2, #12]
 8003426:	2300      	movs	r3, #0
 8003428:	e027      	b.n	800347a <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	4798      	blx	r3
 8003436:	4603      	mov	r3, r0
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <pb_read+0xac>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	e000      	b.n	8003452 <pb_read+0xae>
 8003450:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <pb_read+0xe8>)
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	60d3      	str	r3, [r2, #12]
 8003456:	2300      	movs	r3, #0
 8003458:	e00f      	b.n	800347a <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d903      	bls.n	800346c <pb_read+0xc8>
        stream->bytes_left = 0;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	e005      	b.n	8003478 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]

    return true;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	0800336d 	.word	0x0800336d
 8003488:	080089e4 	.word	0x080089e4
 800348c:	080089f4 	.word	0x080089f4

08003490 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <pb_readbyte+0x20>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	e000      	b.n	80034b2 <pb_readbyte+0x22>
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <pb_readbyte+0x70>)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	60d3      	str	r3, [r2, #12]
 80034b6:	2300      	movs	r3, #0
 80034b8:	e01d      	b.n	80034f6 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <pb_readbyte+0x50>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	e000      	b.n	80034e2 <pb_readbyte+0x52>
 80034e0:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <pb_readbyte+0x74>)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	60d3      	str	r3, [r2, #12]
 80034e6:	2300      	movs	r3, #0
 80034e8:	e005      	b.n	80034f6 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]
    
    return true;    
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	080089e4 	.word	0x080089e4
 8003504:	080089f4 	.word	0x080089f4

08003508 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8003508:	b490      	push	{r4, r7}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <pb_istream_from_buffer+0x38>)
 8003516:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	461c      	mov	r4, r3
 800352c:	f107 0318 	add.w	r3, r7, #24
 8003530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	3728      	adds	r7, #40	@ 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc90      	pop	{r4, r7}
 800353e:	4770      	bx	lr
 8003540:	0800336d 	.word	0x0800336d

08003544 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8003550:	f107 0315 	add.w	r3, r7, #21
 8003554:	4619      	mov	r1, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff9a 	bl	8003490 <pb_readbyte>
 800355c:	4603      	mov	r3, r0
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 800357c:	2300      	movs	r3, #0
 800357e:	e084      	b.n	800368a <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003580:	7d7b      	ldrb	r3, [r7, #21]
 8003582:	b25b      	sxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	db02      	blt.n	800358e <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003588:	7d7b      	ldrb	r3, [r7, #21]
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e079      	b.n	8003682 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800358e:	2307      	movs	r3, #7
 8003590:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8003592:	7d7b      	ldrb	r3, [r7, #21]
 8003594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003598:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800359a:	f107 0315 	add.w	r3, r7, #21
 800359e:	4619      	mov	r1, r3
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff ff75 	bl	8003490 <pb_readbyte>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <pb_decode_varint32_eof+0x72>
                return false;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e069      	b.n	800368a <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b1f      	cmp	r3, #31
 80035ba:	d92f      	bls.n	800361c <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b3e      	cmp	r3, #62	@ 0x3e
 80035c0:	d801      	bhi.n	80035c6 <pb_decode_varint32_eof+0x82>
 80035c2:	23ff      	movs	r3, #255	@ 0xff
 80035c4:	e000      	b.n	80035c8 <pb_decode_varint32_eof+0x84>
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80035ca:	7d7b      	ldrb	r3, [r7, #21]
 80035cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 80035d4:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da05      	bge.n	80035e6 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 80035da:	7d7b      	ldrb	r3, [r7, #21]
 80035dc:	7dfa      	ldrb	r2, [r7, #23]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d101      	bne.n	80035e6 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <pb_decode_varint32_eof+0xa4>
 80035e6:	2300      	movs	r3, #0
 80035e8:	75bb      	strb	r3, [r7, #22]
 80035ea:	7dbb      	ldrb	r3, [r7, #22]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80035f6:	d805      	bhi.n	8003604 <pb_decode_varint32_eof+0xc0>
 80035f8:	7dbb      	ldrb	r3, [r7, #22]
 80035fa:	f083 0301 	eor.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d037      	beq.n	8003674 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <pb_decode_varint32_eof+0xce>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	e000      	b.n	8003614 <pb_decode_varint32_eof+0xd0>
 8003612:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <pb_decode_varint32_eof+0x150>)
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	60d3      	str	r3, [r2, #12]
 8003618:	2300      	movs	r3, #0
 800361a:	e036      	b.n	800368a <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b1c      	cmp	r3, #28
 8003620:	d11f      	bne.n	8003662 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8003622:	7d7b      	ldrb	r3, [r7, #21]
 8003624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003628:	2b00      	cmp	r3, #0
 800362a:	d010      	beq.n	800364e <pb_decode_varint32_eof+0x10a>
 800362c:	7d7b      	ldrb	r3, [r7, #21]
 800362e:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8003632:	2b78      	cmp	r3, #120	@ 0x78
 8003634:	d00b      	beq.n	800364e <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <pb_decode_varint32_eof+0x100>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	e000      	b.n	8003646 <pb_decode_varint32_eof+0x102>
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <pb_decode_varint32_eof+0x150>)
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	60d3      	str	r3, [r2, #12]
 800364a:	2300      	movs	r3, #0
 800364c:	e01d      	b.n	800368a <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 800364e:	7d7b      	ldrb	r3, [r7, #21]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	4313      	orrs	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e008      	b.n	8003674 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8003662:	7d7b      	ldrb	r3, [r7, #21]
 8003664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	3307      	adds	r3, #7
 8003678:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800367a:	7d7b      	ldrb	r3, [r7, #21]
 800367c:	b25b      	sxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	db8b      	blt.n	800359a <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	601a      	str	r2, [r3, #0]
   return true;
 8003688:	2301      	movs	r3, #1
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	08008a00 	.word	0x08008a00

08003698 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80036a2:	2200      	movs	r2, #0
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff4c 	bl	8003544 <pb_decode_varint32_eof>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 80036d4:	f107 0317 	add.w	r3, r7, #23
 80036d8:	4619      	mov	r1, r3
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fed8 	bl	8003490 <pb_readbyte>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f083 0301 	eor.w	r3, r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <pb_decode_varint+0x38>
            return false;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e041      	b.n	8003774 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80036f4:	d910      	bls.n	8003718 <pb_decode_varint+0x60>
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <pb_decode_varint+0x56>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	e000      	b.n	8003710 <pb_decode_varint+0x58>
 800370e:	4b1c      	ldr	r3, [pc, #112]	@ (8003780 <pb_decode_varint+0xc8>)
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	60d3      	str	r3, [r2, #12]
 8003714:	2300      	movs	r3, #0
 8003716:	e02d      	b.n	8003774 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2200      	movs	r2, #0
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8003728:	f04f 0900 	mov.w	r9, #0
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	f1a3 0120 	sub.w	r1, r3, #32
 8003732:	f1c3 0220 	rsb	r2, r3, #32
 8003736:	fa09 f503 	lsl.w	r5, r9, r3
 800373a:	fa08 f101 	lsl.w	r1, r8, r1
 800373e:	430d      	orrs	r5, r1
 8003740:	fa28 f202 	lsr.w	r2, r8, r2
 8003744:	4315      	orrs	r5, r2
 8003746:	fa08 f403 	lsl.w	r4, r8, r3
 800374a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800374e:	ea42 0a04 	orr.w	sl, r2, r4
 8003752:	ea43 0b05 	orr.w	fp, r3, r5
 8003756:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	3307      	adds	r3, #7
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	dbb5      	blt.n	80036d4 <pb_decode_varint+0x1c>
    
    *dest = result;
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800376e:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	@ 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377e:	bf00      	nop
 8003780:	08008a00 	.word	0x08008a00

08003784 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 800378c:	f107 030f 	add.w	r3, r7, #15
 8003790:	2201      	movs	r2, #1
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fe05 	bl	80033a4 <pb_read>
 800379a:	4603      	mov	r3, r0
 800379c:	f083 0301 	eor.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <pb_skip_varint+0x26>
            return false;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e004      	b.n	80037b4 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dbec      	blt.n	800378c <pb_skip_varint+0x8>
    return true;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ff64 	bl	8003698 <pb_decode_varint32>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f083 0301 	eor.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <pb_skip_string+0x24>
        return false;
 80037dc:	2300      	movs	r3, #0
 80037de:	e006      	b.n	80037ee <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fddc 	bl	80033a4 <pb_read>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff fe90 	bl	8003544 <pb_decode_varint32_eof>
 8003824:	4603      	mov	r3, r0
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <pb_decode_tag+0x3e>
    {
        return false;
 8003830:	2300      	movs	r3, #0
 8003832:	e00b      	b.n	800384c <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	701a      	strb	r2, [r3, #0]
    return true;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d826      	bhi.n	80038b4 <pb_skip_field+0x60>
 8003866:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <pb_skip_field+0x18>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	08003885 	.word	0x08003885
 8003870:	0800388f 	.word	0x0800388f
 8003874:	0800389d 	.word	0x0800389d
 8003878:	080038b5 	.word	0x080038b5
 800387c:	080038b5 	.word	0x080038b5
 8003880:	080038a7 	.word	0x080038a7
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff7d 	bl	8003784 <pb_skip_varint>
 800388a:	4603      	mov	r3, r0
 800388c:	e01d      	b.n	80038ca <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800388e:	2208      	movs	r2, #8
 8003890:	2100      	movs	r1, #0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fd86 	bl	80033a4 <pb_read>
 8003898:	4603      	mov	r3, r0
 800389a:	e016      	b.n	80038ca <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff8d 	bl	80037bc <pb_skip_string>
 80038a2:	4603      	mov	r3, r0
 80038a4:	e011      	b.n	80038ca <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80038a6:	2204      	movs	r2, #4
 80038a8:	2100      	movs	r1, #0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fd7a 	bl	80033a4 <pb_read>
 80038b0:	4603      	mov	r3, r0
 80038b2:	e00a      	b.n	80038ca <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <pb_skip_field+0x6e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	e000      	b.n	80038c4 <pb_skip_field+0x70>
 80038c2:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <pb_skip_field+0x80>)
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	60d3      	str	r3, [r2, #12]
 80038c8:	2300      	movs	r3, #0
    }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	08008a10 	.word	0x08008a10

080038d8 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	460b      	mov	r3, r1
 80038e6:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d03f      	beq.n	8003974 <read_raw_value+0x9c>
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	dc47      	bgt.n	8003988 <read_raw_value+0xb0>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <read_raw_value+0x2a>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d02f      	beq.n	8003960 <read_raw_value+0x88>
 8003900:	e042      	b.n	8003988 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d20b      	bcs.n	8003934 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <read_raw_value+0x52>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	e000      	b.n	800392c <read_raw_value+0x54>
 800392a:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <read_raw_value+0xd0>)
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	60d3      	str	r3, [r2, #12]
 8003930:	2300      	movs	r3, #0
 8003932:	e034      	b.n	800399e <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8003934:	2201      	movs	r2, #1
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff fd33 	bl	80033a4 <pb_read>
 800393e:	4603      	mov	r3, r0
 8003940:	f083 0301 	eor.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <read_raw_value+0x76>
                    return false;
 800394a:	2300      	movs	r3, #0
 800394c:	e027      	b.n	800399e <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	dbd5      	blt.n	8003908 <read_raw_value+0x30>
            return true;
 800395c:	2301      	movs	r3, #1
 800395e:	e01e      	b.n	800399e <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2208      	movs	r2, #8
 8003964:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8003966:	2208      	movs	r2, #8
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff fd1a 	bl	80033a4 <pb_read>
 8003970:	4603      	mov	r3, r0
 8003972:	e014      	b.n	800399e <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2204      	movs	r2, #4
 8003978:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800397a:	2204      	movs	r2, #4
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff fd10 	bl	80033a4 <pb_read>
 8003984:	4603      	mov	r3, r0
 8003986:	e00a      	b.n	800399e <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <read_raw_value+0xbe>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	e000      	b.n	8003998 <read_raw_value+0xc0>
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <read_raw_value+0xd4>)
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	60d3      	str	r3, [r2, #12]
 800399c:	2300      	movs	r3, #0
    }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	08008a00 	.word	0x08008a00
 80039ac:	08008a10 	.word	0x08008a10

080039b0 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fe69 	bl	8003698 <pb_decode_varint32>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f083 0301 	eor.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <pb_make_string_substream+0x26>
        return false;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e020      	b.n	8003a18 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4614      	mov	r4, r2
 80039dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d20b      	bcs.n	8003a04 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <pb_make_string_substream+0x4a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	e000      	b.n	80039fc <pb_make_string_substream+0x4c>
 80039fa:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <pb_make_string_substream+0x70>)
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	60d3      	str	r3, [r2, #12]
 8003a00:	2300      	movs	r3, #0
 8003a02:	e009      	b.n	8003a18 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
    return true;
 8003a16:	2301      	movs	r3, #1
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	08008a24 	.word	0x08008a24

08003a24 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f7ff fcb0 	bl	80033a4 <pb_read>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <pb_close_string_substream+0x30>
            return false;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e008      	b.n	8003a66 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003a64:	2301      	movs	r3, #1
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7d9b      	ldrb	r3, [r3, #22]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	2b0b      	cmp	r3, #11
 8003a88:	f200 80d4 	bhi.w	8003c34 <decode_basic_field+0x1c4>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <decode_basic_field+0x24>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac5 	.word	0x08003ac5
 8003a98:	08003af5 	.word	0x08003af5
 8003a9c:	08003af5 	.word	0x08003af5
 8003aa0:	08003af5 	.word	0x08003af5
 8003aa4:	08003b25 	.word	0x08003b25
 8003aa8:	08003b59 	.word	0x08003b59
 8003aac:	08003b8d 	.word	0x08003b8d
 8003ab0:	08003bb7 	.word	0x08003bb7
 8003ab4:	08003be1 	.word	0x08003be1
 8003ab8:	08003be1 	.word	0x08003be1
 8003abc:	08003c35 	.word	0x08003c35
 8003ac0:	08003c0b 	.word	0x08003c0b
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <decode_basic_field+0x78>
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	2bff      	cmp	r3, #255	@ 0xff
 8003ace:	d00b      	beq.n	8003ae8 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <decode_basic_field+0x6e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	e000      	b.n	8003ae0 <decode_basic_field+0x70>
 8003ade:	4b5d      	ldr	r3, [pc, #372]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	60d3      	str	r3, [r2, #12]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e0b0      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fef6 	bl	80048dc <pb_dec_bool>
 8003af0:	4603      	mov	r3, r0
 8003af2:	e0aa      	b.n	8003c4a <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <decode_basic_field+0xa8>
 8003afa:	7afb      	ldrb	r3, [r7, #11]
 8003afc:	2bff      	cmp	r3, #255	@ 0xff
 8003afe:	d00b      	beq.n	8003b18 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <decode_basic_field+0x9e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	e000      	b.n	8003b10 <decode_basic_field+0xa0>
 8003b0e:	4b51      	ldr	r3, [pc, #324]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	60d3      	str	r3, [r2, #12]
 8003b14:	2300      	movs	r3, #0
 8003b16:	e098      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 feee 	bl	80048fc <pb_dec_varint>
 8003b20:	4603      	mov	r3, r0
 8003b22:	e092      	b.n	8003c4a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d00e      	beq.n	8003b48 <decode_basic_field+0xd8>
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	2bff      	cmp	r3, #255	@ 0xff
 8003b2e:	d00b      	beq.n	8003b48 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <decode_basic_field+0xce>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	e000      	b.n	8003b40 <decode_basic_field+0xd0>
 8003b3e:	4b45      	ldr	r3, [pc, #276]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	2300      	movs	r3, #0
 8003b46:	e080      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fe8a 	bl	8004868 <pb_decode_fixed32>
 8003b54:	4603      	mov	r3, r0
 8003b56:	e078      	b.n	8003c4a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8003b58:	7afb      	ldrb	r3, [r7, #11]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d00e      	beq.n	8003b7c <decode_basic_field+0x10c>
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	2bff      	cmp	r3, #255	@ 0xff
 8003b62:	d00b      	beq.n	8003b7c <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <decode_basic_field+0x102>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	e000      	b.n	8003b74 <decode_basic_field+0x104>
 8003b72:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	60d3      	str	r3, [r2, #12]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e066      	b.n	8003c4a <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4619      	mov	r1, r3
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fe8c 	bl	80048a0 <pb_decode_fixed64>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	e05e      	b.n	8003c4a <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d00b      	beq.n	8003baa <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <decode_basic_field+0x130>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	e000      	b.n	8003ba2 <decode_basic_field+0x132>
 8003ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	60d3      	str	r3, [r2, #12]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e04f      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 ffd1 	bl	8004b54 <pb_dec_bytes>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e049      	b.n	8003c4a <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8003bb6:	7afb      	ldrb	r3, [r7, #11]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d00b      	beq.n	8003bd4 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <decode_basic_field+0x15a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	e000      	b.n	8003bcc <decode_basic_field+0x15c>
 8003bca:	4b22      	ldr	r3, [pc, #136]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	60d3      	str	r3, [r2, #12]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e03a      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f001 f830 	bl	8004c3c <pb_dec_string>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	e034      	b.n	8003c4a <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8003be0:	7afb      	ldrb	r3, [r7, #11]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d00b      	beq.n	8003bfe <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <decode_basic_field+0x184>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	e000      	b.n	8003bf6 <decode_basic_field+0x186>
 8003bf4:	4b17      	ldr	r3, [pc, #92]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	60d3      	str	r3, [r2, #12]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e025      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f001 f897 	bl	8004d34 <pb_dec_submessage>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e01f      	b.n	8003c4a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d00b      	beq.n	8003c28 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <decode_basic_field+0x1ae>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	e000      	b.n	8003c20 <decode_basic_field+0x1b0>
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <decode_basic_field+0x1e4>)
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	60d3      	str	r3, [r2, #12]
 8003c24:	2300      	movs	r3, #0
 8003c26:	e010      	b.n	8003c4a <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f001 f90c 	bl	8004e48 <pb_dec_fixed_length_bytes>
 8003c30:	4603      	mov	r3, r0
 8003c32:	e00a      	b.n	8003c4a <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <decode_basic_field+0x1d2>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	e000      	b.n	8003c44 <decode_basic_field+0x1d4>
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <decode_basic_field+0x1e8>)
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	60d3      	str	r3, [r2, #12]
 8003c48:	2300      	movs	r3, #0
    }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08008a3c 	.word	0x08008a3c
 8003c58:	08008a4c 	.word	0x08008a4c

08003c5c <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b096      	sub	sp, #88	@ 0x58
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	460b      	mov	r3, r1
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7d9b      	ldrb	r3, [r3, #22]
 8003c6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c72:	2b30      	cmp	r3, #48	@ 0x30
 8003c74:	f000 80c2 	beq.w	8003dfc <decode_static_field+0x1a0>
 8003c78:	2b30      	cmp	r3, #48	@ 0x30
 8003c7a:	f200 811a 	bhi.w	8003eb2 <decode_static_field+0x256>
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d01f      	beq.n	8003cc2 <decode_static_field+0x66>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	f200 8115 	bhi.w	8003eb2 <decode_static_field+0x256>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <decode_static_field+0x36>
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d008      	beq.n	8003ca2 <decode_static_field+0x46>
 8003c90:	e10f      	b.n	8003eb2 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8003c92:	7afb      	ldrb	r3, [r7, #11]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4619      	mov	r1, r3
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff fee9 	bl	8003a70 <decode_basic_field>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	e112      	b.n	8003ec8 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fed9 	bl	8003a70 <decode_basic_field>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	e102      	b.n	8003ec8 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d16c      	bne.n	8003da2 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7d9b      	ldrb	r3, [r3, #22]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d866      	bhi.n	8003da2 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	8a52      	ldrh	r2, [r2, #18]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	fb01 f202 	mul.w	r2, r1, r2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8003cf8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff fe56 	bl	80039b0 <pb_make_string_substream>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f083 0301 	eor.w	r3, r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01f      	beq.n	8003d50 <decode_static_field+0xf4>
                    return false;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e0d9      	b.n	8003ec8 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8003d14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	21ff      	movs	r1, #255	@ 0xff
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fea7 	bl	8003a70 <decode_basic_field>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f083 0301 	eor.w	r3, r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <decode_static_field+0xda>
                    {
                        status = false;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8003d34:	e015      	b.n	8003d62 <decode_static_field+0x106>
                    }
                    (*size)++;
 8003d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d40:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	8a52      	ldrh	r2, [r2, #18]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <decode_static_field+0x106>
 8003d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d58:	881a      	ldrh	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8a9b      	ldrh	r3, [r3, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d3d8      	bcc.n	8003d14 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8003d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <decode_static_field+0x11a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	e000      	b.n	8003d78 <decode_static_field+0x11c>
 8003d76:	4b56      	ldr	r3, [pc, #344]	@ (8003ed0 <decode_static_field+0x274>)
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	60d3      	str	r3, [r2, #12]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e0a3      	b.n	8003ec8 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8003d80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d84:	4619      	mov	r1, r3
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7ff fe4c 	bl	8003a24 <pb_close_string_substream>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <decode_static_field+0x140>
                    return false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e095      	b.n	8003ec8 <decode_static_field+0x26c>

                return status;
 8003d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003da0:	e092      	b.n	8003ec8 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	8a52      	ldrh	r2, [r2, #18]
 8003db0:	4611      	mov	r1, r2
 8003db2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	fb01 f202 	mul.w	r2, r1, r2
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	b291      	uxth	r1, r2
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dca:	8011      	strh	r1, [r2, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	8a92      	ldrh	r2, [r2, #20]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d30b      	bcc.n	8003dec <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <decode_static_field+0x186>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	e000      	b.n	8003de4 <decode_static_field+0x188>
 8003de2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <decode_static_field+0x274>)
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	60d3      	str	r3, [r2, #12]
 8003de8:	2300      	movs	r3, #0
 8003dea:	e06d      	b.n	8003ec8 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fe3c 	bl	8003a70 <decode_basic_field>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	e065      	b.n	8003ec8 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7d9b      	ldrb	r3, [r3, #22]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d005      	beq.n	8003e14 <decode_static_field+0x1b8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7d9b      	ldrb	r3, [r3, #22]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	2b09      	cmp	r3, #9
 8003e12:	d141      	bne.n	8003e98 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d03a      	beq.n	8003e98 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69d8      	ldr	r0, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8a5b      	ldrh	r3, [r3, #18]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f003 ff23 	bl	8007c78 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d022      	beq.n	8003e98 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	f107 0314 	add.w	r3, r7, #20
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 fabd 	bl	80073de <pb_field_iter_begin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fa4d 	bl	800430e <pb_message_set_to_defaults>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <decode_static_field+0x232>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	e000      	b.n	8003e90 <decode_static_field+0x234>
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <decode_static_field+0x278>)
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	60d3      	str	r3, [r2, #12]
 8003e94:	2300      	movs	r3, #0
 8003e96:	e017      	b.n	8003ec8 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	8a12      	ldrh	r2, [r2, #16]
 8003ea0:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff fde1 	bl	8003a70 <decode_basic_field>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	e00a      	b.n	8003ec8 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <decode_static_field+0x264>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	e000      	b.n	8003ec2 <decode_static_field+0x266>
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <decode_static_field+0x27c>)
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	60d3      	str	r3, [r2, #12]
 8003ec6:	2300      	movs	r3, #0
    }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3758      	adds	r7, #88	@ 0x58
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	08008a60 	.word	0x08008a60
 8003ed4:	08008a70 	.word	0x08008a70
 8003ed8:	08008a4c 	.word	0x08008a4c

08003edc <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <decode_pointer_field+0x1c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	e000      	b.n	8003efa <decode_pointer_field+0x1e>
 8003ef8:	4b04      	ldr	r3, [pc, #16]	@ (8003f0c <decode_pointer_field+0x30>)
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	60d3      	str	r3, [r2, #12]
 8003efe:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	08008a88 	.word	0x08008a88

08003f10 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b097      	sub	sp, #92	@ 0x5c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	61f8      	str	r0, [r7, #28]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	617a      	str	r2, [r7, #20]
 8003f1c:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8003f28:	7efb      	ldrb	r3, [r7, #27]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	69f8      	ldr	r0, [r7, #28]
 8003f2e:	f7ff fc91 	bl	8003854 <pb_skip_field>
 8003f32:	4603      	mov	r3, r0
 8003f34:	e070      	b.n	8004018 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8003f36:	7efb      	ldrb	r3, [r7, #27]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d145      	bne.n	8003fc8 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003f3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003f40:	4619      	mov	r1, r3
 8003f42:	69f8      	ldr	r0, [r7, #28]
 8003f44:	f7ff fd34 	bl	80039b0 <pb_make_string_substream>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f083 0301 	eor.w	r3, r3, #1
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <decode_callback_field+0x48>
            return false;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e05f      	b.n	8004018 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f5a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4798      	blx	r3
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f083 0301 	eor.w	r3, r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <decode_callback_field+0x76>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	e005      	b.n	8003f92 <decode_callback_field+0x82>
 8003f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <decode_callback_field+0x80>
 8003f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8e:	e000      	b.n	8003f92 <decode_callback_field+0x82>
 8003f90:	4b23      	ldr	r3, [pc, #140]	@ (8004020 <decode_callback_field+0x110>)
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	60d3      	str	r3, [r2, #12]
                return false;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e03e      	b.n	8004018 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <decode_callback_field+0x98>
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d8d7      	bhi.n	8003f58 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8003fa8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fac:	4619      	mov	r1, r3
 8003fae:	69f8      	ldr	r0, [r7, #28]
 8003fb0:	f7ff fd38 	bl	8003a24 <pb_close_string_substream>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f083 0301 	eor.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <decode_callback_field+0xb4>
            return false;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e029      	b.n	8004018 <decode_callback_field+0x108>

        return true;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e027      	b.n	8004018 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003fc8:	230a      	movs	r3, #10
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003fd4:	7ef9      	ldrb	r1, [r7, #27]
 8003fd6:	69f8      	ldr	r0, [r7, #28]
 8003fd8:	f7ff fc7e 	bl	80038d8 <read_raw_value>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f083 0301 	eor.w	r3, r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <decode_callback_field+0xdc>
            return false;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e015      	b.n	8004018 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fee:	463b      	mov	r3, r7
 8003ff0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fa87 	bl	8003508 <pb_istream_from_buffer>
 8003ffa:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003ffe:	463b      	mov	r3, r7
 8004000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	2100      	movs	r1, #0
 8004014:	4798      	blx	r3
 8004016:	4603      	mov	r3, r0
    }
}
 8004018:	4618      	mov	r0, r3
 800401a:	375c      	adds	r7, #92	@ 0x5c
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	08008a9c 	.word	0x08008a9c

08004024 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	460b      	mov	r3, r1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7d9b      	ldrb	r3, [r3, #22]
 8004036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800403a:	2b80      	cmp	r3, #128	@ 0x80
 800403c:	d00e      	beq.n	800405c <decode_field+0x38>
 800403e:	2b80      	cmp	r3, #128	@ 0x80
 8004040:	d81c      	bhi.n	800407c <decode_field+0x58>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <decode_field+0x28>
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d010      	beq.n	800406c <decode_field+0x48>
 800404a:	e017      	b.n	800407c <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 800404c:	7afb      	ldrb	r3, [r7, #11]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4619      	mov	r1, r3
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff fe02 	bl	8003c5c <decode_static_field>
 8004058:	4603      	mov	r3, r0
 800405a:	e01a      	b.n	8004092 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 800405c:	7afb      	ldrb	r3, [r7, #11]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4619      	mov	r1, r3
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff ff3a 	bl	8003edc <decode_pointer_field>
 8004068:	4603      	mov	r3, r0
 800406a:	e012      	b.n	8004092 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 800406c:	7afb      	ldrb	r3, [r7, #11]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4619      	mov	r1, r3
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff ff4c 	bl	8003f10 <decode_callback_field>
 8004078:	4603      	mov	r3, r0
 800407a:	e00a      	b.n	8004092 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <decode_field+0x66>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	e000      	b.n	800408c <decode_field+0x68>
 800408a:	4b04      	ldr	r3, [pc, #16]	@ (800409c <decode_field+0x78>)
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	60d3      	str	r3, [r2, #12]
 8004090:	2300      	movs	r3, #0
    }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	08008a4c 	.word	0x08008a4c

080040a0 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08e      	sub	sp, #56	@ 0x38
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 80040ae:	f107 0310 	add.w	r3, r7, #16
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 f9ab 	bl	8007410 <pb_field_iter_begin_extension>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <default_extension_decoder+0x34>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	e000      	b.n	80040d6 <default_extension_decoder+0x36>
 80040d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <default_extension_decoder+0x70>)
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	60d3      	str	r3, [r2, #12]
 80040da:	2300      	movs	r3, #0
 80040dc:	e014      	b.n	8004108 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80040de:	8c3b      	ldrh	r3, [r7, #32]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d102      	bne.n	80040ee <default_extension_decoder+0x4e>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <default_extension_decoder+0x52>
        return true;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e00a      	b.n	8004108 <default_extension_decoder+0x68>

    extension->found = true;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2201      	movs	r2, #1
 80040f6:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80040f8:	f107 0210 	add.w	r2, r7, #16
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff ff8f 	bl	8004024 <decode_field>
 8004106:	4603      	mov	r3, r0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3738      	adds	r7, #56	@ 0x38
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	08008aac 	.word	0x08008aac

08004114 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800412a:	e022      	b.n	8004172 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681c      	ldr	r4, [r3, #0]
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	47a0      	blx	r4
 8004146:	4603      	mov	r3, r0
 8004148:	75fb      	strb	r3, [r7, #23]
 800414a:	e007      	b.n	800415c <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff ffa4 	bl	80040a0 <default_extension_decoder>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]

        if (!status)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	f083 0301 	eor.w	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <decode_extension+0x58>
            return false;
 8004168:	2300      	movs	r3, #0
 800416a:	e00b      	b.n	8004184 <decode_extension+0x70>
        
        extension = extension->next;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <decode_extension+0x6e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	d0d4      	beq.n	800412c <decode_extension+0x18>
    }
    
    return true;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}

0800418c <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	@ 0x38
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7d9b      	ldrb	r3, [r3, #22]
 8004198:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800419c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	2b0a      	cmp	r3, #10
 80041a6:	d124      	bne.n	80041f2 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80041b0:	e01b      	b.n	80041ea <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80041b8:	4618      	mov	r0, r3
 80041ba:	f003 f929 	bl	8007410 <pb_field_iter_begin_extension>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00f      	beq.n	80041e4 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80041c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c6:	2200      	movs	r2, #0
 80041c8:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f89d 	bl	800430e <pb_message_set_to_defaults>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f083 0301 	eor.w	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <pb_field_set_to_default+0x58>
                    return false;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e090      	b.n	8004306 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80041e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e0      	bne.n	80041b2 <pb_field_set_to_default+0x26>
 80041f0:	e088      	b.n	8004304 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80041f2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80041f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d166      	bne.n	80042cc <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8004204:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004208:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800420c:	2b10      	cmp	r3, #16
 800420e:	d108      	bne.n	8004222 <pb_field_set_to_default+0x96>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e012      	b.n	8004248 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004222:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004226:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800422a:	2b20      	cmp	r3, #32
 800422c:	d005      	beq.n	800423a <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800422e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004232:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004236:	2b30      	cmp	r3, #48	@ 0x30
 8004238:	d106      	bne.n	8004248 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	2200      	movs	r2, #0
 8004240:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8004242:	2300      	movs	r3, #0
 8004244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8004248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800424c:	2b00      	cmp	r3, #0
 800424e:	d059      	beq.n	8004304 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7d9b      	ldrb	r3, [r3, #22]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	2b08      	cmp	r3, #8
 800425a:	d005      	beq.n	8004268 <pb_field_set_to_default+0xdc>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7d9b      	ldrb	r3, [r3, #22]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	2b09      	cmp	r3, #9
 8004266:	d128      	bne.n	80042ba <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004284:	2b00      	cmp	r3, #0
 8004286:	d018      	beq.n	80042ba <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	4618      	mov	r0, r3
 8004296:	f003 f8a2 	bl	80073de <pb_field_iter_begin>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d030      	beq.n	8004302 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f832 	bl	800430e <pb_message_set_to_defaults>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d025      	beq.n	8004302 <pb_field_set_to_default+0x176>
                        return false;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e025      	b.n	8004306 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69d8      	ldr	r0, [r3, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8a5b      	ldrh	r3, [r3, #18]
 80042c2:	461a      	mov	r2, r3
 80042c4:	2100      	movs	r1, #0
 80042c6:	f003 fcd7 	bl	8007c78 <memset>
 80042ca:	e01b      	b.n	8004304 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80042cc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80042d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042d4:	2b80      	cmp	r3, #128	@ 0x80
 80042d6:	d115      	bne.n	8004304 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80042e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80042e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d005      	beq.n	80042f8 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80042ec:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80042f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80042f4:	2b30      	cmp	r3, #48	@ 0x30
 80042f6:	d105      	bne.n	8004304 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	2200      	movs	r2, #0
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	e000      	b.n	8004304 <pb_field_set_to_default+0x178>
            {
 8004302:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8004304:	2301      	movs	r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	3738      	adds	r7, #56	@ 0x38
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800430e:	b590      	push	{r4, r7, lr}
 8004310:	b08d      	sub	sp, #52	@ 0x34
 8004312:	af00      	add	r7, sp, #0
 8004314:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8004316:	f107 0320 	add.w	r3, r7, #32
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8004328:	2300      	movs	r3, #0
 800432a:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d020      	beq.n	8004378 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	463b      	mov	r3, r7
 800433e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f8e0 	bl	8003508 <pb_istream_from_buffer>
 8004348:	f107 0420 	add.w	r4, r7, #32
 800434c:	463b      	mov	r3, r7
 800434e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004354:	f107 031a 	add.w	r3, r7, #26
 8004358:	f107 021c 	add.w	r2, r7, #28
 800435c:	f107 011b 	add.w	r1, r7, #27
 8004360:	f107 0020 	add.w	r0, r7, #32
 8004364:	f7ff fa47 	bl	80037f6 <pb_decode_tag>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <pb_message_set_to_defaults+0x6a>
            return false;
 8004374:	2300      	movs	r3, #0
 8004376:	e043      	b.n	8004400 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8004378:	6978      	ldr	r0, [r7, #20]
 800437a:	f7ff ff07 	bl	800418c <pb_field_set_to_default>
 800437e:	4603      	mov	r3, r0
 8004380:	f083 0301 	eor.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <pb_message_set_to_defaults+0x80>
            return false;
 800438a:	2300      	movs	r3, #0
 800438c:	e038      	b.n	8004400 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02e      	beq.n	80043f2 <pb_message_set_to_defaults+0xe4>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	8a1b      	ldrh	r3, [r3, #16]
 8004398:	461a      	mov	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	d128      	bne.n	80043f2 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 80043a0:	7ef9      	ldrb	r1, [r7, #27]
 80043a2:	f107 0320 	add.w	r3, r7, #32
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fe3b 	bl	8004024 <decode_field>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f083 0301 	eor.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <pb_message_set_to_defaults+0xb0>
                return false;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e020      	b.n	8004400 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80043be:	f107 031a 	add.w	r3, r7, #26
 80043c2:	f107 021c 	add.w	r2, r7, #28
 80043c6:	f107 011b 	add.w	r1, r7, #27
 80043ca:	f107 0020 	add.w	r0, r7, #32
 80043ce:	f7ff fa12 	bl	80037f6 <pb_decode_tag>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f083 0301 	eor.w	r3, r3, #1
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <pb_message_set_to_defaults+0xd4>
                return false;
 80043de:	2300      	movs	r3, #0
 80043e0:	e00e      	b.n	8004400 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f003 f83c 	bl	8007470 <pb_field_iter_next>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1bc      	bne.n	8004378 <pb_message_set_to_defaults+0x6a>

    return true;
 80043fe:	2301      	movs	r3, #1
}
 8004400:	4618      	mov	r0, r3
 8004402:	3734      	adds	r7, #52	@ 0x34
 8004404:	46bd      	mov	sp, r7
 8004406:	bd90      	pop	{r4, r7, pc}

08004408 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b09a      	sub	sp, #104	@ 0x68
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 800441e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004422:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8004432:	2300      	movs	r3, #0
 8004434:	643b      	str	r3, [r7, #64]	@ 0x40
 8004436:	2300      	movs	r3, #0
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800443e:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8004440:	f107 0318 	add.w	r3, r7, #24
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f002 ffc8 	bl	80073de <pb_field_iter_begin>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8102 	beq.w	800465a <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 80fc 	bne.w	800465a <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8004462:	f107 0318 	add.w	r3, r7, #24
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff51 	bl	800430e <pb_message_set_to_defaults>
 800446c:	4603      	mov	r3, r0
 800446e:	f083 0301 	eor.w	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80f0 	beq.w	800465a <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <pb_decode_inner+0x80>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	e000      	b.n	800448a <pb_decode_inner+0x82>
 8004488:	4b99      	ldr	r3, [pc, #612]	@ (80046f0 <pb_decode_inner+0x2e8>)
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	60d3      	str	r3, [r2, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	e16d      	b.n	800476e <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004492:	f107 0312 	add.w	r3, r7, #18
 8004496:	f107 0214 	add.w	r2, r7, #20
 800449a:	f107 0113 	add.w	r1, r7, #19
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff f9a9 	bl	80037f6 <pb_decode_tag>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f083 0301 	eor.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <pb_decode_inner+0xb4>
        {
            if (eof)
 80044b0:	7cbb      	ldrb	r3, [r7, #18]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 80d7 	bne.w	8004666 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e158      	b.n	800476e <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d111      	bne.n	80044e6 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 80ce 	bne.w	800466a <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <pb_decode_inner+0xd4>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	e000      	b.n	80044de <pb_decode_inner+0xd6>
 80044dc:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <pb_decode_inner+0x2ec>)
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	60d3      	str	r3, [r2, #12]
 80044e2:	2300      	movs	r3, #0
 80044e4:	e143      	b.n	800476e <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	f107 0318 	add.w	r3, r7, #24
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 ffd3 	bl	800749a <pb_field_iter_find>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <pb_decode_inner+0x104>
 8004500:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	2b0a      	cmp	r3, #10
 800450a:	d13c      	bne.n	8004586 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 800450c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450e:	2b00      	cmp	r3, #0
 8004510:	d112      	bne.n	8004538 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8004512:	f107 0318 	add.w	r3, r7, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f003 f815 	bl	8007546 <pb_field_iter_find_extension>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8004522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8004528:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800452a:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 800452c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004536:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800453c:	429a      	cmp	r2, r3
 800453e:	d815      	bhi.n	800456c <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	7cfa      	ldrb	r2, [r7, #19]
 800454a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fde1 	bl	8004114 <decode_extension>
 8004552:	4603      	mov	r3, r0
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <pb_decode_inner+0x15a>
                    return false;
 800455e:	2300      	movs	r3, #0
 8004560:	e105      	b.n	800476e <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004568:	429a      	cmp	r2, r3
 800456a:	d173      	bne.n	8004654 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	4619      	mov	r1, r3
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff f96f 	bl	8003854 <pb_skip_field>
 8004576:	4603      	mov	r3, r0
 8004578:	f083 0301 	eor.w	r3, r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d06a      	beq.n	8004658 <pb_decode_inner+0x250>
                return false;
 8004582:	2300      	movs	r3, #0
 8004584:	e0f3      	b.n	800476e <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8004586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800458a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800458e:	2b20      	cmp	r3, #32
 8004590:	d12e      	bne.n	80045f0 <pb_decode_inner+0x1e8>
 8004592:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004594:	f107 0318 	add.w	r3, r7, #24
 8004598:	3314      	adds	r3, #20
 800459a:	429a      	cmp	r2, r3
 800459c:	d128      	bne.n	80045f0 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 800459e:	8c3b      	ldrh	r3, [r7, #32]
 80045a0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d020      	beq.n	80045ea <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 80045a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80045ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d011      	beq.n	80045d8 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 80045b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 80045b8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d00b      	beq.n	80045d8 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <pb_decode_inner+0x1c6>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	e000      	b.n	80045d0 <pb_decode_inner+0x1c8>
 80045ce:	4b4a      	ldr	r3, [pc, #296]	@ (80046f8 <pb_decode_inner+0x2f0>)
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	60d3      	str	r3, [r2, #12]
 80045d4:	2300      	movs	r3, #0
 80045d6:	e0ca      	b.n	800476e <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 80045d8:	8c3b      	ldrh	r3, [r7, #32]
 80045da:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 80045e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80045e6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 80045ea:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80045ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 80045f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11c      	bne.n	8004636 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80045fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8004600:	d819      	bhi.n	8004636 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004602:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2201      	movs	r2, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8004610:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	b29b      	uxth	r3, r3
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	3368      	adds	r3, #104	@ 0x68
 800461a:	443b      	add	r3, r7
 800461c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8004620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	b29b      	uxth	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800462a:	431a      	orrs	r2, r3
 800462c:	008b      	lsls	r3, r1, #2
 800462e:	3368      	adds	r3, #104	@ 0x68
 8004630:	443b      	add	r3, r7
 8004632:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8004636:	7cfb      	ldrb	r3, [r7, #19]
 8004638:	f107 0218 	add.w	r2, r7, #24
 800463c:	4619      	mov	r1, r3
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fcf0 	bl	8004024 <decode_field>
 8004644:	4603      	mov	r3, r0
 8004646:	f083 0301 	eor.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <pb_decode_inner+0x252>
            return false;
 8004650:	2300      	movs	r3, #0
 8004652:	e08c      	b.n	800476e <pb_decode_inner+0x366>
                    continue;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <pb_decode_inner+0x252>
            continue;
 8004658:	bf00      	nop
    while (stream->bytes_left)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f47f af17 	bne.w	8004492 <pb_decode_inner+0x8a>
 8004664:	e002      	b.n	800466c <pb_decode_inner+0x264>
                break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <pb_decode_inner+0x264>
            break;
 800466a:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 800466c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004674:	4293      	cmp	r3, r2
 8004676:	d011      	beq.n	800469c <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 800467c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004680:	429a      	cmp	r2, r3
 8004682:	d00b      	beq.n	800469c <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <pb_decode_inner+0x28a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	e000      	b.n	8004694 <pb_decode_inner+0x28c>
 8004692:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <pb_decode_inner+0x2f0>)
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	60d3      	str	r3, [r2, #12]
 8004698:	2300      	movs	r3, #0
 800469a:	e068      	b.n	800476e <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	8a5b      	ldrh	r3, [r3, #18]
 80046a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 80046a4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05f      	beq.n	800476c <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80046ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d902      	bls.n	80046ba <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 80046b4:	2340      	movs	r3, #64	@ 0x40
 80046b6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80046c0:	e023      	b.n	800470a <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 80046c2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	3368      	adds	r3, #104	@ 0x68
 80046ca:	443b      	add	r3, r7
 80046cc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80046d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d014      	beq.n	8004700 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <pb_decode_inner+0x2dc>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	e000      	b.n	80046e6 <pb_decode_inner+0x2de>
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <pb_decode_inner+0x2f4>)
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	60d3      	str	r3, [r2, #12]
 80046ea:	2300      	movs	r3, #0
 80046ec:	e03f      	b.n	800476e <pb_decode_inner+0x366>
 80046ee:	bf00      	nop
 80046f0:	08008a70 	.word	0x08008a70
 80046f4:	08008ac0 	.word	0x08008ac0
 80046f8:	08008acc 	.word	0x08008acc
 80046fc:	08008af0 	.word	0x08008af0
            for (i = 0; i < (req_field_count >> 5); i++)
 8004700:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004704:	3301      	adds	r3, #1
 8004706:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800470a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	b29b      	uxth	r3, r3
 8004712:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8004716:	429a      	cmp	r2, r3
 8004718:	d3d3      	bcc.n	80046c2 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800471a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	2b00      	cmp	r3, #0
 8004724:	d022      	beq.n	800476c <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004726:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	b29b      	uxth	r3, r3
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	3368      	adds	r3, #104	@ 0x68
 8004732:	443b      	add	r3, r7
 8004734:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004738:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f1c3 0320 	rsb	r3, r3, #32
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4619      	mov	r1, r3
 800474c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474e:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004750:	429a      	cmp	r2, r3
 8004752:	d00b      	beq.n	800476c <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <pb_decode_inner+0x35a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	e000      	b.n	8004764 <pb_decode_inner+0x35c>
 8004762:	4b05      	ldr	r3, [pc, #20]	@ (8004778 <pb_decode_inner+0x370>)
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	60d3      	str	r3, [r2, #12]
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 800476c:	2301      	movs	r3, #1
}
 800476e:	4618      	mov	r0, r3
 8004770:	3768      	adds	r7, #104	@ 0x68
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	08008af0 	.word	0x08008af0

0800477c <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004788:	2300      	movs	r3, #0
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff fe3a 	bl	8004408 <pb_decode_inner>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe ff70 	bl	8003698 <pb_decode_varint32>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f083 0301 	eor.w	r3, r3, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <pb_decode_bool+0x26>
        return false;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e008      	b.n	80047da <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	701a      	strb	r2, [r3, #0]
    return true;
 80047d8:	2301      	movs	r3, #1
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80047e2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 80047ee:	f107 0308 	add.w	r3, r7, #8
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fe ff5f 	bl	80036b8 <pb_decode_varint>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f083 0301 	eor.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <pb_decode_svarint+0x28>
        return false;
 8004806:	2300      	movs	r3, #0
 8004808:	e029      	b.n	800485e <pb_decode_svarint+0x7c>
    
    if (value & 1)
 800480a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800480e:	f002 0401 	and.w	r4, r2, #1
 8004812:	2500      	movs	r5, #0
 8004814:	ea54 0305 	orrs.w	r3, r4, r5
 8004818:	d013      	beq.n	8004842 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 800481a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	0842      	lsrs	r2, r0, #1
 8004828:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800482c:	084b      	lsrs	r3, r1, #1
 800482e:	ea6f 0802 	mvn.w	r8, r2
 8004832:	ea6f 0903 	mvn.w	r9, r3
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	e9c1 2300 	strd	r2, r3, [r1]
 8004840:	e00c      	b.n	800485c <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8004842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	0842      	lsrs	r2, r0, #1
 8004850:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004854:	084b      	lsrs	r3, r1, #1
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 800485c:	2301      	movs	r3, #1
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004868 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	2204      	movs	r2, #4
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe fd92 	bl	80033a4 <pb_read>
 8004880:	4603      	mov	r3, r0
 8004882:	f083 0301 	eor.w	r3, r3, #1
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <pb_decode_fixed32+0x28>
        return false;
 800488c:	2300      	movs	r3, #0
 800488e:	e003      	b.n	8004898 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8004896:	2301      	movs	r3, #1
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80048aa:	f107 0308 	add.w	r3, r7, #8
 80048ae:	2208      	movs	r2, #8
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fe fd76 	bl	80033a4 <pb_read>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f083 0301 	eor.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <pb_decode_fixed64+0x28>
        return false;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e005      	b.n	80048d4 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80048c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 80048d2:	2301      	movs	r3, #1
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff58 	bl	80047a2 <pb_decode_bool>
 80048f2:	4603      	mov	r3, r0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80048fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004900:	b094      	sub	sp, #80	@ 0x50
 8004902:	af00      	add	r7, sp, #0
 8004904:	6278      	str	r0, [r7, #36]	@ 0x24
 8004906:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	7d9b      	ldrb	r3, [r3, #22]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2b02      	cmp	r3, #2
 8004912:	d179      	bne.n	8004a08 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8004914:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004918:	4619      	mov	r1, r3
 800491a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800491c:	f7fe fecc 	bl	80036b8 <pb_decode_varint>
 8004920:	4603      	mov	r3, r0
 8004922:	f083 0301 	eor.w	r3, r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <pb_dec_varint+0x34>
            return false;
 800492c:	2300      	movs	r3, #0
 800492e:	e107      	b.n	8004b40 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	8a5b      	ldrh	r3, [r3, #18]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10a      	bne.n	800494e <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	69d9      	ldr	r1, [r3, #28]
 800493c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004940:	e9c1 2300 	strd	r2, r3, [r1]
 8004944:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004948:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800494c:	e046      	b.n	80049dc <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	8a5b      	ldrh	r3, [r3, #18]
 8004952:	2b04      	cmp	r3, #4
 8004954:	d10e      	bne.n	8004974 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8004956:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	4602      	mov	r2, r0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2200      	movs	r2, #0
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	617a      	str	r2, [r7, #20]
 800496a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800496e:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8004972:	e033      	b.n	80049dc <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	8a5b      	ldrh	r3, [r3, #18]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d10f      	bne.n	800499c <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 800497c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	b282      	uxth	r2, r0
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	2200      	movs	r2, #0
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	60fa      	str	r2, [r7, #12]
 8004992:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004996:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800499a:	e01f      	b.n	80049dc <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	8a5b      	ldrh	r3, [r3, #18]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10f      	bne.n	80049c4 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80049a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	b2c2      	uxtb	r2, r0
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2200      	movs	r2, #0
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80049be:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80049c2:	e00b      	b.n	80049dc <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <pb_dec_varint+0xd6>
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	e000      	b.n	80049d4 <pb_dec_varint+0xd8>
 80049d2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b4c <pb_dec_varint+0x250>)
 80049d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d6:	60d3      	str	r3, [r2, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	e0b1      	b.n	8004b40 <pb_dec_varint+0x244>

        if (clamped != value)
 80049dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80049e4:	4299      	cmp	r1, r3
 80049e6:	bf08      	it	eq
 80049e8:	4290      	cmpeq	r0, r2
 80049ea:	d00b      	beq.n	8004a04 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <pb_dec_varint+0xfe>
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	e000      	b.n	80049fc <pb_dec_varint+0x100>
 80049fa:	4b55      	ldr	r3, [pc, #340]	@ (8004b50 <pb_dec_varint+0x254>)
 80049fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fe:	60d3      	str	r3, [r2, #12]
 8004a00:	2300      	movs	r3, #0
 8004a02:	e09d      	b.n	8004b40 <pb_dec_varint+0x244>

        return true;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e09b      	b.n	8004b40 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	7d9b      	ldrb	r3, [r3, #22]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d10d      	bne.n	8004a30 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8004a14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a1c:	f7ff fee1 	bl	80047e2 <pb_decode_svarint>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f083 0301 	eor.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d022      	beq.n	8004a72 <pb_dec_varint+0x176>
                return false;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e087      	b.n	8004b40 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8004a30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a34:	4619      	mov	r1, r3
 8004a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a38:	f7fe fe3e 	bl	80036b8 <pb_decode_varint>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f083 0301 	eor.w	r3, r3, #1
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <pb_dec_varint+0x150>
                return false;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e079      	b.n	8004b40 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	8a5b      	ldrh	r3, [r3, #18]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d104      	bne.n	8004a5e <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8004a54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004a58:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004a5c:	e009      	b.n	8004a72 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004a5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004a62:	4613      	mov	r3, r2
 8004a64:	17da      	asrs	r2, r3, #31
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	61fa      	str	r2, [r7, #28]
 8004a6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	8a5b      	ldrh	r3, [r3, #18]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d10a      	bne.n	8004a90 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	69d9      	ldr	r1, [r3, #28]
 8004a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a82:	e9c1 2300 	strd	r2, r3, [r1]
 8004a86:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004a8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004a8e:	e042      	b.n	8004b16 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	8a5b      	ldrh	r3, [r3, #18]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d10c      	bne.n	8004ab2 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8004a98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	17da      	asrs	r2, r3, #31
 8004aa8:	469a      	mov	sl, r3
 8004aaa:	4693      	mov	fp, r2
 8004aac:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8004ab0:	e031      	b.n	8004b16 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	8a5b      	ldrh	r3, [r3, #18]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d10e      	bne.n	8004ad8 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8004aba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	b202      	sxth	r2, r0
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	17da      	asrs	r2, r3, #31
 8004ace:	4698      	mov	r8, r3
 8004ad0:	4691      	mov	r9, r2
 8004ad2:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8004ad6:	e01e      	b.n	8004b16 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	8a5b      	ldrh	r3, [r3, #18]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10e      	bne.n	8004afe <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8004ae0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	b242      	sxtb	r2, r0
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	f993 3000 	ldrsb.w	r3, [r3]
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	17da      	asrs	r2, r3, #31
 8004af4:	461c      	mov	r4, r3
 8004af6:	4615      	mov	r5, r2
 8004af8:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8004afc:	e00b      	b.n	8004b16 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <pb_dec_varint+0x210>
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	e000      	b.n	8004b0e <pb_dec_varint+0x212>
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <pb_dec_varint+0x250>)
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b10:	60d3      	str	r3, [r2, #12]
 8004b12:	2300      	movs	r3, #0
 8004b14:	e014      	b.n	8004b40 <pb_dec_varint+0x244>

        if (clamped != svalue)
 8004b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	bf08      	it	eq
 8004b22:	4290      	cmpeq	r0, r2
 8004b24:	d00b      	beq.n	8004b3e <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <pb_dec_varint+0x238>
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	e000      	b.n	8004b36 <pb_dec_varint+0x23a>
 8004b34:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <pb_dec_varint+0x254>)
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	60d3      	str	r3, [r2, #12]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <pb_dec_varint+0x244>

        return true;
 8004b3e:	2301      	movs	r3, #1
    }
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3750      	adds	r7, #80	@ 0x50
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08008b08 	.word	0x08008b08
 8004b50:	08008b1c 	.word	0x08008b1c

08004b54 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004b5e:	f107 030c 	add.w	r3, r7, #12
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fe fd97 	bl	8003698 <pb_decode_varint32>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f083 0301 	eor.w	r3, r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <pb_dec_bytes+0x26>
        return false;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e055      	b.n	8004c26 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b80:	d30b      	bcc.n	8004b9a <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <pb_dec_bytes+0x3c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	e000      	b.n	8004b92 <pb_dec_bytes+0x3e>
 8004b90:	4b27      	ldr	r3, [pc, #156]	@ (8004c30 <pb_dec_bytes+0xdc>)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60d3      	str	r3, [r2, #12]
 8004b96:	2300      	movs	r3, #0
 8004b98:	e045      	b.n	8004c26 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d20b      	bcs.n	8004bc0 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <pb_dec_bytes+0x62>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	e000      	b.n	8004bb8 <pb_dec_bytes+0x64>
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <pb_dec_bytes+0xe0>)
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	60d3      	str	r3, [r2, #12]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e032      	b.n	8004c26 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	7d9b      	ldrb	r3, [r3, #22]
 8004bc4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bc8:	2b80      	cmp	r3, #128	@ 0x80
 8004bca:	d10b      	bne.n	8004be4 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <pb_dec_bytes+0x86>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	e000      	b.n	8004bdc <pb_dec_bytes+0x88>
 8004bda:	4b17      	ldr	r3, [pc, #92]	@ (8004c38 <pb_dec_bytes+0xe4>)
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	60d3      	str	r3, [r2, #12]
 8004be0:	2300      	movs	r3, #0
 8004be2:	e020      	b.n	8004c26 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	8a5b      	ldrh	r3, [r3, #18]
 8004be8:	461a      	mov	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d90b      	bls.n	8004c08 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <pb_dec_bytes+0xaa>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	e000      	b.n	8004c00 <pb_dec_bytes+0xac>
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8004c30 <pb_dec_bytes+0xdc>)
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	60d3      	str	r3, [r2, #12]
 8004c04:	2300      	movs	r3, #0
 8004c06:	e00e      	b.n	8004c26 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fe fbc0 	bl	80033a4 <pb_read>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	08008b30 	.word	0x08008b30
 8004c34:	08008b40 	.word	0x08008b40
 8004c38:	08008a88 	.word	0x08008a88

08004c3c <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fe fd20 	bl	8003698 <pb_decode_varint32>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f083 0301 	eor.w	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <pb_dec_string+0x2c>
        return false;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e05a      	b.n	8004d1e <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c6e:	d10b      	bne.n	8004c88 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <pb_dec_string+0x42>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	e000      	b.n	8004c80 <pb_dec_string+0x44>
 8004c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d28 <pb_dec_string+0xec>)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	60d3      	str	r3, [r2, #12]
 8004c84:	2300      	movs	r3, #0
 8004c86:	e04a      	b.n	8004d1e <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d20b      	bcs.n	8004cae <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <pb_dec_string+0x68>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	e000      	b.n	8004ca6 <pb_dec_string+0x6a>
 8004ca4:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <pb_dec_string+0xec>)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	60d3      	str	r3, [r2, #12]
 8004caa:	2300      	movs	r3, #0
 8004cac:	e037      	b.n	8004d1e <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	7d9b      	ldrb	r3, [r3, #22]
 8004cb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d10b      	bne.n	8004cd2 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <pb_dec_string+0x8c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	e000      	b.n	8004cca <pb_dec_string+0x8e>
 8004cc8:	4b18      	ldr	r3, [pc, #96]	@ (8004d2c <pb_dec_string+0xf0>)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	60d3      	str	r3, [r2, #12]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e025      	b.n	8004d1e <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	8a5b      	ldrh	r3, [r3, #18]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d90b      	bls.n	8004cf6 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <pb_dec_string+0xb0>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	e000      	b.n	8004cee <pb_dec_string+0xb2>
 8004cec:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <pb_dec_string+0xf4>)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	60d3      	str	r3, [r2, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e013      	b.n	8004d1e <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fe fb4c 	bl	80033a4 <pb_read>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f083 0301 	eor.w	r3, r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <pb_dec_string+0xe0>
        return false;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8004d1c:	2301      	movs	r3, #1
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	08008b40 	.word	0x08008b40
 8004d2c:	08008a88 	.word	0x08008a88
 8004d30:	08008b50 	.word	0x08008b50

08004d34 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	@ 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fe fe2d 	bl	80039b0 <pb_make_string_substream>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f083 0301 	eor.w	r3, r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <pb_dec_submessage+0x32>
        return false;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e069      	b.n	8004e3a <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <pb_dec_submessage+0x48>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	e000      	b.n	8004d7e <pb_dec_submessage+0x4a>
 8004d7c:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <pb_dec_submessage+0x110>)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	60d3      	str	r3, [r2, #12]
 8004d82:	2300      	movs	r3, #0
 8004d84:	e059      	b.n	8004e3a <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	7d9b      	ldrb	r3, [r3, #22]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	2b09      	cmp	r3, #9
 8004d90:	d11c      	bne.n	8004dcc <pb_dec_submessage+0x98>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d018      	beq.n	8004dcc <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	3b08      	subs	r3, #8
 8004da0:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	3204      	adds	r2, #4
 8004db2:	f107 000c 	add.w	r0, r7, #12
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	4798      	blx	r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d022      	beq.n	8004e1a <pb_dec_submessage+0xe6>
 8004dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004dd8:	f083 0301 	eor.w	r3, r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01b      	beq.n	8004e1a <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	7d9b      	ldrb	r3, [r3, #22]
 8004dea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	7d9b      	ldrb	r3, [r3, #22]
 8004df6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d001      	beq.n	8004e02 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	f107 000c 	add.w	r0, r7, #12
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f7ff fafa 	bl	8004408 <pb_decode_inner>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8004e1a:	f107 030c 	add.w	r3, r7, #12
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fe fdff 	bl	8003a24 <pb_close_string_substream>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f083 0301 	eor.w	r3, r3, #1
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <pb_dec_submessage+0x102>
        return false;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e001      	b.n	8004e3a <pb_dec_submessage+0x106>

    return status;
 8004e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	@ 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	08008b60 	.word	0x08008b60

08004e48 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fe fc1d 	bl	8003698 <pb_decode_varint32>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f083 0301 	eor.w	r3, r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <pb_dec_fixed_length_bytes+0x26>
        return false;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e037      	b.n	8004ede <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e74:	d30b      	bcc.n	8004e8e <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <pb_dec_fixed_length_bytes+0x3c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	e000      	b.n	8004e86 <pb_dec_fixed_length_bytes+0x3e>
 8004e84:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <pb_dec_fixed_length_bytes+0xa0>)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	60d3      	str	r3, [r2, #12]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e027      	b.n	8004ede <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	69d8      	ldr	r0, [r3, #28]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	8a5b      	ldrh	r3, [r3, #18]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f002 feea 	bl	8007c78 <memset>
        return true;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e01a      	b.n	8004ede <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	8a5b      	ldrh	r3, [r3, #18]
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d00b      	beq.n	8004ecc <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <pb_dec_fixed_length_bytes+0x7a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	e000      	b.n	8004ec4 <pb_dec_fixed_length_bytes+0x7c>
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <pb_dec_fixed_length_bytes+0xa4>)
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	60d3      	str	r3, [r2, #12]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e008      	b.n	8004ede <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	69d9      	ldr	r1, [r3, #28]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	8a5b      	ldrh	r3, [r3, #18]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fe fa64 	bl	80033a4 <pb_read>
 8004edc:	4603      	mov	r3, r0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08008b30 	.word	0x08008b30
 8004eec:	08008b7c 	.word	0x08008b7c

08004ef0 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	441a      	add	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	f002 ff3c 	bl	8007d8e <memcpy>
    
    return true;
 8004f16:	2301      	movs	r3, #1
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8004f20:	b4b0      	push	{r4, r5, r7}
 8004f22:	b08b      	sub	sp, #44	@ 0x2c
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <pb_ostream_from_buffer+0x3c>)
 8004f2e:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	461d      	mov	r5, r3
 8004f44:	f107 0414 	add.w	r4, r7, #20
 8004f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	602b      	str	r3, [r5, #0]
}
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	372c      	adds	r7, #44	@ 0x2c
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bcb0      	pop	{r4, r5, r7}
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	08004ef1 	.word	0x08004ef1

08004f60 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d037      	beq.n	8004fe2 <pb_write+0x82>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d033      	beq.n	8004fe2 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	441a      	add	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d307      	bcc.n	8004f9a <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d90b      	bls.n	8004fb2 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <pb_write+0x48>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	e000      	b.n	8004faa <pb_write+0x4a>
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <pb_write+0x98>)
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	6113      	str	r3, [r2, #16]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e01e      	b.n	8004ff0 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	4798      	blx	r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f083 0301 	eor.w	r3, r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <pb_write+0x78>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	e000      	b.n	8004fda <pb_write+0x7a>
 8004fd8:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <pb_write+0x9c>)
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	6113      	str	r3, [r2, #16]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e006      	b.n	8004ff0 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	60da      	str	r2, [r3, #12]
    return true;
 8004fee:	2301      	movs	r3, #1
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	08008ba0 	.word	0x08008ba0
 8004ffc:	08008bac 	.word	0x08008bac

08005000 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e00a      	b.n	8005028 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <safe_read_bool+0x22>
            return true;
 800501e:	2301      	movs	r3, #1
 8005020:	e006      	b.n	8005030 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f1      	beq.n	8005012 <safe_read_bool+0x12>
    }
    return false;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800503c:	b5b0      	push	{r4, r5, r7, lr}
 800503e:	b08c      	sub	sp, #48	@ 0x30
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 800504e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <encode_array+0x1c>
        return true;
 8005054:	2301      	movs	r3, #1
 8005056:	e13d      	b.n	80052d4 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	7d9b      	ldrb	r3, [r3, #22]
 800505c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005060:	2b80      	cmp	r3, #128	@ 0x80
 8005062:	d010      	beq.n	8005086 <encode_array+0x4a>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	8a9b      	ldrh	r3, [r3, #20]
 8005068:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800506a:	429a      	cmp	r2, r3
 800506c:	d90b      	bls.n	8005086 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <encode_array+0x40>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	e000      	b.n	800507e <encode_array+0x42>
 800507c:	4b97      	ldr	r3, [pc, #604]	@ (80052dc <encode_array+0x2a0>)
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6113      	str	r3, [r2, #16]
 8005082:	2300      	movs	r3, #0
 8005084:	e126      	b.n	80052d4 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	7d9b      	ldrb	r3, [r3, #22]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	2b05      	cmp	r3, #5
 8005090:	f200 80b3 	bhi.w	80051fa <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	8a1b      	ldrh	r3, [r3, #16]
 8005098:	461a      	mov	r2, r3
 800509a:	2102      	movs	r1, #2
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fcdd 	bl	8005a5c <pb_encode_tag>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f083 0301 	eor.w	r3, r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <encode_array+0x76>
            return false;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e110      	b.n	80052d4 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	7d9b      	ldrb	r3, [r3, #22]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d103      	bne.n	80050c6 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 80050be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c4:	e047      	b.n	8005156 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	7d9b      	ldrb	r3, [r3, #22]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	2b05      	cmp	r3, #5
 80050d0:	d103      	bne.n	80050da <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 80050d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050d8:	e03d      	b.n	8005156 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	605a      	str	r2, [r3, #4]
 80050e4:	609a      	str	r2, [r3, #8]
 80050e6:	60da      	str	r2, [r3, #12]
 80050e8:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 80050f0:	2300      	movs	r3, #0
 80050f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050f4:	e026      	b.n	8005144 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fdef 	bl	8005ce0 <pb_enc_varint>
 8005102:	4603      	mov	r3, r0
 8005104:	f083 0301 	eor.w	r3, r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <encode_array+0xe0>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	e005      	b.n	8005128 <encode_array+0xec>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <encode_array+0xea>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	e000      	b.n	8005128 <encode_array+0xec>
 8005126:	4b6e      	ldr	r3, [pc, #440]	@ (80052e0 <encode_array+0x2a4>)
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6113      	str	r3, [r2, #16]
 800512c:	2300      	movs	r3, #0
 800512e:	e0d1      	b.n	80052d4 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	8a52      	ldrh	r2, [r2, #18]
 8005138:	441a      	add	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 800513e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005140:	3301      	adds	r3, #1
 8005142:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005144:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005146:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005148:	429a      	cmp	r2, r3
 800514a:	d3d4      	bcc.n	80050f6 <encode_array+0xba>
            }
            field->pData = pData_orig;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	2200      	movs	r2, #0
 800515a:	461c      	mov	r4, r3
 800515c:	4615      	mov	r5, r2
 800515e:	4622      	mov	r2, r4
 8005160:	462b      	mov	r3, r5
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fbf7 	bl	8005956 <pb_encode_varint>
 8005168:	4603      	mov	r3, r0
 800516a:	f083 0301 	eor.w	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <encode_array+0x13c>
            return false;
 8005174:	2300      	movs	r3, #0
 8005176:	e0ad      	b.n	80052d4 <encode_array+0x298>
        
        if (stream->callback == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005182:	2100      	movs	r1, #0
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff feeb 	bl	8004f60 <pb_write>
 800518a:	4603      	mov	r3, r0
 800518c:	e0a2      	b.n	80052d4 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800518e:	2300      	movs	r3, #0
 8005190:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005192:	e02d      	b.n	80051f0 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	7d9b      	ldrb	r3, [r3, #22]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	2b04      	cmp	r3, #4
 800519e:	d005      	beq.n	80051ac <encode_array+0x170>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	7d9b      	ldrb	r3, [r3, #22]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d10b      	bne.n	80051c4 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fe58 	bl	8005e64 <pb_enc_fixed>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f083 0301 	eor.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00d      	beq.n	80051dc <encode_array+0x1a0>
                    return false;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e087      	b.n	80052d4 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fd8a 	bl	8005ce0 <pb_enc_varint>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f083 0301 	eor.w	r3, r3, #1
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <encode_array+0x1a0>
                    return false;
 80051d8:	2300      	movs	r3, #0
 80051da:	e07b      	b.n	80052d4 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	8a52      	ldrh	r2, [r2, #18]
 80051e4:	441a      	add	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80051ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051ec:	3301      	adds	r3, #1
 80051ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80051f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80051f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d3cd      	bcc.n	8005194 <encode_array+0x158>
 80051f8:	e06b      	b.n	80052d2 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80051fe:	e064      	b.n	80052ca <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	7d9b      	ldrb	r3, [r3, #22]
 8005204:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005208:	2b80      	cmp	r3, #128	@ 0x80
 800520a:	d147      	bne.n	800529c <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	7d9b      	ldrb	r3, [r3, #22]
 8005210:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005214:	2b07      	cmp	r3, #7
 8005216:	d005      	beq.n	8005224 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	7d9b      	ldrb	r3, [r3, #22]
 800521c:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005220:	2b06      	cmp	r3, #6
 8005222:	d13b      	bne.n	800529c <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d11c      	bne.n	8005276 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc36 	bl	8005ab0 <pb_encode_tag_for_field>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb7f 	bl	8005956 <pb_encode_varint>
 8005258:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <encode_array+0x226>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <encode_array+0x228>
 8005262:	2300      	movs	r3, #0
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005274:	e006      	b.n	8005284 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f951 	bl	8005520 <encode_basic_field>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	61da      	str	r2, [r3, #28]

                if (!status)
 800528a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800528e:	f083 0301 	eor.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <encode_array+0x278>
                    return false;
 8005298:	2300      	movs	r3, #0
 800529a:	e01b      	b.n	80052d4 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f93e 	bl	8005520 <encode_basic_field>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f083 0301 	eor.w	r3, r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <encode_array+0x27a>
                    return false;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e00f      	b.n	80052d4 <encode_array+0x298>
            {
 80052b4:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	8a52      	ldrh	r2, [r2, #18]
 80052be:	441a      	add	r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80052c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80052c6:	3301      	adds	r3, #1
 80052c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80052ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80052cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d396      	bcc.n	8005200 <encode_array+0x1c4>
        }
    }
    
    return true;
 80052d2:	2301      	movs	r3, #1
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3730      	adds	r7, #48	@ 0x30
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}
 80052dc:	08008bb8 	.word	0x08008bb8
 80052e0:	08008bd0 	.word	0x08008bd0

080052e4 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b092      	sub	sp, #72	@ 0x48
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7d9b      	ldrb	r3, [r3, #22]
 80052f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80052f4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f040 80c9 	bne.w	8005494 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005302:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005306:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800530e:	2300      	movs	r3, #0
 8005310:	e100      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005312:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005316:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800531a:	2b20      	cmp	r3, #32
 800531c:	d108      	bne.n	8005330 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e0f1      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005330:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005334:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005338:	2b30      	cmp	r3, #48	@ 0x30
 800533a:	d108      	bne.n	800534e <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e0e2      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800534e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005352:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005356:	2b10      	cmp	r3, #16
 8005358:	d115      	bne.n	8005386 <pb_check_proto3_default_value+0xa2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d011      	beq.n	8005386 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fe4a 	bl	8005000 <safe_read_bool>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f083 0301 	eor.w	r3, r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e0c6      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005390:	2300      	movs	r3, #0
 8005392:	e0bf      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005394:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	2b05      	cmp	r3, #5
 800539e:	d81c      	bhi.n	80053da <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80053ac:	e00d      	b.n	80053ca <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 80053ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053b4:	4413      	add	r3, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 80053bc:	2300      	movs	r3, #0
 80053be:	e0a9      	b.n	8005514 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 80053c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8a5b      	ldrh	r3, [r3, #18]
 80053ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3eb      	bcc.n	80053ae <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e09c      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80053da:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	2b06      	cmp	r3, #6
 80053e4:	d10a      	bne.n	80053fc <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e08b      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80053fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2b07      	cmp	r3, #7
 8005406:	d108      	bne.n	800541a <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	e07c      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800541a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	2b0b      	cmp	r3, #11
 8005424:	d107      	bne.n	8005436 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8a5b      	ldrh	r3, [r3, #18]
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	e06e      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8005436:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	2b08      	cmp	r3, #8
 8005440:	d005      	beq.n	800544e <pb_check_proto3_default_value+0x16a>
 8005442:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	2b09      	cmp	r3, #9
 800544c:	d161      	bne.n	8005512 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	4618      	mov	r0, r3
 800545c:	f001 ffbf 	bl	80073de <pb_field_iter_begin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d014      	beq.n	8005490 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8005466:	f107 030c 	add.w	r3, r7, #12
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff3a 	bl	80052e4 <pb_check_proto3_default_value>
 8005470:	4603      	mov	r3, r0
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 800547c:	2300      	movs	r3, #0
 800547e:	e049      	b.n	8005514 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005480:	f107 030c 	add.w	r3, r7, #12
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fff3 	bl	8007470 <pb_field_iter_next>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ea      	bne.n	8005466 <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005490:	2301      	movs	r3, #1
 8005492:	e03f      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005494:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005498:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800549c:	2b80      	cmp	r3, #128	@ 0x80
 800549e:	d107      	bne.n	80054b0 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e031      	b.n	8005514 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 80054b0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80054b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054b8:	2b40      	cmp	r3, #64	@ 0x40
 80054ba:	d12a      	bne.n	8005512 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80054bc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2b0a      	cmp	r3, #10
 80054c6:	d10a      	bne.n	80054de <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 80054d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	e01a      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4a0d      	ldr	r2, [pc, #52]	@ (800551c <pb_check_proto3_default_value+0x238>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10a      	bne.n	8005500 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 80054f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e009      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e000      	b.n	8005514 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3748      	adds	r7, #72	@ 0x48
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	08007613 	.word	0x08007613

08005520 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8005532:	2301      	movs	r3, #1
 8005534:	e061      	b.n	80055fa <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fab9 	bl	8005ab0 <pb_encode_tag_for_field>
 800553e:	4603      	mov	r3, r0
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <encode_basic_field+0x2e>
        return false;
 800554a:	2300      	movs	r3, #0
 800554c:	e055      	b.n	80055fa <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	7d9b      	ldrb	r3, [r3, #22]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	2b0b      	cmp	r3, #11
 8005558:	d844      	bhi.n	80055e4 <encode_basic_field+0xc4>
 800555a:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <encode_basic_field+0x40>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005591 	.word	0x08005591
 8005564:	0800559d 	.word	0x0800559d
 8005568:	0800559d 	.word	0x0800559d
 800556c:	0800559d 	.word	0x0800559d
 8005570:	080055a9 	.word	0x080055a9
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055b5 	.word	0x080055b5
 800557c:	080055c1 	.word	0x080055c1
 8005580:	080055cd 	.word	0x080055cd
 8005584:	080055cd 	.word	0x080055cd
 8005588:	080055e5 	.word	0x080055e5
 800558c:	080055d9 	.word	0x080055d9
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fb8a 	bl	8005cac <pb_enc_bool>
 8005598:	4603      	mov	r3, r0
 800559a:	e02e      	b.n	80055fa <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fb9e 	bl	8005ce0 <pb_enc_varint>
 80055a4:	4603      	mov	r3, r0
 80055a6:	e028      	b.n	80055fa <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fc5a 	bl	8005e64 <pb_enc_fixed>
 80055b0:	4603      	mov	r3, r0
 80055b2:	e022      	b.n	80055fa <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc82 	bl	8005ec0 <pb_enc_bytes>
 80055bc:	4603      	mov	r3, r0
 80055be:	e01c      	b.n	80055fa <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fcba 	bl	8005f3c <pb_enc_string>
 80055c8:	4603      	mov	r3, r0
 80055ca:	e016      	b.n	80055fa <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fd12 	bl	8005ff8 <pb_enc_submessage>
 80055d4:	4603      	mov	r3, r0
 80055d6:	e010      	b.n	80055fa <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fd52 	bl	8006084 <pb_enc_fixed_length_bytes>
 80055e0:	4603      	mov	r3, r0
 80055e2:	e00a      	b.n	80055fa <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <encode_basic_field+0xd2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	e000      	b.n	80055f4 <encode_basic_field+0xd4>
 80055f2:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <encode_basic_field+0xe4>)
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6113      	str	r3, [r2, #16]
 80055f8:	2300      	movs	r3, #0
    }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	08008bd8 	.word	0x08008bd8

08005608 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d018      	beq.n	800564e <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	2000      	movs	r0, #0
 8005628:	4798      	blx	r3
 800562a:	4603      	mov	r3, r0
 800562c:	f083 0301 	eor.w	r3, r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <encode_callback_field+0x3c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	e000      	b.n	8005646 <encode_callback_field+0x3e>
 8005644:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <encode_callback_field+0x50>)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6113      	str	r3, [r2, #16]
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <encode_callback_field+0x48>
    }
    return true;
 800564e:	2301      	movs	r3, #1
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	08008bec 	.word	0x08008bec

0800565c <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	7d9b      	ldrb	r3, [r3, #22]
 800566a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800566e:	2b30      	cmp	r3, #48	@ 0x30
 8005670:	d108      	bne.n	8005684 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	881a      	ldrh	r2, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	8a1b      	ldrh	r3, [r3, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d026      	beq.n	80056ce <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005680:	2301      	movs	r3, #1
 8005682:	e059      	b.n	8005738 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	7d9b      	ldrb	r3, [r3, #22]
 8005688:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800568c:	2b10      	cmp	r3, #16
 800568e:	d11e      	bne.n	80056ce <encode_field+0x72>
    {
        if (field->pSize)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fcaf 	bl	8005000 <safe_read_bool>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f083 0301 	eor.w	r3, r3, #1
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00f      	beq.n	80056ce <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e042      	b.n	8005738 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	7d9b      	ldrb	r3, [r3, #22]
 80056b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 80056be:	6838      	ldr	r0, [r7, #0]
 80056c0:	f7ff fe10 	bl	80052e4 <pb_check_proto3_default_value>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <encode_field+0x72>
                return true;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e034      	b.n	8005738 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d113      	bne.n	80056fe <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	7d9b      	ldrb	r3, [r3, #22]
 80056da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <encode_field+0x94>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	e000      	b.n	80056f2 <encode_field+0x96>
 80056f0:	4b13      	ldr	r3, [pc, #76]	@ (8005740 <encode_field+0xe4>)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6113      	str	r3, [r2, #16]
 80056f6:	2300      	movs	r3, #0
 80056f8:	e01e      	b.n	8005738 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e01c      	b.n	8005738 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	7d9b      	ldrb	r3, [r3, #22]
 8005702:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005706:	2b40      	cmp	r3, #64	@ 0x40
 8005708:	d105      	bne.n	8005716 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff ff7b 	bl	8005608 <encode_callback_field>
 8005712:	4603      	mov	r3, r0
 8005714:	e010      	b.n	8005738 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	7d9b      	ldrb	r3, [r3, #22]
 800571a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800571e:	2b20      	cmp	r3, #32
 8005720:	d105      	bne.n	800572e <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fc89 	bl	800503c <encode_array>
 800572a:	4603      	mov	r3, r0
 800572c:	e004      	b.n	8005738 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fef5 	bl	8005520 <encode_basic_field>
 8005736:	4603      	mov	r3, r0
    }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	08008bfc 	.word	0x08008bfc

08005744 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	@ 0x30
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f001 ff4a 	bl	80075ee <pb_field_iter_begin_extension_const>
 800575a:	4603      	mov	r3, r0
 800575c:	f083 0301 	eor.w	r3, r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <default_extension_encoder+0x30>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	e000      	b.n	8005776 <default_extension_encoder+0x32>
 8005774:	4b07      	ldr	r3, [pc, #28]	@ (8005794 <default_extension_encoder+0x50>)
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6113      	str	r3, [r2, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	e006      	b.n	800578c <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ff69 	bl	800565c <encode_field>
 800578a:	4603      	mov	r3, r0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3730      	adds	r7, #48	@ 0x30
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	08008c14 	.word	0x08008c14

08005798 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]

    while (extension)
 80057aa:	e01e      	b.n	80057ea <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68f9      	ldr	r1, [r7, #12]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	72fb      	strb	r3, [r7, #11]
 80057c6:	e005      	b.n	80057d4 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ffba 	bl	8005744 <default_extension_encoder>
 80057d0:	4603      	mov	r3, r0
 80057d2:	72fb      	strb	r3, [r7, #11]

        if (!status)
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	f083 0301 	eor.w	r3, r3, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <encode_extension_field+0x4c>
            return false;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e006      	b.n	80057f2 <encode_extension_field+0x5a>
        
        extension = extension->next;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
    while (extension)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1dd      	bne.n	80057ac <encode_extension_field+0x14>
    }
    
    return true;
 80057f0:	2301      	movs	r3, #1
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b08e      	sub	sp, #56	@ 0x38
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8005806:	f107 0310 	add.w	r3, r7, #16
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fed9 	bl	80075c6 <pb_field_iter_begin_const>
 8005814:	4603      	mov	r3, r0
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <pb_encode+0x2a>
        return true; /* Empty message type */
 8005820:	2301      	movs	r3, #1
 8005822:	e02a      	b.n	800587a <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8005824:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	2b0a      	cmp	r3, #10
 800582e:	d10d      	bne.n	800584c <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	4619      	mov	r1, r3
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff ffae 	bl	8005798 <encode_extension_field>
 800583c:	4603      	mov	r3, r0
 800583e:	f083 0301 	eor.w	r3, r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <pb_encode+0x6e>
                return false;
 8005848:	2300      	movs	r3, #0
 800584a:	e016      	b.n	800587a <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800584c:	f107 0310 	add.w	r3, r7, #16
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff ff02 	bl	800565c <encode_field>
 8005858:	4603      	mov	r3, r0
 800585a:	f083 0301 	eor.w	r3, r3, #1
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <pb_encode+0x6e>
                return false;
 8005864:	2300      	movs	r3, #0
 8005866:	e008      	b.n	800587a <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fdff 	bl	8007470 <pb_field_iter_next>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1d5      	bne.n	8005824 <pb_encode+0x2a>
    
    return true;
 8005878:	2301      	movs	r3, #1
}
 800587a:	4618      	mov	r0, r3
 800587c:	3738      	adds	r7, #56	@ 0x38
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b088      	sub	sp, #32
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800589a:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 80058a2:	e013      	b.n	80058cc <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 80058a4:	7efb      	ldrb	r3, [r7, #27]
 80058a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058aa:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	61fa      	str	r2, [r7, #28]
 80058b2:	3320      	adds	r3, #32
 80058b4:	443b      	add	r3, r7
 80058b6:	7efa      	ldrb	r2, [r7, #27]
 80058b8:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c4:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d805      	bhi.n	80058de <pb_encode_varint_32+0x5c>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e5      	bne.n	80058a4 <pb_encode_varint_32+0x22>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e2      	bne.n	80058a4 <pb_encode_varint_32+0x22>
    }

    if (high)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d024      	beq.n	800592e <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	7efb      	ldrb	r3, [r7, #27]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	08db      	lsrs	r3, r3, #3
 80058fc:	607b      	str	r3, [r7, #4]

        while (high)
 80058fe:	e013      	b.n	8005928 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8005900:	7efb      	ldrb	r3, [r7, #27]
 8005902:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005906:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	61fa      	str	r2, [r7, #28]
 800590e:	3320      	adds	r3, #32
 8005910:	443b      	add	r3, r7
 8005912:	7efa      	ldrb	r2, [r7, #27]
 8005914:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005920:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	09db      	lsrs	r3, r3, #7
 8005926:	607b      	str	r3, [r7, #4]
        while (high)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e8      	bne.n	8005900 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	61fa      	str	r2, [r7, #28]
 8005934:	3320      	adds	r3, #32
 8005936:	443b      	add	r3, r7
 8005938:	7efa      	ldrb	r2, [r7, #27]
 800593a:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800593e:	f107 0310 	add.w	r3, r7, #16
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	4619      	mov	r1, r3
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff fb0a 	bl	8004f60 <pb_write>
 800594c:	4603      	mov	r3, r0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005956:	b590      	push	{r4, r7, lr}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8005962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005966:	2a80      	cmp	r2, #128	@ 0x80
 8005968:	f173 0300 	sbcs.w	r3, r3, #0
 800596c:	d20a      	bcs.n	8005984 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800596e:	783b      	ldrb	r3, [r7, #0]
 8005970:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8005972:	f107 0317 	add.w	r3, r7, #23
 8005976:	2201      	movs	r2, #1
 8005978:	4619      	mov	r1, r3
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff faf0 	bl	8004f60 <pb_write>
 8005980:	4603      	mov	r3, r0
 8005982:	e00f      	b.n	80059a4 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8005984:	683c      	ldr	r4, [r7, #0]
 8005986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	000a      	movs	r2, r1
 8005994:	2300      	movs	r3, #0
 8005996:	4613      	mov	r3, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4621      	mov	r1, r4
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff70 	bl	8005882 <pb_encode_varint_32>
 80059a2:	4603      	mov	r3, r0
#endif
    }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 80059ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b0:	b08a      	sub	sp, #40	@ 0x28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6178      	str	r0, [r7, #20]
 80059b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059be:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80059c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 80059c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da15      	bge.n	80059fa <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80059ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d6:	ea00 0402 	and.w	r4, r0, r2
 80059da:	ea01 0503 	and.w	r5, r1, r3
 80059de:	1923      	adds	r3, r4, r4
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	eb45 0305 	adc.w	r3, r5, r5
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ec:	ea6f 0a02 	mvn.w	sl, r2
 80059f0:	ea6f 0b03 	mvn.w	fp, r3
 80059f4:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80059f8:	e007      	b.n	8005a0a <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80059fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059fe:	eb12 0802 	adds.w	r8, r2, r2
 8005a02:	eb43 0903 	adc.w	r9, r3, r3
 8005a06:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8005a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a0e:	6978      	ldr	r0, [r7, #20]
 8005a10:	f7ff ffa1 	bl	8005956 <pb_encode_varint>
 8005a14:	4603      	mov	r3, r0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3728      	adds	r7, #40	@ 0x28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a20 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fa96 	bl	8004f60 <pb_write>
 8005a34:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8005a48:	2208      	movs	r2, #8
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fa87 	bl	8004f60 <pb_write>
 8005a52:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a60:	b088      	sub	sp, #32
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6178      	str	r0, [r7, #20]
 8005a66:	460b      	mov	r3, r1
 8005a68:	60fa      	str	r2, [r7, #12]
 8005a6a:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	469a      	mov	sl, r3
 8005a72:	4693      	mov	fp, r2
 8005a74:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8005a78:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4698      	mov	r8, r3
 8005a82:	4691      	mov	r9, r2
 8005a84:	ea44 0308 	orr.w	r3, r4, r8
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	ea45 0309 	orr.w	r3, r5, r9
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a94:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8005a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a9c:	6978      	ldr	r0, [r7, #20]
 8005a9e:	f7ff ff5a 	bl	8005956 <pb_encode_varint>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005ab0 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	7d9b      	ldrb	r3, [r3, #22]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	2b0b      	cmp	r3, #11
 8005ac4:	d826      	bhi.n	8005b14 <pb_encode_tag_for_field+0x64>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <pb_encode_tag_for_field+0x1c>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005afd 	.word	0x08005afd
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b03 	.word	0x08005b03
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b0f 	.word	0x08005b0f
 8005ae8:	08005b0f 	.word	0x08005b0f
 8005aec:	08005b0f 	.word	0x08005b0f
 8005af0:	08005b0f 	.word	0x08005b0f
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b0f 	.word	0x08005b0f
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
            break;
 8005b00:	e014      	b.n	8005b2c <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 8005b02:	2305      	movs	r3, #5
 8005b04:	73fb      	strb	r3, [r7, #15]
            break;
 8005b06:	e011      	b.n	8005b2c <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
            break;
 8005b0c:	e00e      	b.n	8005b2c <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	73fb      	strb	r3, [r7, #15]
            break;
 8005b12:	e00b      	b.n	8005b2c <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <pb_encode_tag_for_field+0x72>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	e000      	b.n	8005b24 <pb_encode_tag_for_field+0x74>
 8005b22:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <pb_encode_tag_for_field+0x98>)
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6113      	str	r3, [r2, #16]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e008      	b.n	8005b3e <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	8a1b      	ldrh	r3, [r3, #16]
 8005b30:	461a      	mov	r2, r3
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ff90 	bl	8005a5c <pb_encode_tag>
 8005b3c:	4603      	mov	r3, r0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08008bd8 	.word	0x08008bd8

08005b4c <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8005b4c:	b5b0      	push	{r4, r5, r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	4615      	mov	r5, r2
 8005b60:	4622      	mov	r2, r4
 8005b62:	462b      	mov	r3, r5
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fef6 	bl	8005956 <pb_encode_varint>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f083 0301 	eor.w	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <pb_encode_string+0x2e>
        return false;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e005      	b.n	8005b86 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff f9ee 	bl	8004f60 <pb_write>
 8005b84:	4603      	mov	r3, r0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b90 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b08c      	sub	sp, #48	@ 0x30
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fe20 	bl	80057fa <pb_encode>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e065      	b.n	8005c9c <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	461c      	mov	r4, r3
 8005bda:	4615      	mov	r5, r2
 8005bdc:	4622      	mov	r2, r4
 8005bde:	462b      	mov	r3, r5
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff feb8 	bl	8005956 <pb_encode_varint>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f083 0301 	eor.w	r3, r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <pb_encode_submessage+0x66>
        return false;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e052      	b.n	8005c9c <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c00:	2100      	movs	r1, #0
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff f9ac 	bl	8004f60 <pb_write>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	e047      	b.n	8005c9c <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d90b      	bls.n	8005c34 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <pb_encode_submessage+0x9a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	e000      	b.n	8005c2c <pb_encode_submessage+0x9c>
 8005c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca4 <pb_encode_submessage+0x114>)
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	6113      	str	r3, [r2, #16]
 8005c30:	2300      	movs	r3, #0
 8005c32:	e033      	b.n	8005c9c <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8005c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c42:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8005c4c:	f107 0314 	add.w	r3, r7, #20
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fdd0 	bl	80057fa <pb_encode>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8005c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d00b      	beq.n	8005c98 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <pb_encode_submessage+0xfe>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	e000      	b.n	8005c90 <pb_encode_submessage+0x100>
 8005c8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <pb_encode_submessage+0x118>)
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	6113      	str	r3, [r2, #16]
 8005c94:	2300      	movs	r3, #0
 8005c96:	e001      	b.n	8005c9c <pb_encode_submessage+0x10c>
    
    return status;
 8005c98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3730      	adds	r7, #48	@ 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca4:	08008ba0 	.word	0x08008ba0
 8005ca8:	08008c28 	.word	0x08008c28

08005cac <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005cac:	b5b0      	push	{r4, r5, r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff f9a0 	bl	8005000 <safe_read_bool>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	461c      	mov	r4, r3
 8005cca:	4615      	mov	r5, r2
 8005ccc:	4622      	mov	r2, r4
 8005cce:	462b      	mov	r3, r5
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fe40 	bl	8005956 <pb_encode_varint>
 8005cd6:	4603      	mov	r3, r0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bdb0      	pop	{r4, r5, r7, pc}

08005ce0 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce4:	b08c      	sub	sp, #48	@ 0x30
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	61f8      	str	r0, [r7, #28]
 8005cea:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	7d9b      	ldrb	r3, [r3, #22]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d152      	bne.n	8005d9e <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	8a5b      	ldrh	r3, [r3, #18]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d10b      	bne.n	8005d24 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	617a      	str	r2, [r7, #20]
 8005d1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d1e:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005d22:	e035      	b.n	8005d90 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	8a5b      	ldrh	r3, [r3, #18]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d10b      	bne.n	8005d44 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	60fa      	str	r2, [r7, #12]
 8005d3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005d3e:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005d42:	e025      	b.n	8005d90 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	8a5b      	ldrh	r3, [r3, #18]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d10a      	bne.n	8005d62 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2200      	movs	r2, #0
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d5c:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005d60:	e016      	b.n	8005d90 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	8a5b      	ldrh	r3, [r3, #18]
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d106      	bne.n	8005d78 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005d76:	e00b      	b.n	8005d90 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <pb_enc_varint+0xa6>
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	e000      	b.n	8005d88 <pb_enc_varint+0xa8>
 8005d86:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <pb_enc_varint+0x180>)
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	6113      	str	r3, [r2, #16]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e061      	b.n	8005e54 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8005d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d94:	69f8      	ldr	r0, [r7, #28]
 8005d96:	f7ff fdde 	bl	8005956 <pb_encode_varint>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	e05a      	b.n	8005e54 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	8a5b      	ldrh	r3, [r3, #18]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d10a      	bne.n	8005dc8 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f993 3000 	ldrsb.w	r3, [r3]
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	17da      	asrs	r2, r3, #31
 8005dbe:	469a      	mov	sl, r3
 8005dc0:	4693      	mov	fp, r2
 8005dc2:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005dc6:	e032      	b.n	8005e2e <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	8a5b      	ldrh	r3, [r3, #18]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d10a      	bne.n	8005de6 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	17da      	asrs	r2, r3, #31
 8005ddc:	4698      	mov	r8, r3
 8005dde:	4691      	mov	r9, r2
 8005de0:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8005de4:	e023      	b.n	8005e2e <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	8a5b      	ldrh	r3, [r3, #18]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d108      	bne.n	8005e00 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	17da      	asrs	r2, r3, #31
 8005df6:	461c      	mov	r4, r3
 8005df8:	4615      	mov	r5, r2
 8005dfa:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8005dfe:	e016      	b.n	8005e2e <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	8a5b      	ldrh	r3, [r3, #18]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d106      	bne.n	8005e16 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005e14:	e00b      	b.n	8005e2e <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <pb_enc_varint+0x144>
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	e000      	b.n	8005e26 <pb_enc_varint+0x146>
 8005e24:	4b0e      	ldr	r3, [pc, #56]	@ (8005e60 <pb_enc_varint+0x180>)
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	6113      	str	r3, [r2, #16]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e012      	b.n	8005e54 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	7d9b      	ldrb	r3, [r3, #22]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d106      	bne.n	8005e48 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8005e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e3e:	69f8      	ldr	r0, [r7, #28]
 8005e40:	f7ff fdb4 	bl	80059ac <pb_encode_svarint>
 8005e44:	4603      	mov	r3, r0
 8005e46:	e005      	b.n	8005e54 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8005e48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e4c:	69f8      	ldr	r0, [r7, #28]
 8005e4e:	f7ff fd82 	bl	8005956 <pb_encode_varint>
 8005e52:	4603      	mov	r3, r0

    }
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3730      	adds	r7, #48	@ 0x30
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e5e:	bf00      	nop
 8005e60:	08008c3c 	.word	0x08008c3c

08005e64 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	8a5b      	ldrh	r3, [r3, #18]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d107      	bne.n	8005e86 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fdcf 	bl	8005a20 <pb_encode_fixed32>
 8005e82:	4603      	mov	r3, r0
 8005e84:	e016      	b.n	8005eb4 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	8a5b      	ldrh	r3, [r3, #18]
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d107      	bne.n	8005e9e <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fdd2 	bl	8005a3e <pb_encode_fixed64>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	e00a      	b.n	8005eb4 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <pb_enc_fixed+0x48>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	e000      	b.n	8005eae <pb_enc_fixed+0x4a>
 8005eac:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <pb_enc_fixed+0x58>)
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6113      	str	r3, [r2, #16]
 8005eb2:	2300      	movs	r3, #0
    }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	08008c3c 	.word	0x08008c3c

08005ec0 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8005eda:	2200      	movs	r2, #0
 8005edc:	2100      	movs	r1, #0
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe34 	bl	8005b4c <pb_encode_string>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	e022      	b.n	8005f2e <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	7d9b      	ldrb	r3, [r3, #22]
 8005eec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d113      	bne.n	8005f1c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	8a5b      	ldrh	r3, [r3, #18]
 8005efe:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d90b      	bls.n	8005f1c <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <pb_enc_bytes+0x52>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	e000      	b.n	8005f14 <pb_enc_bytes+0x54>
 8005f12:	4b09      	ldr	r3, [pc, #36]	@ (8005f38 <pb_enc_bytes+0x78>)
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6113      	str	r3, [r2, #16]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e008      	b.n	8005f2e <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1c99      	adds	r1, r3, #2
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fe10 	bl	8005b4c <pb_encode_string>
 8005f2c:	4603      	mov	r3, r0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	08008c50 	.word	0x08008c50

08005f3c <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	8a5b      	ldrh	r3, [r3, #18]
 8005f4e:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	7d9b      	ldrb	r3, [r3, #22]
 8005f5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f5e:	2b80      	cmp	r3, #128	@ 0x80
 8005f60:	d103      	bne.n	8005f6a <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e011      	b.n	8005f8e <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <pb_enc_string+0x42>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	e000      	b.n	8005f80 <pb_enc_string+0x44>
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ff0 <pb_enc_string+0xb4>)
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6113      	str	r3, [r2, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	e02f      	b.n	8005fe8 <pb_enc_string+0xac>

        max_size -= 1;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e020      	b.n	8005fdc <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8005f9e:	e005      	b.n	8005fac <pb_enc_string+0x70>
        {
            size++;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]
            p++;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d203      	bcs.n	8005fbc <pb_enc_string+0x80>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f1      	bne.n	8005fa0 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <pb_enc_string+0x96>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	e000      	b.n	8005fd4 <pb_enc_string+0x98>
 8005fd2:	4b08      	ldr	r3, [pc, #32]	@ (8005ff4 <pb_enc_string+0xb8>)
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6113      	str	r3, [r2, #16]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e005      	b.n	8005fe8 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fdb3 	bl	8005b4c <pb_encode_string>
 8005fe6:	4603      	mov	r3, r0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	08008c64 	.word	0x08008c64
 8005ff4:	08008c78 	.word	0x08008c78

08005ff8 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <pb_enc_submessage+0x20>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	e000      	b.n	800601a <pb_enc_submessage+0x22>
 8006018:	4b19      	ldr	r3, [pc, #100]	@ (8006080 <pb_enc_submessage+0x88>)
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6113      	str	r3, [r2, #16]
 800601e:	2300      	movs	r3, #0
 8006020:	e029      	b.n	8006076 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	7d9b      	ldrb	r3, [r3, #22]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	2b09      	cmp	r3, #9
 800602c:	d11a      	bne.n	8006064 <pb_enc_submessage+0x6c>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d016      	beq.n	8006064 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	3b08      	subs	r3, #8
 800603c:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	3204      	adds	r2, #4
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
 8006054:	4603      	mov	r3, r0
 8006056:	f083 0301 	eor.w	r3, r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <pb_enc_submessage+0x6c>
                return false;
 8006060:	2300      	movs	r3, #0
 8006062:	e008      	b.n	8006076 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	461a      	mov	r2, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fd8e 	bl	8005b90 <pb_encode_submessage>
 8006074:	4603      	mov	r3, r0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	08008c8c 	.word	0x08008c8c

08006084 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	69d9      	ldr	r1, [r3, #28]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	8a5b      	ldrh	r3, [r3, #18]
 8006096:	461a      	mov	r2, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fd57 	bl	8005b4c <pb_encode_string>
 800609e:	4603      	mov	r3, r0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <TF_ClearMsg>:
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 80060b0:	2218      	movs	r2, #24
 80060b2:	2100      	movs	r1, #0
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fddf 	bl	8007c78 <memset>
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060d2:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <TF_ClaimTx+0x20>
            TF_Error("TF already locked for tx!");
 80060da:	4808      	ldr	r0, [pc, #32]	@ (80060fc <TF_ClaimTx+0x38>)
 80060dc:	f001 fcca 	bl	8007a74 <puts>
            return false;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e006      	b.n	80060f2 <TF_ClaimTx+0x2e>
        }

        tf->soft_lock = true;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
        return true;
 80060f0:	2301      	movs	r3, #1
    }
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	08008ca8 	.word	0x08008ca8

08006100 <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800610e:	2200      	movs	r2, #0
 8006110:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
 8006124:	2300      	movs	r3, #0
 8006126:	4618      	mov	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	460a      	mov	r2, r1
 800613a:	80fb      	strh	r3, [r7, #6]
 800613c:	4613      	mov	r3, r2
 800613e:	717b      	strb	r3, [r7, #5]
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29a      	uxth	r2, r3
 8006146:	88f9      	ldrh	r1, [r7, #6]
 8006148:	797b      	ldrb	r3, [r7, #5]
 800614a:	404b      	eors	r3, r1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	4905      	ldr	r1, [pc, #20]	@ (8006164 <TF_CksumAdd+0x34>)
 8006150:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006154:	4053      	eors	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	08009104 	.word	0x08009104

08006168 <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	80fb      	strh	r3, [r7, #6]
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 8006192:	480f      	ldr	r0, [pc, #60]	@ (80061d0 <TF_InitStatic+0x50>)
 8006194:	f001 fc6e 	bl	8007a74 <puts>
        return false;
 8006198:	2300      	movs	r3, #0
 800619a:	e015      	b.n	80061c8 <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 80061a8:	f242 2260 	movw	r2, #8800	@ 0x2260
 80061ac:	2100      	movs	r1, #0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fd62 	bl	8007c78 <memset>

    tf->usertag = usertag;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	721a      	strb	r2, [r3, #8]
    return true;
 80061c6:	2301      	movs	r3, #1
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	08008cc8 	.word	0x08008cc8

080061d4 <renew_id_listener>:

//region Listeners

/** Reset ID listener's timeout to the original value */
static inline void _TF_FN renew_id_listener(struct TF_IdListener_ *lst)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
    lst->timeout = lst->timeout_max;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	895a      	ldrh	r2, [r3, #10]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	811a      	strh	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <cleanup_id_listener>:

/** Notify callback about ID listener's demise & let it free any resources in userdata */
static void _TF_FN cleanup_id_listener(TinyFrame *tf, TF_COUNT i, struct TF_IdListener_ *lst)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	@ 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	460b      	mov	r3, r1
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	72fb      	strb	r3, [r7, #11]
    TF_Msg msg;
    if (lst->fn == NULL) return;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02f      	beq.n	8006266 <cleanup_id_listener+0x76>

    // Make user clean up their data - only if not NULL
    if (lst->userdata != NULL || lst->userdata2 != NULL) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <cleanup_id_listener+0x26>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <cleanup_id_listener+0x44>
        msg.userdata = lst->userdata;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	623b      	str	r3, [r7, #32]
        msg.userdata2 = lst->userdata2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
        msg.data = NULL; // this is a signal that the listener should clean up
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
        lst->fn(tf, &msg); // return value is ignored here - use TF_STAY or TF_CLOSE
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f107 0210 	add.w	r2, r7, #16
 800622e:	4611      	mov	r1, r2
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	4798      	blx	r3
    }

    lst->fn = NULL; // Discard listener
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]

    if (i == tf->count_id_lst - 1) {
 800623a:	7afa      	ldrb	r2, [r7, #11]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006242:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006246:	3b01      	subs	r3, #1
 8006248:	429a      	cmp	r2, r3
 800624a:	d10d      	bne.n	8006268 <cleanup_id_listener+0x78>
        tf->count_id_lst--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006252:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006256:	3b01      	subs	r3, #1
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006260:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 8006264:	e000      	b.n	8006268 <cleanup_id_listener+0x78>
    if (lst->fn == NULL) return;
 8006266:	bf00      	nop
    }
}
 8006268:	3728      	adds	r7, #40	@ 0x28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <cleanup_type_listener>:

/** Clean up Type listener */
static inline void _TF_FN cleanup_type_listener(TinyFrame *tf, TF_COUNT i, struct TF_TypeListener_ *lst)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	460b      	mov	r3, r1
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
    if (i == tf->count_type_lst - 1) {
 8006282:	7afa      	ldrb	r2, [r7, #11]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800628a:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800628e:	3b01      	subs	r3, #1
 8006290:	429a      	cmp	r2, r3
 8006292:	d10b      	bne.n	80062ac <cleanup_type_listener+0x3e>
        tf->count_type_lst--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800629a:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800629e:	3b01      	subs	r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062a8:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    }
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <cleanup_generic_listener>:

/** Clean up Generic listener */
static inline void _TF_FN cleanup_generic_listener(TinyFrame *tf, TF_COUNT i, struct TF_GenericListener_ *lst)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	460b      	mov	r3, r1
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
    if (i == tf->count_generic_lst - 1) {
 80062cc:	7afa      	ldrb	r2, [r7, #11]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062d4:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80062d8:	3b01      	subs	r3, #1
 80062da:	429a      	cmp	r2, r3
 80062dc:	d10b      	bne.n	80062f6 <cleanup_generic_listener+0x3e>
        tf->count_generic_lst--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062e4:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062f2:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    }
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <TF_AddIdListener>:

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_TICKS timeout)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	807b      	strh	r3, [r7, #2]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]
 8006316:	e039      	b.n	800638c <TF_AddIdListener+0x88>
        lst = &tf->id_listeners[i];
 8006318:	7dfa      	ldrb	r2, [r7, #23]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006326:	3330      	adds	r3, #48	@ 0x30
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d127      	bne.n	8006386 <TF_AddIdListener+0x82>
            lst->fn = cb;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	605a      	str	r2, [r3, #4]
            lst->id = msg->frame_id;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	601a      	str	r2, [r3, #0]
            lst->userdata = msg->userdata;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	60da      	str	r2, [r3, #12]
            lst->userdata2 = msg->userdata2;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	611a      	str	r2, [r3, #16]
            lst->timeout_max = lst->timeout = timeout;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	887a      	ldrh	r2, [r7, #2]
 8006358:	811a      	strh	r2, [r3, #8]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	891a      	ldrh	r2, [r3, #8]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	815a      	strh	r2, [r3, #10]
            if (i >= tf->count_id_lst) {
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006368:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800636c:	7dfa      	ldrb	r2, [r7, #23]
 800636e:	429a      	cmp	r2, r3
 8006370:	d307      	bcc.n	8006382 <TF_AddIdListener+0x7e>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	3301      	adds	r3, #1
 8006376:	b2da      	uxtb	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800637e:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
            }
            return true;
 8006382:	2301      	movs	r3, #1
 8006384:	e009      	b.n	800639a <TF_AddIdListener+0x96>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	3301      	adds	r3, #1
 800638a:	75fb      	strb	r3, [r7, #23]
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	2b09      	cmp	r3, #9
 8006390:	d9c2      	bls.n	8006318 <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 8006392:	4804      	ldr	r0, [pc, #16]	@ (80063a4 <TF_AddIdListener+0xa0>)
 8006394:	f001 fb6e 	bl	8007a74 <puts>
    return false;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	08008d1c 	.word	0x08008d1c

080063a8 <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
 80063b6:	e022      	b.n	80063fe <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d114      	bne.n	80063f8 <TF_AddGenericListener+0x50>
            lst->fn = cb;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063da:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80063de:	7bfa      	ldrb	r2, [r7, #15]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d307      	bcc.n	80063f4 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	3301      	adds	r3, #1
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063f0:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e009      	b.n	800640c <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	3301      	adds	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d9d9      	bls.n	80063b8 <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 8006404:	4803      	ldr	r0, [pc, #12]	@ (8006414 <TF_AddGenericListener+0x6c>)
 8006406:	f001 fb35 	bl	8007a74 <puts>
    return false;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	08008d60 	.word	0x08008d60

08006418 <TF_HandleReceivedMessage>:
    return false;
}

/** Handle a message that was just collected & verified by the parser */
static void _TF_FN TF_HandleReceivedMessage(TinyFrame *tf)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08e      	sub	sp, #56	@ 0x38
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
    struct TF_GenericListener_ *glst;
    TF_Result res;

    // Prepare message object
    TF_Msg msg;
    TF_ClearMsg(&msg);
 8006420:	f107 030c 	add.w	r3, r7, #12
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fe3f 	bl	80060a8 <TF_ClearMsg>
    msg.frame_id = tf->id;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	60fb      	str	r3, [r7, #12]
    msg.is_response = false;
 8006430:	2300      	movs	r3, #0
 8006432:	743b      	strb	r3, [r7, #16]
    msg.type = tf->type;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800643a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800643e:	827b      	strh	r3, [r7, #18]
    msg.data = tf->data;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	331a      	adds	r3, #26
 8006444:	617b      	str	r3, [r7, #20]
    msg.len = tf->len;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8b1b      	ldrh	r3, [r3, #24]
 800644a:	833b      	strh	r3, [r7, #24]

    // The loop upper bounds are the highest currently used slot index
    // (or close to it, depending on the order of listener removals).

    // ID listeners first
    for (i = 0; i < tf->count_id_lst; i++) {
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006452:	e04e      	b.n	80064f2 <TF_HandleReceivedMessage+0xda>
        ilst = &tf->id_listeners[i];
 8006454:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006464:	3330      	adds	r3, #48	@ 0x30
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24

        if (ilst->fn && ilst->id == msg.frame_id) {
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d039      	beq.n	80064e8 <TF_HandleReceivedMessage+0xd0>
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	429a      	cmp	r2, r3
 800647c:	d134      	bne.n	80064e8 <TF_HandleReceivedMessage+0xd0>
            msg.userdata = ilst->userdata; // pass userdata pointer to the callback
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	61fb      	str	r3, [r7, #28]
            msg.userdata2 = ilst->userdata2;
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	623b      	str	r3, [r7, #32]
            res = ilst->fn(tf, &msg);
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f107 020c 	add.w	r2, r7, #12
 8006492:	4611      	mov	r1, r2
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
 8006498:	4603      	mov	r3, r0
 800649a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            ilst->userdata = msg.userdata; // put it back (may have changed the pointer or set to NULL)
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	60da      	str	r2, [r3, #12]
            ilst->userdata2 = msg.userdata2; // put it back (may have changed the pointer or set to NULL)
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	611a      	str	r2, [r3, #16]

            if (res != TF_NEXT) {
 80064aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01a      	beq.n	80064e8 <TF_HandleReceivedMessage+0xd0>
                // if it's TF_CLOSE, we assume user already cleaned up userdata
                if (res == TF_RENEW) {
 80064b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <TF_HandleReceivedMessage+0xaa>
                    renew_id_listener(ilst);
 80064ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064bc:	f7ff fe8a 	bl	80061d4 <renew_id_listener>
                    // Set userdata to NULL to avoid calling user for cleanup
                    ilst->userdata = NULL;
                    ilst->userdata2 = NULL;
                    cleanup_id_listener(tf, i, ilst);
                }
                return;
 80064c0:	e09f      	b.n	8006602 <TF_HandleReceivedMessage+0x1ea>
                else if (res == TF_CLOSE) {
 80064c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	f040 809b 	bne.w	8006602 <TF_HandleReceivedMessage+0x1ea>
                    ilst->userdata = NULL;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	2200      	movs	r2, #0
 80064d0:	60da      	str	r2, [r3, #12]
                    ilst->userdata2 = NULL;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	2200      	movs	r2, #0
 80064d6:	611a      	str	r2, [r3, #16]
                    cleanup_id_listener(tf, i, ilst);
 80064d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fe85 	bl	80061f0 <cleanup_id_listener>
                return;
 80064e6:	e08c      	b.n	8006602 <TF_HandleReceivedMessage+0x1ea>
    for (i = 0; i < tf->count_id_lst; i++) {
 80064e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064ec:	3301      	adds	r3, #1
 80064ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80064f8:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 80064fc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006500:	429a      	cmp	r2, r3
 8006502:	d3a7      	bcc.n	8006454 <TF_HandleReceivedMessage+0x3c>
            }
        }
    }
    // clean up for the following listeners that don't use userdata (this avoids data from
    // an ID listener that returned TF_NEXT from leaking into Type and Generic listeners)
    msg.userdata = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
    msg.userdata2 = NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]

    // Type listeners
    for (i = 0; i < tf->count_type_lst; i++) {
 800650c:	2300      	movs	r3, #0
 800650e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006512:	e02f      	b.n	8006574 <TF_HandleReceivedMessage+0x15c>
        tlst = &tf->type_listeners[i];
 8006514:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006518:	f203 433f 	addw	r3, r3, #1087	@ 0x43f
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (tlst->fn && tlst->type == msg.type) {
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <TF_HandleReceivedMessage+0x152>
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	8a7b      	ldrh	r3, [r7, #18]
 8006532:	429a      	cmp	r2, r3
 8006534:	d119      	bne.n	800656a <TF_HandleReceivedMessage+0x152>
            res = tlst->fn(tf, &msg);
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f107 020c 	add.w	r2, r7, #12
 800653e:	4611      	mov	r1, r2
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	4603      	mov	r3, r0
 8006546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 800654a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <TF_HandleReceivedMessage+0x152>
                // type listeners don't have userdata.
                // TF_RENEW doesn't make sense here because type listeners don't expire = same as TF_STAY

                if (res == TF_CLOSE) {
 8006552:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006556:	2b03      	cmp	r3, #3
 8006558:	d155      	bne.n	8006606 <TF_HandleReceivedMessage+0x1ee>
                    cleanup_type_listener(tf, i, tlst);
 800655a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800655e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fe83 	bl	800626e <cleanup_type_listener>
                }
                return;
 8006568:	e04d      	b.n	8006606 <TF_HandleReceivedMessage+0x1ee>
    for (i = 0; i < tf->count_type_lst; i++) {
 800656a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800656e:	3301      	adds	r3, #1
 8006570:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800657a:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800657e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006582:	429a      	cmp	r2, r3
 8006584:	d3c6      	bcc.n	8006514 <TF_HandleReceivedMessage+0xfc>
            }
        }
    }

    // Generic listeners
    for (i = 0; i < tf->count_generic_lst; i++) {
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800658c:	e02a      	b.n	80065e4 <TF_HandleReceivedMessage+0x1cc>
        glst = &tf->generic_listeners[i];
 800658e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006592:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (glst->fn) {
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d019      	beq.n	80065da <TF_HandleReceivedMessage+0x1c2>
            res = glst->fn(tf, &msg);
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f107 020c 	add.w	r2, r7, #12
 80065ae:	4611      	mov	r1, r2
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 80065ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <TF_HandleReceivedMessage+0x1c2>

                // note: It's not expected that user will have multiple generic listeners, or
                // ever actually remove them. They're most useful as default callbacks if no other listener
                // handled the message.

                if (res == TF_CLOSE) {
 80065c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d11f      	bne.n	800660a <TF_HandleReceivedMessage+0x1f2>
                    cleanup_generic_listener(tf, i, glst);
 80065ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fe70 	bl	80062b8 <cleanup_generic_listener>
                }
                return;
 80065d8:	e017      	b.n	800660a <TF_HandleReceivedMessage+0x1f2>
    for (i = 0; i < tf->count_generic_lst; i++) {
 80065da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065de:	3301      	adds	r3, #1
 80065e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80065ea:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80065ee:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d3cb      	bcc.n	800658e <TF_HandleReceivedMessage+0x176>
            }
        }
    }

    TF_Error("Unhandled message, type %d", (int)msg.type);
 80065f6:	8a7b      	ldrh	r3, [r7, #18]
 80065f8:	4619      	mov	r1, r3
 80065fa:	4806      	ldr	r0, [pc, #24]	@ (8006614 <TF_HandleReceivedMessage+0x1fc>)
 80065fc:	f001 f9d2 	bl	80079a4 <iprintf>
 8006600:	e004      	b.n	800660c <TF_HandleReceivedMessage+0x1f4>
                return;
 8006602:	bf00      	nop
 8006604:	e002      	b.n	800660c <TF_HandleReceivedMessage+0x1f4>
                return;
 8006606:	bf00      	nop
 8006608:	e000      	b.n	800660c <TF_HandleReceivedMessage+0x1f4>
                return;
 800660a:	bf00      	nop
}
 800660c:	3738      	adds	r7, #56	@ 0x38
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	08008e08 	.word	0x08008e08

08006618 <TF_Accept>:

//region Parser

/** Handle a received byte buffer */
void _TF_FN TF_Accept(TinyFrame *tf, const uint8_t *buffer, uint32_t count)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < count; i++) {
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e00a      	b.n	8006640 <TF_Accept+0x28>
        TF_AcceptChar(tf, buffer[i]);
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4413      	add	r3, r2
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f849 	bl	80066cc <TF_AcceptChar>
    for (i = 0; i < count; i++) {
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3301      	adds	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d3f0      	bcc.n	800662a <TF_Accept+0x12>
    }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <TF_ResetParser>:

/** Reset the parser's internal state. */
void _TF_FN TF_ResetParser(TinyFrame *tf)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
    tf->state = TFState_SOF;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	741a      	strb	r2, [r3, #16]
    // more init will be done by the parser when the first byte is received
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <pars_begin_frame>:

/** SOF was received - prepare for the frame */
static void _TF_FN pars_begin_frame(TinyFrame *tf) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
    // Reset state vars
    CKSUM_RESET(tf->cksum);
 8006674:	f7ff fd54 	bl	8006120 <TF_CksumStart>
 8006678:	4603      	mov	r3, r0
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006682:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#if TF_USE_SOF_BYTE
    CKSUM_ADD(tf->cksum, TF_SOF_BYTE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800668c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006690:	21ab      	movs	r1, #171	@ 0xab
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fd4c 	bl	8006130 <TF_CksumAdd>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#endif

    tf->discard_data = false;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

    // Enter ID state
    tf->state = TFState_ID;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2203      	movs	r2, #3
 80066b6:	741a      	strb	r2, [r3, #16]
    tf->rxi = 0;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <TF_AcceptChar>:

/** Handle a received char - here's the main state machine */
void _TF_FN TF_AcceptChar(TinyFrame *tf, unsigned char c)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
    // Parser timeout - clear
    if (tf->parser_timeout_ticks >= TF_PARSER_TIMEOUT_TICKS) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8a5b      	ldrh	r3, [r3, #18]
 80066dc:	2b09      	cmp	r3, #9
 80066de:	d909      	bls.n	80066f4 <TF_AcceptChar+0x28>
        if (tf->state != TFState_SOF) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7c1b      	ldrb	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <TF_AcceptChar+0x28>
            TF_ResetParser(tf);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff ffb2 	bl	8006652 <TF_ResetParser>
            TF_Error("Parser timeout");
 80066ee:	48b4      	ldr	r0, [pc, #720]	@ (80069c0 <TF_AcceptChar+0x2f4>)
 80066f0:	f001 f9c0 	bl	8007a74 <puts>
        }
    }
    tf->parser_timeout_ticks = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	825a      	strh	r2, [r3, #18]
        pars_begin_frame(tf);
    }
#endif

    //@formatter:off
    switch (tf->state) {
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7c1b      	ldrb	r3, [r3, #16]
 80066fe:	2b06      	cmp	r3, #6
 8006700:	f200 8201 	bhi.w	8006b06 <TF_AcceptChar+0x43a>
 8006704:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <TF_AcceptChar+0x40>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006729 	.word	0x08006729
 8006710:	080067a5 	.word	0x080067a5
 8006714:	080068a9 	.word	0x080068a9
 8006718:	08006739 	.word	0x08006739
 800671c:	0800681b 	.word	0x0800681b
 8006720:	08006999 	.word	0x08006999
 8006724:	08006a43 	.word	0x08006a43
        case TFState_SOF:
            if (c == TF_SOF_BYTE) {
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	2bab      	cmp	r3, #171	@ 0xab
 800672c:	f040 81de 	bne.w	8006aec <TF_AcceptChar+0x420>
                pars_begin_frame(tf);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff9b 	bl	800666c <pars_begin_frame>
            }
            break;
 8006736:	e1d9      	b.n	8006aec <TF_AcceptChar+0x420>

        case TFState_ID:
            CKSUM_ADD(tf->cksum, c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fcf2 	bl	8006130 <TF_CksumAdd>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006756:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->id, TF_ID) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	021a      	lsls	r2, r3, #8
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	615a      	str	r2, [r3, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800676e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006772:	3301      	adds	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800677c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006786:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800678a:	2b04      	cmp	r3, #4
 800678c:	f040 81b0 	bne.w	8006af0 <TF_AcceptChar+0x424>
                // Enter LEN state
                tf->state = TFState_LEN;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679c:	2200      	movs	r2, #0
 800679e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 80067a2:	e1a5      	b.n	8006af0 <TF_AcceptChar+0x424>

        case TFState_LEN:
            CKSUM_ADD(tf->cksum, c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067aa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fcbc 	bl	8006130 <TF_CksumAdd>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->len, TF_LEN) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8b1b      	ldrh	r3, [r3, #24]
 80067ca:	b21b      	sxth	r3, r3
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	b21a      	sxth	r2, r3
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b21b      	sxth	r3, r3
 80067d4:	4313      	orrs	r3, r2
 80067d6:	b21b      	sxth	r3, r3
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	831a      	strh	r2, [r3, #24]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80067e8:	3301      	adds	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006800:	2b02      	cmp	r3, #2
 8006802:	f040 8177 	bne.w	8006af4 <TF_AcceptChar+0x428>
                // Enter TYPE state
                tf->state = TFState_TYPE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2204      	movs	r2, #4
 800680a:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006812:	2200      	movs	r2, #0
 8006814:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006818:	e16c      	b.n	8006af4 <TF_AcceptChar+0x428>

        case TFState_TYPE:
            CKSUM_ADD(tf->cksum, c);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006820:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fc81 	bl	8006130 <TF_CksumAdd>
 800682e:	4603      	mov	r3, r0
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006838:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->type, TF_TYPE) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006842:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006846:	b21b      	sxth	r3, r3
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	b21a      	sxth	r2, r3
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	b21b      	sxth	r3, r3
 8006850:	4313      	orrs	r3, r2
 8006852:	b21b      	sxth	r3, r3
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800685c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006866:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800686a:	3301      	adds	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006874:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800687e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006882:	2b02      	cmp	r3, #2
 8006884:	f040 8138 	bne.w	8006af8 <TF_AcceptChar+0x42c>
                #if TF_CKSUM_TYPE == TF_CKSUM_NONE
                    tf->state = TFState_DATA;
                    tf->rxi = 0;
                #else
                    // enter HEAD_CKSUM state
                    tf->state = TFState_HEAD_CKSUM;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006894:	2200      	movs	r2, #0
 8006896:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 80068a6:	e127      	b.n	8006af8 <TF_AcceptChar+0x42c>

        case TFState_HEAD_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ae:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80068b2:	b21b      	sxth	r3, r3
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	b21a      	sxth	r2, r3
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	4313      	orrs	r3, r2
 80068be:	b21b      	sxth	r3, r3
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c8:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80068d6:	3301      	adds	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e0:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ea:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	f040 8104 	bne.w	8006afc <TF_AcceptChar+0x430>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fc32 	bl	8006168 <TF_CksumEnd>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800690e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->cksum != tf->ref_cksum) {
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006918:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006922:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006926:	429a      	cmp	r2, r3
 8006928:	d006      	beq.n	8006938 <TF_AcceptChar+0x26c>
                    TF_Error("Rx head cksum mismatch");
 800692a:	4826      	ldr	r0, [pc, #152]	@ (80069c4 <TF_AcceptChar+0x2f8>)
 800692c:	f001 f8a2 	bl	8007a74 <puts>
                    TF_ResetParser(tf);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fe8e 	bl	8006652 <TF_ResetParser>
                    break;
 8006936:	e0e6      	b.n	8006b06 <TF_AcceptChar+0x43a>
                }

                if (tf->len == 0) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8b1b      	ldrh	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <TF_AcceptChar+0x282>
                    // if the message has no body, we're done.
                    TF_HandleReceivedMessage(tf);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fd69 	bl	8006418 <TF_HandleReceivedMessage>
                    TF_ResetParser(tf);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fe83 	bl	8006652 <TF_ResetParser>
                    break;
 800694c:	e0db      	b.n	8006b06 <TF_AcceptChar+0x43a>
                }

                // Enter DATA state
                tf->state = TFState_DATA;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2205      	movs	r2, #5
 8006952:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a

                CKSUM_RESET(tf->cksum); // Start collecting the payload
 8006960:	f7ff fbde 	bl	8006120 <TF_CksumStart>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800696e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->len > TF_MAX_PAYLOAD_RX) {
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	8b1b      	ldrh	r3, [r3, #24]
 8006976:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800697a:	f240 80bf 	bls.w	8006afc <TF_AcceptChar+0x430>
                    TF_Error("Rx payload too long: %d", (int)tf->len);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8b1b      	ldrh	r3, [r3, #24]
 8006982:	4619      	mov	r1, r3
 8006984:	4810      	ldr	r0, [pc, #64]	@ (80069c8 <TF_AcceptChar+0x2fc>)
 8006986:	f001 f80d 	bl	80079a4 <iprintf>
                    // ERROR - frame too long. Consume, but do not store.
                    tf->discard_data = true;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006990:	2201      	movs	r2, #1
 8006992:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                }
            }
            break;
 8006996:	e0b1      	b.n	8006afc <TF_AcceptChar+0x430>

        case TFState_DATA:
            if (tf->discard_data) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800699e:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <TF_AcceptChar+0x300>
                tf->rxi++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ac:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80069b0:	3301      	adds	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ba:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80069be:	e027      	b.n	8006a10 <TF_AcceptChar+0x344>
 80069c0:	08008e54 	.word	0x08008e54
 80069c4:	08008e68 	.word	0x08008e68
 80069c8:	08008e84 	.word	0x08008e84
            } else {
                CKSUM_ADD(tf->cksum, c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069d2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fba8 	bl	8006130 <TF_CksumAdd>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ea:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                tf->data[tf->rxi++] = c;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	b291      	uxth	r1, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a02:	f8a2 109a 	strh.w	r1, [r2, #154]	@ 0x9a
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	769a      	strb	r2, [r3, #26]
            }

            if (tf->rxi == tf->len) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a16:	f8b3 209a 	ldrh.w	r2, [r3, #154]	@ 0x9a
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8b1b      	ldrh	r3, [r3, #24]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d16e      	bne.n	8006b00 <TF_AcceptChar+0x434>
                    // All done
                    TF_HandleReceivedMessage(tf);
                    TF_ResetParser(tf);
                #else
                    // Enter DATA_CKSUM state
                    tf->state = TFState_DATA_CKSUM;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2206      	movs	r2, #6
 8006a26:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 8006a40:	e05e      	b.n	8006b00 <TF_AcceptChar+0x434>

        case TFState_DATA_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a48:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	b21a      	sxth	r2, r3
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a62:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006a70:	3301      	adds	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a84:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d13b      	bne.n	8006b04 <TF_AcceptChar+0x438>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a92:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fb66 	bl	8006168 <TF_CksumEnd>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aa6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                if (!tf->discard_data) {
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab0:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8006ab4:	f083 0301 	eor.w	r3, r3, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d012      	beq.n	8006ae4 <TF_AcceptChar+0x418>
                    if (tf->cksum == tf->ref_cksum) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ace:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d103      	bne.n	8006ade <TF_AcceptChar+0x412>
                        TF_HandleReceivedMessage(tf);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fc9e 	bl	8006418 <TF_HandleReceivedMessage>
 8006adc:	e002      	b.n	8006ae4 <TF_AcceptChar+0x418>
                    } else {
                        TF_Error("Body cksum mismatch");
 8006ade:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <TF_AcceptChar+0x444>)
 8006ae0:	f000 ffc8 	bl	8007a74 <puts>
                    }
                }

                TF_ResetParser(tf);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fdb4 	bl	8006652 <TF_ResetParser>
            }
            break;
 8006aea:	e00b      	b.n	8006b04 <TF_AcceptChar+0x438>
            break;
 8006aec:	bf00      	nop
 8006aee:	e00a      	b.n	8006b06 <TF_AcceptChar+0x43a>
            break;
 8006af0:	bf00      	nop
 8006af2:	e008      	b.n	8006b06 <TF_AcceptChar+0x43a>
            break;
 8006af4:	bf00      	nop
 8006af6:	e006      	b.n	8006b06 <TF_AcceptChar+0x43a>
            break;
 8006af8:	bf00      	nop
 8006afa:	e004      	b.n	8006b06 <TF_AcceptChar+0x43a>
            break;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <TF_AcceptChar+0x43a>
            break;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <TF_AcceptChar+0x43a>
            break;
 8006b04:	bf00      	nop
    }
    //@formatter:on
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	08008ea4 	.word	0x08008ea4

08006b14 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	@ 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t b = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	623b      	str	r3, [r7, #32]
    TF_CKSUM cksum = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	83fb      	strh	r3, [r7, #30]
    uint32_t pos = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 8006b36:	f7ff faf3 	bl	8006120 <TF_CksumStart>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	83fb      	strh	r3, [r7, #30]

    // Gen ID
    if (msg->is_response) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <TF_ComposeHead+0x3a>
        id = msg->frame_id;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	623b      	str	r3, [r7, #32]
 8006b4c:	e00f      	b.n	8006b6e <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	1c59      	adds	r1, r3, #1
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	60d1      	str	r1, [r2, #12]
 8006b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b5c:	623b      	str	r3, [r7, #32]
        if (tf->peer_bit) {
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	7a1b      	ldrb	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b6c:	623b      	str	r3, [r7, #32]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	601a      	str	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 8006b74:	f7ff fad4 	bl	8006120 <TF_CksumStart>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	83fb      	strh	r3, [r7, #30]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	61ba      	str	r2, [r7, #24]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4413      	add	r3, r2
 8006b86:	22ab      	movs	r2, #171	@ 0xab
 8006b88:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 8006b8a:	8bfb      	ldrh	r3, [r7, #30]
 8006b8c:	21ab      	movs	r1, #171	@ 0xab
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff face 	bl	8006130 <TF_CksumAdd>
 8006b94:	4603      	mov	r3, r0
 8006b96:	83fb      	strh	r3, [r7, #30]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 8006b98:	2303      	movs	r3, #3
 8006b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b9e:	e01c      	b.n	8006bda <TF_ComposeHead+0xc6>
 8006ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	75fb      	strb	r3, [r7, #23]
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	61ba      	str	r2, [r7, #24]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	7dfa      	ldrb	r2, [r7, #23]
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	7dfa      	ldrb	r2, [r7, #23]
 8006bbe:	8bfb      	ldrh	r3, [r7, #30]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fab4 	bl	8006130 <TF_CksumAdd>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	83fb      	strh	r3, [r7, #30]
 8006bcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bda:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dade      	bge.n	8006ba0 <TF_ComposeHead+0x8c>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006be8:	e01e      	b.n	8006c28 <TF_ComposeHead+0x114>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	899b      	ldrh	r3, [r3, #12]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	fa42 f303 	asr.w	r3, r2, r3
 8006bfa:	75fb      	strb	r3, [r7, #23]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	61ba      	str	r2, [r7, #24]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	4413      	add	r3, r2
 8006c06:	7dfa      	ldrb	r2, [r7, #23]
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	7dfa      	ldrb	r2, [r7, #23]
 8006c0c:	8bfb      	ldrh	r3, [r7, #30]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fa8d 	bl	8006130 <TF_CksumAdd>
 8006c16:	4603      	mov	r3, r0
 8006c18:	83fb      	strh	r3, [r7, #30]
 8006c1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dadc      	bge.n	8006bea <TF_ComposeHead+0xd6>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c36:	e01e      	b.n	8006c76 <TF_ComposeHead+0x162>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	88db      	ldrh	r3, [r3, #6]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	fa42 f303 	asr.w	r3, r2, r3
 8006c48:	75fb      	strb	r3, [r7, #23]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	61ba      	str	r2, [r7, #24]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	4413      	add	r3, r2
 8006c54:	7dfa      	ldrb	r2, [r7, #23]
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	7dfa      	ldrb	r2, [r7, #23]
 8006c5a:	8bfb      	ldrh	r3, [r7, #30]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fa66 	bl	8006130 <TF_CksumAdd>
 8006c64:	4603      	mov	r3, r0
 8006c66:	83fb      	strh	r3, [r7, #30]
 8006c68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dadc      	bge.n	8006c38 <TF_ComposeHead+0x124>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 8006c7e:	8bfb      	ldrh	r3, [r7, #30]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fa71 	bl	8006168 <TF_CksumEnd>
 8006c86:	4603      	mov	r3, r0
 8006c88:	83fb      	strh	r3, [r7, #30]
    WRITENUM(TF_CKSUM, cksum);
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c90:	e014      	b.n	8006cbc <TF_ComposeHead+0x1a8>
 8006c92:	8bfa      	ldrh	r2, [r7, #30]
 8006c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	fa42 f303 	asr.w	r3, r2, r3
 8006c9e:	75fb      	strb	r3, [r7, #23]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	61ba      	str	r2, [r7, #24]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4413      	add	r3, r2
 8006caa:	7dfa      	ldrb	r2, [r7, #23]
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dae6      	bge.n	8006c92 <TF_ComposeHead+0x17e>
#endif

    return pos;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3728      	adds	r7, #40	@ 0x28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b088      	sub	sp, #32
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 8006cea:	2300      	movs	r3, #0
 8006cec:	83fb      	strh	r3, [r7, #30]
 8006cee:	e019      	b.n	8006d24 <TF_ComposeBody+0x56>
        b = data[i];
 8006cf0:	8bfb      	ldrh	r3, [r7, #30]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	61ba      	str	r2, [r7, #24]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	7dfa      	ldrb	r2, [r7, #23]
 8006d06:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	7dfa      	ldrb	r2, [r7, #23]
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fa0d 	bl	8006130 <TF_CksumAdd>
 8006d16:	4603      	mov	r3, r0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 8006d1e:	8bfb      	ldrh	r3, [r7, #30]
 8006d20:	3301      	adds	r3, #1
 8006d22:	83fb      	strh	r3, [r7, #30]
 8006d24:	8bfa      	ldrh	r2, [r7, #30]
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d3e1      	bcc.n	8006cf0 <TF_ComposeBody+0x22>
    }

    return pos;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b086      	sub	sp, #24
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 8006d40:	2300      	movs	r3, #0
 8006d42:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fa09 	bl	8006168 <TF_CksumEnd>
 8006d56:	4603      	mov	r3, r0
 8006d58:	461a      	mov	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
 8006d62:	e015      	b.n	8006d90 <TF_ComposeTail+0x5a>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	fa42 f303 	asr.w	r3, r2, r3
 8006d74:	73fb      	strb	r3, [r7, #15]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	613a      	str	r2, [r7, #16]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	7bfa      	ldrb	r2, [r7, #15]
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	75fb      	strb	r3, [r7, #23]
 8006d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dae5      	bge.n	8006d64 <TF_ComposeTail+0x2e>
#endif
    return pos;
 8006d98:	693b      	ldr	r3, [r7, #16]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <TF_SendFrame_Begin>:
 * @param listener - response listener or NULL
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_ClaimTx(tf));
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff f987 	bl	80060c4 <TF_ClaimTx>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f083 0301 	eor.w	r3, r3, #1
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <TF_SendFrame_Begin+0x24>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e031      	b.n	8006e2a <TF_SendFrame_Begin+0x88>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006dcc:	3303      	adds	r3, #3
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fe9e 	bl	8006b14 <TF_ComposeHead>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006de0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    tf->tx_len = msg->len;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	899b      	ldrh	r3, [r3, #12]
 8006de8:	461a      	mov	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006df0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    if (listener) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <TF_SendFrame_Begin+0x74>
        TF_TRY(TF_AddIdListener(tf, msg, listener, timeout));
 8006dfa:	887b      	ldrh	r3, [r7, #2]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fa7f 	bl	8006304 <TF_AddIdListener>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f083 0301 	eor.w	r3, r3, #1
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <TF_SendFrame_Begin+0x74>
 8006e12:	2300      	movs	r3, #0
 8006e14:	e009      	b.n	8006e2a <TF_SendFrame_Begin+0x88>
    }

    CKSUM_RESET(tf->tx_cksum);
 8006e16:	f7ff f983 	bl	8006120 <TF_CksumStart>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e24:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    return true;
 8006e28:	2301      	movs	r3, #1
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61bb      	str	r3, [r7, #24]

    remain = length;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 8006e46:	e050      	b.n	8006eea <TF_SendFrame_Chunk+0xb8>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006e52:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bf28      	it	cs
 8006e5c:	4613      	movcs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006e66:	3303      	adds	r3, #3
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e6e:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006e72:	1898      	adds	r0, r3, r2
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	18d1      	adds	r1, r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006e84:	332c      	adds	r3, #44	@ 0x2c
 8006e86:	f7ff ff22 	bl	8006cce <TF_ComposeBody>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e92:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006e96:	4413      	add	r3, r2
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e9e:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        remain -= chunk;
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	4413      	add	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006eb8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006ebc:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8006ec0:	d113      	bne.n	8006eea <TF_SendFrame_Chunk+0xb8>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006ec8:	3303      	adds	r3, #3
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006ed0:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7fb ff9c 	bl	8002e14 <TF_WriteImpl>
            tf->tx_pos = 0;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    while (remain > 0) {
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1ab      	bne.n	8006e48 <TF_SendFrame_Chunk+0x16>
        }
    }
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006f08:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d03a      	beq.n	8006f86 <TF_SendFrame_End+0x8c>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006f16:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006f1a:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d813      	bhi.n	8006f4a <TF_SendFrame_End+0x50>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006f28:	3303      	adds	r3, #3
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006f30:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fb ff6c 	bl	8002e14 <TF_WriteImpl>
            tf->tx_pos = 0;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006f42:	461a      	mov	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006f50:	3303      	adds	r3, #3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006f58:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006f5c:	441a      	add	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006f64:	332c      	adds	r3, #44	@ 0x2c
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f7ff fee4 	bl	8006d36 <TF_ComposeTail>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006f76:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006f7a:	4413      	add	r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006f82:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006f8c:	3303      	adds	r3, #3
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006f94:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fb ff3a 	bl	8002e14 <TF_WriteImpl>
    TF_ReleaseTx(tf);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff f8ad 	bl	8006100 <TF_ReleaseTx>
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <TF_SendFrame>:
 * @param listener - ID listener, or NULL
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, timeout));
 8006fbc:	887b      	ldrh	r3, [r7, #2]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff feed 	bl	8006da2 <TF_SendFrame_Begin>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f083 0301 	eor.w	r3, r3, #1
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <TF_SendFrame+0x2a>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e013      	b.n	8007000 <TF_SendFrame+0x52>
    if (msg->len == 0 || msg->data != NULL) {
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	899b      	ldrh	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <TF_SendFrame+0x3a>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <TF_SendFrame+0x50>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6899      	ldr	r1, [r3, #8]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	899b      	ldrh	r3, [r3, #12]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff ff1d 	bl	8006e32 <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff ff7e 	bl	8006efa <TF_SendFrame_End>
    }
    return true;
 8006ffe:	2301      	movs	r3, #1
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, 0);
 8007012:	2300      	movs	r3, #0
 8007014:	2200      	movs	r2, #0
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ffc8 	bl	8006fae <TF_SendFrame>
 800701e:	4603      	mov	r3, r0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <TF_Respond>:
    return TF_SendFrame(tf, msg, listener, timeout);
}

/** Like TF_Send, but with explicit frame ID (set inside the msg object), use for responses */
bool _TF_FN TF_Respond(TinyFrame *tf, TF_Msg *msg)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
    msg->is_response = true;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2201      	movs	r2, #1
 8007036:	711a      	strb	r2, [r3, #4]
    return TF_Send(tf, msg);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff ffe4 	bl	8007008 <TF_Send>
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800704a:	b480      	push	{r7}
 800704c:	b08f      	sub	sp, #60	@ 0x3c
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	891a      	ldrh	r2, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	8a1b      	ldrh	r3, [r3, #16]
 800705c:	429a      	cmp	r2, r3
 800705e:	d301      	bcc.n	8007064 <load_descriptor_values+0x1a>
        return false;
 8007060:	2300      	movs	r3, #0
 8007062:	e156      	b.n	8007312 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	895b      	ldrh	r3, [r3, #10]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	b2da      	uxtb	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8007080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d05a      	beq.n	8007140 <load_descriptor_values+0xf6>
 800708a:	2b02      	cmp	r3, #2
 800708c:	f200 8094 	bhi.w	80071b8 <load_descriptor_values+0x16e>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <load_descriptor_values+0x50>
 8007094:	2b01      	cmp	r3, #1
 8007096:	d01f      	beq.n	80070d8 <load_descriptor_values+0x8e>
 8007098:	e08e      	b.n	80071b8 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	0e1b      	lsrs	r3, r3, #24
 80070b4:	b25b      	sxtb	r3, r3
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	0f1b      	lsrs	r3, r3, #28
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	825a      	strh	r2, [r3, #18]
            break;
 80070d6:	e0b4      	b.n	8007242 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	895b      	ldrh	r3, [r3, #10]
 80070e2:	3301      	adds	r3, #1
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	b29b      	uxth	r3, r3
 8007102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007106:	b29a      	uxth	r2, r3
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	0f1b      	lsrs	r3, r3, #28
 800710c:	b29b      	uxth	r3, r3
 800710e:	019b      	lsls	r3, r3, #6
 8007110:	b29b      	uxth	r3, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	b29a      	uxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	0f1b      	lsrs	r3, r3, #28
 800711e:	b25b      	sxtb	r3, r3
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	b29b      	uxth	r3, r3
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	b29b      	uxth	r3, r3
 8007134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007138:	b29a      	uxth	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	825a      	strh	r2, [r3, #18]
            break;
 800713e:	e080      	b.n	8007242 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	895b      	ldrh	r3, [r3, #10]
 800714a:	3301      	adds	r3, #1
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	895b      	ldrh	r3, [r3, #10]
 800715e:	3302      	adds	r3, #2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	895b      	ldrh	r3, [r3, #10]
 8007172:	3303      	adds	r3, #3
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8007186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007188:	089b      	lsrs	r3, r3, #2
 800718a:	b29b      	uxth	r3, r3
 800718c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007190:	b29a      	uxth	r2, r3
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	b29b      	uxth	r3, r3
 8007198:	019b      	lsls	r3, r3, #6
 800719a:	b29b      	uxth	r3, r3
 800719c:	4313      	orrs	r3, r2
 800719e:	b29a      	uxth	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	825a      	strh	r2, [r3, #18]
            break;
 80071b6:	e044      	b.n	8007242 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	895b      	ldrh	r3, [r3, #10]
 80071c2:	3301      	adds	r3, #1
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	895b      	ldrh	r3, [r3, #10]
 80071d6:	3302      	adds	r3, #2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	895b      	ldrh	r3, [r3, #10]
 80071ea:	3303      	adds	r3, #3
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	895b      	ldrh	r3, [r3, #10]
 80071fe:	3304      	adds	r3, #4
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	b29a      	uxth	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	b29b      	uxth	r3, r3
 8007216:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800721a:	b29a      	uxth	r2, r3
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	b29b      	uxth	r3, r3
 8007222:	019b      	lsls	r3, r3, #6
 8007224:	b29b      	uxth	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b29a      	uxth	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	825a      	strh	r2, [r3, #18]
            break;
 8007240:	bf00      	nop
        }
    }

    if (!iter->message)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	621a      	str	r2, [r3, #32]
 8007256:	e041      	b.n	80072dc <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725e:	441a      	add	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8007264:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007274:	425b      	negs	r3, r3
 8007276:	441a      	add	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]
 800727c:	e01a      	b.n	80072b4 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7d9b      	ldrb	r3, [r3, #22]
 8007282:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007286:	2b20      	cmp	r3, #32
 8007288:	d111      	bne.n	80072ae <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7d9b      	ldrb	r3, [r3, #22]
 800728e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7d9b      	ldrb	r3, [r3, #22]
 800729a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800729e:	2b80      	cmp	r3, #128	@ 0x80
 80072a0:	d105      	bne.n	80072ae <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f103 0214 	add.w	r2, r3, #20
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	621a      	str	r2, [r3, #32]
 80072ac:	e002      	b.n	80072b4 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7d9b      	ldrb	r3, [r3, #22]
 80072b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072bc:	2b80      	cmp	r3, #128	@ 0x80
 80072be:	d109      	bne.n	80072d4 <load_descriptor_values+0x28a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	61da      	str	r2, [r3, #28]
 80072d2:	e003      	b.n	80072dc <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7d9b      	ldrb	r3, [r3, #22]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d005      	beq.n	80072f4 <load_descriptor_values+0x2aa>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7d9b      	ldrb	r3, [r3, #22]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d10a      	bne.n	800730a <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	89db      	ldrh	r3, [r3, #14]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24
 8007308:	e002      	b.n	8007310 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8007310:	2301      	movs	r3, #1
}
 8007312:	4618      	mov	r0, r3
 8007314:	373c      	adds	r7, #60	@ 0x3c
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
    iter->index++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	891b      	ldrh	r3, [r3, #8]
 800732a:	3301      	adds	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	891a      	ldrh	r2, [r3, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	8a1b      	ldrh	r3, [r3, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d30c      	bcc.n	800735a <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8007358:	e03b      	b.n	80073d2 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	895b      	ldrh	r3, [r3, #10]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	2201      	movs	r2, #1
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	895a      	ldrh	r2, [r3, #10]
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	899b      	ldrh	r3, [r3, #12]
 8007392:	7afa      	ldrb	r2, [r7, #11]
 8007394:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007398:	2a00      	cmp	r2, #0
 800739a:	bf0c      	ite	eq
 800739c:	2201      	moveq	r2, #1
 800739e:	2200      	movne	r2, #0
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	4413      	add	r3, r2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	89da      	ldrh	r2, [r3, #14]
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d004      	beq.n	80073c2 <advance_iterator+0xa4>
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	2b09      	cmp	r3, #9
 80073c0:	d101      	bne.n	80073c6 <advance_iterator+0xa8>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <advance_iterator+0xaa>
 80073c6:	2300      	movs	r3, #0
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	81da      	strh	r2, [r3, #14]
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 80073ea:	2228      	movs	r2, #40	@ 0x28
 80073ec:	2100      	movs	r1, #0
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fc42 	bl	8007c78 <memset>

    iter->descriptor = desc;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	601a      	str	r2, [r3, #0]
    iter->message = message;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff fe22 	bl	800704a <load_descriptor_values>
 8007406:	4603      	mov	r3, r0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0a1b      	lsrs	r3, r3, #8
 800742e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007432:	2b80      	cmp	r3, #128	@ 0x80
 8007434:	d109      	bne.n	800744a <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	3304      	adds	r3, #4
 800743a:	461a      	mov	r2, r3
 800743c:	6939      	ldr	r1, [r7, #16]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ffcd 	bl	80073de <pb_field_iter_begin>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]
 8007448:	e008      	b.n	800745c <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	461a      	mov	r2, r3
 8007450:	6939      	ldr	r1, [r7, #16]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff ffc3 	bl	80073de <pb_field_iter_begin>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	f103 020c 	add.w	r2, r3, #12
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]
    return status;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff ff50 	bl	800731e <advance_iterator>
    (void)load_descriptor_values(iter);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff fde3 	bl	800704a <load_descriptor_values>
    return iter->index != 0;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	891b      	ldrh	r3, [r3, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bf14      	ite	ne
 800748c:	2301      	movne	r3, #1
 800748e:	2300      	moveq	r3, #0
 8007490:	b2db      	uxtb	r3, r3
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8a1b      	ldrh	r3, [r3, #16]
 80074a8:	461a      	mov	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d101      	bne.n	80074b4 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80074b0:	2301      	movs	r3, #1
 80074b2:	e044      	b.n	800753e <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	8a9b      	ldrh	r3, [r3, #20]
 80074ba:	461a      	mov	r2, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	4293      	cmp	r3, r2
 80074c0:	d901      	bls.n	80074c6 <pb_field_iter_find+0x2c>
    {
        return false;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e03b      	b.n	800753e <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	891b      	ldrh	r3, [r3, #8]
 80074ca:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8a1b      	ldrh	r3, [r3, #16]
 80074d0:	461a      	mov	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d204      	bcs.n	80074e2 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	8a1a      	ldrh	r2, [r3, #16]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff ff1b 	bl	800731e <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	895b      	ldrh	r3, [r3, #10]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	089a      	lsrs	r2, r3, #2
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	4053      	eors	r3, r2
 8007502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fd9d 	bl	800704a <load_descriptor_values>

                if (iter->tag == tag &&
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8a1b      	ldrh	r3, [r3, #16]
 8007514:	461a      	mov	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	4293      	cmp	r3, r2
 800751a:	d107      	bne.n	800752c <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7d9b      	ldrb	r3, [r3, #22]
 8007520:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8007524:	2b0a      	cmp	r3, #10
 8007526:	d001      	beq.n	800752c <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007528:	2301      	movs	r3, #1
 800752a:	e008      	b.n	800753e <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	891b      	ldrh	r3, [r3, #8]
 8007530:	89fa      	ldrh	r2, [r7, #14]
 8007532:	429a      	cmp	r2, r3
 8007534:	d1d5      	bne.n	80074e2 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fd87 	bl	800704a <load_descriptor_values>
        return false;
 800753c:	2300      	movs	r3, #0
    }
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7d9b      	ldrb	r3, [r3, #22]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	2b0a      	cmp	r3, #10
 8007558:	d101      	bne.n	800755e <pb_field_iter_find_extension+0x18>
    {
        return true;
 800755a:	2301      	movs	r3, #1
 800755c:	e022      	b.n	80075a4 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	891b      	ldrh	r3, [r3, #8]
 8007562:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff feda 	bl	800731e <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	895b      	ldrh	r3, [r3, #10]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2b0a      	cmp	r3, #10
 8007586:	d104      	bne.n	8007592 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fd5e 	bl	800704a <load_descriptor_values>
 800758e:	4603      	mov	r3, r0
 8007590:	e008      	b.n	80075a4 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	891b      	ldrh	r3, [r3, #8]
 8007596:	89fa      	ldrh	r2, [r7, #14]
 8007598:	429a      	cmp	r2, r3
 800759a:	d1e3      	bne.n	8007564 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff fd54 	bl	800704a <load_descriptor_values>
        return false;
 80075a2:	2300      	movs	r3, #0
    }
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60fb      	str	r3, [r7, #12]
    return t.p1;
 80075b8:	68fb      	ldr	r3, [r7, #12]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff ffea 	bl	80075ac <pb_const_cast>
 80075d8:	4603      	mov	r3, r0
 80075da:	461a      	mov	r2, r3
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fefd 	bl	80073de <pb_field_iter_begin>
 80075e4:	4603      	mov	r3, r0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f7ff ffd7 	bl	80075ac <pb_const_cast>
 80075fe:	4603      	mov	r3, r0
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff ff04 	bl	8007410 <pb_field_iter_begin_extension>
 8007608:	4603      	mov	r3, r0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8a5b      	ldrh	r3, [r3, #18]
 8007622:	2b08      	cmp	r3, #8
 8007624:	d125      	bne.n	8007672 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01f      	beq.n	8007672 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00c      	beq.n	8007652 <pb_default_field_callback+0x40>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d008      	beq.n	8007652 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	3204      	adds	r2, #4
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	4798      	blx	r3
 800764e:	4603      	mov	r3, r0
 8007650:	e010      	b.n	8007674 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00c      	beq.n	8007672 <pb_default_field_callback+0x60>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	3204      	adds	r2, #4
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	e000      	b.n	8007674 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8007672:	2301      	movs	r3, #1

}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <calloc>:
 800767c:	4b02      	ldr	r3, [pc, #8]	@ (8007688 <calloc+0xc>)
 800767e:	460a      	mov	r2, r1
 8007680:	4601      	mov	r1, r0
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	f000 b802 	b.w	800768c <_calloc_r>
 8007688:	20000024 	.word	0x20000024

0800768c <_calloc_r>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	fba1 5402 	umull	r5, r4, r1, r2
 8007692:	b934      	cbnz	r4, 80076a2 <_calloc_r+0x16>
 8007694:	4629      	mov	r1, r5
 8007696:	f000 f837 	bl	8007708 <_malloc_r>
 800769a:	4606      	mov	r6, r0
 800769c:	b928      	cbnz	r0, 80076aa <_calloc_r+0x1e>
 800769e:	4630      	mov	r0, r6
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	220c      	movs	r2, #12
 80076a4:	6002      	str	r2, [r0, #0]
 80076a6:	2600      	movs	r6, #0
 80076a8:	e7f9      	b.n	800769e <_calloc_r+0x12>
 80076aa:	462a      	mov	r2, r5
 80076ac:	4621      	mov	r1, r4
 80076ae:	f000 fae3 	bl	8007c78 <memset>
 80076b2:	e7f4      	b.n	800769e <_calloc_r+0x12>

080076b4 <free>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	@ (80076c0 <free+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 bb77 	b.w	8007dac <_free_r>
 80076be:	bf00      	nop
 80076c0:	20000024 	.word	0x20000024

080076c4 <sbrk_aligned>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007704 <sbrk_aligned+0x40>)
 80076c8:	460c      	mov	r4, r1
 80076ca:	6831      	ldr	r1, [r6, #0]
 80076cc:	4605      	mov	r5, r0
 80076ce:	b911      	cbnz	r1, 80076d6 <sbrk_aligned+0x12>
 80076d0:	f000 fb0e 	bl	8007cf0 <_sbrk_r>
 80076d4:	6030      	str	r0, [r6, #0]
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 fb09 	bl	8007cf0 <_sbrk_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d103      	bne.n	80076ea <sbrk_aligned+0x26>
 80076e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80076e6:	4620      	mov	r0, r4
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d0f8      	beq.n	80076e6 <sbrk_aligned+0x22>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 fafa 	bl	8007cf0 <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1f2      	bne.n	80076e6 <sbrk_aligned+0x22>
 8007700:	e7ef      	b.n	80076e2 <sbrk_aligned+0x1e>
 8007702:	bf00      	nop
 8007704:	20000534 	.word	0x20000534

08007708 <_malloc_r>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4606      	mov	r6, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d904      	bls.n	800772e <_malloc_r+0x26>
 8007724:	230c      	movs	r3, #12
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	2000      	movs	r0, #0
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007804 <_malloc_r+0xfc>
 8007732:	f000 f869 	bl	8007808 <__malloc_lock>
 8007736:	f8d8 3000 	ldr.w	r3, [r8]
 800773a:	461c      	mov	r4, r3
 800773c:	bb44      	cbnz	r4, 8007790 <_malloc_r+0x88>
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff ffbf 	bl	80076c4 <sbrk_aligned>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	4604      	mov	r4, r0
 800774a:	d158      	bne.n	80077fe <_malloc_r+0xf6>
 800774c:	f8d8 4000 	ldr.w	r4, [r8]
 8007750:	4627      	mov	r7, r4
 8007752:	2f00      	cmp	r7, #0
 8007754:	d143      	bne.n	80077de <_malloc_r+0xd6>
 8007756:	2c00      	cmp	r4, #0
 8007758:	d04b      	beq.n	80077f2 <_malloc_r+0xea>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	eb04 0903 	add.w	r9, r4, r3
 8007764:	f000 fac4 	bl	8007cf0 <_sbrk_r>
 8007768:	4581      	cmp	r9, r0
 800776a:	d142      	bne.n	80077f2 <_malloc_r+0xea>
 800776c:	6821      	ldr	r1, [r4, #0]
 800776e:	1a6d      	subs	r5, r5, r1
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f7ff ffa6 	bl	80076c4 <sbrk_aligned>
 8007778:	3001      	adds	r0, #1
 800777a:	d03a      	beq.n	80077f2 <_malloc_r+0xea>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	442b      	add	r3, r5
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	f8d8 3000 	ldr.w	r3, [r8]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	bb62      	cbnz	r2, 80077e4 <_malloc_r+0xdc>
 800778a:	f8c8 7000 	str.w	r7, [r8]
 800778e:	e00f      	b.n	80077b0 <_malloc_r+0xa8>
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	1b52      	subs	r2, r2, r5
 8007794:	d420      	bmi.n	80077d8 <_malloc_r+0xd0>
 8007796:	2a0b      	cmp	r2, #11
 8007798:	d917      	bls.n	80077ca <_malloc_r+0xc2>
 800779a:	1961      	adds	r1, r4, r5
 800779c:	42a3      	cmp	r3, r4
 800779e:	6025      	str	r5, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	6059      	strne	r1, [r3, #4]
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	bf08      	it	eq
 80077a8:	f8c8 1000 	streq.w	r1, [r8]
 80077ac:	5162      	str	r2, [r4, r5]
 80077ae:	604b      	str	r3, [r1, #4]
 80077b0:	4630      	mov	r0, r6
 80077b2:	f000 f82f 	bl	8007814 <__malloc_unlock>
 80077b6:	f104 000b 	add.w	r0, r4, #11
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	f020 0007 	bic.w	r0, r0, #7
 80077c0:	1ac2      	subs	r2, r0, r3
 80077c2:	bf1c      	itt	ne
 80077c4:	1a1b      	subne	r3, r3, r0
 80077c6:	50a3      	strne	r3, [r4, r2]
 80077c8:	e7af      	b.n	800772a <_malloc_r+0x22>
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	bf0c      	ite	eq
 80077d0:	f8c8 2000 	streq.w	r2, [r8]
 80077d4:	605a      	strne	r2, [r3, #4]
 80077d6:	e7eb      	b.n	80077b0 <_malloc_r+0xa8>
 80077d8:	4623      	mov	r3, r4
 80077da:	6864      	ldr	r4, [r4, #4]
 80077dc:	e7ae      	b.n	800773c <_malloc_r+0x34>
 80077de:	463c      	mov	r4, r7
 80077e0:	687f      	ldr	r7, [r7, #4]
 80077e2:	e7b6      	b.n	8007752 <_malloc_r+0x4a>
 80077e4:	461a      	mov	r2, r3
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d1fb      	bne.n	80077e4 <_malloc_r+0xdc>
 80077ec:	2300      	movs	r3, #0
 80077ee:	6053      	str	r3, [r2, #4]
 80077f0:	e7de      	b.n	80077b0 <_malloc_r+0xa8>
 80077f2:	230c      	movs	r3, #12
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f80c 	bl	8007814 <__malloc_unlock>
 80077fc:	e794      	b.n	8007728 <_malloc_r+0x20>
 80077fe:	6005      	str	r5, [r0, #0]
 8007800:	e7d6      	b.n	80077b0 <_malloc_r+0xa8>
 8007802:	bf00      	nop
 8007804:	20000538 	.word	0x20000538

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__malloc_lock+0x8>)
 800780a:	f000 babe 	b.w	8007d8a <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	2000067c 	.word	0x2000067c

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	@ (800781c <__malloc_unlock+0x8>)
 8007816:	f000 bab9 	b.w	8007d8c <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	2000067c 	.word	0x2000067c

08007820 <std>:
 8007820:	2300      	movs	r3, #0
 8007822:	b510      	push	{r4, lr}
 8007824:	4604      	mov	r4, r0
 8007826:	e9c0 3300 	strd	r3, r3, [r0]
 800782a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782e:	6083      	str	r3, [r0, #8]
 8007830:	8181      	strh	r1, [r0, #12]
 8007832:	6643      	str	r3, [r0, #100]	@ 0x64
 8007834:	81c2      	strh	r2, [r0, #14]
 8007836:	6183      	str	r3, [r0, #24]
 8007838:	4619      	mov	r1, r3
 800783a:	2208      	movs	r2, #8
 800783c:	305c      	adds	r0, #92	@ 0x5c
 800783e:	f000 fa1b 	bl	8007c78 <memset>
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x58>)
 8007844:	6263      	str	r3, [r4, #36]	@ 0x24
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x5c>)
 8007848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <std+0x60>)
 800784c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800784e:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <std+0x64>)
 8007850:	6323      	str	r3, [r4, #48]	@ 0x30
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <std+0x68>)
 8007854:	6224      	str	r4, [r4, #32]
 8007856:	429c      	cmp	r4, r3
 8007858:	d006      	beq.n	8007868 <std+0x48>
 800785a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800785e:	4294      	cmp	r4, r2
 8007860:	d002      	beq.n	8007868 <std+0x48>
 8007862:	33d0      	adds	r3, #208	@ 0xd0
 8007864:	429c      	cmp	r4, r3
 8007866:	d105      	bne.n	8007874 <std+0x54>
 8007868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007870:	f000 ba8a 	b.w	8007d88 <__retarget_lock_init_recursive>
 8007874:	bd10      	pop	{r4, pc}
 8007876:	bf00      	nop
 8007878:	08007ac9 	.word	0x08007ac9
 800787c:	08007aeb 	.word	0x08007aeb
 8007880:	08007b23 	.word	0x08007b23
 8007884:	08007b47 	.word	0x08007b47
 8007888:	2000053c 	.word	0x2000053c

0800788c <stdio_exit_handler>:
 800788c:	4a02      	ldr	r2, [pc, #8]	@ (8007898 <stdio_exit_handler+0xc>)
 800788e:	4903      	ldr	r1, [pc, #12]	@ (800789c <stdio_exit_handler+0x10>)
 8007890:	4803      	ldr	r0, [pc, #12]	@ (80078a0 <stdio_exit_handler+0x14>)
 8007892:	f000 b869 	b.w	8007968 <_fwalk_sglue>
 8007896:	bf00      	nop
 8007898:	20000018 	.word	0x20000018
 800789c:	08008795 	.word	0x08008795
 80078a0:	20000028 	.word	0x20000028

080078a4 <cleanup_stdio>:
 80078a4:	6841      	ldr	r1, [r0, #4]
 80078a6:	4b0c      	ldr	r3, [pc, #48]	@ (80078d8 <cleanup_stdio+0x34>)
 80078a8:	4299      	cmp	r1, r3
 80078aa:	b510      	push	{r4, lr}
 80078ac:	4604      	mov	r4, r0
 80078ae:	d001      	beq.n	80078b4 <cleanup_stdio+0x10>
 80078b0:	f000 ff70 	bl	8008794 <_fflush_r>
 80078b4:	68a1      	ldr	r1, [r4, #8]
 80078b6:	4b09      	ldr	r3, [pc, #36]	@ (80078dc <cleanup_stdio+0x38>)
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <cleanup_stdio+0x1e>
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 ff69 	bl	8008794 <_fflush_r>
 80078c2:	68e1      	ldr	r1, [r4, #12]
 80078c4:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <cleanup_stdio+0x3c>)
 80078c6:	4299      	cmp	r1, r3
 80078c8:	d004      	beq.n	80078d4 <cleanup_stdio+0x30>
 80078ca:	4620      	mov	r0, r4
 80078cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d0:	f000 bf60 	b.w	8008794 <_fflush_r>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	2000053c 	.word	0x2000053c
 80078dc:	200005a4 	.word	0x200005a4
 80078e0:	2000060c 	.word	0x2000060c

080078e4 <global_stdio_init.part.0>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <global_stdio_init.part.0+0x30>)
 80078e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007918 <global_stdio_init.part.0+0x34>)
 80078ea:	4a0c      	ldr	r2, [pc, #48]	@ (800791c <global_stdio_init.part.0+0x38>)
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	4620      	mov	r0, r4
 80078f0:	2200      	movs	r2, #0
 80078f2:	2104      	movs	r1, #4
 80078f4:	f7ff ff94 	bl	8007820 <std>
 80078f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078fc:	2201      	movs	r2, #1
 80078fe:	2109      	movs	r1, #9
 8007900:	f7ff ff8e 	bl	8007820 <std>
 8007904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007908:	2202      	movs	r2, #2
 800790a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800790e:	2112      	movs	r1, #18
 8007910:	f7ff bf86 	b.w	8007820 <std>
 8007914:	20000674 	.word	0x20000674
 8007918:	2000053c 	.word	0x2000053c
 800791c:	0800788d 	.word	0x0800788d

08007920 <__sfp_lock_acquire>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__sfp_lock_acquire+0x8>)
 8007922:	f000 ba32 	b.w	8007d8a <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	2000067d 	.word	0x2000067d

0800792c <__sfp_lock_release>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__sfp_lock_release+0x8>)
 800792e:	f000 ba2d 	b.w	8007d8c <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	2000067d 	.word	0x2000067d

08007938 <__sinit>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4604      	mov	r4, r0
 800793c:	f7ff fff0 	bl	8007920 <__sfp_lock_acquire>
 8007940:	6a23      	ldr	r3, [r4, #32]
 8007942:	b11b      	cbz	r3, 800794c <__sinit+0x14>
 8007944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007948:	f7ff bff0 	b.w	800792c <__sfp_lock_release>
 800794c:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <__sinit+0x28>)
 800794e:	6223      	str	r3, [r4, #32]
 8007950:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <__sinit+0x2c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f5      	bne.n	8007944 <__sinit+0xc>
 8007958:	f7ff ffc4 	bl	80078e4 <global_stdio_init.part.0>
 800795c:	e7f2      	b.n	8007944 <__sinit+0xc>
 800795e:	bf00      	nop
 8007960:	080078a5 	.word	0x080078a5
 8007964:	20000674 	.word	0x20000674

08007968 <_fwalk_sglue>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4607      	mov	r7, r0
 800796e:	4688      	mov	r8, r1
 8007970:	4614      	mov	r4, r2
 8007972:	2600      	movs	r6, #0
 8007974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007978:	f1b9 0901 	subs.w	r9, r9, #1
 800797c:	d505      	bpl.n	800798a <_fwalk_sglue+0x22>
 800797e:	6824      	ldr	r4, [r4, #0]
 8007980:	2c00      	cmp	r4, #0
 8007982:	d1f7      	bne.n	8007974 <_fwalk_sglue+0xc>
 8007984:	4630      	mov	r0, r6
 8007986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d907      	bls.n	80079a0 <_fwalk_sglue+0x38>
 8007990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007994:	3301      	adds	r3, #1
 8007996:	d003      	beq.n	80079a0 <_fwalk_sglue+0x38>
 8007998:	4629      	mov	r1, r5
 800799a:	4638      	mov	r0, r7
 800799c:	47c0      	blx	r8
 800799e:	4306      	orrs	r6, r0
 80079a0:	3568      	adds	r5, #104	@ 0x68
 80079a2:	e7e9      	b.n	8007978 <_fwalk_sglue+0x10>

080079a4 <iprintf>:
 80079a4:	b40f      	push	{r0, r1, r2, r3}
 80079a6:	b507      	push	{r0, r1, r2, lr}
 80079a8:	4906      	ldr	r1, [pc, #24]	@ (80079c4 <iprintf+0x20>)
 80079aa:	ab04      	add	r3, sp, #16
 80079ac:	6808      	ldr	r0, [r1, #0]
 80079ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b2:	6881      	ldr	r1, [r0, #8]
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	f000 fbc5 	bl	8008144 <_vfiprintf_r>
 80079ba:	b003      	add	sp, #12
 80079bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c0:	b004      	add	sp, #16
 80079c2:	4770      	bx	lr
 80079c4:	20000024 	.word	0x20000024

080079c8 <_puts_r>:
 80079c8:	6a03      	ldr	r3, [r0, #32]
 80079ca:	b570      	push	{r4, r5, r6, lr}
 80079cc:	6884      	ldr	r4, [r0, #8]
 80079ce:	4605      	mov	r5, r0
 80079d0:	460e      	mov	r6, r1
 80079d2:	b90b      	cbnz	r3, 80079d8 <_puts_r+0x10>
 80079d4:	f7ff ffb0 	bl	8007938 <__sinit>
 80079d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079da:	07db      	lsls	r3, r3, #31
 80079dc:	d405      	bmi.n	80079ea <_puts_r+0x22>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	0598      	lsls	r0, r3, #22
 80079e2:	d402      	bmi.n	80079ea <_puts_r+0x22>
 80079e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079e6:	f000 f9d0 	bl	8007d8a <__retarget_lock_acquire_recursive>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	0719      	lsls	r1, r3, #28
 80079ee:	d502      	bpl.n	80079f6 <_puts_r+0x2e>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d135      	bne.n	8007a62 <_puts_r+0x9a>
 80079f6:	4621      	mov	r1, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 f8e7 	bl	8007bcc <__swsetup_r>
 80079fe:	b380      	cbz	r0, 8007a62 <_puts_r+0x9a>
 8007a00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a06:	07da      	lsls	r2, r3, #31
 8007a08:	d405      	bmi.n	8007a16 <_puts_r+0x4e>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	059b      	lsls	r3, r3, #22
 8007a0e:	d402      	bmi.n	8007a16 <_puts_r+0x4e>
 8007a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a12:	f000 f9bb 	bl	8007d8c <__retarget_lock_release_recursive>
 8007a16:	4628      	mov	r0, r5
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da04      	bge.n	8007a28 <_puts_r+0x60>
 8007a1e:	69a2      	ldr	r2, [r4, #24]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	dc17      	bgt.n	8007a54 <_puts_r+0x8c>
 8007a24:	290a      	cmp	r1, #10
 8007a26:	d015      	beq.n	8007a54 <_puts_r+0x8c>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	6022      	str	r2, [r4, #0]
 8007a2e:	7019      	strb	r1, [r3, #0]
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a36:	3b01      	subs	r3, #1
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	d1ed      	bne.n	8007a1a <_puts_r+0x52>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da11      	bge.n	8007a66 <_puts_r+0x9e>
 8007a42:	4622      	mov	r2, r4
 8007a44:	210a      	movs	r1, #10
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f881 	bl	8007b4e <__swbuf_r>
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d0d7      	beq.n	8007a00 <_puts_r+0x38>
 8007a50:	250a      	movs	r5, #10
 8007a52:	e7d7      	b.n	8007a04 <_puts_r+0x3c>
 8007a54:	4622      	mov	r2, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 f879 	bl	8007b4e <__swbuf_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d1e7      	bne.n	8007a30 <_puts_r+0x68>
 8007a60:	e7ce      	b.n	8007a00 <_puts_r+0x38>
 8007a62:	3e01      	subs	r6, #1
 8007a64:	e7e4      	b.n	8007a30 <_puts_r+0x68>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	6022      	str	r2, [r4, #0]
 8007a6c:	220a      	movs	r2, #10
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	e7ee      	b.n	8007a50 <_puts_r+0x88>
	...

08007a74 <puts>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	@ (8007a80 <puts+0xc>)
 8007a76:	4601      	mov	r1, r0
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f7ff bfa5 	b.w	80079c8 <_puts_r>
 8007a7e:	bf00      	nop
 8007a80:	20000024 	.word	0x20000024

08007a84 <siprintf>:
 8007a84:	b40e      	push	{r1, r2, r3}
 8007a86:	b510      	push	{r4, lr}
 8007a88:	b09d      	sub	sp, #116	@ 0x74
 8007a8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007a8c:	9002      	str	r0, [sp, #8]
 8007a8e:	9006      	str	r0, [sp, #24]
 8007a90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a94:	480a      	ldr	r0, [pc, #40]	@ (8007ac0 <siprintf+0x3c>)
 8007a96:	9107      	str	r1, [sp, #28]
 8007a98:	9104      	str	r1, [sp, #16]
 8007a9a:	490a      	ldr	r1, [pc, #40]	@ (8007ac4 <siprintf+0x40>)
 8007a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa0:	9105      	str	r1, [sp, #20]
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	a902      	add	r1, sp, #8
 8007aa6:	6800      	ldr	r0, [r0, #0]
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007aac:	f000 fa24 	bl	8007ef8 <_svfiprintf_r>
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	701c      	strb	r4, [r3, #0]
 8007ab4:	b01d      	add	sp, #116	@ 0x74
 8007ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aba:	b003      	add	sp, #12
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20000024 	.word	0x20000024
 8007ac4:	ffff0208 	.word	0xffff0208

08007ac8 <__sread>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad0:	f000 f8fc 	bl	8007ccc <_read_r>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	bfab      	itete	ge
 8007ad8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ada:	89a3      	ldrhlt	r3, [r4, #12]
 8007adc:	181b      	addge	r3, r3, r0
 8007ade:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ae2:	bfac      	ite	ge
 8007ae4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ae6:	81a3      	strhlt	r3, [r4, #12]
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <__swrite>:
 8007aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aee:	461f      	mov	r7, r3
 8007af0:	898b      	ldrh	r3, [r1, #12]
 8007af2:	05db      	lsls	r3, r3, #23
 8007af4:	4605      	mov	r5, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4616      	mov	r6, r2
 8007afa:	d505      	bpl.n	8007b08 <__swrite+0x1e>
 8007afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b00:	2302      	movs	r3, #2
 8007b02:	2200      	movs	r2, #0
 8007b04:	f000 f8d0 	bl	8007ca8 <_lseek_r>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	4632      	mov	r2, r6
 8007b16:	463b      	mov	r3, r7
 8007b18:	4628      	mov	r0, r5
 8007b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	f000 b8f7 	b.w	8007d10 <_write_r>

08007b22 <__sseek>:
 8007b22:	b510      	push	{r4, lr}
 8007b24:	460c      	mov	r4, r1
 8007b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2a:	f000 f8bd 	bl	8007ca8 <_lseek_r>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	bf15      	itete	ne
 8007b34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b3e:	81a3      	strheq	r3, [r4, #12]
 8007b40:	bf18      	it	ne
 8007b42:	81a3      	strhne	r3, [r4, #12]
 8007b44:	bd10      	pop	{r4, pc}

08007b46 <__sclose>:
 8007b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4a:	f000 b89d 	b.w	8007c88 <_close_r>

08007b4e <__swbuf_r>:
 8007b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b50:	460e      	mov	r6, r1
 8007b52:	4614      	mov	r4, r2
 8007b54:	4605      	mov	r5, r0
 8007b56:	b118      	cbz	r0, 8007b60 <__swbuf_r+0x12>
 8007b58:	6a03      	ldr	r3, [r0, #32]
 8007b5a:	b90b      	cbnz	r3, 8007b60 <__swbuf_r+0x12>
 8007b5c:	f7ff feec 	bl	8007938 <__sinit>
 8007b60:	69a3      	ldr	r3, [r4, #24]
 8007b62:	60a3      	str	r3, [r4, #8]
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	071a      	lsls	r2, r3, #28
 8007b68:	d501      	bpl.n	8007b6e <__swbuf_r+0x20>
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	b943      	cbnz	r3, 8007b80 <__swbuf_r+0x32>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 f82b 	bl	8007bcc <__swsetup_r>
 8007b76:	b118      	cbz	r0, 8007b80 <__swbuf_r+0x32>
 8007b78:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	6922      	ldr	r2, [r4, #16]
 8007b84:	1a98      	subs	r0, r3, r2
 8007b86:	6963      	ldr	r3, [r4, #20]
 8007b88:	b2f6      	uxtb	r6, r6
 8007b8a:	4283      	cmp	r3, r0
 8007b8c:	4637      	mov	r7, r6
 8007b8e:	dc05      	bgt.n	8007b9c <__swbuf_r+0x4e>
 8007b90:	4621      	mov	r1, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 fdfe 	bl	8008794 <_fflush_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1ed      	bne.n	8007b78 <__swbuf_r+0x2a>
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	60a3      	str	r3, [r4, #8]
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	6022      	str	r2, [r4, #0]
 8007ba8:	701e      	strb	r6, [r3, #0]
 8007baa:	6962      	ldr	r2, [r4, #20]
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d004      	beq.n	8007bbc <__swbuf_r+0x6e>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	07db      	lsls	r3, r3, #31
 8007bb6:	d5e1      	bpl.n	8007b7c <__swbuf_r+0x2e>
 8007bb8:	2e0a      	cmp	r6, #10
 8007bba:	d1df      	bne.n	8007b7c <__swbuf_r+0x2e>
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fde8 	bl	8008794 <_fflush_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d0d9      	beq.n	8007b7c <__swbuf_r+0x2e>
 8007bc8:	e7d6      	b.n	8007b78 <__swbuf_r+0x2a>
	...

08007bcc <__swsetup_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4b29      	ldr	r3, [pc, #164]	@ (8007c74 <__swsetup_r+0xa8>)
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	b118      	cbz	r0, 8007be0 <__swsetup_r+0x14>
 8007bd8:	6a03      	ldr	r3, [r0, #32]
 8007bda:	b90b      	cbnz	r3, 8007be0 <__swsetup_r+0x14>
 8007bdc:	f7ff feac 	bl	8007938 <__sinit>
 8007be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be4:	0719      	lsls	r1, r3, #28
 8007be6:	d422      	bmi.n	8007c2e <__swsetup_r+0x62>
 8007be8:	06da      	lsls	r2, r3, #27
 8007bea:	d407      	bmi.n	8007bfc <__swsetup_r+0x30>
 8007bec:	2209      	movs	r2, #9
 8007bee:	602a      	str	r2, [r5, #0]
 8007bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bfa:	e033      	b.n	8007c64 <__swsetup_r+0x98>
 8007bfc:	0758      	lsls	r0, r3, #29
 8007bfe:	d512      	bpl.n	8007c26 <__swsetup_r+0x5a>
 8007c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c02:	b141      	cbz	r1, 8007c16 <__swsetup_r+0x4a>
 8007c04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	d002      	beq.n	8007c12 <__swsetup_r+0x46>
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 f8cd 	bl	8007dac <_free_r>
 8007c12:	2300      	movs	r3, #0
 8007c14:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f043 0308 	orr.w	r3, r3, #8
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	b94b      	cbnz	r3, 8007c46 <__swsetup_r+0x7a>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c3c:	d003      	beq.n	8007c46 <__swsetup_r+0x7a>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f000 fdf5 	bl	8008830 <__smakebuf_r>
 8007c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4a:	f013 0201 	ands.w	r2, r3, #1
 8007c4e:	d00a      	beq.n	8007c66 <__swsetup_r+0x9a>
 8007c50:	2200      	movs	r2, #0
 8007c52:	60a2      	str	r2, [r4, #8]
 8007c54:	6962      	ldr	r2, [r4, #20]
 8007c56:	4252      	negs	r2, r2
 8007c58:	61a2      	str	r2, [r4, #24]
 8007c5a:	6922      	ldr	r2, [r4, #16]
 8007c5c:	b942      	cbnz	r2, 8007c70 <__swsetup_r+0xa4>
 8007c5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c62:	d1c5      	bne.n	8007bf0 <__swsetup_r+0x24>
 8007c64:	bd38      	pop	{r3, r4, r5, pc}
 8007c66:	0799      	lsls	r1, r3, #30
 8007c68:	bf58      	it	pl
 8007c6a:	6962      	ldrpl	r2, [r4, #20]
 8007c6c:	60a2      	str	r2, [r4, #8]
 8007c6e:	e7f4      	b.n	8007c5a <__swsetup_r+0x8e>
 8007c70:	2000      	movs	r0, #0
 8007c72:	e7f7      	b.n	8007c64 <__swsetup_r+0x98>
 8007c74:	20000024 	.word	0x20000024

08007c78 <memset>:
 8007c78:	4402      	add	r2, r0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d100      	bne.n	8007c82 <memset+0xa>
 8007c80:	4770      	bx	lr
 8007c82:	f803 1b01 	strb.w	r1, [r3], #1
 8007c86:	e7f9      	b.n	8007c7c <memset+0x4>

08007c88 <_close_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	4d06      	ldr	r5, [pc, #24]	@ (8007ca4 <_close_r+0x1c>)
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	4608      	mov	r0, r1
 8007c92:	602b      	str	r3, [r5, #0]
 8007c94:	f7f8 ffe9 	bl	8000c6a <_close>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_close_r+0x1a>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_close_r+0x1a>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	20000678 	.word	0x20000678

08007ca8 <_lseek_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	@ (8007cc8 <_lseek_r+0x20>)
 8007cac:	4604      	mov	r4, r0
 8007cae:	4608      	mov	r0, r1
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	602a      	str	r2, [r5, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f7f8 fffe 	bl	8000cb8 <_lseek>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_lseek_r+0x1e>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_lseek_r+0x1e>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000678 	.word	0x20000678

08007ccc <_read_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d07      	ldr	r5, [pc, #28]	@ (8007cec <_read_r+0x20>)
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	602a      	str	r2, [r5, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f7f8 ff8c 	bl	8000bf8 <_read>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_read_r+0x1e>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_read_r+0x1e>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20000678 	.word	0x20000678

08007cf0 <_sbrk_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d06      	ldr	r5, [pc, #24]	@ (8007d0c <_sbrk_r+0x1c>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7f8 ffea 	bl	8000cd4 <_sbrk>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_sbrk_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_sbrk_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000678 	.word	0x20000678

08007d10 <_write_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	@ (8007d30 <_write_r+0x20>)
 8007d14:	4604      	mov	r4, r0
 8007d16:	4608      	mov	r0, r1
 8007d18:	4611      	mov	r1, r2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	602a      	str	r2, [r5, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f7f8 ff87 	bl	8000c32 <_write>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_write_r+0x1e>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_write_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000678 	.word	0x20000678

08007d34 <__errno>:
 8007d34:	4b01      	ldr	r3, [pc, #4]	@ (8007d3c <__errno+0x8>)
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000024 	.word	0x20000024

08007d40 <__libc_init_array>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4d0d      	ldr	r5, [pc, #52]	@ (8007d78 <__libc_init_array+0x38>)
 8007d44:	4c0d      	ldr	r4, [pc, #52]	@ (8007d7c <__libc_init_array+0x3c>)
 8007d46:	1b64      	subs	r4, r4, r5
 8007d48:	10a4      	asrs	r4, r4, #2
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	d109      	bne.n	8007d64 <__libc_init_array+0x24>
 8007d50:	4d0b      	ldr	r5, [pc, #44]	@ (8007d80 <__libc_init_array+0x40>)
 8007d52:	4c0c      	ldr	r4, [pc, #48]	@ (8007d84 <__libc_init_array+0x44>)
 8007d54:	f000 fe1a 	bl	800898c <_init>
 8007d58:	1b64      	subs	r4, r4, r5
 8007d5a:	10a4      	asrs	r4, r4, #2
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	d105      	bne.n	8007d6e <__libc_init_array+0x2e>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d68:	4798      	blx	r3
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7ee      	b.n	8007d4c <__libc_init_array+0xc>
 8007d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d72:	4798      	blx	r3
 8007d74:	3601      	adds	r6, #1
 8007d76:	e7f2      	b.n	8007d5e <__libc_init_array+0x1e>
 8007d78:	08009340 	.word	0x08009340
 8007d7c:	08009340 	.word	0x08009340
 8007d80:	08009340 	.word	0x08009340
 8007d84:	08009344 	.word	0x08009344

08007d88 <__retarget_lock_init_recursive>:
 8007d88:	4770      	bx	lr

08007d8a <__retarget_lock_acquire_recursive>:
 8007d8a:	4770      	bx	lr

08007d8c <__retarget_lock_release_recursive>:
 8007d8c:	4770      	bx	lr

08007d8e <memcpy>:
 8007d8e:	440a      	add	r2, r1
 8007d90:	4291      	cmp	r1, r2
 8007d92:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d96:	d100      	bne.n	8007d9a <memcpy+0xc>
 8007d98:	4770      	bx	lr
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007da4:	4291      	cmp	r1, r2
 8007da6:	d1f9      	bne.n	8007d9c <memcpy+0xe>
 8007da8:	bd10      	pop	{r4, pc}
	...

08007dac <_free_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4605      	mov	r5, r0
 8007db0:	2900      	cmp	r1, #0
 8007db2:	d041      	beq.n	8007e38 <_free_r+0x8c>
 8007db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db8:	1f0c      	subs	r4, r1, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfb8      	it	lt
 8007dbe:	18e4      	addlt	r4, r4, r3
 8007dc0:	f7ff fd22 	bl	8007808 <__malloc_lock>
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e3c <_free_r+0x90>)
 8007dc6:	6813      	ldr	r3, [r2, #0]
 8007dc8:	b933      	cbnz	r3, 8007dd8 <_free_r+0x2c>
 8007dca:	6063      	str	r3, [r4, #4]
 8007dcc:	6014      	str	r4, [r2, #0]
 8007dce:	4628      	mov	r0, r5
 8007dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd4:	f7ff bd1e 	b.w	8007814 <__malloc_unlock>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d908      	bls.n	8007dee <_free_r+0x42>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	1821      	adds	r1, r4, r0
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf01      	itttt	eq
 8007de4:	6819      	ldreq	r1, [r3, #0]
 8007de6:	685b      	ldreq	r3, [r3, #4]
 8007de8:	1809      	addeq	r1, r1, r0
 8007dea:	6021      	streq	r1, [r4, #0]
 8007dec:	e7ed      	b.n	8007dca <_free_r+0x1e>
 8007dee:	461a      	mov	r2, r3
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	b10b      	cbz	r3, 8007df8 <_free_r+0x4c>
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d9fa      	bls.n	8007dee <_free_r+0x42>
 8007df8:	6811      	ldr	r1, [r2, #0]
 8007dfa:	1850      	adds	r0, r2, r1
 8007dfc:	42a0      	cmp	r0, r4
 8007dfe:	d10b      	bne.n	8007e18 <_free_r+0x6c>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	4401      	add	r1, r0
 8007e04:	1850      	adds	r0, r2, r1
 8007e06:	4283      	cmp	r3, r0
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	d1e0      	bne.n	8007dce <_free_r+0x22>
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	6053      	str	r3, [r2, #4]
 8007e12:	4408      	add	r0, r1
 8007e14:	6010      	str	r0, [r2, #0]
 8007e16:	e7da      	b.n	8007dce <_free_r+0x22>
 8007e18:	d902      	bls.n	8007e20 <_free_r+0x74>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	e7d6      	b.n	8007dce <_free_r+0x22>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	1821      	adds	r1, r4, r0
 8007e24:	428b      	cmp	r3, r1
 8007e26:	bf04      	itt	eq
 8007e28:	6819      	ldreq	r1, [r3, #0]
 8007e2a:	685b      	ldreq	r3, [r3, #4]
 8007e2c:	6063      	str	r3, [r4, #4]
 8007e2e:	bf04      	itt	eq
 8007e30:	1809      	addeq	r1, r1, r0
 8007e32:	6021      	streq	r1, [r4, #0]
 8007e34:	6054      	str	r4, [r2, #4]
 8007e36:	e7ca      	b.n	8007dce <_free_r+0x22>
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000538 	.word	0x20000538

08007e40 <__ssputs_r>:
 8007e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	688e      	ldr	r6, [r1, #8]
 8007e46:	461f      	mov	r7, r3
 8007e48:	42be      	cmp	r6, r7
 8007e4a:	680b      	ldr	r3, [r1, #0]
 8007e4c:	4682      	mov	sl, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	4690      	mov	r8, r2
 8007e52:	d82d      	bhi.n	8007eb0 <__ssputs_r+0x70>
 8007e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e5c:	d026      	beq.n	8007eac <__ssputs_r+0x6c>
 8007e5e:	6965      	ldr	r5, [r4, #20]
 8007e60:	6909      	ldr	r1, [r1, #16]
 8007e62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e66:	eba3 0901 	sub.w	r9, r3, r1
 8007e6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e6e:	1c7b      	adds	r3, r7, #1
 8007e70:	444b      	add	r3, r9
 8007e72:	106d      	asrs	r5, r5, #1
 8007e74:	429d      	cmp	r5, r3
 8007e76:	bf38      	it	cc
 8007e78:	461d      	movcc	r5, r3
 8007e7a:	0553      	lsls	r3, r2, #21
 8007e7c:	d527      	bpl.n	8007ece <__ssputs_r+0x8e>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7ff fc42 	bl	8007708 <_malloc_r>
 8007e84:	4606      	mov	r6, r0
 8007e86:	b360      	cbz	r0, 8007ee2 <__ssputs_r+0xa2>
 8007e88:	6921      	ldr	r1, [r4, #16]
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	f7ff ff7f 	bl	8007d8e <memcpy>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	6126      	str	r6, [r4, #16]
 8007e9e:	6165      	str	r5, [r4, #20]
 8007ea0:	444e      	add	r6, r9
 8007ea2:	eba5 0509 	sub.w	r5, r5, r9
 8007ea6:	6026      	str	r6, [r4, #0]
 8007ea8:	60a5      	str	r5, [r4, #8]
 8007eaa:	463e      	mov	r6, r7
 8007eac:	42be      	cmp	r6, r7
 8007eae:	d900      	bls.n	8007eb2 <__ssputs_r+0x72>
 8007eb0:	463e      	mov	r6, r7
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	f000 fcf6 	bl	80088a8 <memmove>
 8007ebc:	68a3      	ldr	r3, [r4, #8]
 8007ebe:	1b9b      	subs	r3, r3, r6
 8007ec0:	60a3      	str	r3, [r4, #8]
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	4433      	add	r3, r6
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ece:	462a      	mov	r2, r5
 8007ed0:	f000 fd26 	bl	8008920 <_realloc_r>
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d1e0      	bne.n	8007e9c <__ssputs_r+0x5c>
 8007eda:	6921      	ldr	r1, [r4, #16]
 8007edc:	4650      	mov	r0, sl
 8007ede:	f7ff ff65 	bl	8007dac <_free_r>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	f8ca 3000 	str.w	r3, [sl]
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ef4:	e7e9      	b.n	8007eca <__ssputs_r+0x8a>
	...

08007ef8 <_svfiprintf_r>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	4698      	mov	r8, r3
 8007efe:	898b      	ldrh	r3, [r1, #12]
 8007f00:	061b      	lsls	r3, r3, #24
 8007f02:	b09d      	sub	sp, #116	@ 0x74
 8007f04:	4607      	mov	r7, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	d510      	bpl.n	8007f2e <_svfiprintf_r+0x36>
 8007f0c:	690b      	ldr	r3, [r1, #16]
 8007f0e:	b973      	cbnz	r3, 8007f2e <_svfiprintf_r+0x36>
 8007f10:	2140      	movs	r1, #64	@ 0x40
 8007f12:	f7ff fbf9 	bl	8007708 <_malloc_r>
 8007f16:	6028      	str	r0, [r5, #0]
 8007f18:	6128      	str	r0, [r5, #16]
 8007f1a:	b930      	cbnz	r0, 8007f2a <_svfiprintf_r+0x32>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f24:	b01d      	add	sp, #116	@ 0x74
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	2340      	movs	r3, #64	@ 0x40
 8007f2c:	616b      	str	r3, [r5, #20]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f32:	2320      	movs	r3, #32
 8007f34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3c:	2330      	movs	r3, #48	@ 0x30
 8007f3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80080dc <_svfiprintf_r+0x1e4>
 8007f42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f46:	f04f 0901 	mov.w	r9, #1
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f52:	b10a      	cbz	r2, 8007f58 <_svfiprintf_r+0x60>
 8007f54:	2a25      	cmp	r2, #37	@ 0x25
 8007f56:	d1f9      	bne.n	8007f4c <_svfiprintf_r+0x54>
 8007f58:	ebba 0b04 	subs.w	fp, sl, r4
 8007f5c:	d00b      	beq.n	8007f76 <_svfiprintf_r+0x7e>
 8007f5e:	465b      	mov	r3, fp
 8007f60:	4622      	mov	r2, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ff6b 	bl	8007e40 <__ssputs_r>
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f000 80a7 	beq.w	80080be <_svfiprintf_r+0x1c6>
 8007f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f72:	445a      	add	r2, fp
 8007f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f76:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 809f 	beq.w	80080be <_svfiprintf_r+0x1c6>
 8007f80:	2300      	movs	r3, #0
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f8a:	f10a 0a01 	add.w	sl, sl, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f96:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f98:	4654      	mov	r4, sl
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa0:	484e      	ldr	r0, [pc, #312]	@ (80080dc <_svfiprintf_r+0x1e4>)
 8007fa2:	f7f8 f925 	bl	80001f0 <memchr>
 8007fa6:	9a04      	ldr	r2, [sp, #16]
 8007fa8:	b9d8      	cbnz	r0, 8007fe2 <_svfiprintf_r+0xea>
 8007faa:	06d0      	lsls	r0, r2, #27
 8007fac:	bf44      	itt	mi
 8007fae:	2320      	movmi	r3, #32
 8007fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb4:	0711      	lsls	r1, r2, #28
 8007fb6:	bf44      	itt	mi
 8007fb8:	232b      	movmi	r3, #43	@ 0x2b
 8007fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc4:	d015      	beq.n	8007ff2 <_svfiprintf_r+0xfa>
 8007fc6:	9a07      	ldr	r2, [sp, #28]
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f04f 0c0a 	mov.w	ip, #10
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd6:	3b30      	subs	r3, #48	@ 0x30
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	d94b      	bls.n	8008074 <_svfiprintf_r+0x17c>
 8007fdc:	b1b0      	cbz	r0, 800800c <_svfiprintf_r+0x114>
 8007fde:	9207      	str	r2, [sp, #28]
 8007fe0:	e014      	b.n	800800c <_svfiprintf_r+0x114>
 8007fe2:	eba0 0308 	sub.w	r3, r0, r8
 8007fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	46a2      	mov	sl, r4
 8007ff0:	e7d2      	b.n	8007f98 <_svfiprintf_r+0xa0>
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	1d19      	adds	r1, r3, #4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	9103      	str	r1, [sp, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bfbb      	ittet	lt
 8007ffe:	425b      	neglt	r3, r3
 8008000:	f042 0202 	orrlt.w	r2, r2, #2
 8008004:	9307      	strge	r3, [sp, #28]
 8008006:	9307      	strlt	r3, [sp, #28]
 8008008:	bfb8      	it	lt
 800800a:	9204      	strlt	r2, [sp, #16]
 800800c:	7823      	ldrb	r3, [r4, #0]
 800800e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008010:	d10a      	bne.n	8008028 <_svfiprintf_r+0x130>
 8008012:	7863      	ldrb	r3, [r4, #1]
 8008014:	2b2a      	cmp	r3, #42	@ 0x2a
 8008016:	d132      	bne.n	800807e <_svfiprintf_r+0x186>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	9203      	str	r2, [sp, #12]
 8008020:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008024:	3402      	adds	r4, #2
 8008026:	9305      	str	r3, [sp, #20]
 8008028:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80080ec <_svfiprintf_r+0x1f4>
 800802c:	7821      	ldrb	r1, [r4, #0]
 800802e:	2203      	movs	r2, #3
 8008030:	4650      	mov	r0, sl
 8008032:	f7f8 f8dd 	bl	80001f0 <memchr>
 8008036:	b138      	cbz	r0, 8008048 <_svfiprintf_r+0x150>
 8008038:	9b04      	ldr	r3, [sp, #16]
 800803a:	eba0 000a 	sub.w	r0, r0, sl
 800803e:	2240      	movs	r2, #64	@ 0x40
 8008040:	4082      	lsls	r2, r0
 8008042:	4313      	orrs	r3, r2
 8008044:	3401      	adds	r4, #1
 8008046:	9304      	str	r3, [sp, #16]
 8008048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804c:	4824      	ldr	r0, [pc, #144]	@ (80080e0 <_svfiprintf_r+0x1e8>)
 800804e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008052:	2206      	movs	r2, #6
 8008054:	f7f8 f8cc 	bl	80001f0 <memchr>
 8008058:	2800      	cmp	r0, #0
 800805a:	d036      	beq.n	80080ca <_svfiprintf_r+0x1d2>
 800805c:	4b21      	ldr	r3, [pc, #132]	@ (80080e4 <_svfiprintf_r+0x1ec>)
 800805e:	bb1b      	cbnz	r3, 80080a8 <_svfiprintf_r+0x1b0>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	3307      	adds	r3, #7
 8008064:	f023 0307 	bic.w	r3, r3, #7
 8008068:	3308      	adds	r3, #8
 800806a:	9303      	str	r3, [sp, #12]
 800806c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806e:	4433      	add	r3, r6
 8008070:	9309      	str	r3, [sp, #36]	@ 0x24
 8008072:	e76a      	b.n	8007f4a <_svfiprintf_r+0x52>
 8008074:	fb0c 3202 	mla	r2, ip, r2, r3
 8008078:	460c      	mov	r4, r1
 800807a:	2001      	movs	r0, #1
 800807c:	e7a8      	b.n	8007fd0 <_svfiprintf_r+0xd8>
 800807e:	2300      	movs	r3, #0
 8008080:	3401      	adds	r4, #1
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	4619      	mov	r1, r3
 8008086:	f04f 0c0a 	mov.w	ip, #10
 800808a:	4620      	mov	r0, r4
 800808c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008090:	3a30      	subs	r2, #48	@ 0x30
 8008092:	2a09      	cmp	r2, #9
 8008094:	d903      	bls.n	800809e <_svfiprintf_r+0x1a6>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0c6      	beq.n	8008028 <_svfiprintf_r+0x130>
 800809a:	9105      	str	r1, [sp, #20]
 800809c:	e7c4      	b.n	8008028 <_svfiprintf_r+0x130>
 800809e:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a2:	4604      	mov	r4, r0
 80080a4:	2301      	movs	r3, #1
 80080a6:	e7f0      	b.n	800808a <_svfiprintf_r+0x192>
 80080a8:	ab03      	add	r3, sp, #12
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	462a      	mov	r2, r5
 80080ae:	4b0e      	ldr	r3, [pc, #56]	@ (80080e8 <_svfiprintf_r+0x1f0>)
 80080b0:	a904      	add	r1, sp, #16
 80080b2:	4638      	mov	r0, r7
 80080b4:	f3af 8000 	nop.w
 80080b8:	1c42      	adds	r2, r0, #1
 80080ba:	4606      	mov	r6, r0
 80080bc:	d1d6      	bne.n	800806c <_svfiprintf_r+0x174>
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	065b      	lsls	r3, r3, #25
 80080c2:	f53f af2d 	bmi.w	8007f20 <_svfiprintf_r+0x28>
 80080c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080c8:	e72c      	b.n	8007f24 <_svfiprintf_r+0x2c>
 80080ca:	ab03      	add	r3, sp, #12
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	462a      	mov	r2, r5
 80080d0:	4b05      	ldr	r3, [pc, #20]	@ (80080e8 <_svfiprintf_r+0x1f0>)
 80080d2:	a904      	add	r1, sp, #16
 80080d4:	4638      	mov	r0, r7
 80080d6:	f000 f9bb 	bl	8008450 <_printf_i>
 80080da:	e7ed      	b.n	80080b8 <_svfiprintf_r+0x1c0>
 80080dc:	08009304 	.word	0x08009304
 80080e0:	0800930e 	.word	0x0800930e
 80080e4:	00000000 	.word	0x00000000
 80080e8:	08007e41 	.word	0x08007e41
 80080ec:	0800930a 	.word	0x0800930a

080080f0 <__sfputc_r>:
 80080f0:	6893      	ldr	r3, [r2, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	b410      	push	{r4}
 80080f8:	6093      	str	r3, [r2, #8]
 80080fa:	da08      	bge.n	800810e <__sfputc_r+0x1e>
 80080fc:	6994      	ldr	r4, [r2, #24]
 80080fe:	42a3      	cmp	r3, r4
 8008100:	db01      	blt.n	8008106 <__sfputc_r+0x16>
 8008102:	290a      	cmp	r1, #10
 8008104:	d103      	bne.n	800810e <__sfputc_r+0x1e>
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810a:	f7ff bd20 	b.w	8007b4e <__swbuf_r>
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	1c58      	adds	r0, r3, #1
 8008112:	6010      	str	r0, [r2, #0]
 8008114:	7019      	strb	r1, [r3, #0]
 8008116:	4608      	mov	r0, r1
 8008118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811c:	4770      	bx	lr

0800811e <__sfputs_r>:
 800811e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	460f      	mov	r7, r1
 8008124:	4614      	mov	r4, r2
 8008126:	18d5      	adds	r5, r2, r3
 8008128:	42ac      	cmp	r4, r5
 800812a:	d101      	bne.n	8008130 <__sfputs_r+0x12>
 800812c:	2000      	movs	r0, #0
 800812e:	e007      	b.n	8008140 <__sfputs_r+0x22>
 8008130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008134:	463a      	mov	r2, r7
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ffda 	bl	80080f0 <__sfputc_r>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d1f3      	bne.n	8008128 <__sfputs_r+0xa>
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008144 <_vfiprintf_r>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	460d      	mov	r5, r1
 800814a:	b09d      	sub	sp, #116	@ 0x74
 800814c:	4614      	mov	r4, r2
 800814e:	4698      	mov	r8, r3
 8008150:	4606      	mov	r6, r0
 8008152:	b118      	cbz	r0, 800815c <_vfiprintf_r+0x18>
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b90b      	cbnz	r3, 800815c <_vfiprintf_r+0x18>
 8008158:	f7ff fbee 	bl	8007938 <__sinit>
 800815c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800815e:	07d9      	lsls	r1, r3, #31
 8008160:	d405      	bmi.n	800816e <_vfiprintf_r+0x2a>
 8008162:	89ab      	ldrh	r3, [r5, #12]
 8008164:	059a      	lsls	r2, r3, #22
 8008166:	d402      	bmi.n	800816e <_vfiprintf_r+0x2a>
 8008168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800816a:	f7ff fe0e 	bl	8007d8a <__retarget_lock_acquire_recursive>
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	071b      	lsls	r3, r3, #28
 8008172:	d501      	bpl.n	8008178 <_vfiprintf_r+0x34>
 8008174:	692b      	ldr	r3, [r5, #16]
 8008176:	b99b      	cbnz	r3, 80081a0 <_vfiprintf_r+0x5c>
 8008178:	4629      	mov	r1, r5
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff fd26 	bl	8007bcc <__swsetup_r>
 8008180:	b170      	cbz	r0, 80081a0 <_vfiprintf_r+0x5c>
 8008182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008184:	07dc      	lsls	r4, r3, #31
 8008186:	d504      	bpl.n	8008192 <_vfiprintf_r+0x4e>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800818c:	b01d      	add	sp, #116	@ 0x74
 800818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	0598      	lsls	r0, r3, #22
 8008196:	d4f7      	bmi.n	8008188 <_vfiprintf_r+0x44>
 8008198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800819a:	f7ff fdf7 	bl	8007d8c <__retarget_lock_release_recursive>
 800819e:	e7f3      	b.n	8008188 <_vfiprintf_r+0x44>
 80081a0:	2300      	movs	r3, #0
 80081a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a4:	2320      	movs	r3, #32
 80081a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ae:	2330      	movs	r3, #48	@ 0x30
 80081b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008360 <_vfiprintf_r+0x21c>
 80081b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081b8:	f04f 0901 	mov.w	r9, #1
 80081bc:	4623      	mov	r3, r4
 80081be:	469a      	mov	sl, r3
 80081c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081c4:	b10a      	cbz	r2, 80081ca <_vfiprintf_r+0x86>
 80081c6:	2a25      	cmp	r2, #37	@ 0x25
 80081c8:	d1f9      	bne.n	80081be <_vfiprintf_r+0x7a>
 80081ca:	ebba 0b04 	subs.w	fp, sl, r4
 80081ce:	d00b      	beq.n	80081e8 <_vfiprintf_r+0xa4>
 80081d0:	465b      	mov	r3, fp
 80081d2:	4622      	mov	r2, r4
 80081d4:	4629      	mov	r1, r5
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ffa1 	bl	800811e <__sfputs_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	f000 80a7 	beq.w	8008330 <_vfiprintf_r+0x1ec>
 80081e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081e4:	445a      	add	r2, fp
 80081e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80081e8:	f89a 3000 	ldrb.w	r3, [sl]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 809f 	beq.w	8008330 <_vfiprintf_r+0x1ec>
 80081f2:	2300      	movs	r3, #0
 80081f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081fc:	f10a 0a01 	add.w	sl, sl, #1
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	9307      	str	r3, [sp, #28]
 8008204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008208:	931a      	str	r3, [sp, #104]	@ 0x68
 800820a:	4654      	mov	r4, sl
 800820c:	2205      	movs	r2, #5
 800820e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008212:	4853      	ldr	r0, [pc, #332]	@ (8008360 <_vfiprintf_r+0x21c>)
 8008214:	f7f7 ffec 	bl	80001f0 <memchr>
 8008218:	9a04      	ldr	r2, [sp, #16]
 800821a:	b9d8      	cbnz	r0, 8008254 <_vfiprintf_r+0x110>
 800821c:	06d1      	lsls	r1, r2, #27
 800821e:	bf44      	itt	mi
 8008220:	2320      	movmi	r3, #32
 8008222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008226:	0713      	lsls	r3, r2, #28
 8008228:	bf44      	itt	mi
 800822a:	232b      	movmi	r3, #43	@ 0x2b
 800822c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008230:	f89a 3000 	ldrb.w	r3, [sl]
 8008234:	2b2a      	cmp	r3, #42	@ 0x2a
 8008236:	d015      	beq.n	8008264 <_vfiprintf_r+0x120>
 8008238:	9a07      	ldr	r2, [sp, #28]
 800823a:	4654      	mov	r4, sl
 800823c:	2000      	movs	r0, #0
 800823e:	f04f 0c0a 	mov.w	ip, #10
 8008242:	4621      	mov	r1, r4
 8008244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008248:	3b30      	subs	r3, #48	@ 0x30
 800824a:	2b09      	cmp	r3, #9
 800824c:	d94b      	bls.n	80082e6 <_vfiprintf_r+0x1a2>
 800824e:	b1b0      	cbz	r0, 800827e <_vfiprintf_r+0x13a>
 8008250:	9207      	str	r2, [sp, #28]
 8008252:	e014      	b.n	800827e <_vfiprintf_r+0x13a>
 8008254:	eba0 0308 	sub.w	r3, r0, r8
 8008258:	fa09 f303 	lsl.w	r3, r9, r3
 800825c:	4313      	orrs	r3, r2
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	46a2      	mov	sl, r4
 8008262:	e7d2      	b.n	800820a <_vfiprintf_r+0xc6>
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	1d19      	adds	r1, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	9103      	str	r1, [sp, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfbb      	ittet	lt
 8008270:	425b      	neglt	r3, r3
 8008272:	f042 0202 	orrlt.w	r2, r2, #2
 8008276:	9307      	strge	r3, [sp, #28]
 8008278:	9307      	strlt	r3, [sp, #28]
 800827a:	bfb8      	it	lt
 800827c:	9204      	strlt	r2, [sp, #16]
 800827e:	7823      	ldrb	r3, [r4, #0]
 8008280:	2b2e      	cmp	r3, #46	@ 0x2e
 8008282:	d10a      	bne.n	800829a <_vfiprintf_r+0x156>
 8008284:	7863      	ldrb	r3, [r4, #1]
 8008286:	2b2a      	cmp	r3, #42	@ 0x2a
 8008288:	d132      	bne.n	80082f0 <_vfiprintf_r+0x1ac>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	1d1a      	adds	r2, r3, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	9203      	str	r2, [sp, #12]
 8008292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008296:	3402      	adds	r4, #2
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008370 <_vfiprintf_r+0x22c>
 800829e:	7821      	ldrb	r1, [r4, #0]
 80082a0:	2203      	movs	r2, #3
 80082a2:	4650      	mov	r0, sl
 80082a4:	f7f7 ffa4 	bl	80001f0 <memchr>
 80082a8:	b138      	cbz	r0, 80082ba <_vfiprintf_r+0x176>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	eba0 000a 	sub.w	r0, r0, sl
 80082b0:	2240      	movs	r2, #64	@ 0x40
 80082b2:	4082      	lsls	r2, r0
 80082b4:	4313      	orrs	r3, r2
 80082b6:	3401      	adds	r4, #1
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082be:	4829      	ldr	r0, [pc, #164]	@ (8008364 <_vfiprintf_r+0x220>)
 80082c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082c4:	2206      	movs	r2, #6
 80082c6:	f7f7 ff93 	bl	80001f0 <memchr>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d03f      	beq.n	800834e <_vfiprintf_r+0x20a>
 80082ce:	4b26      	ldr	r3, [pc, #152]	@ (8008368 <_vfiprintf_r+0x224>)
 80082d0:	bb1b      	cbnz	r3, 800831a <_vfiprintf_r+0x1d6>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	3307      	adds	r3, #7
 80082d6:	f023 0307 	bic.w	r3, r3, #7
 80082da:	3308      	adds	r3, #8
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e0:	443b      	add	r3, r7
 80082e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e4:	e76a      	b.n	80081bc <_vfiprintf_r+0x78>
 80082e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ea:	460c      	mov	r4, r1
 80082ec:	2001      	movs	r0, #1
 80082ee:	e7a8      	b.n	8008242 <_vfiprintf_r+0xfe>
 80082f0:	2300      	movs	r3, #0
 80082f2:	3401      	adds	r4, #1
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	4619      	mov	r1, r3
 80082f8:	f04f 0c0a 	mov.w	ip, #10
 80082fc:	4620      	mov	r0, r4
 80082fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008302:	3a30      	subs	r2, #48	@ 0x30
 8008304:	2a09      	cmp	r2, #9
 8008306:	d903      	bls.n	8008310 <_vfiprintf_r+0x1cc>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0c6      	beq.n	800829a <_vfiprintf_r+0x156>
 800830c:	9105      	str	r1, [sp, #20]
 800830e:	e7c4      	b.n	800829a <_vfiprintf_r+0x156>
 8008310:	fb0c 2101 	mla	r1, ip, r1, r2
 8008314:	4604      	mov	r4, r0
 8008316:	2301      	movs	r3, #1
 8008318:	e7f0      	b.n	80082fc <_vfiprintf_r+0x1b8>
 800831a:	ab03      	add	r3, sp, #12
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	462a      	mov	r2, r5
 8008320:	4b12      	ldr	r3, [pc, #72]	@ (800836c <_vfiprintf_r+0x228>)
 8008322:	a904      	add	r1, sp, #16
 8008324:	4630      	mov	r0, r6
 8008326:	f3af 8000 	nop.w
 800832a:	4607      	mov	r7, r0
 800832c:	1c78      	adds	r0, r7, #1
 800832e:	d1d6      	bne.n	80082de <_vfiprintf_r+0x19a>
 8008330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008332:	07d9      	lsls	r1, r3, #31
 8008334:	d405      	bmi.n	8008342 <_vfiprintf_r+0x1fe>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	059a      	lsls	r2, r3, #22
 800833a:	d402      	bmi.n	8008342 <_vfiprintf_r+0x1fe>
 800833c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800833e:	f7ff fd25 	bl	8007d8c <__retarget_lock_release_recursive>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	065b      	lsls	r3, r3, #25
 8008346:	f53f af1f 	bmi.w	8008188 <_vfiprintf_r+0x44>
 800834a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800834c:	e71e      	b.n	800818c <_vfiprintf_r+0x48>
 800834e:	ab03      	add	r3, sp, #12
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	462a      	mov	r2, r5
 8008354:	4b05      	ldr	r3, [pc, #20]	@ (800836c <_vfiprintf_r+0x228>)
 8008356:	a904      	add	r1, sp, #16
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f879 	bl	8008450 <_printf_i>
 800835e:	e7e4      	b.n	800832a <_vfiprintf_r+0x1e6>
 8008360:	08009304 	.word	0x08009304
 8008364:	0800930e 	.word	0x0800930e
 8008368:	00000000 	.word	0x00000000
 800836c:	0800811f 	.word	0x0800811f
 8008370:	0800930a 	.word	0x0800930a

08008374 <_printf_common>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	4616      	mov	r6, r2
 800837a:	4698      	mov	r8, r3
 800837c:	688a      	ldr	r2, [r1, #8]
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008384:	4293      	cmp	r3, r2
 8008386:	bfb8      	it	lt
 8008388:	4613      	movlt	r3, r2
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008390:	4607      	mov	r7, r0
 8008392:	460c      	mov	r4, r1
 8008394:	b10a      	cbz	r2, 800839a <_printf_common+0x26>
 8008396:	3301      	adds	r3, #1
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0699      	lsls	r1, r3, #26
 800839e:	bf42      	ittt	mi
 80083a0:	6833      	ldrmi	r3, [r6, #0]
 80083a2:	3302      	addmi	r3, #2
 80083a4:	6033      	strmi	r3, [r6, #0]
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	f015 0506 	ands.w	r5, r5, #6
 80083ac:	d106      	bne.n	80083bc <_printf_common+0x48>
 80083ae:	f104 0a19 	add.w	sl, r4, #25
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	6832      	ldr	r2, [r6, #0]
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	dc26      	bgt.n	800840a <_printf_common+0x96>
 80083bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083c0:	6822      	ldr	r2, [r4, #0]
 80083c2:	3b00      	subs	r3, #0
 80083c4:	bf18      	it	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	0692      	lsls	r2, r2, #26
 80083ca:	d42b      	bmi.n	8008424 <_printf_common+0xb0>
 80083cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083d0:	4641      	mov	r1, r8
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c8      	blx	r9
 80083d6:	3001      	adds	r0, #1
 80083d8:	d01e      	beq.n	8008418 <_printf_common+0xa4>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	f003 0306 	and.w	r3, r3, #6
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	bf02      	ittt	eq
 80083e6:	68e5      	ldreq	r5, [r4, #12]
 80083e8:	6833      	ldreq	r3, [r6, #0]
 80083ea:	1aed      	subeq	r5, r5, r3
 80083ec:	68a3      	ldr	r3, [r4, #8]
 80083ee:	bf0c      	ite	eq
 80083f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f4:	2500      	movne	r5, #0
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bfc4      	itt	gt
 80083fa:	1a9b      	subgt	r3, r3, r2
 80083fc:	18ed      	addgt	r5, r5, r3
 80083fe:	2600      	movs	r6, #0
 8008400:	341a      	adds	r4, #26
 8008402:	42b5      	cmp	r5, r6
 8008404:	d11a      	bne.n	800843c <_printf_common+0xc8>
 8008406:	2000      	movs	r0, #0
 8008408:	e008      	b.n	800841c <_printf_common+0xa8>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4641      	mov	r1, r8
 8008410:	4638      	mov	r0, r7
 8008412:	47c8      	blx	r9
 8008414:	3001      	adds	r0, #1
 8008416:	d103      	bne.n	8008420 <_printf_common+0xac>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	3501      	adds	r5, #1
 8008422:	e7c6      	b.n	80083b2 <_printf_common+0x3e>
 8008424:	18e1      	adds	r1, r4, r3
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	2030      	movs	r0, #48	@ 0x30
 800842a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800842e:	4422      	add	r2, r4
 8008430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008438:	3302      	adds	r3, #2
 800843a:	e7c7      	b.n	80083cc <_printf_common+0x58>
 800843c:	2301      	movs	r3, #1
 800843e:	4622      	mov	r2, r4
 8008440:	4641      	mov	r1, r8
 8008442:	4638      	mov	r0, r7
 8008444:	47c8      	blx	r9
 8008446:	3001      	adds	r0, #1
 8008448:	d0e6      	beq.n	8008418 <_printf_common+0xa4>
 800844a:	3601      	adds	r6, #1
 800844c:	e7d9      	b.n	8008402 <_printf_common+0x8e>
	...

08008450 <_printf_i>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	7e0f      	ldrb	r7, [r1, #24]
 8008456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008458:	2f78      	cmp	r7, #120	@ 0x78
 800845a:	4691      	mov	r9, r2
 800845c:	4680      	mov	r8, r0
 800845e:	460c      	mov	r4, r1
 8008460:	469a      	mov	sl, r3
 8008462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008466:	d807      	bhi.n	8008478 <_printf_i+0x28>
 8008468:	2f62      	cmp	r7, #98	@ 0x62
 800846a:	d80a      	bhi.n	8008482 <_printf_i+0x32>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f000 80d1 	beq.w	8008614 <_printf_i+0x1c4>
 8008472:	2f58      	cmp	r7, #88	@ 0x58
 8008474:	f000 80b8 	beq.w	80085e8 <_printf_i+0x198>
 8008478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800847c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008480:	e03a      	b.n	80084f8 <_printf_i+0xa8>
 8008482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008486:	2b15      	cmp	r3, #21
 8008488:	d8f6      	bhi.n	8008478 <_printf_i+0x28>
 800848a:	a101      	add	r1, pc, #4	@ (adr r1, 8008490 <_printf_i+0x40>)
 800848c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084fd 	.word	0x080084fd
 8008498:	08008479 	.word	0x08008479
 800849c:	08008479 	.word	0x08008479
 80084a0:	08008479 	.word	0x08008479
 80084a4:	08008479 	.word	0x08008479
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008479 	.word	0x08008479
 80084b0:	08008479 	.word	0x08008479
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	080085fb 	.word	0x080085fb
 80084c0:	08008527 	.word	0x08008527
 80084c4:	080085b5 	.word	0x080085b5
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	0800861d 	.word	0x0800861d
 80084d4:	08008479 	.word	0x08008479
 80084d8:	08008527 	.word	0x08008527
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085bd 	.word	0x080085bd
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6032      	str	r2, [r6, #0]
 80084f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084f8:	2301      	movs	r3, #1
 80084fa:	e09c      	b.n	8008636 <_printf_i+0x1e6>
 80084fc:	6833      	ldr	r3, [r6, #0]
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	1d19      	adds	r1, r3, #4
 8008502:	6031      	str	r1, [r6, #0]
 8008504:	0606      	lsls	r6, r0, #24
 8008506:	d501      	bpl.n	800850c <_printf_i+0xbc>
 8008508:	681d      	ldr	r5, [r3, #0]
 800850a:	e003      	b.n	8008514 <_printf_i+0xc4>
 800850c:	0645      	lsls	r5, r0, #25
 800850e:	d5fb      	bpl.n	8008508 <_printf_i+0xb8>
 8008510:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008514:	2d00      	cmp	r5, #0
 8008516:	da03      	bge.n	8008520 <_printf_i+0xd0>
 8008518:	232d      	movs	r3, #45	@ 0x2d
 800851a:	426d      	negs	r5, r5
 800851c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008520:	4858      	ldr	r0, [pc, #352]	@ (8008684 <_printf_i+0x234>)
 8008522:	230a      	movs	r3, #10
 8008524:	e011      	b.n	800854a <_printf_i+0xfa>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	6833      	ldr	r3, [r6, #0]
 800852a:	0608      	lsls	r0, r1, #24
 800852c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008530:	d402      	bmi.n	8008538 <_printf_i+0xe8>
 8008532:	0649      	lsls	r1, r1, #25
 8008534:	bf48      	it	mi
 8008536:	b2ad      	uxthmi	r5, r5
 8008538:	2f6f      	cmp	r7, #111	@ 0x6f
 800853a:	4852      	ldr	r0, [pc, #328]	@ (8008684 <_printf_i+0x234>)
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	bf14      	ite	ne
 8008540:	230a      	movne	r3, #10
 8008542:	2308      	moveq	r3, #8
 8008544:	2100      	movs	r1, #0
 8008546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800854a:	6866      	ldr	r6, [r4, #4]
 800854c:	60a6      	str	r6, [r4, #8]
 800854e:	2e00      	cmp	r6, #0
 8008550:	db05      	blt.n	800855e <_printf_i+0x10e>
 8008552:	6821      	ldr	r1, [r4, #0]
 8008554:	432e      	orrs	r6, r5
 8008556:	f021 0104 	bic.w	r1, r1, #4
 800855a:	6021      	str	r1, [r4, #0]
 800855c:	d04b      	beq.n	80085f6 <_printf_i+0x1a6>
 800855e:	4616      	mov	r6, r2
 8008560:	fbb5 f1f3 	udiv	r1, r5, r3
 8008564:	fb03 5711 	mls	r7, r3, r1, r5
 8008568:	5dc7      	ldrb	r7, [r0, r7]
 800856a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800856e:	462f      	mov	r7, r5
 8008570:	42bb      	cmp	r3, r7
 8008572:	460d      	mov	r5, r1
 8008574:	d9f4      	bls.n	8008560 <_printf_i+0x110>
 8008576:	2b08      	cmp	r3, #8
 8008578:	d10b      	bne.n	8008592 <_printf_i+0x142>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	07df      	lsls	r7, r3, #31
 800857e:	d508      	bpl.n	8008592 <_printf_i+0x142>
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	6861      	ldr	r1, [r4, #4]
 8008584:	4299      	cmp	r1, r3
 8008586:	bfde      	ittt	le
 8008588:	2330      	movle	r3, #48	@ 0x30
 800858a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800858e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008592:	1b92      	subs	r2, r2, r6
 8008594:	6122      	str	r2, [r4, #16]
 8008596:	f8cd a000 	str.w	sl, [sp]
 800859a:	464b      	mov	r3, r9
 800859c:	aa03      	add	r2, sp, #12
 800859e:	4621      	mov	r1, r4
 80085a0:	4640      	mov	r0, r8
 80085a2:	f7ff fee7 	bl	8008374 <_printf_common>
 80085a6:	3001      	adds	r0, #1
 80085a8:	d14a      	bne.n	8008640 <_printf_i+0x1f0>
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085ae:	b004      	add	sp, #16
 80085b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	f043 0320 	orr.w	r3, r3, #32
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	4832      	ldr	r0, [pc, #200]	@ (8008688 <_printf_i+0x238>)
 80085be:	2778      	movs	r7, #120	@ 0x78
 80085c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	6831      	ldr	r1, [r6, #0]
 80085c8:	061f      	lsls	r7, r3, #24
 80085ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80085ce:	d402      	bmi.n	80085d6 <_printf_i+0x186>
 80085d0:	065f      	lsls	r7, r3, #25
 80085d2:	bf48      	it	mi
 80085d4:	b2ad      	uxthmi	r5, r5
 80085d6:	6031      	str	r1, [r6, #0]
 80085d8:	07d9      	lsls	r1, r3, #31
 80085da:	bf44      	itt	mi
 80085dc:	f043 0320 	orrmi.w	r3, r3, #32
 80085e0:	6023      	strmi	r3, [r4, #0]
 80085e2:	b11d      	cbz	r5, 80085ec <_printf_i+0x19c>
 80085e4:	2310      	movs	r3, #16
 80085e6:	e7ad      	b.n	8008544 <_printf_i+0xf4>
 80085e8:	4826      	ldr	r0, [pc, #152]	@ (8008684 <_printf_i+0x234>)
 80085ea:	e7e9      	b.n	80085c0 <_printf_i+0x170>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	f023 0320 	bic.w	r3, r3, #32
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	e7f6      	b.n	80085e4 <_printf_i+0x194>
 80085f6:	4616      	mov	r6, r2
 80085f8:	e7bd      	b.n	8008576 <_printf_i+0x126>
 80085fa:	6833      	ldr	r3, [r6, #0]
 80085fc:	6825      	ldr	r5, [r4, #0]
 80085fe:	6961      	ldr	r1, [r4, #20]
 8008600:	1d18      	adds	r0, r3, #4
 8008602:	6030      	str	r0, [r6, #0]
 8008604:	062e      	lsls	r6, r5, #24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	d501      	bpl.n	800860e <_printf_i+0x1be>
 800860a:	6019      	str	r1, [r3, #0]
 800860c:	e002      	b.n	8008614 <_printf_i+0x1c4>
 800860e:	0668      	lsls	r0, r5, #25
 8008610:	d5fb      	bpl.n	800860a <_printf_i+0x1ba>
 8008612:	8019      	strh	r1, [r3, #0]
 8008614:	2300      	movs	r3, #0
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	4616      	mov	r6, r2
 800861a:	e7bc      	b.n	8008596 <_printf_i+0x146>
 800861c:	6833      	ldr	r3, [r6, #0]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	6032      	str	r2, [r6, #0]
 8008622:	681e      	ldr	r6, [r3, #0]
 8008624:	6862      	ldr	r2, [r4, #4]
 8008626:	2100      	movs	r1, #0
 8008628:	4630      	mov	r0, r6
 800862a:	f7f7 fde1 	bl	80001f0 <memchr>
 800862e:	b108      	cbz	r0, 8008634 <_printf_i+0x1e4>
 8008630:	1b80      	subs	r0, r0, r6
 8008632:	6060      	str	r0, [r4, #4]
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	2300      	movs	r3, #0
 800863a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800863e:	e7aa      	b.n	8008596 <_printf_i+0x146>
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	4632      	mov	r2, r6
 8008644:	4649      	mov	r1, r9
 8008646:	4640      	mov	r0, r8
 8008648:	47d0      	blx	sl
 800864a:	3001      	adds	r0, #1
 800864c:	d0ad      	beq.n	80085aa <_printf_i+0x15a>
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	079b      	lsls	r3, r3, #30
 8008652:	d413      	bmi.n	800867c <_printf_i+0x22c>
 8008654:	68e0      	ldr	r0, [r4, #12]
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	4298      	cmp	r0, r3
 800865a:	bfb8      	it	lt
 800865c:	4618      	movlt	r0, r3
 800865e:	e7a6      	b.n	80085ae <_printf_i+0x15e>
 8008660:	2301      	movs	r3, #1
 8008662:	4632      	mov	r2, r6
 8008664:	4649      	mov	r1, r9
 8008666:	4640      	mov	r0, r8
 8008668:	47d0      	blx	sl
 800866a:	3001      	adds	r0, #1
 800866c:	d09d      	beq.n	80085aa <_printf_i+0x15a>
 800866e:	3501      	adds	r5, #1
 8008670:	68e3      	ldr	r3, [r4, #12]
 8008672:	9903      	ldr	r1, [sp, #12]
 8008674:	1a5b      	subs	r3, r3, r1
 8008676:	42ab      	cmp	r3, r5
 8008678:	dcf2      	bgt.n	8008660 <_printf_i+0x210>
 800867a:	e7eb      	b.n	8008654 <_printf_i+0x204>
 800867c:	2500      	movs	r5, #0
 800867e:	f104 0619 	add.w	r6, r4, #25
 8008682:	e7f5      	b.n	8008670 <_printf_i+0x220>
 8008684:	08009315 	.word	0x08009315
 8008688:	08009326 	.word	0x08009326

0800868c <__sflush_r>:
 800868c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008694:	0716      	lsls	r6, r2, #28
 8008696:	4605      	mov	r5, r0
 8008698:	460c      	mov	r4, r1
 800869a:	d454      	bmi.n	8008746 <__sflush_r+0xba>
 800869c:	684b      	ldr	r3, [r1, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dc02      	bgt.n	80086a8 <__sflush_r+0x1c>
 80086a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dd48      	ble.n	800873a <__sflush_r+0xae>
 80086a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086aa:	2e00      	cmp	r6, #0
 80086ac:	d045      	beq.n	800873a <__sflush_r+0xae>
 80086ae:	2300      	movs	r3, #0
 80086b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086b4:	682f      	ldr	r7, [r5, #0]
 80086b6:	6a21      	ldr	r1, [r4, #32]
 80086b8:	602b      	str	r3, [r5, #0]
 80086ba:	d030      	beq.n	800871e <__sflush_r+0x92>
 80086bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	0759      	lsls	r1, r3, #29
 80086c2:	d505      	bpl.n	80086d0 <__sflush_r+0x44>
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	1ad2      	subs	r2, r2, r3
 80086c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086ca:	b10b      	cbz	r3, 80086d0 <__sflush_r+0x44>
 80086cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086ce:	1ad2      	subs	r2, r2, r3
 80086d0:	2300      	movs	r3, #0
 80086d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086d4:	6a21      	ldr	r1, [r4, #32]
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b0      	blx	r6
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	d106      	bne.n	80086ee <__sflush_r+0x62>
 80086e0:	6829      	ldr	r1, [r5, #0]
 80086e2:	291d      	cmp	r1, #29
 80086e4:	d82b      	bhi.n	800873e <__sflush_r+0xb2>
 80086e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008790 <__sflush_r+0x104>)
 80086e8:	40ca      	lsrs	r2, r1
 80086ea:	07d6      	lsls	r6, r2, #31
 80086ec:	d527      	bpl.n	800873e <__sflush_r+0xb2>
 80086ee:	2200      	movs	r2, #0
 80086f0:	6062      	str	r2, [r4, #4]
 80086f2:	04d9      	lsls	r1, r3, #19
 80086f4:	6922      	ldr	r2, [r4, #16]
 80086f6:	6022      	str	r2, [r4, #0]
 80086f8:	d504      	bpl.n	8008704 <__sflush_r+0x78>
 80086fa:	1c42      	adds	r2, r0, #1
 80086fc:	d101      	bne.n	8008702 <__sflush_r+0x76>
 80086fe:	682b      	ldr	r3, [r5, #0]
 8008700:	b903      	cbnz	r3, 8008704 <__sflush_r+0x78>
 8008702:	6560      	str	r0, [r4, #84]	@ 0x54
 8008704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008706:	602f      	str	r7, [r5, #0]
 8008708:	b1b9      	cbz	r1, 800873a <__sflush_r+0xae>
 800870a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800870e:	4299      	cmp	r1, r3
 8008710:	d002      	beq.n	8008718 <__sflush_r+0x8c>
 8008712:	4628      	mov	r0, r5
 8008714:	f7ff fb4a 	bl	8007dac <_free_r>
 8008718:	2300      	movs	r3, #0
 800871a:	6363      	str	r3, [r4, #52]	@ 0x34
 800871c:	e00d      	b.n	800873a <__sflush_r+0xae>
 800871e:	2301      	movs	r3, #1
 8008720:	4628      	mov	r0, r5
 8008722:	47b0      	blx	r6
 8008724:	4602      	mov	r2, r0
 8008726:	1c50      	adds	r0, r2, #1
 8008728:	d1c9      	bne.n	80086be <__sflush_r+0x32>
 800872a:	682b      	ldr	r3, [r5, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0c6      	beq.n	80086be <__sflush_r+0x32>
 8008730:	2b1d      	cmp	r3, #29
 8008732:	d001      	beq.n	8008738 <__sflush_r+0xac>
 8008734:	2b16      	cmp	r3, #22
 8008736:	d11e      	bne.n	8008776 <__sflush_r+0xea>
 8008738:	602f      	str	r7, [r5, #0]
 800873a:	2000      	movs	r0, #0
 800873c:	e022      	b.n	8008784 <__sflush_r+0xf8>
 800873e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008742:	b21b      	sxth	r3, r3
 8008744:	e01b      	b.n	800877e <__sflush_r+0xf2>
 8008746:	690f      	ldr	r7, [r1, #16]
 8008748:	2f00      	cmp	r7, #0
 800874a:	d0f6      	beq.n	800873a <__sflush_r+0xae>
 800874c:	0793      	lsls	r3, r2, #30
 800874e:	680e      	ldr	r6, [r1, #0]
 8008750:	bf08      	it	eq
 8008752:	694b      	ldreq	r3, [r1, #20]
 8008754:	600f      	str	r7, [r1, #0]
 8008756:	bf18      	it	ne
 8008758:	2300      	movne	r3, #0
 800875a:	eba6 0807 	sub.w	r8, r6, r7
 800875e:	608b      	str	r3, [r1, #8]
 8008760:	f1b8 0f00 	cmp.w	r8, #0
 8008764:	dde9      	ble.n	800873a <__sflush_r+0xae>
 8008766:	6a21      	ldr	r1, [r4, #32]
 8008768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800876a:	4643      	mov	r3, r8
 800876c:	463a      	mov	r2, r7
 800876e:	4628      	mov	r0, r5
 8008770:	47b0      	blx	r6
 8008772:	2800      	cmp	r0, #0
 8008774:	dc08      	bgt.n	8008788 <__sflush_r+0xfc>
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008788:	4407      	add	r7, r0
 800878a:	eba8 0800 	sub.w	r8, r8, r0
 800878e:	e7e7      	b.n	8008760 <__sflush_r+0xd4>
 8008790:	20400001 	.word	0x20400001

08008794 <_fflush_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	690b      	ldr	r3, [r1, #16]
 8008798:	4605      	mov	r5, r0
 800879a:	460c      	mov	r4, r1
 800879c:	b913      	cbnz	r3, 80087a4 <_fflush_r+0x10>
 800879e:	2500      	movs	r5, #0
 80087a0:	4628      	mov	r0, r5
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	b118      	cbz	r0, 80087ae <_fflush_r+0x1a>
 80087a6:	6a03      	ldr	r3, [r0, #32]
 80087a8:	b90b      	cbnz	r3, 80087ae <_fflush_r+0x1a>
 80087aa:	f7ff f8c5 	bl	8007938 <__sinit>
 80087ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f3      	beq.n	800879e <_fflush_r+0xa>
 80087b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087b8:	07d0      	lsls	r0, r2, #31
 80087ba:	d404      	bmi.n	80087c6 <_fflush_r+0x32>
 80087bc:	0599      	lsls	r1, r3, #22
 80087be:	d402      	bmi.n	80087c6 <_fflush_r+0x32>
 80087c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087c2:	f7ff fae2 	bl	8007d8a <__retarget_lock_acquire_recursive>
 80087c6:	4628      	mov	r0, r5
 80087c8:	4621      	mov	r1, r4
 80087ca:	f7ff ff5f 	bl	800868c <__sflush_r>
 80087ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087d0:	07da      	lsls	r2, r3, #31
 80087d2:	4605      	mov	r5, r0
 80087d4:	d4e4      	bmi.n	80087a0 <_fflush_r+0xc>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	059b      	lsls	r3, r3, #22
 80087da:	d4e1      	bmi.n	80087a0 <_fflush_r+0xc>
 80087dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087de:	f7ff fad5 	bl	8007d8c <__retarget_lock_release_recursive>
 80087e2:	e7dd      	b.n	80087a0 <_fflush_r+0xc>

080087e4 <__swhatbuf_r>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	460c      	mov	r4, r1
 80087e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ec:	2900      	cmp	r1, #0
 80087ee:	b096      	sub	sp, #88	@ 0x58
 80087f0:	4615      	mov	r5, r2
 80087f2:	461e      	mov	r6, r3
 80087f4:	da0d      	bge.n	8008812 <__swhatbuf_r+0x2e>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087fc:	f04f 0100 	mov.w	r1, #0
 8008800:	bf14      	ite	ne
 8008802:	2340      	movne	r3, #64	@ 0x40
 8008804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008808:	2000      	movs	r0, #0
 800880a:	6031      	str	r1, [r6, #0]
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	b016      	add	sp, #88	@ 0x58
 8008810:	bd70      	pop	{r4, r5, r6, pc}
 8008812:	466a      	mov	r2, sp
 8008814:	f000 f862 	bl	80088dc <_fstat_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	dbec      	blt.n	80087f6 <__swhatbuf_r+0x12>
 800881c:	9901      	ldr	r1, [sp, #4]
 800881e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008826:	4259      	negs	r1, r3
 8008828:	4159      	adcs	r1, r3
 800882a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800882e:	e7eb      	b.n	8008808 <__swhatbuf_r+0x24>

08008830 <__smakebuf_r>:
 8008830:	898b      	ldrh	r3, [r1, #12]
 8008832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008834:	079d      	lsls	r5, r3, #30
 8008836:	4606      	mov	r6, r0
 8008838:	460c      	mov	r4, r1
 800883a:	d507      	bpl.n	800884c <__smakebuf_r+0x1c>
 800883c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	6123      	str	r3, [r4, #16]
 8008844:	2301      	movs	r3, #1
 8008846:	6163      	str	r3, [r4, #20]
 8008848:	b003      	add	sp, #12
 800884a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800884c:	ab01      	add	r3, sp, #4
 800884e:	466a      	mov	r2, sp
 8008850:	f7ff ffc8 	bl	80087e4 <__swhatbuf_r>
 8008854:	9f00      	ldr	r7, [sp, #0]
 8008856:	4605      	mov	r5, r0
 8008858:	4639      	mov	r1, r7
 800885a:	4630      	mov	r0, r6
 800885c:	f7fe ff54 	bl	8007708 <_malloc_r>
 8008860:	b948      	cbnz	r0, 8008876 <__smakebuf_r+0x46>
 8008862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008866:	059a      	lsls	r2, r3, #22
 8008868:	d4ee      	bmi.n	8008848 <__smakebuf_r+0x18>
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	f043 0302 	orr.w	r3, r3, #2
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	e7e2      	b.n	800883c <__smakebuf_r+0xc>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	6020      	str	r0, [r4, #0]
 800887a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008886:	b15b      	cbz	r3, 80088a0 <__smakebuf_r+0x70>
 8008888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800888c:	4630      	mov	r0, r6
 800888e:	f000 f837 	bl	8008900 <_isatty_r>
 8008892:	b128      	cbz	r0, 80088a0 <__smakebuf_r+0x70>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	f043 0301 	orr.w	r3, r3, #1
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	431d      	orrs	r5, r3
 80088a4:	81a5      	strh	r5, [r4, #12]
 80088a6:	e7cf      	b.n	8008848 <__smakebuf_r+0x18>

080088a8 <memmove>:
 80088a8:	4288      	cmp	r0, r1
 80088aa:	b510      	push	{r4, lr}
 80088ac:	eb01 0402 	add.w	r4, r1, r2
 80088b0:	d902      	bls.n	80088b8 <memmove+0x10>
 80088b2:	4284      	cmp	r4, r0
 80088b4:	4623      	mov	r3, r4
 80088b6:	d807      	bhi.n	80088c8 <memmove+0x20>
 80088b8:	1e43      	subs	r3, r0, #1
 80088ba:	42a1      	cmp	r1, r4
 80088bc:	d008      	beq.n	80088d0 <memmove+0x28>
 80088be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088c6:	e7f8      	b.n	80088ba <memmove+0x12>
 80088c8:	4402      	add	r2, r0
 80088ca:	4601      	mov	r1, r0
 80088cc:	428a      	cmp	r2, r1
 80088ce:	d100      	bne.n	80088d2 <memmove+0x2a>
 80088d0:	bd10      	pop	{r4, pc}
 80088d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088da:	e7f7      	b.n	80088cc <memmove+0x24>

080088dc <_fstat_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d07      	ldr	r5, [pc, #28]	@ (80088fc <_fstat_r+0x20>)
 80088e0:	2300      	movs	r3, #0
 80088e2:	4604      	mov	r4, r0
 80088e4:	4608      	mov	r0, r1
 80088e6:	4611      	mov	r1, r2
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	f7f8 f9ca 	bl	8000c82 <_fstat>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d102      	bne.n	80088f8 <_fstat_r+0x1c>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	b103      	cbz	r3, 80088f8 <_fstat_r+0x1c>
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	bd38      	pop	{r3, r4, r5, pc}
 80088fa:	bf00      	nop
 80088fc:	20000678 	.word	0x20000678

08008900 <_isatty_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d06      	ldr	r5, [pc, #24]	@ (800891c <_isatty_r+0x1c>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	f7f8 f9c9 	bl	8000ca2 <_isatty>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_isatty_r+0x1a>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_isatty_r+0x1a>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20000678 	.word	0x20000678

08008920 <_realloc_r>:
 8008920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	4607      	mov	r7, r0
 8008926:	4614      	mov	r4, r2
 8008928:	460d      	mov	r5, r1
 800892a:	b921      	cbnz	r1, 8008936 <_realloc_r+0x16>
 800892c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	4611      	mov	r1, r2
 8008932:	f7fe bee9 	b.w	8007708 <_malloc_r>
 8008936:	b92a      	cbnz	r2, 8008944 <_realloc_r+0x24>
 8008938:	f7ff fa38 	bl	8007dac <_free_r>
 800893c:	4625      	mov	r5, r4
 800893e:	4628      	mov	r0, r5
 8008940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008944:	f000 f81a 	bl	800897c <_malloc_usable_size_r>
 8008948:	4284      	cmp	r4, r0
 800894a:	4606      	mov	r6, r0
 800894c:	d802      	bhi.n	8008954 <_realloc_r+0x34>
 800894e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008952:	d8f4      	bhi.n	800893e <_realloc_r+0x1e>
 8008954:	4621      	mov	r1, r4
 8008956:	4638      	mov	r0, r7
 8008958:	f7fe fed6 	bl	8007708 <_malloc_r>
 800895c:	4680      	mov	r8, r0
 800895e:	b908      	cbnz	r0, 8008964 <_realloc_r+0x44>
 8008960:	4645      	mov	r5, r8
 8008962:	e7ec      	b.n	800893e <_realloc_r+0x1e>
 8008964:	42b4      	cmp	r4, r6
 8008966:	4622      	mov	r2, r4
 8008968:	4629      	mov	r1, r5
 800896a:	bf28      	it	cs
 800896c:	4632      	movcs	r2, r6
 800896e:	f7ff fa0e 	bl	8007d8e <memcpy>
 8008972:	4629      	mov	r1, r5
 8008974:	4638      	mov	r0, r7
 8008976:	f7ff fa19 	bl	8007dac <_free_r>
 800897a:	e7f1      	b.n	8008960 <_realloc_r+0x40>

0800897c <_malloc_usable_size_r>:
 800897c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008980:	1f18      	subs	r0, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	bfbc      	itt	lt
 8008986:	580b      	ldrlt	r3, [r1, r0]
 8008988:	18c0      	addlt	r0, r0, r3
 800898a:	4770      	bx	lr

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
