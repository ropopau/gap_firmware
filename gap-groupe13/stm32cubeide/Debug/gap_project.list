
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08009080  08009080  0000a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a14  08009a14  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a14  08009a14  0000aa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a1c  08009a1c  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a1c  08009a1c  0000aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a20  08009a20  0000aa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009a24  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  20000074  08009a98  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  08009a98  0000bef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015685  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ca  00000000  00000000  00020729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000240f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  00025138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b102  00000000  00000000  00025dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ddc  00000000  00000000  00040ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c42  00000000  00000000  00056caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea8ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  000ea930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ef4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009068 	.word	0x08009068

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009068 	.word	0x08009068

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <cmd_ping_callback>:

#include "gapcli_cmd_callback.h"


void cmd_ping_callback(gapcom_handle_t *handle, const void *proto_msg)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	gapcom_respond_ping(handle, GAPErrorCode_GAP_OK);
 80005c6:	2100      	movs	r1, #0
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f003 f989 	bl	80038e0 <gapcom_respond_ping>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <cmd_setverbosity_callback>:

void cmd_setverbosity_callback(gapcom_handle_t *handle, const void *proto_msg)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	gapcom_respond_set_log_verbosity(handle, GAPErrorCode_GAP_OK);
 80005e0:	2100      	movs	r1, #0
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f003 f9d6 	bl	8003994 <gapcom_respond_set_log_verbosity>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <gapcom_uart_fsm_init>:
static char header_buf[11];
static char payload_buf[1024];
static int expected_payload_size = 0;

void gapcom_uart_fsm_init(UART_HandleTypeDef *huart, gapcom_handle_t *gapcom_handle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	 gapcom_handle_instance = gapcom_handle;
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <gapcom_uart_fsm_init+0x34>)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	6013      	str	r3, [r2, #0]
	 gapcom_uart = huart;
 8000600:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <gapcom_uart_fsm_init+0x38>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]
	 fsm_state = FSM_HEADER;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <gapcom_uart_fsm_init+0x3c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <gapcom_uart_fsm_init+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2209      	movs	r2, #9
 8000612:	4907      	ldr	r1, [pc, #28]	@ (8000630 <gapcom_uart_fsm_init+0x40>)
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff28 	bl	800246a <HAL_UART_Receive_IT>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000094 	.word	0x20000094
 8000628:	20000090 	.word	0x20000090
 800062c:	20000098 	.word	0x20000098
 8000630:	2000009c 	.word	0x2000009c

08000634 <gapcom_uart_fsm_rx_callback>:

void gapcom_uart_fsm_rx_callback()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	if (fsm_state == FSM_HEADER)
 800063a:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <gapcom_uart_fsm_rx_callback+0x88>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d11f      	bne.n	8000682 <gapcom_uart_fsm_rx_callback+0x4e>
	{
		 uint16_t len = (header_buf[5] << 8) | header_buf[6];
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <gapcom_uart_fsm_rx_callback+0x8c>)
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	b21b      	sxth	r3, r3
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	b21a      	sxth	r2, r3
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <gapcom_uart_fsm_rx_callback+0x8c>)
 800064e:	799b      	ldrb	r3, [r3, #6]
 8000650:	b21b      	sxth	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b21b      	sxth	r3, r3
 8000656:	80fb      	strh	r3, [r7, #6]
		 expected_payload_size = len + GAPCOM_CRC_SIZE;
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	3302      	adds	r3, #2
 800065c:	4a19      	ldr	r2, [pc, #100]	@ (80006c4 <gapcom_uart_fsm_rx_callback+0x90>)
 800065e:	6013      	str	r3, [r2, #0]
		 fsm_state = FSM_PAYLOAD;
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <gapcom_uart_fsm_rx_callback+0x88>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)payload_buf, expected_payload_size);
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <gapcom_uart_fsm_rx_callback+0x94>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a16      	ldr	r2, [pc, #88]	@ (80006c4 <gapcom_uart_fsm_rx_callback+0x90>)
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	b292      	uxth	r2, r2
 8000670:	4916      	ldr	r1, [pc, #88]	@ (80006cc <gapcom_uart_fsm_rx_callback+0x98>)
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fef9 	bl	800246a <HAL_UART_Receive_IT>
		 send_log(VERBOSITY_INFO, payload_buf);
 8000678:	4914      	ldr	r1, [pc, #80]	@ (80006cc <gapcom_uart_fsm_rx_callback+0x98>)
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f8b0 	bl	80007e0 <send_log>
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)payload_buf, expected_payload_size);
		 fsm_state = FSM_HEADER;
		 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
	}
}
 8000680:	e018      	b.n	80006b4 <gapcom_uart_fsm_rx_callback+0x80>
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <gapcom_uart_fsm_rx_callback+0x9c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2209      	movs	r2, #9
 8000688:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <gapcom_uart_fsm_rx_callback+0x8c>)
 800068a:	4618      	mov	r0, r3
 800068c:	f002 feb9 	bl	8003402 <gapcom_accept>
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)payload_buf, expected_payload_size);
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <gapcom_uart_fsm_rx_callback+0x9c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <gapcom_uart_fsm_rx_callback+0x90>)
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	490c      	ldr	r1, [pc, #48]	@ (80006cc <gapcom_uart_fsm_rx_callback+0x98>)
 800069a:	4618      	mov	r0, r3
 800069c:	f002 feb1 	bl	8003402 <gapcom_accept>
		 fsm_state = FSM_HEADER;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <gapcom_uart_fsm_rx_callback+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <gapcom_uart_fsm_rx_callback+0x94>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2209      	movs	r2, #9
 80006ac:	4904      	ldr	r1, [pc, #16]	@ (80006c0 <gapcom_uart_fsm_rx_callback+0x8c>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fedb 	bl	800246a <HAL_UART_Receive_IT>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000098 	.word	0x20000098
 80006c0:	2000009c 	.word	0x2000009c
 80006c4:	200004a8 	.word	0x200004a8
 80006c8:	20000090 	.word	0x20000090
 80006cc:	200000a8 	.word	0x200000a8
 80006d0:	20000094 	.word	0x20000094

080006d4 <close_sender>:
static UART_HandleTypeDef *huart2_handle;

static gapcom_handle_t *gapcom_handle_instance;

int close_sender(gapcom_sender_t *self)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	return 0;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <open_sender>:

int open_sender(gapcom_sender_t *self)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <send_sender>:

ssize_t send_sender(gapcom_sender_t *self, const uint8_t *buf, size_t len)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit_IT(huart2_handle, buf, len);
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <send_sender+0x38>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	b292      	uxth	r2, r2
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fe71 	bl	80023fe <HAL_UART_Transmit_IT>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <send_sender+0x2a>
        return (ssize_t)len;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	e001      	b.n	800072e <send_sender+0x2e>
    } else {
        return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }}
 800072e:	4618      	mov	r0, r3
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200004ac 	.word	0x200004ac

0800073c <create_gapcom_instance>:
		.open = open_sender,
		.send = send_sender
};

void create_gapcom_instance(UART_HandleTypeDef *handle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	huart2_handle = handle;
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <create_gapcom_instance+0x58>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]
	gapcom_handle_instance = gapcom_create();
 800074a:	f002 fdff 	bl	800334c <gapcom_create>
 800074e:	4603      	mov	r3, r0
 8000750:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <create_gapcom_instance+0x5c>)
 8000752:	6013      	str	r3, [r2, #0]
	gapcom_set_sender_impl(gapcom_handle_instance, &gapcom_sender_t_impl);
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <create_gapcom_instance+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4910      	ldr	r1, [pc, #64]	@ (800079c <create_gapcom_instance+0x60>)
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fe26 	bl	80033ac <gapcom_set_sender_impl>
	gapcom_install_callback(gapcom_handle_instance, cmd_ping_callback, GAPCOM_MSG_MIN);
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <create_gapcom_instance+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	490e      	ldr	r1, [pc, #56]	@ (80007a0 <create_gapcom_instance+0x64>)
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fe31 	bl	80033d0 <gapcom_install_callback>
	gapcom_install_callback(gapcom_handle_instance, cmd_setverbosity_callback, GAPCOM_MSG_SET_LOG_VERBOSITY_REQ);
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <create_gapcom_instance+0x5c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2202      	movs	r2, #2
 8000774:	490b      	ldr	r1, [pc, #44]	@ (80007a4 <create_gapcom_instance+0x68>)
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fe2a 	bl	80033d0 <gapcom_install_callback>
	gapcom_uart_fsm_init(huart2_handle, gapcom_handle_instance);
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <create_gapcom_instance+0x58>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <create_gapcom_instance+0x5c>)
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff32 	bl	80005f0 <gapcom_uart_fsm_init>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200004ac 	.word	0x200004ac
 8000798:	200004b0 	.word	0x200004b0
 800079c:	20000000 	.word	0x20000000
 80007a0:	080005bd 	.word	0x080005bd
 80007a4:	080005d7 	.word	0x080005d7

080007a8 <receive_gapcom_incoming_uart_message>:

void receive_gapcom_incoming_uart_message(uint8_t *buf, uint16_t size)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
    gapcom_uart_fsm_rx_callback();
 80007b4:	f7ff ff3e 	bl	8000634 <gapcom_uart_fsm_rx_callback>

}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <init_log>:
UART_HandleTypeDef *huart_handler;

//static char buf[1024];

void init_log(UART_HandleTypeDef *huart)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	huart_handler = huart;
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <init_log+0x1c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200004b4 	.word	0x200004b4

080007e0 <send_log>:
static char buf[1024];



void send_log(enum VERBOSITY_LEVEL verbosity, const char *message)
{
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
	char *level = "[Info]";
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <send_log+0x74>)
 80007ee:	60fb      	str	r3, [r7, #12]
	if (verbosity == VERBOSITY_DEBUG)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d102      	bne.n	80007fc <send_log+0x1c>
	{
		level = "[Debug]";
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <send_log+0x78>)
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e00a      	b.n	8000812 <send_log+0x32>
	}
	else if (verbosity == VERBOSITY_WARNING)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d102      	bne.n	8000808 <send_log+0x28>
	{
		level = "[Warning]";
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <send_log+0x7c>)
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e004      	b.n	8000812 <send_log+0x32>
	}
	else if (verbosity == VERBOSITY_ERROR)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d101      	bne.n	8000812 <send_log+0x32>
	{
		level = "[Error]";
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <send_log+0x80>)
 8000810:	60fb      	str	r3, [r7, #12]
	}

	sprintf(buf, "%s %s\r\n", level, message);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	4913      	ldr	r1, [pc, #76]	@ (8000864 <send_log+0x84>)
 8000818:	4813      	ldr	r0, [pc, #76]	@ (8000868 <send_log+0x88>)
 800081a:	f007 fca1 	bl	8008160 <siprintf>
	HAL_UART_Transmit(huart_handler, (uint8_t*)buf, strlen(level) + strlen(message) + 3, HAL_MAX_DELAY);
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <send_log+0x8c>)
 8000820:	681d      	ldr	r5, [r3, #0]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff fcdc 	bl	80001e0 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29c      	uxth	r4, r3
 800082c:	6838      	ldr	r0, [r7, #0]
 800082e:	f7ff fcd7 	bl	80001e0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29b      	uxth	r3, r3
 8000836:	4423      	add	r3, r4
 8000838:	b29b      	uxth	r3, r3
 800083a:	3303      	adds	r3, #3
 800083c:	b29a      	uxth	r2, r3
 800083e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000842:	4909      	ldr	r1, [pc, #36]	@ (8000868 <send_log+0x88>)
 8000844:	4628      	mov	r0, r5
 8000846:	f001 fd4f 	bl	80022e8 <HAL_UART_Transmit>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bdb0      	pop	{r4, r5, r7, pc}
 8000852:	bf00      	nop
 8000854:	08009080 	.word	0x08009080
 8000858:	08009088 	.word	0x08009088
 800085c:	08009090 	.word	0x08009090
 8000860:	0800909c 	.word	0x0800909c
 8000864:	080090a4 	.word	0x080090a4
 8000868:	200004b8 	.word	0x200004b8
 800086c:	200004b4 	.word	0x200004b4

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fb98 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f81a 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 f8fc 	bl	8000a78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000880:	f000 f8a4 	bl	80009cc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000884:	f000 f8cc 	bl	8000a20 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000888:	f000 f872 	bl	8000970 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  create_gapcom_instance(&huart6);
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <main+0x34>)
 800088e:	f7ff ff55 	bl	800073c <create_gapcom_instance>
  init_log(&huart2);
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <main+0x38>)
 8000894:	f7ff ff94 	bl	80007c0 <init_log>
  send_log(VERBOSITY_INFO, "GAP system booted");
 8000898:	4904      	ldr	r1, [pc, #16]	@ (80008ac <main+0x3c>)
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ffa0 	bl	80007e0 <send_log>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <main+0x30>
 80008a4:	20000954 	.word	0x20000954
 80008a8:	2000090c 	.word	0x2000090c
 80008ac:	080090ac 	.word	0x080090ac

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2230      	movs	r2, #48	@ 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fd48 	bl	8008354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <SystemClock_Config+0xb8>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a22      	ldr	r2, [pc, #136]	@ (8000968 <SystemClock_Config+0xb8>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <SystemClock_Config+0xb8>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <SystemClock_Config+0xbc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <SystemClock_Config+0xbc>)
 80008fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <SystemClock_Config+0xbc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2310      	movs	r3, #16
 800091a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f837 	bl	8001998 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000930:	f000 f912 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fa9a 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800095a:	f000 f8fd 	bl	8000b58 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	@ 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000976:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <MX_I2C1_Init+0x54>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_I2C1_Init+0x50>)
 800097c:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_I2C1_Init+0x58>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_I2C1_Init+0x50>)
 800098e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_I2C1_Init+0x50>)
 80009ae:	f000 feaf 	bl	8001710 <HAL_I2C_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b8:	f000 f8ce 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200008b8 	.word	0x200008b8
 80009c4:	40005400 	.word	0x40005400
 80009c8:	000186a0 	.word	0x000186a0

080009cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <MX_USART2_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f001 fc20 	bl	8002248 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 f8a3 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000090c 	.word	0x2000090c
 8000a1c:	40004400 	.word	0x40004400

08000a20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	@ (8000a74 <MX_USART6_UART_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a38:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a5c:	f001 fbf4 	bl	8002248 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f000 f877 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000954 	.word	0x20000954
 8000a74:	40011400 	.word	0x40011400

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a1e      	ldr	r2, [pc, #120]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_GPIO_Init+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <MX_GPIO_Init+0x9c>)
 8000ae8:	f000 fdf8 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aec:	2320      	movs	r3, #32
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_GPIO_Init+0x9c>)
 8000b04:	f000 fc66 	bl	80013d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <HAL_UART_RxCpltCallback+0x24>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d103      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x1a>
		receive_gapcom_incoming_uart_message(rx_buff, 1);
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <HAL_UART_RxCpltCallback+0x28>)
 8000b2e:	f7ff fe3b 	bl	80007a8 <receive_gapcom_incoming_uart_message>
	}

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40011400 	.word	0x40011400
 8000b40:	2000099c 	.word	0x2000099c

08000b44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <HAL_I2C_MspInit+0x84>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_I2C_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	@ (8000c3c <HAL_I2C_MspInit+0x88>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_I2C_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf2:	23c0      	movs	r3, #192	@ 0xc0
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <HAL_I2C_MspInit+0x8c>)
 8000c0e:	f000 fbe1 	bl	80013d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_I2C_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_I2C_MspInit+0x88>)
 8000c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_I2C_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400

08000c44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3a      	ldr	r2, [pc, #232]	@ (8000d4c <HAL_UART_MspInit+0x108>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d134      	bne.n	8000cd0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	4b39      	ldr	r3, [pc, #228]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a38      	ldr	r2, [pc, #224]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a31      	ldr	r2, [pc, #196]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4826      	ldr	r0, [pc, #152]	@ (8000d54 <HAL_UART_MspInit+0x110>)
 8000cba:	f000 fb8b 	bl	80013d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2026      	movs	r0, #38	@ 0x26
 8000cc4:	f000 fabd 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc8:	2026      	movs	r0, #38	@ 0x26
 8000cca:	f000 fad6 	bl	800127a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cce:	e038      	b.n	8000d42 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	@ (8000d58 <HAL_UART_MspInit+0x114>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d133      	bne.n	8000d42 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_UART_MspInit+0x10c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	@ 0xc0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d22:	2308      	movs	r3, #8
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <HAL_UART_MspInit+0x118>)
 8000d2e:	f000 fb51 	bl	80013d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2047      	movs	r0, #71	@ 0x47
 8000d38:	f000 fa83 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d3c:	2047      	movs	r0, #71	@ 0x47
 8000d3e:	f000 fa9c 	bl	800127a <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	@ 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40011400 	.word	0x40011400
 8000d5c:	40020800 	.word	0x40020800

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f949 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <USART2_IRQHandler+0x10>)
 8000dc6:	f001 fb75 	bl	80024b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000090c 	.word	0x2000090c

08000dd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <USART6_IRQHandler+0x10>)
 8000dda:	f001 fb6b 	bl	80024b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000954 	.word	0x20000954

08000de8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
  }

  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e009      	b.n	8000e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	60ba      	str	r2, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf1      	blt.n	8000e34 <_write+0x12>
  }
  return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_close>:

int _close(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e82:	605a      	str	r2, [r3, #4]
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_isatty>:

int _isatty(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f007 fa8c 	bl	8008410 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20018000 	.word	0x20018000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	20000d9c 	.word	0x20000d9c
 8000f2c:	20000ef0 	.word	0x20000ef0

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f58:	f7ff ffea 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f007 fa4b 	bl	800841c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fc73 	bl	8000870 <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f98:	08009a24 	.word	0x08009a24
  ldr r2, =_sbss
 8000f9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fa0:	20000ef0 	.word	0x20000ef0

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f92b 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fdc2 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f943 	bl	8001296 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001028:	f000 f90b 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20000014 	.word	0x20000014
 8001048:	20000010 	.word	0x20000010

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000014 	.word	0x20000014
 8001070:	20000da0 	.word	0x20000da0

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000da0 	.word	0x20000da0

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff3e 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff8e 	bl	8001180 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff31 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa2 	bl	80011e8 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff feda 	bl	8001074 <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d008      	beq.n	80012e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e052      	b.n	8001386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0216 	bic.w	r2, r2, #22
 80012ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <HAL_DMA_Abort+0x62>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001330:	e013      	b.n	800135a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001332:	f7ff fe9f 	bl	8001074 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b05      	cmp	r3, #5
 800133e:	d90c      	bls.n	800135a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2220      	movs	r2, #32
 8001344:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e015      	b.n	8001386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e4      	bne.n	8001332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136c:	223f      	movs	r2, #63	@ 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d004      	beq.n	80013ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00c      	b.n	80013c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2205      	movs	r2, #5
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e159      	b.n	80016a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 8148 	bne.w	800169e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d005      	beq.n	8001426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	2b02      	cmp	r3, #2
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b03      	cmp	r3, #3
 8001492:	d017      	beq.n	80014c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d123      	bne.n	8001518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0203 	and.w	r2, r3, #3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a2 	beq.w	800169e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b57      	ldr	r3, [pc, #348]	@ (80016bc <HAL_GPIO_Init+0x2e8>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a56      	ldr	r2, [pc, #344]	@ (80016bc <HAL_GPIO_Init+0x2e8>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b54      	ldr	r3, [pc, #336]	@ (80016bc <HAL_GPIO_Init+0x2e8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a52      	ldr	r2, [pc, #328]	@ (80016c0 <HAL_GPIO_Init+0x2ec>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a49      	ldr	r2, [pc, #292]	@ (80016c4 <HAL_GPIO_Init+0x2f0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d019      	beq.n	80015d6 <HAL_GPIO_Init+0x202>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a48      	ldr	r2, [pc, #288]	@ (80016c8 <HAL_GPIO_Init+0x2f4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x1fe>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a47      	ldr	r2, [pc, #284]	@ (80016cc <HAL_GPIO_Init+0x2f8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x1fa>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a46      	ldr	r2, [pc, #280]	@ (80016d0 <HAL_GPIO_Init+0x2fc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x1f6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a45      	ldr	r2, [pc, #276]	@ (80016d4 <HAL_GPIO_Init+0x300>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x1f2>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x204>
 80015d6:	2300      	movs	r3, #0
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e8:	4935      	ldr	r1, [pc, #212]	@ (80016c0 <HAL_GPIO_Init+0x2ec>)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f6:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161a:	4a2f      	ldr	r2, [pc, #188]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001620:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001644:	4a24      	ldr	r2, [pc, #144]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800164a:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166e:	4a1a      	ldr	r2, [pc, #104]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001698:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <HAL_GPIO_Init+0x304>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3301      	adds	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	f67f aea2 	bls.w	80013f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40013800 	.word	0x40013800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e12b      	b.n	800197a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fa3c 	bl	8000bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2224      	movs	r2, #36	@ 0x24
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001762:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001774:	f000 fd40 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8001778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4a81      	ldr	r2, [pc, #516]	@ (8001984 <HAL_I2C_Init+0x274>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d807      	bhi.n	8001794 <HAL_I2C_Init+0x84>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4a80      	ldr	r2, [pc, #512]	@ (8001988 <HAL_I2C_Init+0x278>)
 8001788:	4293      	cmp	r3, r2
 800178a:	bf94      	ite	ls
 800178c:	2301      	movls	r3, #1
 800178e:	2300      	movhi	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	e006      	b.n	80017a2 <HAL_I2C_Init+0x92>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a7d      	ldr	r2, [pc, #500]	@ (800198c <HAL_I2C_Init+0x27c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	bf94      	ite	ls
 800179c:	2301      	movls	r3, #1
 800179e:	2300      	movhi	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0e7      	b.n	800197a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4a78      	ldr	r2, [pc, #480]	@ (8001990 <HAL_I2C_Init+0x280>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0c9b      	lsrs	r3, r3, #18
 80017b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001984 <HAL_I2C_Init+0x274>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d802      	bhi.n	80017e4 <HAL_I2C_Init+0xd4>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3301      	adds	r3, #1
 80017e2:	e009      	b.n	80017f8 <HAL_I2C_Init+0xe8>
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	4a69      	ldr	r2, [pc, #420]	@ (8001994 <HAL_I2C_Init+0x284>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	099b      	lsrs	r3, r3, #6
 80017f6:	3301      	adds	r3, #1
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800180a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	495c      	ldr	r1, [pc, #368]	@ (8001984 <HAL_I2C_Init+0x274>)
 8001814:	428b      	cmp	r3, r1
 8001816:	d819      	bhi.n	800184c <HAL_I2C_Init+0x13c>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e59      	subs	r1, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fbb1 f3f3 	udiv	r3, r1, r3
 8001826:	1c59      	adds	r1, r3, #1
 8001828:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800182c:	400b      	ands	r3, r1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <HAL_I2C_Init+0x138>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e59      	subs	r1, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001840:	3301      	adds	r3, #1
 8001842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001846:	e051      	b.n	80018ec <HAL_I2C_Init+0x1dc>
 8001848:	2304      	movs	r3, #4
 800184a:	e04f      	b.n	80018ec <HAL_I2C_Init+0x1dc>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_I2C_Init+0x168>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1e58      	subs	r0, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	440b      	add	r3, r1
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	e012      	b.n	800189e <HAL_I2C_Init+0x18e>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	0099      	lsls	r1, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	fbb0 f3f3 	udiv	r3, r0, r3
 800188e:	3301      	adds	r3, #1
 8001890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Init+0x196>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e022      	b.n	80018ec <HAL_I2C_Init+0x1dc>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <HAL_I2C_Init+0x1bc>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1e58      	subs	r0, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6859      	ldr	r1, [r3, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	440b      	add	r3, r1
 80018bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ca:	e00f      	b.n	80018ec <HAL_I2C_Init+0x1dc>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	0099      	lsls	r1, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800191a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6911      	ldr	r1, [r2, #16]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68d2      	ldr	r2, [r2, #12]
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	430b      	orrs	r3, r1
 800192e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2220      	movs	r2, #32
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	000186a0 	.word	0x000186a0
 8001988:	001e847f 	.word	0x001e847f
 800198c:	003d08ff 	.word	0x003d08ff
 8001990:	431bde83 	.word	0x431bde83
 8001994:	10624dd3 	.word	0x10624dd3

08001998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e267      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d075      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019b6:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d00c      	beq.n	80019dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	4b85      	ldr	r3, [pc, #532]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d112      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ce:	4b82      	ldr	r3, [pc, #520]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019da:	d10b      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d05b      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x108>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d157      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e242      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x74>
 80019fe:	4b76      	ldr	r3, [pc, #472]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a75      	ldr	r2, [pc, #468]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0xb0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x98>
 8001a16:	4b70      	ldr	r3, [pc, #448]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6c      	ldr	r2, [pc, #432]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xb0>
 8001a30:	4b69      	ldr	r3, [pc, #420]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a68      	ldr	r2, [pc, #416]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b66      	ldr	r3, [pc, #408]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a65      	ldr	r2, [pc, #404]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb10 	bl	8001074 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fb0c 	bl	8001074 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e207      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0xc0>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fafc 	bl	8001074 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff faf8 	bl	8001074 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	@ 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1f3      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0xe8>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aae:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x152>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1c7      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4937      	ldr	r1, [pc, #220]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e03a      	b.n	8001b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <HAL_RCC_OscConfig+0x244>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fab1 	bl	8001074 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff faad 	bl	8001074 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1a8      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4925      	ldr	r1, [pc, #148]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
 8001b48:	e015      	b.n	8001b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_RCC_OscConfig+0x244>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fa90 	bl	8001074 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fa8c 	bl	8001074 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e187      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d036      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <HAL_RCC_OscConfig+0x248>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff fa70 	bl	8001074 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff fa6c 	bl	8001074 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e167      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_RCC_OscConfig+0x240>)
 8001bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x200>
 8001bb6:	e01b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_OscConfig+0x248>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fa59 	bl	8001074 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	e00e      	b.n	8001be4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fa55 	bl	8001074 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d907      	bls.n	8001be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e150      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	42470000 	.word	0x42470000
 8001be0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	4b88      	ldr	r3, [pc, #544]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ea      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8097 	beq.w	8001d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b81      	ldr	r3, [pc, #516]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b7d      	ldr	r3, [pc, #500]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a7c      	ldr	r2, [pc, #496]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b77      	ldr	r3, [pc, #476]	@ (8001e0c <HAL_RCC_OscConfig+0x474>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d118      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	4b74      	ldr	r3, [pc, #464]	@ (8001e0c <HAL_RCC_OscConfig+0x474>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a73      	ldr	r2, [pc, #460]	@ (8001e0c <HAL_RCC_OscConfig+0x474>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fa15 	bl	8001074 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4e:	f7ff fa11 	bl	8001074 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e10c      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <HAL_RCC_OscConfig+0x474>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2ea>
 8001c74:	4b64      	ldr	r3, [pc, #400]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	4a63      	ldr	r2, [pc, #396]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c80:	e01c      	b.n	8001cbc <HAL_RCC_OscConfig+0x324>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x30c>
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c96:	4b5c      	ldr	r3, [pc, #368]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0x324>
 8001ca4:	4b58      	ldr	r3, [pc, #352]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca8:	4a57      	ldr	r2, [pc, #348]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb0:	4b55      	ldr	r3, [pc, #340]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb4:	4a54      	ldr	r2, [pc, #336]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d015      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f9d6 	bl	8001074 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f9d2 	bl	8001074 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0cb      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0ee      	beq.n	8001ccc <HAL_RCC_OscConfig+0x334>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f9c0 	bl	8001074 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f9bc 	bl	8001074 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0b5      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ee      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d20:	4b39      	ldr	r3, [pc, #228]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	4a38      	ldr	r2, [pc, #224]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a1 	beq.w	8001e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d36:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d05c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d141      	bne.n	8001dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_OscConfig+0x478>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f990 	bl	8001074 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff f98c 	bl	8001074 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e087      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	491b      	ldr	r1, [pc, #108]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_RCC_OscConfig+0x478>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff f965 	bl	8001074 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f961 	bl	8001074 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e05c      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x416>
 8001dcc:	e054      	b.n	8001e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_RCC_OscConfig+0x478>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f94e 	bl	8001074 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f94a 	bl	8001074 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e045      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x444>
 8001dfa:	e03d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e038      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_RCC_OscConfig+0x4ec>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d028      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d121      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d11a      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0cc      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b68      	ldr	r3, [pc, #416]	@ (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d90c      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b65      	ldr	r3, [pc, #404]	@ (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b63      	ldr	r3, [pc, #396]	@ (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0b8      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001edc:	4b59      	ldr	r3, [pc, #356]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef4:	4b53      	ldr	r3, [pc, #332]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	4b50      	ldr	r3, [pc, #320]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	494d      	ldr	r1, [pc, #308]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d044      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d119      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e07f      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b3f      	ldr	r3, [pc, #252]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e06f      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e067      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b37      	ldr	r3, [pc, #220]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4934      	ldr	r1, [pc, #208]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7ff f87c 	bl	8001074 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7ff f878 	bl	8001074 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e04f      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2b      	ldr	r3, [pc, #172]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d20c      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e032      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4916      	ldr	r1, [pc, #88]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	490e      	ldr	r1, [pc, #56]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200e:	f000 f821 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	490a      	ldr	r1, [pc, #40]	@ (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	4a09      	ldr	r2, [pc, #36]	@ (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe ffdc 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00
 8002044:	40023800 	.word	0x40023800
 8002048:	080095c0 	.word	0x080095c0
 800204c:	2000000c 	.word	0x2000000c
 8002050:	20000010 	.word	0x20000010

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002058:	b090      	sub	sp, #64	@ 0x40
 800205a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800206c:	4b59      	ldr	r3, [pc, #356]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d00d      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x40>
 8002078:	2b08      	cmp	r3, #8
 800207a:	f200 80a1 	bhi.w	80021c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x34>
 8002082:	2b04      	cmp	r3, #4
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x3a>
 8002086:	e09b      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800208a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800208c:	e09b      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208e:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002090:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002092:	e098      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002094:	4b4f      	ldr	r3, [pc, #316]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209e:	4b4d      	ldr	r3, [pc, #308]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d028      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020aa:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	2200      	movs	r2, #0
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020bc:	2100      	movs	r1, #0
 80020be:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x188>)
 80020c0:	fb03 f201 	mul.w	r2, r3, r1
 80020c4:	2300      	movs	r3, #0
 80020c6:	fb00 f303 	mul.w	r3, r0, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	4a43      	ldr	r2, [pc, #268]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x188>)
 80020ce:	fba0 1202 	umull	r1, r2, r0, r2
 80020d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020d4:	460a      	mov	r2, r1
 80020d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020da:	4413      	add	r3, r2
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e0:	2200      	movs	r2, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	61fa      	str	r2, [r7, #28]
 80020e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020ee:	f7fe f8cf 	bl	8000290 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4613      	mov	r3, r2
 80020f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020fa:	e053      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fc:	4b35      	ldr	r3, [pc, #212]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	2200      	movs	r2, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	617a      	str	r2, [r7, #20]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800210e:	f04f 0b00 	mov.w	fp, #0
 8002112:	4652      	mov	r2, sl
 8002114:	465b      	mov	r3, fp
 8002116:	f04f 0000 	mov.w	r0, #0
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002124:	0150      	lsls	r0, r2, #5
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	ebb2 080a 	subs.w	r8, r2, sl
 800212e:	eb63 090b 	sbc.w	r9, r3, fp
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800213e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002142:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002146:	ebb2 0408 	subs.w	r4, r2, r8
 800214a:	eb63 0509 	sbc.w	r5, r3, r9
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	00eb      	lsls	r3, r5, #3
 8002158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215c:	00e2      	lsls	r2, r4, #3
 800215e:	4614      	mov	r4, r2
 8002160:	461d      	mov	r5, r3
 8002162:	eb14 030a 	adds.w	r3, r4, sl
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	eb45 030b 	adc.w	r3, r5, fp
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217a:	4629      	mov	r1, r5
 800217c:	028b      	lsls	r3, r1, #10
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002184:	4621      	mov	r1, r4
 8002186:	028a      	lsls	r2, r1, #10
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218e:	2200      	movs	r2, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	60fa      	str	r2, [r7, #12]
 8002194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002198:	f7fe f87a 	bl	8000290 <__aeabi_uldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4613      	mov	r3, r2
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021be:	e002      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3740      	adds	r7, #64	@ 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	017d7840 	.word	0x017d7840

080021e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0a9b      	lsrs	r3, r3, #10
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	@ (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	080095d0 	.word	0x080095d0

08002220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002224:	f7ff ffdc 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0b5b      	lsrs	r3, r3, #13
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	@ (8002244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	080095d0 	.word	0x080095d0

08002248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e042      	b.n	80022e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fce8 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	@ 0x24
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800228a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fde9 	bl	8002e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b20      	cmp	r3, #32
 8002306:	d175      	bne.n	80023f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_UART_Transmit+0x2c>
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e06e      	b.n	80023f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	@ 0x21
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002326:	f7fe fea5 	bl	8001074 <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002340:	d108      	bne.n	8002354 <HAL_UART_Transmit+0x6c>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e003      	b.n	800235c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800235c:	e02e      	b.n	80023bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fb4b 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e03a      	b.n	80023f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3302      	adds	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	e007      	b.n	80023ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1cb      	bne.n	800235e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2140      	movs	r1, #64	@ 0x40
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb17 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e006      	b.n	80023f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	4613      	mov	r3, r2
 800240a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	d121      	bne.n	800245c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_UART_Transmit_IT+0x26>
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01a      	b.n	800245e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2221      	movs	r2, #33	@ 0x21
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002456:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	4613      	mov	r3, r2
 8002476:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	d112      	bne.n	80024aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_UART_Receive_IT+0x26>
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e00b      	b.n	80024ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	461a      	mov	r2, r3
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fb08 	bl	8002ab6 <UART_Start_Receive_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	e000      	b.n	80024ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0ba      	sub	sp, #232	@ 0xe8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_UART_IRQHandler+0x66>
 8002506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fbe8 	bl	8002ce8 <UART_Receive_IT>
      return;
 8002518:	e25b      	b.n	80029d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800251a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80de 	beq.w	80026e0 <HAL_UART_IRQHandler+0x22c>
 8002524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002534:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80d1 	beq.w	80026e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800253e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_UART_IRQHandler+0xae>
 800254a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_UART_IRQHandler+0xd2>
 800256e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_UART_IRQHandler+0xf6>
 8002592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f043 0204 	orr.w	r2, r3, #4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d011      	beq.n	80025da <HAL_UART_IRQHandler+0x126>
 80025b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f043 0208 	orr.w	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 81f2 	beq.w	80029c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_UART_IRQHandler+0x14e>
 80025f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fb73 	bl	8002ce8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260c:	2b40      	cmp	r3, #64	@ 0x40
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_UART_IRQHandler+0x17a>
 8002626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d04f      	beq.n	80026ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa7b 	bl	8002b2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263e:	2b40      	cmp	r3, #64	@ 0x40
 8002640:	d141      	bne.n	80026c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3314      	adds	r3, #20
 8002648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800265c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800266e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800267a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800267e:	e841 2300 	strex	r3, r2, [r1]
 8002682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1d9      	bne.n	8002642 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d013      	beq.n	80026be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	4a7e      	ldr	r2, [pc, #504]	@ (8002894 <HAL_UART_IRQHandler+0x3e0>)
 800269c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fe73 	bl	800138e <HAL_DMA_Abort_IT>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026bc:	e00e      	b.n	80026dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f98a 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e00a      	b.n	80026dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f986 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e006      	b.n	80026dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f982 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026da:	e175      	b.n	80029c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	bf00      	nop
    return;
 80026de:	e173      	b.n	80029c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	f040 814f 	bne.w	8002988 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8148 	beq.w	8002988 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8141 	beq.w	8002988 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b40      	cmp	r3, #64	@ 0x40
 8002728:	f040 80b6 	bne.w	8002898 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002738:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8145 	beq.w	80029cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800274a:	429a      	cmp	r2, r3
 800274c:	f080 813e 	bcs.w	80029cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002756:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002762:	f000 8088 	beq.w	8002876 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800277c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800279e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1d9      	bne.n	8002766 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3314      	adds	r3, #20
 80027b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3314      	adds	r3, #20
 80027d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e1      	bne.n	80027b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3314      	adds	r3, #20
 800280e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002814:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002818:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e3      	bne.n	80027ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002858:	65ba      	str	r2, [r7, #88]	@ 0x58
 800285a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800285e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002860:	e841 2300 	strex	r3, r2, [r1]
 8002864:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e3      	bne.n	8002834 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fd1c 	bl	80012ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002884:	b29b      	uxth	r3, r3
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	b29b      	uxth	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f8ad 	bl	80029ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002892:	e09b      	b.n	80029cc <HAL_UART_IRQHandler+0x518>
 8002894:	08002bf1 	.word	0x08002bf1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 808e 	beq.w	80029d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8089 	beq.w	80029d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80028e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e3      	bne.n	80028be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3314      	adds	r3, #20
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	e853 3f00 	ldrex	r3, [r3]
 8002904:	623b      	str	r3, [r7, #32]
   return(result);
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3314      	adds	r3, #20
 8002916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800291a:	633a      	str	r2, [r7, #48]	@ 0x30
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e3      	bne.n	80028f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	60fb      	str	r3, [r7, #12]
   return(result);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0310 	bic.w	r3, r3, #16
 8002952:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002960:	61fa      	str	r2, [r7, #28]
 8002962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002964:	69b9      	ldr	r1, [r7, #24]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	617b      	str	r3, [r7, #20]
   return(result);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e3      	bne.n	800293c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800297a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f833 	bl	80029ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002986:	e023      	b.n	80029d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <HAL_UART_IRQHandler+0x4f4>
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f939 	bl	8002c18 <UART_Transmit_IT>
    return;
 80029a6:	e014      	b.n	80029d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <HAL_UART_IRQHandler+0x51e>
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f979 	bl	8002cb8 <UART_EndTransmit_IT>
    return;
 80029c6:	e004      	b.n	80029d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80029c8:	bf00      	nop
 80029ca:	e002      	b.n	80029d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029d0:	bf00      	nop
  }
}
 80029d2:	37e8      	adds	r7, #232	@ 0xe8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a14:	e03b      	b.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a1c:	d037      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe fb29 	bl	8001074 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03a      	b.n	8002aae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d023      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b80      	cmp	r3, #128	@ 0x80
 8002a4a:	d020      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d01d      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d116      	bne.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f857 	bl	8002b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d0b4      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2222      	movs	r2, #34	@ 0x22
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0220 	orr.w	r2, r2, #32
 8002b1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b095      	sub	sp, #84	@ 0x54
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3c:	e853 3f00 	ldrex	r3, [r3]
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b52:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e5      	bne.n	8002b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e5      	bne.n	8002b66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d119      	bne.n	8002bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f023 0310 	bic.w	r3, r3, #16
 8002bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bc2:	61ba      	str	r2, [r7, #24]
 8002bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e5      	bne.n	8002ba2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002be4:	bf00      	nop
 8002be6:	3754      	adds	r7, #84	@ 0x54
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff fee4 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b21      	cmp	r3, #33	@ 0x21
 8002c2a:	d13e      	bne.n	8002caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c34:	d114      	bne.n	8002c60 <UART_Transmit_IT+0x48>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d110      	bne.n	8002c60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	1c9a      	adds	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]
 8002c5e:	e008      	b.n	8002c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6211      	str	r1, [r2, #32]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd ff33 	bl	8000b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	@ 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b22      	cmp	r3, #34	@ 0x22
 8002cfa:	f040 80ae 	bne.w	8002e5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d06:	d117      	bne.n	8002d38 <UART_Receive_IT+0x50>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	1c9a      	adds	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d36:	e026      	b.n	8002d86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4a:	d007      	beq.n	8002d5c <UART_Receive_IT+0x74>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <UART_Receive_IT+0x82>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e008      	b.n	8002d7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4619      	mov	r1, r3
 8002d94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d15d      	bne.n	8002e56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0220 	bic.w	r2, r2, #32
 8002da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d135      	bne.n	8002e4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	613b      	str	r3, [r7, #16]
   return(result);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e06:	623a      	str	r2, [r7, #32]
 8002e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	69f9      	ldr	r1, [r7, #28]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e5      	bne.n	8002de6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d10a      	bne.n	8002e3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fdd1 	bl	80029ec <HAL_UARTEx_RxEventCallback>
 8002e4a:	e002      	b.n	8002e52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd fe63 	bl	8000b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e002      	b.n	8002e5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	@ 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b0c0      	sub	sp, #256	@ 0x100
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	68d9      	ldr	r1, [r3, #12]
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	ea40 0301 	orr.w	r3, r0, r1
 8002e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ebc:	f021 010c 	bic.w	r1, r1, #12
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	ea40 0301 	orr.w	r3, r0, r1
 8002eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <UART_SetConfig+0x2cc>)
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d005      	beq.n	8002f04 <UART_SetConfig+0xa0>
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <UART_SetConfig+0x2d0>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d104      	bne.n	8002f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff f98c 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 8002f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f0c:	e003      	b.n	8002f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0e:	f7ff f973 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8002f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f20:	f040 810c 	bne.w	800313c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f46:	4621      	mov	r1, r4
 8002f48:	eb12 0801 	adds.w	r8, r2, r1
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb43 0901 	adc.w	r9, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f66:	4690      	mov	r8, r2
 8002f68:	4699      	mov	r9, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb18 0303 	adds.w	r3, r8, r3
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f74:	462b      	mov	r3, r5
 8002f76:	eb49 0303 	adc.w	r3, r9, r3
 8002f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f92:	460b      	mov	r3, r1
 8002f94:	18db      	adds	r3, r3, r3
 8002f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f98:	4613      	mov	r3, r2
 8002f9a:	eb42 0303 	adc.w	r3, r2, r3
 8002f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fa8:	f7fd f972 	bl	8000290 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <UART_SetConfig+0x2d4>)
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	011c      	lsls	r4, r3, #4
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fdc:	4641      	mov	r1, r8
 8002fde:	eb12 0a01 	adds.w	sl, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffc:	4692      	mov	sl, r2
 8002ffe:	469b      	mov	fp, r3
 8003000:	4643      	mov	r3, r8
 8003002:	eb1a 0303 	adds.w	r3, sl, r3
 8003006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800300a:	464b      	mov	r3, r9
 800300c:	eb4b 0303 	adc.w	r3, fp, r3
 8003010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003028:	460b      	mov	r3, r1
 800302a:	18db      	adds	r3, r3, r3
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
 800302e:	4613      	mov	r3, r2
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	647b      	str	r3, [r7, #68]	@ 0x44
 8003036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800303a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800303e:	f7fd f927 	bl	8000290 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4611      	mov	r1, r2
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <UART_SetConfig+0x2d4>)
 800304a:	fba3 2301 	umull	r2, r3, r3, r1
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2264      	movs	r2, #100	@ 0x64
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	1acb      	subs	r3, r1, r3
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003060:	fba3 2302 	umull	r2, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800307c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	1891      	adds	r1, r2, r2
 8003086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003088:	415b      	adcs	r3, r3
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003090:	4641      	mov	r1, r8
 8003092:	1851      	adds	r1, r2, r1
 8003094:	6339      	str	r1, [r7, #48]	@ 0x30
 8003096:	4649      	mov	r1, r9
 8003098:	414b      	adcs	r3, r1
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030a8:	4659      	mov	r1, fp
 80030aa:	00cb      	lsls	r3, r1, #3
 80030ac:	4651      	mov	r1, sl
 80030ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b2:	4651      	mov	r1, sl
 80030b4:	00ca      	lsls	r2, r1, #3
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	4642      	mov	r2, r8
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c4:	464b      	mov	r3, r9
 80030c6:	460a      	mov	r2, r1
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030e4:	460b      	mov	r3, r1
 80030e6:	18db      	adds	r3, r3, r3
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ea:	4613      	mov	r3, r2
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030fa:	f7fd f8c9 	bl	8000290 <__aeabi_uldivmod>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003104:	fba3 1302 	umull	r1, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2164      	movs	r1, #100	@ 0x64
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	@ 0x32
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4422      	add	r2, r4
 800312a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800312c:	e106      	b.n	800333c <UART_SetConfig+0x4d8>
 800312e:	bf00      	nop
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800314a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	1891      	adds	r1, r2, r2
 8003154:	6239      	str	r1, [r7, #32]
 8003156:	415b      	adcs	r3, r3
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
 800315a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315e:	4641      	mov	r1, r8
 8003160:	1854      	adds	r4, r2, r1
 8003162:	4649      	mov	r1, r9
 8003164:	eb43 0501 	adc.w	r5, r3, r1
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	00eb      	lsls	r3, r5, #3
 8003172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003176:	00e2      	lsls	r2, r4, #3
 8003178:	4614      	mov	r4, r2
 800317a:	461d      	mov	r5, r3
 800317c:	4643      	mov	r3, r8
 800317e:	18e3      	adds	r3, r4, r3
 8003180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003184:	464b      	mov	r3, r9
 8003186:	eb45 0303 	adc.w	r3, r5, r3
 800318a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800319a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031aa:	4629      	mov	r1, r5
 80031ac:	008b      	lsls	r3, r1, #2
 80031ae:	4621      	mov	r1, r4
 80031b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b4:	4621      	mov	r1, r4
 80031b6:	008a      	lsls	r2, r1, #2
 80031b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031bc:	f7fd f868 	bl	8000290 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <UART_SetConfig+0x4e4>)
 80031c6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	011c      	lsls	r4, r3, #4
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	61b9      	str	r1, [r7, #24]
 80031e8:	415b      	adcs	r3, r3
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f0:	4641      	mov	r1, r8
 80031f2:	1851      	adds	r1, r2, r1
 80031f4:	6139      	str	r1, [r7, #16]
 80031f6:	4649      	mov	r1, r9
 80031f8:	414b      	adcs	r3, r1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003208:	4659      	mov	r1, fp
 800320a:	00cb      	lsls	r3, r1, #3
 800320c:	4651      	mov	r1, sl
 800320e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003212:	4651      	mov	r1, sl
 8003214:	00ca      	lsls	r2, r1, #3
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	4603      	mov	r3, r0
 800321c:	4642      	mov	r2, r8
 800321e:	189b      	adds	r3, r3, r2
 8003220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003224:	464b      	mov	r3, r9
 8003226:	460a      	mov	r2, r1
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800323a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003248:	4649      	mov	r1, r9
 800324a:	008b      	lsls	r3, r1, #2
 800324c:	4641      	mov	r1, r8
 800324e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003252:	4641      	mov	r1, r8
 8003254:	008a      	lsls	r2, r1, #2
 8003256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800325a:	f7fd f819 	bl	8000290 <__aeabi_uldivmod>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4611      	mov	r1, r2
 8003264:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003266:	fba3 2301 	umull	r2, r3, r3, r1
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2264      	movs	r2, #100	@ 0x64
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	1acb      	subs	r3, r1, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	@ 0x32
 8003278:	4a33      	ldr	r2, [pc, #204]	@ (8003348 <UART_SetConfig+0x4e4>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003284:	441c      	add	r4, r3
 8003286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800328a:	2200      	movs	r2, #0
 800328c:	673b      	str	r3, [r7, #112]	@ 0x70
 800328e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	415b      	adcs	r3, r3
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a4:	4641      	mov	r1, r8
 80032a6:	1851      	adds	r1, r2, r1
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	4649      	mov	r1, r9
 80032ac:	414b      	adcs	r3, r1
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032bc:	4659      	mov	r1, fp
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4651      	mov	r1, sl
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4642      	mov	r2, r8
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032d6:	464b      	mov	r3, r9
 80032d8:	460a      	mov	r2, r1
 80032da:	eb42 0303 	adc.w	r3, r2, r3
 80032de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032f8:	4649      	mov	r1, r9
 80032fa:	008b      	lsls	r3, r1, #2
 80032fc:	4641      	mov	r1, r8
 80032fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003302:	4641      	mov	r1, r8
 8003304:	008a      	lsls	r2, r1, #2
 8003306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800330a:	f7fc ffc1 	bl	8000290 <__aeabi_uldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003314:	fba3 1302 	umull	r1, r3, r3, r2
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2164      	movs	r1, #100	@ 0x64
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	3332      	adds	r3, #50	@ 0x32
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4422      	add	r2, r4
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	bf00      	nop
 800333e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003342:	46bd      	mov	sp, r7
 8003344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003348:	51eb851f 	.word	0x51eb851f

0800334c <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 8003352:	f243 3114 	movw	r1, #13076	@ 0x3314
 8003356:	2001      	movs	r0, #1
 8003358:	f004 fcfe 	bl	8007d58 <calloc>
 800335c:	4603      	mov	r3, r0
 800335e:	607b      	str	r3, [r7, #4]
    if (!handle)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d019      	beq.n	800339a <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fa76 	bl	800685c <TF_InitStatic>
 8003370:	4603      	mov	r3, r0
 8003372:	70fb      	strb	r3, [r7, #3]
    if (!status)
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4909      	ldr	r1, [pc, #36]	@ (80033a8 <gapcom_create+0x5c>)
 8003384:	4618      	mov	r0, r3
 8003386:	f003 fb7d 	bl	8006a84 <TF_AddGenericListener>

    goto end;
 800338a:	e007      	b.n	800339c <gapcom_create+0x50>
        goto free_handle;
 800338c:	bf00      	nop

free_handle:
    free(handle);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f004 fcfe 	bl	8007d90 <free>
    handle = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e000      	b.n	800339c <gapcom_create+0x50>
        goto end;
 800339a:	bf00      	nop
end:
    return handle;
 800339c:	687b      	ldr	r3, [r7, #4]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	08003475 	.word	0x08003475

080033ac <gapcom_set_sender_impl>:
        free(handle);
    }
}

void gapcom_set_sender_impl(gapcom_handle_t* handle, gapcom_sender_t* sender_impl)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
    handle->sender_impl = sender_impl;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033bc:	461a      	mov	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <gapcom_install_callback>:

void gapcom_install_callback(
    gapcom_handle_t* handle,
    gapcom_callback_t callback,
    gapcom_msg_t msg_type)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	71fb      	strb	r3, [r7, #7]
    if (msg_type < GAPCOM_MSG_MIN || msg_type > GAPCOM_MSG_MAX)
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b0e      	cmp	r3, #14
 80033e2:	d808      	bhi.n	80033f6 <gapcom_install_callback+0x26>
        log_com("Unexpected msg_type for callback: %u", msg_type);
        return;
    }
    else
    {
        handle->user_callback[msg_type] = callback;
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	e000      	b.n	80033f8 <gapcom_install_callback+0x28>
        return;
 80033f6:	bf00      	nop
    }
}
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <gapcom_accept>:
{
    handle->user_callback[msg_type] = NULL;
}

void gapcom_accept(gapcom_handle_t* handle, const uint8_t* buf, size_t len)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
    log_com("Accepting message");
    /* CAUTION: TinyFrame offers no way of checking if this succeeded ! */
    TF_Accept(&handle->tf_handle, buf, len);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f003 fc6d 	bl	8006cf4 <TF_Accept>
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 800342a:	2218      	movs	r2, #24
 800342c:	2100      	movs	r1, #0
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f004 ff90 	bl	8008354 <memset>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <TF_WriteImpl>:
#include <pb_decode.h>
#include <stdint.h>
#include <unistd.h>

void TF_WriteImpl(TinyFrame* tf_handle, const uint8_t* buf, uint32_t len)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
    ssize_t bytes_sent;
    gapcom_handle_t* handle;
    gapcom_sender_t* sender;

    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
    sender = handle->sender_impl;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003456:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 800345a:	617b      	str	r3, [r7, #20]
    bytes_sent = sender->send(sender, buf, len);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	6978      	ldr	r0, [r7, #20]
 8003466:	4798      	blx	r3
 8003468:	6138      	str	r0, [r7, #16]
    if (bytes_sent < 0)
    {
        log_com("Failed to send message, returned %lld", bytes_sent);
    }
}
 800346a:	bf00      	nop
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b0a3      	sub	sp, #140	@ 0x8c
 8003478:	af00      	add	r7, sp, #0
 800347a:	6178      	str	r0, [r7, #20]
 800347c:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003488:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	88db      	ldrh	r3, [r3, #6]
 8003490:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003494:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 80034a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 81e0 	beq.w	8003868 <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f103 011a 	add.w	r1, r3, #26
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	8b1b      	ldrh	r3, [r3, #24]
 80034b2:	461a      	mov	r2, r3
 80034b4:	463b      	mov	r3, r7
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fb94 	bl	8003be4 <pb_istream_from_buffer>
 80034bc:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80034c0:	463b      	mov	r3, r7
 80034c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	88db      	ldrh	r3, [r3, #6]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11a      	bne.n	8003506 <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 80034d6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80034da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034de:	49b9      	ldr	r1, [pc, #740]	@ (80037c4 <gapcom_tf_id_listener+0x350>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fcb9 	bl	8004e58 <pb_decode>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80034ec:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 81bc 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 80034f6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80034fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034fc:	4611      	mov	r1, r2
 80034fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003502:	4798      	blx	r3
 8003504:	e1b3      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	88db      	ldrh	r3, [r3, #6]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d11a      	bne.n	8003544 <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 8003514:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003518:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800351c:	49aa      	ldr	r1, [pc, #680]	@ (80037c8 <gapcom_tf_id_listener+0x354>)
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fc9a 	bl	8004e58 <pb_decode>
 8003524:	4603      	mov	r3, r0
 8003526:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800352a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 819d 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 8003534:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800353a:	4611      	mov	r1, r2
 800353c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003540:	4798      	blx	r3
 8003542:	e194      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	88db      	ldrh	r3, [r3, #6]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d11a      	bne.n	8003582 <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 800354c:	2300      	movs	r3, #0
 800354e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 8003552:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8003556:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800355a:	499c      	ldr	r1, [pc, #624]	@ (80037cc <gapcom_tf_id_listener+0x358>)
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc7b 	bl	8004e58 <pb_decode>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003568:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 817e 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 8003572:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8003576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003578:	4611      	mov	r1, r2
 800357a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800357e:	4798      	blx	r3
 8003580:	e175      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	88db      	ldrh	r3, [r3, #6]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d11a      	bne.n	80035c0 <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 800358a:	2300      	movs	r3, #0
 800358c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8003590:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8003594:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003598:	498d      	ldr	r1, [pc, #564]	@ (80037d0 <gapcom_tf_id_listener+0x35c>)
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fc5c 	bl	8004e58 <pb_decode>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80035a6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 815f 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 80035b0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80035b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035b6:	4611      	mov	r1, r2
 80035b8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80035bc:	4798      	blx	r3
 80035be:	e156      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	88db      	ldrh	r3, [r3, #6]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11a      	bne.n	80035fe <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 80035ce:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80035d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035d6:	497f      	ldr	r1, [pc, #508]	@ (80037d4 <gapcom_tf_id_listener+0x360>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 fc3d 	bl	8004e58 <pb_decode>
 80035de:	4603      	mov	r3, r0
 80035e0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80035e4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8140 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 80035ee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80035f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035f4:	4611      	mov	r1, r2
 80035f6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80035fa:	4798      	blx	r3
 80035fc:	e137      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	88db      	ldrh	r3, [r3, #6]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d11a      	bne.n	800363c <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 800360c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003610:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003614:	4970      	ldr	r1, [pc, #448]	@ (80037d8 <gapcom_tf_id_listener+0x364>)
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fc1e 	bl	8004e58 <pb_decode>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003622:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8121 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 800362c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003632:	4611      	mov	r1, r2
 8003634:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003638:	4798      	blx	r3
 800363a:	e118      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	88db      	ldrh	r3, [r3, #6]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d11d      	bne.n	8003680 <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 8003644:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8003650:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003654:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003658:	4960      	ldr	r1, [pc, #384]	@ (80037dc <gapcom_tf_id_listener+0x368>)
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fbfc 	bl	8004e58 <pb_decode>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003666:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80ff 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 8003670:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003676:	4611      	mov	r1, r2
 8003678:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800367c:	4798      	blx	r3
 800367e:	e0f6      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	88db      	ldrh	r3, [r3, #6]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d11a      	bne.n	80036be <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 800368e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003692:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003696:	4952      	ldr	r1, [pc, #328]	@ (80037e0 <gapcom_tf_id_listener+0x36c>)
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fbdd 	bl	8004e58 <pb_decode>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80036a4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80e0 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 80036ae:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80036b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036b4:	4611      	mov	r1, r2
 80036b6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80036ba:	4798      	blx	r3
 80036bc:	e0d7      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	88db      	ldrh	r3, [r3, #6]
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d11a      	bne.n	80036fc <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 80036cc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80036d0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036d4:	4943      	ldr	r1, [pc, #268]	@ (80037e4 <gapcom_tf_id_listener+0x370>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fbbe 	bl	8004e58 <pb_decode>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80036e2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80c1 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 80036ec:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80036f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036f2:	4611      	mov	r1, r2
 80036f4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80036f8:	4798      	blx	r3
 80036fa:	e0b8      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	88db      	ldrh	r3, [r3, #6]
 8003700:	2b09      	cmp	r3, #9
 8003702:	d120      	bne.n	8003746 <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 8003704:	2300      	movs	r3, #0
 8003706:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800370a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 8003716:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800371a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800371e:	4932      	ldr	r1, [pc, #200]	@ (80037e8 <gapcom_tf_id_listener+0x374>)
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fb99 	bl	8004e58 <pb_decode>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800372c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 809c 	beq.w	800386e <gapcom_tf_id_listener+0x3fa>
 8003736:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800373a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800373c:	4611      	mov	r1, r2
 800373e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003742:	4798      	blx	r3
 8003744:	e093      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	88db      	ldrh	r3, [r3, #6]
 800374a:	2b0a      	cmp	r3, #10
 800374c:	d119      	bne.n	8003782 <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 8003754:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003758:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800375c:	4923      	ldr	r1, [pc, #140]	@ (80037ec <gapcom_tf_id_listener+0x378>)
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fb7a 	bl	8004e58 <pb_decode>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800376a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800376e:	2b00      	cmp	r3, #0
 8003770:	d07d      	beq.n	800386e <gapcom_tf_id_listener+0x3fa>
 8003772:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003778:	4611      	mov	r1, r2
 800377a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800377e:	4798      	blx	r3
 8003780:	e075      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	88db      	ldrh	r3, [r3, #6]
 8003786:	2b0b      	cmp	r3, #11
 8003788:	d134      	bne.n	80037f4 <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 800378a:	f107 0320 	add.w	r3, r7, #32
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 8003794:	f107 0220 	add.w	r2, r7, #32
 8003798:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800379c:	4914      	ldr	r1, [pc, #80]	@ (80037f0 <gapcom_tf_id_listener+0x37c>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fb5a 	bl	8004e58 <pb_decode>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80037aa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d05d      	beq.n	800386e <gapcom_tf_id_listener+0x3fa>
 80037b2:	f107 0220 	add.w	r2, r7, #32
 80037b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037b8:	4611      	mov	r1, r2
 80037ba:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80037be:	4798      	blx	r3
 80037c0:	e055      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
 80037c2:	bf00      	nop
 80037c4:	080095e0 	.word	0x080095e0
 80037c8:	08009604 	.word	0x08009604
 80037cc:	08009628 	.word	0x08009628
 80037d0:	0800964c 	.word	0x0800964c
 80037d4:	08009670 	.word	0x08009670
 80037d8:	08009694 	.word	0x08009694
 80037dc:	080096bc 	.word	0x080096bc
 80037e0:	080096e0 	.word	0x080096e0
 80037e4:	08009700 	.word	0x08009700
 80037e8:	0800972c 	.word	0x0800972c
 80037ec:	0800974c 	.word	0x0800974c
 80037f0:	08009780 	.word	0x08009780
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	88db      	ldrh	r3, [r3, #6]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d118      	bne.n	800382e <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 80037fc:	2300      	movs	r3, #0
 80037fe:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 8003800:	f107 021c 	add.w	r2, r7, #28
 8003804:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003808:	491b      	ldr	r1, [pc, #108]	@ (8003878 <gapcom_tf_id_listener+0x404>)
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fb24 	bl	8004e58 <pb_decode>
 8003810:	4603      	mov	r3, r0
 8003812:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003816:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800381a:	2b00      	cmp	r3, #0
 800381c:	d027      	beq.n	800386e <gapcom_tf_id_listener+0x3fa>
 800381e:	f107 021c 	add.w	r2, r7, #28
 8003822:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003824:	4611      	mov	r1, r2
 8003826:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800382a:	4798      	blx	r3
 800382c:	e01f      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	88db      	ldrh	r3, [r3, #6]
 8003832:	2b0d      	cmp	r3, #13
 8003834:	d11a      	bne.n	800386c <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 8003836:	2300      	movs	r3, #0
 8003838:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 800383a:	f107 0218 	add.w	r2, r7, #24
 800383e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003842:	490e      	ldr	r1, [pc, #56]	@ (800387c <gapcom_tf_id_listener+0x408>)
 8003844:	4618      	mov	r0, r3
 8003846:	f001 fb07 	bl	8004e58 <pb_decode>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003850:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <gapcom_tf_id_listener+0x3fa>
 8003858:	f107 0218 	add.w	r2, r7, #24
 800385c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800385e:	4611      	mov	r1, r2
 8003860:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003864:	4798      	blx	r3
 8003866:	e002      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
        goto end;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 800386c:	bf00      	nop
    return TF_STAY;
 800386e:	2301      	movs	r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	378c      	adds	r7, #140	@ 0x8c
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	080097a4 	.word	0x080097a4
 800387c:	080097c8 	.word	0x080097c8

08003880 <gapcom_encapsulate_tf>:

int gapcom_encapsulate_tf(
    gapcom_handle_t* handle,
    gapcom_msg_t msg_type,
    int msg_len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	460b      	mov	r3, r1
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	72fb      	strb	r3, [r7, #11]
    /* Build TinyFrame frame pointing to payload */
    TF_ClearMsg(&handle->tf_msg);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8003894:	3320      	adds	r3, #32
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fdc3 	bl	8003422 <TF_ClearMsg>
    handle->tf_msg.type = msg_type;
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038a6:	f8a3 2266 	strh.w	r2, [r3, #614]	@ 0x266
    handle->tf_msg.data = (const uint8_t*)(&handle->sendbuf);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 80038b0:	3334      	adds	r3, #52	@ 0x34
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80038b8:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    handle->tf_msg.len = (TF_LEN)msg_len;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038c6:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
    /* When the payload is empty (which can happen with protobuf, for example
     * with a single numeric field with value 0 : it will get compressed and
     * interpreted as 0 upon decoding) the payload CRC is not appended by
     * TinyFrame. Otherwise, we do have a payload CRC as a footer.
     */
    if (msg_len > 0)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	dd01      	ble.n	80038d4 <gapcom_encapsulate_tf+0x54>
        return GAPCOM_TF_HEADER_SIZE_BYTES + GAPCOM_TF_FOOTER_SIZE_BYTES;
 80038d0:	230d      	movs	r3, #13
 80038d2:	e000      	b.n	80038d6 <gapcom_encapsulate_tf+0x56>
    else
        return GAPCOM_TF_HEADER_SIZE_BYTES;
 80038d4:	230b      	movs	r3, #11
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <gapcom_respond_ping>:
 ************************/

int gapcom_respond_ping(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b092      	sub	sp, #72	@ 0x48
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	61f8      	str	r0, [r7, #28]
 80038e8:	460b      	mov	r3, r1
 80038ea:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPPingResp resp = GAPPingResp_init_zero;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 80038f6:	7efb      	ldrb	r3, [r7, #27]
 80038f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPPingResp_fields, resp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003902:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 8003906:	3334      	adds	r3, #52	@ 0x34
 8003908:	4638      	mov	r0, r7
 800390a:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 800390e:	4619      	mov	r1, r3
 8003910:	f001 fe74 	bl	80055fc <pb_ostream_from_buffer>
 8003914:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003918:	463d      	mov	r5, r7
 800391a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800391e:	682b      	ldr	r3, [r5, #0]
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800392a:	4919      	ldr	r1, [pc, #100]	@ (8003990 <gapcom_respond_ping+0xb0>)
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fad2 	bl	8005ed6 <pb_encode>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003938:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <gapcom_respond_ping+0x66>
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	643b      	str	r3, [r7, #64]	@ 0x40
 8003944:	e002      	b.n	800394c <gapcom_respond_ping+0x6c>
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800394a:	643b      	str	r3, [r7, #64]	@ 0x40
 800394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003950:	4413      	add	r3, r2
 8003952:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 8003954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800395a:	d012      	beq.n	8003982 <gapcom_respond_ping+0xa2>
    {
        log_com("Failed to encode Ping protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_PING_RESP, ret);
 800395c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800395e:	2101      	movs	r1, #1
 8003960:	69f8      	ldr	r0, [r7, #28]
 8003962:	f7ff ff8d 	bl	8003880 <gapcom_encapsulate_tf>
 8003966:	4602      	mov	r2, r0
 8003968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800396a:	4413      	add	r3, r2
 800396c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8003976:	3320      	adds	r3, #32
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f003 fec2 	bl	8007704 <TF_Respond>
 8003980:	e000      	b.n	8003984 <gapcom_respond_ping+0xa4>
        goto end;
 8003982:	bf00      	nop

end:
    return ret;
 8003984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003986:	4618      	mov	r0, r3
 8003988:	3748      	adds	r7, #72	@ 0x48
 800398a:	46bd      	mov	sp, r7
 800398c:	bdb0      	pop	{r4, r5, r7, pc}
 800398e:	bf00      	nop
 8003990:	08009604 	.word	0x08009604

08003994 <gapcom_respond_set_log_verbosity>:

int gapcom_respond_set_log_verbosity(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 8003994:	b5b0      	push	{r4, r5, r7, lr}
 8003996:	b092      	sub	sp, #72	@ 0x48
 8003998:	af00      	add	r7, sp, #0
 800399a:	61f8      	str	r0, [r7, #28]
 800399c:	460b      	mov	r3, r1
 800399e:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 80039aa:	7efb      	ldrb	r3, [r7, #27]
 80039ac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPSetLogVerbosityResp_fields, resp);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b6:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 80039ba:	3334      	adds	r3, #52	@ 0x34
 80039bc:	4638      	mov	r0, r7
 80039be:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 80039c2:	4619      	mov	r1, r3
 80039c4:	f001 fe1a 	bl	80055fc <pb_ostream_from_buffer>
 80039c8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80039cc:	463d      	mov	r5, r7
 80039ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039de:	4919      	ldr	r1, [pc, #100]	@ (8003a44 <gapcom_respond_set_log_verbosity+0xb0>)
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 fa78 	bl	8005ed6 <pb_encode>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80039ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <gapcom_respond_set_log_verbosity+0x66>
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f8:	e002      	b.n	8003a00 <gapcom_respond_set_log_verbosity+0x6c>
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a04:	4413      	add	r3, r2
 8003a06:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 8003a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a0e:	d012      	beq.n	8003a36 <gapcom_respond_set_log_verbosity+0xa2>
    {
        log_com("Failed to encode Set Log Verbosity protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_SET_LOG_VERBOSITY_RESP, ret);
 8003a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a12:	2103      	movs	r1, #3
 8003a14:	69f8      	ldr	r0, [r7, #28]
 8003a16:	f7ff ff33 	bl	8003880 <gapcom_encapsulate_tf>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1e:	4413      	add	r3, r2
 8003a20:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8003a2a:	3320      	adds	r3, #32
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f003 fe68 	bl	8007704 <TF_Respond>
 8003a34:	e000      	b.n	8003a38 <gapcom_respond_set_log_verbosity+0xa4>
        goto end;
 8003a36:	bf00      	nop

end:
    return ret;
 8003a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3748      	adds	r7, #72	@ 0x48
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bdb0      	pop	{r4, r5, r7, pc}
 8003a42:	bf00      	nop
 8003a44:	0800964c 	.word	0x0800964c

08003a48 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6979      	ldr	r1, [r7, #20]
 8003a70:	68b8      	ldr	r0, [r7, #8]
 8003a72:	f004 fcfa 	bl	800846a <memcpy>
    }
    
    return true;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <pb_read+0x16>
        return true;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e05f      	b.n	8003b56 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d123      	bne.n	8003ae4 <pb_read+0x64>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b60 <pb_read+0xe0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01e      	beq.n	8003ae4 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8003aa6:	e011      	b.n	8003acc <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8003aa8:	f107 0310 	add.w	r3, r7, #16
 8003aac:	2210      	movs	r2, #16
 8003aae:	4619      	mov	r1, r3
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff ffe5 	bl	8003a80 <pb_read>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f083 0301 	eor.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <pb_read+0x46>
				return false;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e047      	b.n	8003b56 <pb_read+0xd6>
			
			count -= 16;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3b10      	subs	r3, #16
 8003aca:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d8ea      	bhi.n	8003aa8 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8003ad2:	f107 0310 	add.w	r3, r7, #16
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f7ff ffd0 	bl	8003a80 <pb_read>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	e038      	b.n	8003b56 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d90b      	bls.n	8003b06 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <pb_read+0x7c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	e000      	b.n	8003afe <pb_read+0x7e>
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <pb_read+0xe4>)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	60d3      	str	r3, [r2, #12]
 8003b02:	2300      	movs	r3, #0
 8003b04:	e027      	b.n	8003b56 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	4798      	blx	r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <pb_read+0xac>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	e000      	b.n	8003b2e <pb_read+0xae>
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <pb_read+0xe8>)
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	60d3      	str	r3, [r2, #12]
 8003b32:	2300      	movs	r3, #0
 8003b34:	e00f      	b.n	8003b56 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d903      	bls.n	8003b48 <pb_read+0xc8>
        stream->bytes_left = 0;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	e005      	b.n	8003b54 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

    return true;
 8003b54:	2301      	movs	r3, #1
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	08003a49 	.word	0x08003a49
 8003b64:	080090c0 	.word	0x080090c0
 8003b68:	080090d0 	.word	0x080090d0

08003b6c <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <pb_readbyte+0x20>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	e000      	b.n	8003b8e <pb_readbyte+0x22>
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <pb_readbyte+0x70>)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	60d3      	str	r3, [r2, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	e01d      	b.n	8003bd2 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f083 0301 	eor.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <pb_readbyte+0x50>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	e000      	b.n	8003bbe <pb_readbyte+0x52>
 8003bbc:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <pb_readbyte+0x74>)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	60d3      	str	r3, [r2, #12]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e005      	b.n	8003bd2 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]
    
    return true;    
 8003bd0:	2301      	movs	r3, #1
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	080090c0 	.word	0x080090c0
 8003be0:	080090d0 	.word	0x080090d0

08003be4 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8003be4:	b490      	push	{r4, r7}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <pb_istream_from_buffer+0x38>)
 8003bf2:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	461c      	mov	r4, r3
 8003c08:	f107 0318 	add.w	r3, r7, #24
 8003c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	3728      	adds	r7, #40	@ 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc90      	pop	{r4, r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	08003a49 	.word	0x08003a49

08003c20 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8003c2c:	f107 0315 	add.w	r3, r7, #21
 8003c30:	4619      	mov	r1, r3
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff9a 	bl	8003b6c <pb_readbyte>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f083 0301 	eor.w	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e084      	b.n	8003d66 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003c5c:	7d7b      	ldrb	r3, [r7, #21]
 8003c5e:	b25b      	sxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db02      	blt.n	8003c6a <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003c64:	7d7b      	ldrb	r3, [r7, #21]
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e079      	b.n	8003d5e <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8003c6e:	7d7b      	ldrb	r3, [r7, #21]
 8003c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c74:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8003c76:	f107 0315 	add.w	r3, r7, #21
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff ff75 	bl	8003b6c <pb_readbyte>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <pb_decode_varint32_eof+0x72>
                return false;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e069      	b.n	8003d66 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b1f      	cmp	r3, #31
 8003c96:	d92f      	bls.n	8003cf8 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c9c:	d801      	bhi.n	8003ca2 <pb_decode_varint32_eof+0x82>
 8003c9e:	23ff      	movs	r3, #255	@ 0xff
 8003ca0:	e000      	b.n	8003ca4 <pb_decode_varint32_eof+0x84>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003ca6:	7d7b      	ldrb	r3, [r7, #21]
 8003ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da05      	bge.n	8003cc2 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003cb6:	7d7b      	ldrb	r3, [r7, #21]
 8003cb8:	7dfa      	ldrb	r2, [r7, #23]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d101      	bne.n	8003cc2 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <pb_decode_varint32_eof+0xa4>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75bb      	strb	r3, [r7, #22]
 8003cc6:	7dbb      	ldrb	r3, [r7, #22]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cd2:	d805      	bhi.n	8003ce0 <pb_decode_varint32_eof+0xc0>
 8003cd4:	7dbb      	ldrb	r3, [r7, #22]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d037      	beq.n	8003d50 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <pb_decode_varint32_eof+0xce>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	e000      	b.n	8003cf0 <pb_decode_varint32_eof+0xd0>
 8003cee:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <pb_decode_varint32_eof+0x150>)
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	60d3      	str	r3, [r2, #12]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e036      	b.n	8003d66 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b1c      	cmp	r3, #28
 8003cfc:	d11f      	bne.n	8003d3e <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8003cfe:	7d7b      	ldrb	r3, [r7, #21]
 8003d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <pb_decode_varint32_eof+0x10a>
 8003d08:	7d7b      	ldrb	r3, [r7, #21]
 8003d0a:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8003d0e:	2b78      	cmp	r3, #120	@ 0x78
 8003d10:	d00b      	beq.n	8003d2a <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <pb_decode_varint32_eof+0x100>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	e000      	b.n	8003d22 <pb_decode_varint32_eof+0x102>
 8003d20:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <pb_decode_varint32_eof+0x150>)
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	60d3      	str	r3, [r2, #12]
 8003d26:	2300      	movs	r3, #0
 8003d28:	e01d      	b.n	8003d66 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8003d2a:	7d7b      	ldrb	r3, [r7, #21]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	e008      	b.n	8003d50 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8003d3e:	7d7b      	ldrb	r3, [r7, #21]
 8003d40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	3307      	adds	r3, #7
 8003d54:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8003d56:	7d7b      	ldrb	r3, [r7, #21]
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db8b      	blt.n	8003c76 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	601a      	str	r2, [r3, #0]
   return true;
 8003d64:	2301      	movs	r3, #1
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	080090dc 	.word	0x080090dc

08003d74 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff4c 	bl	8003c20 <pb_decode_varint32_eof>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b08a      	sub	sp, #40	@ 0x28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8003db0:	f107 0317 	add.w	r3, r7, #23
 8003db4:	4619      	mov	r1, r3
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fed8 	bl	8003b6c <pb_readbyte>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f083 0301 	eor.w	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <pb_decode_varint+0x38>
            return false;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e041      	b.n	8003e50 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dd0:	d910      	bls.n	8003df4 <pb_decode_varint+0x60>
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <pb_decode_varint+0x56>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	e000      	b.n	8003dec <pb_decode_varint+0x58>
 8003dea:	4b1c      	ldr	r3, [pc, #112]	@ (8003e5c <pb_decode_varint+0xc8>)
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	60d3      	str	r3, [r2, #12]
 8003df0:	2300      	movs	r3, #0
 8003df2:	e02d      	b.n	8003e50 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8003e04:	f04f 0900 	mov.w	r9, #0
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	f1a3 0120 	sub.w	r1, r3, #32
 8003e0e:	f1c3 0220 	rsb	r2, r3, #32
 8003e12:	fa09 f503 	lsl.w	r5, r9, r3
 8003e16:	fa08 f101 	lsl.w	r1, r8, r1
 8003e1a:	430d      	orrs	r5, r1
 8003e1c:	fa28 f202 	lsr.w	r2, r8, r2
 8003e20:	4315      	orrs	r5, r2
 8003e22:	fa08 f403 	lsl.w	r4, r8, r3
 8003e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2a:	ea42 0a04 	orr.w	sl, r2, r4
 8003e2e:	ea43 0b05 	orr.w	fp, r3, r5
 8003e32:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	3307      	adds	r3, #7
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	dbb5      	blt.n	8003db0 <pb_decode_varint+0x1c>
    
    *dest = result;
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4a:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8003e4e:	2301      	movs	r3, #1
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3728      	adds	r7, #40	@ 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	080090dc 	.word	0x080090dc

08003e60 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003e68:	f107 030f 	add.w	r3, r7, #15
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff fe05 	bl	8003a80 <pb_read>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f083 0301 	eor.w	r3, r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <pb_skip_varint+0x26>
            return false;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e004      	b.n	8003e90 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dbec      	blt.n	8003e68 <pb_skip_varint+0x8>
    return true;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ff64 	bl	8003d74 <pb_decode_varint32>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f083 0301 	eor.w	r3, r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <pb_skip_string+0x24>
        return false;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e006      	b.n	8003eca <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fddc 	bl	8003a80 <pb_read>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fe90 	bl	8003c20 <pb_decode_varint32_eof>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f083 0301 	eor.w	r3, r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <pb_decode_tag+0x3e>
    {
        return false;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e00b      	b.n	8003f28 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	701a      	strb	r2, [r3, #0]
    return true;
 8003f26:	2301      	movs	r3, #1
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d826      	bhi.n	8003f90 <pb_skip_field+0x60>
 8003f42:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <pb_skip_field+0x18>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f61 	.word	0x08003f61
 8003f4c:	08003f6b 	.word	0x08003f6b
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f91 	.word	0x08003f91
 8003f58:	08003f91 	.word	0x08003f91
 8003f5c:	08003f83 	.word	0x08003f83
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff7d 	bl	8003e60 <pb_skip_varint>
 8003f66:	4603      	mov	r3, r0
 8003f68:	e01d      	b.n	8003fa6 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fd86 	bl	8003a80 <pb_read>
 8003f74:	4603      	mov	r3, r0
 8003f76:	e016      	b.n	8003fa6 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff8d 	bl	8003e98 <pb_skip_string>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e011      	b.n	8003fa6 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8003f82:	2204      	movs	r2, #4
 8003f84:	2100      	movs	r1, #0
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fd7a 	bl	8003a80 <pb_read>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	e00a      	b.n	8003fa6 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <pb_skip_field+0x6e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	e000      	b.n	8003fa0 <pb_skip_field+0x70>
 8003f9e:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <pb_skip_field+0x80>)
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60d3      	str	r3, [r2, #12]
 8003fa4:	2300      	movs	r3, #0
    }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	080090ec 	.word	0x080090ec

08003fb4 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8003fca:	7afb      	ldrb	r3, [r7, #11]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d03f      	beq.n	8004050 <read_raw_value+0x9c>
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	dc47      	bgt.n	8004064 <read_raw_value+0xb0>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <read_raw_value+0x2a>
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d02f      	beq.n	800403c <read_raw_value+0x88>
 8003fdc:	e042      	b.n	8004064 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d20b      	bcs.n	8004010 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <read_raw_value+0x52>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	e000      	b.n	8004008 <read_raw_value+0x54>
 8004006:	4b1f      	ldr	r3, [pc, #124]	@ (8004084 <read_raw_value+0xd0>)
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	60d3      	str	r3, [r2, #12]
 800400c:	2300      	movs	r3, #0
 800400e:	e034      	b.n	800407a <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8004010:	2201      	movs	r2, #1
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fd33 	bl	8003a80 <pb_read>
 800401a:	4603      	mov	r3, r0
 800401c:	f083 0301 	eor.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <read_raw_value+0x76>
                    return false;
 8004026:	2300      	movs	r3, #0
 8004028:	e027      	b.n	800407a <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	dbd5      	blt.n	8003fe4 <read_raw_value+0x30>
            return true;
 8004038:	2301      	movs	r3, #1
 800403a:	e01e      	b.n	800407a <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2208      	movs	r2, #8
 8004040:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8004042:	2208      	movs	r2, #8
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff fd1a 	bl	8003a80 <pb_read>
 800404c:	4603      	mov	r3, r0
 800404e:	e014      	b.n	800407a <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2204      	movs	r2, #4
 8004054:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8004056:	2204      	movs	r2, #4
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff fd10 	bl	8003a80 <pb_read>
 8004060:	4603      	mov	r3, r0
 8004062:	e00a      	b.n	800407a <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <read_raw_value+0xbe>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	e000      	b.n	8004074 <read_raw_value+0xc0>
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <read_raw_value+0xd4>)
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	60d3      	str	r3, [r2, #12]
 8004078:	2300      	movs	r3, #0
    }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	080090dc 	.word	0x080090dc
 8004088:	080090ec 	.word	0x080090ec

0800408c <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8004096:	f107 030c 	add.w	r3, r7, #12
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fe69 	bl	8003d74 <pb_decode_varint32>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <pb_make_string_substream+0x26>
        return false;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e020      	b.n	80040f4 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4614      	mov	r4, r2
 80040b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d20b      	bcs.n	80040e0 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <pb_make_string_substream+0x4a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	e000      	b.n	80040d8 <pb_make_string_substream+0x4c>
 80040d6:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <pb_make_string_substream+0x70>)
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	60d3      	str	r3, [r2, #12]
 80040dc:	2300      	movs	r3, #0
 80040de:	e009      	b.n	80040f4 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad2      	subs	r2, r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
    return true;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd90      	pop	{r4, r7, pc}
 80040fc:	08009100 	.word	0x08009100

08004100 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	461a      	mov	r2, r3
 8004118:	2100      	movs	r1, #0
 800411a:	6838      	ldr	r0, [r7, #0]
 800411c:	f7ff fcb0 	bl	8003a80 <pb_read>
 8004120:	4603      	mov	r3, r0
 8004122:	f083 0301 	eor.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <pb_close_string_substream+0x30>
            return false;
 800412c:	2300      	movs	r3, #0
 800412e:	e008      	b.n	8004142 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8004140:	2301      	movs	r3, #1
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	460b      	mov	r3, r1
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7d9b      	ldrb	r3, [r3, #22]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	2b0b      	cmp	r3, #11
 8004164:	f200 80d4 	bhi.w	8004310 <decode_basic_field+0x1c4>
 8004168:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <decode_basic_field+0x24>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	080041a1 	.word	0x080041a1
 8004174:	080041d1 	.word	0x080041d1
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041d1 	.word	0x080041d1
 8004180:	08004201 	.word	0x08004201
 8004184:	08004235 	.word	0x08004235
 8004188:	08004269 	.word	0x08004269
 800418c:	08004293 	.word	0x08004293
 8004190:	080042bd 	.word	0x080042bd
 8004194:	080042bd 	.word	0x080042bd
 8004198:	08004311 	.word	0x08004311
 800419c:	080042e7 	.word	0x080042e7
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80041a0:	7afb      	ldrb	r3, [r7, #11]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00e      	beq.n	80041c4 <decode_basic_field+0x78>
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	2bff      	cmp	r3, #255	@ 0xff
 80041aa:	d00b      	beq.n	80041c4 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <decode_basic_field+0x6e>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	e000      	b.n	80041bc <decode_basic_field+0x70>
 80041ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004330 <decode_basic_field+0x1e4>)
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	60d3      	str	r3, [r2, #12]
 80041c0:	2300      	movs	r3, #0
 80041c2:	e0b0      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fef6 	bl	8004fb8 <pb_dec_bool>
 80041cc:	4603      	mov	r3, r0
 80041ce:	e0aa      	b.n	8004326 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80041d0:	7afb      	ldrb	r3, [r7, #11]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <decode_basic_field+0xa8>
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	2bff      	cmp	r3, #255	@ 0xff
 80041da:	d00b      	beq.n	80041f4 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <decode_basic_field+0x9e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	e000      	b.n	80041ec <decode_basic_field+0xa0>
 80041ea:	4b51      	ldr	r3, [pc, #324]	@ (8004330 <decode_basic_field+0x1e4>)
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	60d3      	str	r3, [r2, #12]
 80041f0:	2300      	movs	r3, #0
 80041f2:	e098      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 feee 	bl	8004fd8 <pb_dec_varint>
 80041fc:	4603      	mov	r3, r0
 80041fe:	e092      	b.n	8004326 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8004200:	7afb      	ldrb	r3, [r7, #11]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d00e      	beq.n	8004224 <decode_basic_field+0xd8>
 8004206:	7afb      	ldrb	r3, [r7, #11]
 8004208:	2bff      	cmp	r3, #255	@ 0xff
 800420a:	d00b      	beq.n	8004224 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <decode_basic_field+0xce>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	e000      	b.n	800421c <decode_basic_field+0xd0>
 800421a:	4b45      	ldr	r3, [pc, #276]	@ (8004330 <decode_basic_field+0x1e4>)
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	60d3      	str	r3, [r2, #12]
 8004220:	2300      	movs	r3, #0
 8004222:	e080      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4619      	mov	r1, r3
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fe8a 	bl	8004f44 <pb_decode_fixed32>
 8004230:	4603      	mov	r3, r0
 8004232:	e078      	b.n	8004326 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8004234:	7afb      	ldrb	r3, [r7, #11]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d00e      	beq.n	8004258 <decode_basic_field+0x10c>
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	2bff      	cmp	r3, #255	@ 0xff
 800423e:	d00b      	beq.n	8004258 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <decode_basic_field+0x102>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	e000      	b.n	8004250 <decode_basic_field+0x104>
 800424e:	4b38      	ldr	r3, [pc, #224]	@ (8004330 <decode_basic_field+0x1e4>)
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	2300      	movs	r3, #0
 8004256:	e066      	b.n	8004326 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	4619      	mov	r1, r3
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fe8c 	bl	8004f7c <pb_decode_fixed64>
 8004264:	4603      	mov	r3, r0
 8004266:	e05e      	b.n	8004326 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d00b      	beq.n	8004286 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <decode_basic_field+0x130>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	e000      	b.n	800427e <decode_basic_field+0x132>
 800427c:	4b2c      	ldr	r3, [pc, #176]	@ (8004330 <decode_basic_field+0x1e4>)
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	60d3      	str	r3, [r2, #12]
 8004282:	2300      	movs	r3, #0
 8004284:	e04f      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 ffd1 	bl	8005230 <pb_dec_bytes>
 800428e:	4603      	mov	r3, r0
 8004290:	e049      	b.n	8004326 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d00b      	beq.n	80042b0 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <decode_basic_field+0x15a>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	e000      	b.n	80042a8 <decode_basic_field+0x15c>
 80042a6:	4b22      	ldr	r3, [pc, #136]	@ (8004330 <decode_basic_field+0x1e4>)
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	60d3      	str	r3, [r2, #12]
 80042ac:	2300      	movs	r3, #0
 80042ae:	e03a      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f001 f830 	bl	8005318 <pb_dec_string>
 80042b8:	4603      	mov	r3, r0
 80042ba:	e034      	b.n	8004326 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80042bc:	7afb      	ldrb	r3, [r7, #11]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d00b      	beq.n	80042da <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <decode_basic_field+0x184>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	e000      	b.n	80042d2 <decode_basic_field+0x186>
 80042d0:	4b17      	ldr	r3, [pc, #92]	@ (8004330 <decode_basic_field+0x1e4>)
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	60d3      	str	r3, [r2, #12]
 80042d6:	2300      	movs	r3, #0
 80042d8:	e025      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f001 f897 	bl	8005410 <pb_dec_submessage>
 80042e2:	4603      	mov	r3, r0
 80042e4:	e01f      	b.n	8004326 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d00b      	beq.n	8004304 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <decode_basic_field+0x1ae>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	e000      	b.n	80042fc <decode_basic_field+0x1b0>
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <decode_basic_field+0x1e4>)
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	60d3      	str	r3, [r2, #12]
 8004300:	2300      	movs	r3, #0
 8004302:	e010      	b.n	8004326 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f001 f90c 	bl	8005524 <pb_dec_fixed_length_bytes>
 800430c:	4603      	mov	r3, r0
 800430e:	e00a      	b.n	8004326 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <decode_basic_field+0x1d2>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	e000      	b.n	8004320 <decode_basic_field+0x1d4>
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <decode_basic_field+0x1e8>)
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	60d3      	str	r3, [r2, #12]
 8004324:	2300      	movs	r3, #0
    }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	08009118 	.word	0x08009118
 8004334:	08009128 	.word	0x08009128

08004338 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b096      	sub	sp, #88	@ 0x58
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	460b      	mov	r3, r1
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7d9b      	ldrb	r3, [r3, #22]
 800434a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800434e:	2b30      	cmp	r3, #48	@ 0x30
 8004350:	f000 80c2 	beq.w	80044d8 <decode_static_field+0x1a0>
 8004354:	2b30      	cmp	r3, #48	@ 0x30
 8004356:	f200 811a 	bhi.w	800458e <decode_static_field+0x256>
 800435a:	2b20      	cmp	r3, #32
 800435c:	d01f      	beq.n	800439e <decode_static_field+0x66>
 800435e:	2b20      	cmp	r3, #32
 8004360:	f200 8115 	bhi.w	800458e <decode_static_field+0x256>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <decode_static_field+0x36>
 8004368:	2b10      	cmp	r3, #16
 800436a:	d008      	beq.n	800437e <decode_static_field+0x46>
 800436c:	e10f      	b.n	800458e <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 800436e:	7afb      	ldrb	r3, [r7, #11]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fee9 	bl	800414c <decode_basic_field>
 800437a:	4603      	mov	r3, r0
 800437c:	e112      	b.n	80045a4 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 800438e:	7afb      	ldrb	r3, [r7, #11]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fed9 	bl	800414c <decode_basic_field>
 800439a:	4603      	mov	r3, r0
 800439c:	e102      	b.n	80045a4 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800439e:	7afb      	ldrb	r3, [r7, #11]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d16c      	bne.n	800447e <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7d9b      	ldrb	r3, [r3, #22]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d866      	bhi.n	800447e <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	8a52      	ldrh	r2, [r2, #18]
 80043c4:	4611      	mov	r1, r2
 80043c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	fb01 f202 	mul.w	r2, r1, r2
 80043ce:	441a      	add	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80043d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043d8:	4619      	mov	r1, r3
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fe56 	bl	800408c <pb_make_string_substream>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01f      	beq.n	800442c <decode_static_field+0xf4>
                    return false;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e0d9      	b.n	80045a4 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 80043f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	21ff      	movs	r1, #255	@ 0xff
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fea7 	bl	800414c <decode_basic_field>
 80043fe:	4603      	mov	r3, r0
 8004400:	f083 0301 	eor.w	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <decode_static_field+0xda>
                    {
                        status = false;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8004410:	e015      	b.n	800443e <decode_static_field+0x106>
                    }
                    (*size)++;
 8004412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800441c:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	8a52      	ldrh	r2, [r2, #18]
 8004426:	441a      	add	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 800442c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <decode_static_field+0x106>
 8004432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8a9b      	ldrh	r3, [r3, #20]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3d8      	bcc.n	80043f0 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 800443e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <decode_static_field+0x11a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	e000      	b.n	8004454 <decode_static_field+0x11c>
 8004452:	4b56      	ldr	r3, [pc, #344]	@ (80045ac <decode_static_field+0x274>)
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	60d3      	str	r3, [r2, #12]
 8004458:	2300      	movs	r3, #0
 800445a:	e0a3      	b.n	80045a4 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 800445c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004460:	4619      	mov	r1, r3
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fe4c 	bl	8004100 <pb_close_string_substream>
 8004468:	4603      	mov	r3, r0
 800446a:	f083 0301 	eor.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <decode_static_field+0x140>
                    return false;
 8004474:	2300      	movs	r3, #0
 8004476:	e095      	b.n	80045a4 <decode_static_field+0x26c>

                return status;
 8004478:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800447c:	e092      	b.n	80045a4 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	8a52      	ldrh	r2, [r2, #18]
 800448c:	4611      	mov	r1, r2
 800448e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004490:	8812      	ldrh	r2, [r2, #0]
 8004492:	fb01 f202 	mul.w	r2, r1, r2
 8004496:	441a      	add	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 800449c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	b291      	uxth	r1, r2
 80044a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a6:	8011      	strh	r1, [r2, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	8a92      	ldrh	r2, [r2, #20]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d30b      	bcc.n	80044c8 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <decode_static_field+0x186>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	e000      	b.n	80044c0 <decode_static_field+0x188>
 80044be:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <decode_static_field+0x274>)
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	60d3      	str	r3, [r2, #12]
 80044c4:	2300      	movs	r3, #0
 80044c6:	e06d      	b.n	80045a4 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80044c8:	7afb      	ldrb	r3, [r7, #11]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4619      	mov	r1, r3
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fe3c 	bl	800414c <decode_basic_field>
 80044d4:	4603      	mov	r3, r0
 80044d6:	e065      	b.n	80045a4 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7d9b      	ldrb	r3, [r3, #22]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d005      	beq.n	80044f0 <decode_static_field+0x1b8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7d9b      	ldrb	r3, [r3, #22]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	2b09      	cmp	r3, #9
 80044ee:	d141      	bne.n	8004574 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d03a      	beq.n	8004574 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69d8      	ldr	r0, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8a5b      	ldrh	r3, [r3, #18]
 8004506:	461a      	mov	r2, r3
 8004508:	2100      	movs	r1, #0
 800450a:	f003 ff23 	bl	8008354 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 800452a:	2b00      	cmp	r3, #0
 800452c:	d022      	beq.n	8004574 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4618      	mov	r0, r3
 800453c:	f003 fabd 	bl	8007aba <pb_field_iter_begin>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8004546:	f107 0314 	add.w	r3, r7, #20
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fa4d 	bl	80049ea <pb_message_set_to_defaults>
 8004550:	4603      	mov	r3, r0
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <decode_static_field+0x232>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	e000      	b.n	800456c <decode_static_field+0x234>
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <decode_static_field+0x278>)
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	2300      	movs	r3, #0
 8004572:	e017      	b.n	80045a4 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	8a12      	ldrh	r2, [r2, #16]
 800457c:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 800457e:	7afb      	ldrb	r3, [r7, #11]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4619      	mov	r1, r3
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff fde1 	bl	800414c <decode_basic_field>
 800458a:	4603      	mov	r3, r0
 800458c:	e00a      	b.n	80045a4 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <decode_static_field+0x264>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	e000      	b.n	800459e <decode_static_field+0x266>
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <decode_static_field+0x27c>)
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	60d3      	str	r3, [r2, #12]
 80045a2:	2300      	movs	r3, #0
    }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3758      	adds	r7, #88	@ 0x58
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	0800913c 	.word	0x0800913c
 80045b0:	0800914c 	.word	0x0800914c
 80045b4:	08009128 	.word	0x08009128

080045b8 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	460b      	mov	r3, r1
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <decode_pointer_field+0x1c>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	e000      	b.n	80045d6 <decode_pointer_field+0x1e>
 80045d4:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <decode_pointer_field+0x30>)
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	60d3      	str	r3, [r2, #12]
 80045da:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	08009164 	.word	0x08009164

080045ec <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b097      	sub	sp, #92	@ 0x5c
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	61f8      	str	r0, [r7, #28]
 80045f4:	460b      	mov	r3, r1
 80045f6:	617a      	str	r2, [r7, #20]
 80045f8:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8004604:	7efb      	ldrb	r3, [r7, #27]
 8004606:	4619      	mov	r1, r3
 8004608:	69f8      	ldr	r0, [r7, #28]
 800460a:	f7ff fc91 	bl	8003f30 <pb_skip_field>
 800460e:	4603      	mov	r3, r0
 8004610:	e070      	b.n	80046f4 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8004612:	7efb      	ldrb	r3, [r7, #27]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d145      	bne.n	80046a4 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8004618:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800461c:	4619      	mov	r1, r3
 800461e:	69f8      	ldr	r0, [r7, #28]
 8004620:	f7ff fd34 	bl	800408c <pb_make_string_substream>
 8004624:	4603      	mov	r3, r0
 8004626:	f083 0301 	eor.w	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <decode_callback_field+0x48>
            return false;
 8004630:	2300      	movs	r3, #0
 8004632:	e05f      	b.n	80046f4 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8004634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004636:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	2100      	movs	r1, #0
 8004646:	4798      	blx	r3
 8004648:	4603      	mov	r3, r0
 800464a:	f083 0301 	eor.w	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d010      	beq.n	8004676 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <decode_callback_field+0x76>
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	e005      	b.n	800466e <decode_callback_field+0x82>
 8004662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <decode_callback_field+0x80>
 8004668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800466a:	e000      	b.n	800466e <decode_callback_field+0x82>
 800466c:	4b23      	ldr	r3, [pc, #140]	@ (80046fc <decode_callback_field+0x110>)
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	60d3      	str	r3, [r2, #12]
                return false;
 8004672:	2300      	movs	r3, #0
 8004674:	e03e      	b.n	80046f4 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8004676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <decode_callback_field+0x98>
 800467c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004680:	429a      	cmp	r2, r3
 8004682:	d8d7      	bhi.n	8004634 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8004684:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004688:	4619      	mov	r1, r3
 800468a:	69f8      	ldr	r0, [r7, #28]
 800468c:	f7ff fd38 	bl	8004100 <pb_close_string_substream>
 8004690:	4603      	mov	r3, r0
 8004692:	f083 0301 	eor.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <decode_callback_field+0xb4>
            return false;
 800469c:	2300      	movs	r3, #0
 800469e:	e029      	b.n	80046f4 <decode_callback_field+0x108>

        return true;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e027      	b.n	80046f4 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80046a4:	230a      	movs	r3, #10
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80046a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80046b0:	7ef9      	ldrb	r1, [r7, #27]
 80046b2:	69f8      	ldr	r0, [r7, #28]
 80046b4:	f7ff fc7e 	bl	8003fb4 <read_raw_value>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f083 0301 	eor.w	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <decode_callback_field+0xdc>
            return false;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e015      	b.n	80046f4 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 80046c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ca:	463b      	mov	r3, r7
 80046cc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fa87 	bl	8003be4 <pb_istream_from_buffer>
 80046d6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80046da:	463b      	mov	r3, r7
 80046dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	2100      	movs	r1, #0
 80046f0:	4798      	blx	r3
 80046f2:	4603      	mov	r3, r0
    }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	375c      	adds	r7, #92	@ 0x5c
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	08009178 	.word	0x08009178

08004700 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	460b      	mov	r3, r1
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7d9b      	ldrb	r3, [r3, #22]
 8004712:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004716:	2b80      	cmp	r3, #128	@ 0x80
 8004718:	d00e      	beq.n	8004738 <decode_field+0x38>
 800471a:	2b80      	cmp	r3, #128	@ 0x80
 800471c:	d81c      	bhi.n	8004758 <decode_field+0x58>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <decode_field+0x28>
 8004722:	2b40      	cmp	r3, #64	@ 0x40
 8004724:	d010      	beq.n	8004748 <decode_field+0x48>
 8004726:	e017      	b.n	8004758 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8004728:	7afb      	ldrb	r3, [r7, #11]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff fe02 	bl	8004338 <decode_static_field>
 8004734:	4603      	mov	r3, r0
 8004736:	e01a      	b.n	800476e <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8004738:	7afb      	ldrb	r3, [r7, #11]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff ff3a 	bl	80045b8 <decode_pointer_field>
 8004744:	4603      	mov	r3, r0
 8004746:	e012      	b.n	800476e <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8004748:	7afb      	ldrb	r3, [r7, #11]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4619      	mov	r1, r3
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff ff4c 	bl	80045ec <decode_callback_field>
 8004754:	4603      	mov	r3, r0
 8004756:	e00a      	b.n	800476e <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <decode_field+0x66>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	e000      	b.n	8004768 <decode_field+0x68>
 8004766:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <decode_field+0x78>)
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	60d3      	str	r3, [r2, #12]
 800476c:	2300      	movs	r3, #0
    }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	08009128 	.word	0x08009128

0800477c <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	@ 0x38
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 800478a:	f107 0310 	add.w	r3, r7, #16
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f003 f9ab 	bl	8007aec <pb_field_iter_begin_extension>
 8004796:	4603      	mov	r3, r0
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <default_extension_decoder+0x34>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	e000      	b.n	80047b2 <default_extension_decoder+0x36>
 80047b0:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <default_extension_decoder+0x70>)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	60d3      	str	r3, [r2, #12]
 80047b6:	2300      	movs	r3, #0
 80047b8:	e014      	b.n	80047e4 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80047ba:	8c3b      	ldrh	r3, [r7, #32]
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d102      	bne.n	80047ca <default_extension_decoder+0x4e>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <default_extension_decoder+0x52>
        return true;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00a      	b.n	80047e4 <default_extension_decoder+0x68>

    extension->found = true;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2201      	movs	r2, #1
 80047d2:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80047d4:	f107 0210 	add.w	r2, r7, #16
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	4619      	mov	r1, r3
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff ff8f 	bl	8004700 <decode_field>
 80047e2:	4603      	mov	r3, r0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3738      	adds	r7, #56	@ 0x38
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	08009188 	.word	0x08009188

080047f0 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8004806:	e022      	b.n	800484e <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681c      	ldr	r4, [r3, #0]
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	6839      	ldr	r1, [r7, #0]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	47a0      	blx	r4
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]
 8004826:	e007      	b.n	8004838 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ffa4 	bl	800477c <default_extension_decoder>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	f083 0301 	eor.w	r3, r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <decode_extension+0x58>
            return false;
 8004844:	2300      	movs	r3, #0
 8004846:	e00b      	b.n	8004860 <decode_extension+0x70>
        
        extension = extension->next;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <decode_extension+0x6e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d0d4      	beq.n	8004808 <decode_extension+0x18>
    }
    
    return true;
 800485e:	2301      	movs	r3, #1
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	bd90      	pop	{r4, r7, pc}

08004868 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	@ 0x38
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7d9b      	ldrb	r3, [r3, #22]
 8004874:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004878:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2b0a      	cmp	r3, #10
 8004882:	d124      	bne.n	80048ce <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 800488c:	e01b      	b.n	80048c6 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004894:	4618      	mov	r0, r3
 8004896:	f003 f929 	bl	8007aec <pb_field_iter_begin_extension>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80048a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a2:	2200      	movs	r2, #0
 80048a4:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f89d 	bl	80049ea <pb_message_set_to_defaults>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f083 0301 	eor.w	r3, r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <pb_field_set_to_default+0x58>
                    return false;
 80048bc:	2300      	movs	r3, #0
 80048be:	e090      	b.n	80049e2 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80048c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80048c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e0      	bne.n	800488e <pb_field_set_to_default+0x26>
 80048cc:	e088      	b.n	80049e0 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80048ce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80048d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d166      	bne.n	80049a8 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80048e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80048e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d108      	bne.n	80048fe <pb_field_set_to_default+0x96>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	e012      	b.n	8004924 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80048fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004902:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004906:	2b20      	cmp	r3, #32
 8004908:	d005      	beq.n	8004916 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800490a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800490e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004912:	2b30      	cmp	r3, #48	@ 0x30
 8004914:	d106      	bne.n	8004924 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	2200      	movs	r2, #0
 800491c:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8004924:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004928:	2b00      	cmp	r3, #0
 800492a:	d059      	beq.n	80049e0 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	7d9b      	ldrb	r3, [r3, #22]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2b08      	cmp	r3, #8
 8004936:	d005      	beq.n	8004944 <pb_field_set_to_default+0xdc>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7d9b      	ldrb	r3, [r3, #22]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	2b09      	cmp	r3, #9
 8004942:	d128      	bne.n	8004996 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004960:	2b00      	cmp	r3, #0
 8004962:	d018      	beq.n	8004996 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	4618      	mov	r0, r3
 8004972:	f003 f8a2 	bl	8007aba <pb_field_iter_begin>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d030      	beq.n	80049de <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f832 	bl	80049ea <pb_message_set_to_defaults>
 8004986:	4603      	mov	r3, r0
 8004988:	f083 0301 	eor.w	r3, r3, #1
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d025      	beq.n	80049de <pb_field_set_to_default+0x176>
                        return false;
 8004992:	2300      	movs	r3, #0
 8004994:	e025      	b.n	80049e2 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69d8      	ldr	r0, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8a5b      	ldrh	r3, [r3, #18]
 800499e:	461a      	mov	r2, r3
 80049a0:	2100      	movs	r1, #0
 80049a2:	f003 fcd7 	bl	8008354 <memset>
 80049a6:	e01b      	b.n	80049e0 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80049a8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80049ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049b0:	2b80      	cmp	r3, #128	@ 0x80
 80049b2:	d115      	bne.n	80049e0 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80049bc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80049c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d005      	beq.n	80049d4 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80049c8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80049cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80049d0:	2b30      	cmp	r3, #48	@ 0x30
 80049d2:	d105      	bne.n	80049e0 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	2200      	movs	r2, #0
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	e000      	b.n	80049e0 <pb_field_set_to_default+0x178>
            {
 80049de:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80049e0:	2301      	movs	r3, #1
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3738      	adds	r7, #56	@ 0x38
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80049ea:	b590      	push	{r4, r7, lr}
 80049ec:	b08d      	sub	sp, #52	@ 0x34
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80049f2:	f107 0320 	add.w	r3, r7, #32
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8004a04:	2300      	movs	r3, #0
 8004a06:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d020      	beq.n	8004a54 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6899      	ldr	r1, [r3, #8]
 8004a18:	463b      	mov	r3, r7
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff f8e0 	bl	8003be4 <pb_istream_from_buffer>
 8004a24:	f107 0420 	add.w	r4, r7, #32
 8004a28:	463b      	mov	r3, r7
 8004a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004a30:	f107 031a 	add.w	r3, r7, #26
 8004a34:	f107 021c 	add.w	r2, r7, #28
 8004a38:	f107 011b 	add.w	r1, r7, #27
 8004a3c:	f107 0020 	add.w	r0, r7, #32
 8004a40:	f7ff fa47 	bl	8003ed2 <pb_decode_tag>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f083 0301 	eor.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <pb_message_set_to_defaults+0x6a>
            return false;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e043      	b.n	8004adc <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8004a54:	6978      	ldr	r0, [r7, #20]
 8004a56:	f7ff ff07 	bl	8004868 <pb_field_set_to_default>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f083 0301 	eor.w	r3, r3, #1
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <pb_message_set_to_defaults+0x80>
            return false;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e038      	b.n	8004adc <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02e      	beq.n	8004ace <pb_message_set_to_defaults+0xe4>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	8a1b      	ldrh	r3, [r3, #16]
 8004a74:	461a      	mov	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d128      	bne.n	8004ace <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8004a7c:	7ef9      	ldrb	r1, [r7, #27]
 8004a7e:	f107 0320 	add.w	r3, r7, #32
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fe3b 	bl	8004700 <decode_field>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <pb_message_set_to_defaults+0xb0>
                return false;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e020      	b.n	8004adc <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004a9a:	f107 031a 	add.w	r3, r7, #26
 8004a9e:	f107 021c 	add.w	r2, r7, #28
 8004aa2:	f107 011b 	add.w	r1, r7, #27
 8004aa6:	f107 0020 	add.w	r0, r7, #32
 8004aaa:	f7ff fa12 	bl	8003ed2 <pb_decode_tag>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f083 0301 	eor.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <pb_message_set_to_defaults+0xd4>
                return false;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e00e      	b.n	8004adc <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f003 f83c 	bl	8007b4c <pb_field_iter_next>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1bc      	bne.n	8004a54 <pb_message_set_to_defaults+0x6a>

    return true;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3734      	adds	r7, #52	@ 0x34
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd90      	pop	{r4, r7, pc}

08004ae4 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b09a      	sub	sp, #104	@ 0x68
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8004afa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004afe:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8004b0e:	2300      	movs	r3, #0
 8004b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b12:	2300      	movs	r3, #0
 8004b14:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b1a:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8004b1c:	f107 0318 	add.w	r3, r7, #24
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f002 ffc8 	bl	8007aba <pb_field_iter_begin>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8102 	beq.w	8004d36 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 80fc 	bne.w	8004d36 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8004b3e:	f107 0318 	add.w	r3, r7, #24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ff51 	bl	80049ea <pb_message_set_to_defaults>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f083 0301 	eor.w	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80f0 	beq.w	8004d36 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <pb_decode_inner+0x80>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	e000      	b.n	8004b66 <pb_decode_inner+0x82>
 8004b64:	4b99      	ldr	r3, [pc, #612]	@ (8004dcc <pb_decode_inner+0x2e8>)
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	60d3      	str	r3, [r2, #12]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e16d      	b.n	8004e4a <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004b6e:	f107 0312 	add.w	r3, r7, #18
 8004b72:	f107 0214 	add.w	r2, r7, #20
 8004b76:	f107 0113 	add.w	r1, r7, #19
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff f9a9 	bl	8003ed2 <pb_decode_tag>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f083 0301 	eor.w	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <pb_decode_inner+0xb4>
        {
            if (eof)
 8004b8c:	7cbb      	ldrb	r3, [r7, #18]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 80d7 	bne.w	8004d42 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e158      	b.n	8004e4a <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d111      	bne.n	8004bc2 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 80ce 	bne.w	8004d46 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <pb_decode_inner+0xd4>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	e000      	b.n	8004bba <pb_decode_inner+0xd6>
 8004bb8:	4b85      	ldr	r3, [pc, #532]	@ (8004dd0 <pb_decode_inner+0x2ec>)
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	60d3      	str	r3, [r2, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e143      	b.n	8004e4a <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	f107 0318 	add.w	r3, r7, #24
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f002 ffd3 	bl	8007b76 <pb_field_iter_find>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f083 0301 	eor.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <pb_decode_inner+0x104>
 8004bdc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	2b0a      	cmp	r3, #10
 8004be6:	d13c      	bne.n	8004c62 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8004be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d112      	bne.n	8004c14 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8004bee:	f107 0318 	add.w	r3, r7, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f003 f815 	bl	8007c22 <pb_field_iter_find_extension>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8004c04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c06:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8004c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c12:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d815      	bhi.n	8004c48 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8004c22:	6979      	ldr	r1, [r7, #20]
 8004c24:	7cfa      	ldrb	r2, [r7, #19]
 8004c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fde1 	bl	80047f0 <decode_extension>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f083 0301 	eor.w	r3, r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <pb_decode_inner+0x15a>
                    return false;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e105      	b.n	8004e4a <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d173      	bne.n	8004d30 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff f96f 	bl	8003f30 <pb_skip_field>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f083 0301 	eor.w	r3, r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d06a      	beq.n	8004d34 <pb_decode_inner+0x250>
                return false;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e0f3      	b.n	8004e4a <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8004c62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d12e      	bne.n	8004ccc <pb_decode_inner+0x1e8>
 8004c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c70:	f107 0318 	add.w	r3, r7, #24
 8004c74:	3314      	adds	r3, #20
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d128      	bne.n	8004ccc <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8004c7a:	8c3b      	ldrh	r3, [r7, #32]
 8004c7c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d020      	beq.n	8004cc6 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8004c84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004c88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d011      	beq.n	8004cb4 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8004c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8004c94:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d00b      	beq.n	8004cb4 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <pb_decode_inner+0x1c6>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	e000      	b.n	8004cac <pb_decode_inner+0x1c8>
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <pb_decode_inner+0x2f0>)
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	60d3      	str	r3, [r2, #12]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e0ca      	b.n	8004e4a <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8004cb4:	8c3b      	ldrh	r3, [r7, #32]
 8004cb6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8004cc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004cc2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8004cc6:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8004ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11c      	bne.n	8004d12 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8004cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cda:	2b3f      	cmp	r3, #63	@ 0x3f
 8004cdc:	d819      	bhi.n	8004d12 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8004cec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	3368      	adds	r3, #104	@ 0x68
 8004cf6:	443b      	add	r3, r7
 8004cf8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8004cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4619      	mov	r1, r3
 8004d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d06:	431a      	orrs	r2, r3
 8004d08:	008b      	lsls	r3, r1, #2
 8004d0a:	3368      	adds	r3, #104	@ 0x68
 8004d0c:	443b      	add	r3, r7
 8004d0e:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	f107 0218 	add.w	r2, r7, #24
 8004d18:	4619      	mov	r1, r3
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff fcf0 	bl	8004700 <decode_field>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f083 0301 	eor.w	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <pb_decode_inner+0x252>
            return false;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e08c      	b.n	8004e4a <pb_decode_inner+0x366>
                    continue;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <pb_decode_inner+0x252>
            continue;
 8004d34:	bf00      	nop
    while (stream->bytes_left)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f47f af17 	bne.w	8004b6e <pb_decode_inner+0x8a>
 8004d40:	e002      	b.n	8004d48 <pb_decode_inner+0x264>
                break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <pb_decode_inner+0x264>
            break;
 8004d46:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004d48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004d4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d011      	beq.n	8004d78 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004d54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004d58:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d00b      	beq.n	8004d78 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <pb_decode_inner+0x28a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	e000      	b.n	8004d70 <pb_decode_inner+0x28c>
 8004d6e:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <pb_decode_inner+0x2f0>)
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	60d3      	str	r3, [r2, #12]
 8004d74:	2300      	movs	r3, #0
 8004d76:	e068      	b.n	8004e4a <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	8a5b      	ldrh	r3, [r3, #18]
 8004d7c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8004d80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05f      	beq.n	8004e48 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004d88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004d8c:	2b40      	cmp	r3, #64	@ 0x40
 8004d8e:	d902      	bls.n	8004d96 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004d90:	2340      	movs	r3, #64	@ 0x40
 8004d92:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004d9c:	e023      	b.n	8004de6 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8004d9e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	3368      	adds	r3, #104	@ 0x68
 8004da6:	443b      	add	r3, r7
 8004da8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004dac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d014      	beq.n	8004ddc <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <pb_decode_inner+0x2dc>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	e000      	b.n	8004dc2 <pb_decode_inner+0x2de>
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <pb_decode_inner+0x2f4>)
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	60d3      	str	r3, [r2, #12]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e03f      	b.n	8004e4a <pb_decode_inner+0x366>
 8004dca:	bf00      	nop
 8004dcc:	0800914c 	.word	0x0800914c
 8004dd0:	0800919c 	.word	0x0800919c
 8004dd4:	080091a8 	.word	0x080091a8
 8004dd8:	080091cc 	.word	0x080091cc
            for (i = 0; i < (req_field_count >> 5); i++)
 8004ddc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004de0:	3301      	adds	r3, #1
 8004de2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004de6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3d3      	bcc.n	8004d9e <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8004df6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d022      	beq.n	8004e48 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004e02:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	3368      	adds	r3, #104	@ 0x68
 8004e0e:	443b      	add	r3, r7
 8004e10:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004e14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f1c3 0320 	rsb	r3, r3, #32
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	4619      	mov	r1, r3
 8004e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2a:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d00b      	beq.n	8004e48 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <pb_decode_inner+0x35a>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	e000      	b.n	8004e40 <pb_decode_inner+0x35c>
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <pb_decode_inner+0x370>)
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	60d3      	str	r3, [r2, #12]
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004e48:	2301      	movs	r3, #1
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3768      	adds	r7, #104	@ 0x68
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	080091cc 	.word	0x080091cc

08004e58 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004e64:	2300      	movs	r3, #0
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff fe3a 	bl	8004ae4 <pb_decode_inner>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004e88:	f107 030c 	add.w	r3, r7, #12
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fe ff70 	bl	8003d74 <pb_decode_varint32>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f083 0301 	eor.w	r3, r3, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <pb_decode_bool+0x26>
        return false;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e008      	b.n	8004eb6 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	701a      	strb	r2, [r3, #0]
    return true;
 8004eb4:	2301      	movs	r3, #1
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8004ebe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fe ff5f 	bl	8003d94 <pb_decode_varint>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f083 0301 	eor.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <pb_decode_svarint+0x28>
        return false;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e029      	b.n	8004f3a <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8004ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eea:	f002 0401 	and.w	r4, r2, #1
 8004eee:	2500      	movs	r5, #0
 8004ef0:	ea54 0305 	orrs.w	r3, r4, r5
 8004ef4:	d013      	beq.n	8004f1e <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8004ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	0842      	lsrs	r2, r0, #1
 8004f04:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004f08:	084b      	lsrs	r3, r1, #1
 8004f0a:	ea6f 0802 	mvn.w	r8, r2
 8004f0e:	ea6f 0903 	mvn.w	r9, r3
 8004f12:	4642      	mov	r2, r8
 8004f14:	464b      	mov	r3, r9
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	e9c1 2300 	strd	r2, r3, [r1]
 8004f1c:	e00c      	b.n	8004f38 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8004f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	0842      	lsrs	r2, r0, #1
 8004f2c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004f30:	084b      	lsrs	r3, r1, #1
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004f38:	2301      	movs	r3, #1
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004f44 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8004f4e:	f107 030c 	add.w	r3, r7, #12
 8004f52:	2204      	movs	r2, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fe fd92 	bl	8003a80 <pb_read>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f083 0301 	eor.w	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <pb_decode_fixed32+0x28>
        return false;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e003      	b.n	8004f74 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8004f72:	2301      	movs	r3, #1
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fe fd76 	bl	8003a80 <pb_read>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f083 0301 	eor.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <pb_decode_fixed64+0x28>
        return false;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e005      	b.n	8004fb0 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8004fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff58 	bl	8004e7e <pb_decode_bool>
 8004fce:	4603      	mov	r3, r0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b094      	sub	sp, #80	@ 0x50
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fe2:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	7d9b      	ldrb	r3, [r3, #22]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d179      	bne.n	80050e4 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8004ff0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ff8:	f7fe fecc 	bl	8003d94 <pb_decode_varint>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <pb_dec_varint+0x34>
            return false;
 8005008:	2300      	movs	r3, #0
 800500a:	e107      	b.n	800521c <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	8a5b      	ldrh	r3, [r3, #18]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d10a      	bne.n	800502a <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800501c:	e9c1 2300 	strd	r2, r3, [r1]
 8005020:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005024:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8005028:	e046      	b.n	80050b8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	8a5b      	ldrh	r3, [r3, #18]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d10e      	bne.n	8005050 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8005032:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4602      	mov	r2, r0
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2200      	movs	r2, #0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	617a      	str	r2, [r7, #20]
 8005046:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800504a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800504e:	e033      	b.n	80050b8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	8a5b      	ldrh	r3, [r3, #18]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d10f      	bne.n	8005078 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8005058:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	b282      	uxth	r2, r0
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	2200      	movs	r2, #0
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	60fa      	str	r2, [r7, #12]
 800506e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005072:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8005076:	e01f      	b.n	80050b8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	8a5b      	ldrh	r3, [r3, #18]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10f      	bne.n	80050a0 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8005080:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	b2c2      	uxtb	r2, r0
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2200      	movs	r2, #0
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	e9d7 3400 	ldrd	r3, r4, [r7]
 800509a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800509e:	e00b      	b.n	80050b8 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <pb_dec_varint+0xd6>
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	e000      	b.n	80050b0 <pb_dec_varint+0xd8>
 80050ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005228 <pb_dec_varint+0x250>)
 80050b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b2:	60d3      	str	r3, [r2, #12]
 80050b4:	2300      	movs	r3, #0
 80050b6:	e0b1      	b.n	800521c <pb_dec_varint+0x244>

        if (clamped != value)
 80050b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80050c0:	4299      	cmp	r1, r3
 80050c2:	bf08      	it	eq
 80050c4:	4290      	cmpeq	r0, r2
 80050c6:	d00b      	beq.n	80050e0 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <pb_dec_varint+0xfe>
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	e000      	b.n	80050d8 <pb_dec_varint+0x100>
 80050d6:	4b55      	ldr	r3, [pc, #340]	@ (800522c <pb_dec_varint+0x254>)
 80050d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050da:	60d3      	str	r3, [r2, #12]
 80050dc:	2300      	movs	r3, #0
 80050de:	e09d      	b.n	800521c <pb_dec_varint+0x244>

        return true;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e09b      	b.n	800521c <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	7d9b      	ldrb	r3, [r3, #22]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d10d      	bne.n	800510c <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80050f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050f4:	4619      	mov	r1, r3
 80050f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050f8:	f7ff fee1 	bl	8004ebe <pb_decode_svarint>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f083 0301 	eor.w	r3, r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d022      	beq.n	800514e <pb_dec_varint+0x176>
                return false;
 8005108:	2300      	movs	r3, #0
 800510a:	e087      	b.n	800521c <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 800510c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005110:	4619      	mov	r1, r3
 8005112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005114:	f7fe fe3e 	bl	8003d94 <pb_decode_varint>
 8005118:	4603      	mov	r3, r0
 800511a:	f083 0301 	eor.w	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <pb_dec_varint+0x150>
                return false;
 8005124:	2300      	movs	r3, #0
 8005126:	e079      	b.n	800521c <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	8a5b      	ldrh	r3, [r3, #18]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d104      	bne.n	800513a <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8005130:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005134:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005138:	e009      	b.n	800514e <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800513a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800513e:	4613      	mov	r3, r2
 8005140:	17da      	asrs	r2, r3, #31
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	61fa      	str	r2, [r7, #28]
 8005146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	8a5b      	ldrh	r3, [r3, #18]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d10a      	bne.n	800516c <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	69d9      	ldr	r1, [r3, #28]
 800515a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800515e:	e9c1 2300 	strd	r2, r3, [r1]
 8005162:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005166:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800516a:	e042      	b.n	80051f2 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	8a5b      	ldrh	r3, [r3, #18]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d10c      	bne.n	800518e <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8005174:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	4602      	mov	r2, r0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	17da      	asrs	r2, r3, #31
 8005184:	469a      	mov	sl, r3
 8005186:	4693      	mov	fp, r2
 8005188:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 800518c:	e031      	b.n	80051f2 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	8a5b      	ldrh	r3, [r3, #18]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d10e      	bne.n	80051b4 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8005196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	b202      	sxth	r2, r0
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051a6:	b21b      	sxth	r3, r3
 80051a8:	17da      	asrs	r2, r3, #31
 80051aa:	4698      	mov	r8, r3
 80051ac:	4691      	mov	r9, r2
 80051ae:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 80051b2:	e01e      	b.n	80051f2 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	8a5b      	ldrh	r3, [r3, #18]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10e      	bne.n	80051da <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80051bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	b242      	sxtb	r2, r0
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	f993 3000 	ldrsb.w	r3, [r3]
 80051cc:	b25b      	sxtb	r3, r3
 80051ce:	17da      	asrs	r2, r3, #31
 80051d0:	461c      	mov	r4, r3
 80051d2:	4615      	mov	r5, r2
 80051d4:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80051d8:	e00b      	b.n	80051f2 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <pb_dec_varint+0x210>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	e000      	b.n	80051ea <pb_dec_varint+0x212>
 80051e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <pb_dec_varint+0x250>)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ec:	60d3      	str	r3, [r2, #12]
 80051ee:	2300      	movs	r3, #0
 80051f0:	e014      	b.n	800521c <pb_dec_varint+0x244>

        if (clamped != svalue)
 80051f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80051fa:	4299      	cmp	r1, r3
 80051fc:	bf08      	it	eq
 80051fe:	4290      	cmpeq	r0, r2
 8005200:	d00b      	beq.n	800521a <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <pb_dec_varint+0x238>
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	e000      	b.n	8005212 <pb_dec_varint+0x23a>
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <pb_dec_varint+0x254>)
 8005212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005214:	60d3      	str	r3, [r2, #12]
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <pb_dec_varint+0x244>

        return true;
 800521a:	2301      	movs	r3, #1
    }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3750      	adds	r7, #80	@ 0x50
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	080091e4 	.word	0x080091e4
 800522c:	080091f8 	.word	0x080091f8

08005230 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fe fd97 	bl	8003d74 <pb_decode_varint32>
 8005246:	4603      	mov	r3, r0
 8005248:	f083 0301 	eor.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <pb_dec_bytes+0x26>
        return false;
 8005252:	2300      	movs	r3, #0
 8005254:	e055      	b.n	8005302 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525c:	d30b      	bcc.n	8005276 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <pb_dec_bytes+0x3c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	e000      	b.n	800526e <pb_dec_bytes+0x3e>
 800526c:	4b27      	ldr	r3, [pc, #156]	@ (800530c <pb_dec_bytes+0xdc>)
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	60d3      	str	r3, [r2, #12]
 8005272:	2300      	movs	r3, #0
 8005274:	e045      	b.n	8005302 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3302      	adds	r3, #2
 800527a:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	d20b      	bcs.n	800529c <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <pb_dec_bytes+0x62>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	e000      	b.n	8005294 <pb_dec_bytes+0x64>
 8005292:	4b1f      	ldr	r3, [pc, #124]	@ (8005310 <pb_dec_bytes+0xe0>)
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	60d3      	str	r3, [r2, #12]
 8005298:	2300      	movs	r3, #0
 800529a:	e032      	b.n	8005302 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	7d9b      	ldrb	r3, [r3, #22]
 80052a0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052a4:	2b80      	cmp	r3, #128	@ 0x80
 80052a6:	d10b      	bne.n	80052c0 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <pb_dec_bytes+0x86>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	e000      	b.n	80052b8 <pb_dec_bytes+0x88>
 80052b6:	4b17      	ldr	r3, [pc, #92]	@ (8005314 <pb_dec_bytes+0xe4>)
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	60d3      	str	r3, [r2, #12]
 80052bc:	2300      	movs	r3, #0
 80052be:	e020      	b.n	8005302 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	8a5b      	ldrh	r3, [r3, #18]
 80052c4:	461a      	mov	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d90b      	bls.n	80052e4 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <pb_dec_bytes+0xaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	e000      	b.n	80052dc <pb_dec_bytes+0xac>
 80052da:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <pb_dec_bytes+0xdc>)
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	2300      	movs	r3, #0
 80052e2:	e00e      	b.n	8005302 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3302      	adds	r3, #2
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe fbc0 	bl	8003a80 <pb_read>
 8005300:	4603      	mov	r3, r0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	0800920c 	.word	0x0800920c
 8005310:	0800921c 	.word	0x0800921c
 8005314:	08009164 	.word	0x08009164

08005318 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fe fd20 	bl	8003d74 <pb_decode_varint32>
 8005334:	4603      	mov	r3, r0
 8005336:	f083 0301 	eor.w	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <pb_dec_string+0x2c>
        return false;
 8005340:	2300      	movs	r3, #0
 8005342:	e05a      	b.n	80053fa <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534a:	d10b      	bne.n	8005364 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <pb_dec_string+0x42>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	e000      	b.n	800535c <pb_dec_string+0x44>
 800535a:	4b2a      	ldr	r3, [pc, #168]	@ (8005404 <pb_dec_string+0xec>)
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	60d3      	str	r3, [r2, #12]
 8005360:	2300      	movs	r3, #0
 8005362:	e04a      	b.n	80053fa <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d20b      	bcs.n	800538a <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <pb_dec_string+0x68>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	e000      	b.n	8005382 <pb_dec_string+0x6a>
 8005380:	4b20      	ldr	r3, [pc, #128]	@ (8005404 <pb_dec_string+0xec>)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	60d3      	str	r3, [r2, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	e037      	b.n	80053fa <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	7d9b      	ldrb	r3, [r3, #22]
 800538e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005392:	2b80      	cmp	r3, #128	@ 0x80
 8005394:	d10b      	bne.n	80053ae <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <pb_dec_string+0x8c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	e000      	b.n	80053a6 <pb_dec_string+0x8e>
 80053a4:	4b18      	ldr	r3, [pc, #96]	@ (8005408 <pb_dec_string+0xf0>)
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	60d3      	str	r3, [r2, #12]
 80053aa:	2300      	movs	r3, #0
 80053ac:	e025      	b.n	80053fa <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	8a5b      	ldrh	r3, [r3, #18]
 80053b2:	461a      	mov	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d90b      	bls.n	80053d2 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <pb_dec_string+0xb0>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	e000      	b.n	80053ca <pb_dec_string+0xb2>
 80053c8:	4b10      	ldr	r3, [pc, #64]	@ (800540c <pb_dec_string+0xf4>)
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	60d3      	str	r3, [r2, #12]
 80053ce:	2300      	movs	r3, #0
 80053d0:	e013      	b.n	80053fa <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	461a      	mov	r2, r3
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fb4c 	bl	8003a80 <pb_read>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f083 0301 	eor.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <pb_dec_string+0xe0>
        return false;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 80053f8:	2301      	movs	r3, #1
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	0800921c 	.word	0x0800921c
 8005408:	08009164 	.word	0x08009164
 800540c:	0800922c 	.word	0x0800922c

08005410 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
    bool status = true;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fe fe2d 	bl	800408c <pb_make_string_substream>
 8005432:	4603      	mov	r3, r0
 8005434:	f083 0301 	eor.w	r3, r3, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <pb_dec_submessage+0x32>
        return false;
 800543e:	2300      	movs	r3, #0
 8005440:	e069      	b.n	8005516 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <pb_dec_submessage+0x48>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	e000      	b.n	800545a <pb_dec_submessage+0x4a>
 8005458:	4b31      	ldr	r3, [pc, #196]	@ (8005520 <pb_dec_submessage+0x110>)
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	60d3      	str	r3, [r2, #12]
 800545e:	2300      	movs	r3, #0
 8005460:	e059      	b.n	8005516 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	7d9b      	ldrb	r3, [r3, #22]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	2b09      	cmp	r3, #9
 800546c:	d11c      	bne.n	80054a8 <pb_dec_submessage+0x98>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	3b08      	subs	r3, #8
 800547c:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	3204      	adds	r2, #4
 800548e:	f107 000c 	add.w	r0, r7, #12
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	4798      	blx	r3
 8005496:	4603      	mov	r3, r0
 8005498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80054a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d022      	beq.n	80054f6 <pb_dec_submessage+0xe6>
 80054b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054b4:	f083 0301 	eor.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01b      	beq.n	80054f6 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	7d9b      	ldrb	r3, [r3, #22]
 80054c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d107      	bne.n	80054de <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	7d9b      	ldrb	r3, [r3, #22]
 80054d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d001      	beq.n	80054de <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80054da:	2301      	movs	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	f107 000c 	add.w	r0, r7, #12
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f7ff fafa 	bl	8004ae4 <pb_decode_inner>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fe fdff 	bl	8004100 <pb_close_string_substream>
 8005502:	4603      	mov	r3, r0
 8005504:	f083 0301 	eor.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <pb_dec_submessage+0x102>
        return false;
 800550e:	2300      	movs	r3, #0
 8005510:	e001      	b.n	8005516 <pb_dec_submessage+0x106>

    return status;
 8005512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005516:	4618      	mov	r0, r3
 8005518:	3728      	adds	r7, #40	@ 0x28
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	0800923c 	.word	0x0800923c

08005524 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800552e:	f107 030c 	add.w	r3, r7, #12
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fe fc1d 	bl	8003d74 <pb_decode_varint32>
 800553a:	4603      	mov	r3, r0
 800553c:	f083 0301 	eor.w	r3, r3, #1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <pb_dec_fixed_length_bytes+0x26>
        return false;
 8005546:	2300      	movs	r3, #0
 8005548:	e037      	b.n	80055ba <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005550:	d30b      	bcc.n	800556a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <pb_dec_fixed_length_bytes+0x3c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	e000      	b.n	8005562 <pb_dec_fixed_length_bytes+0x3e>
 8005560:	4b18      	ldr	r3, [pc, #96]	@ (80055c4 <pb_dec_fixed_length_bytes+0xa0>)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	60d3      	str	r3, [r2, #12]
 8005566:	2300      	movs	r3, #0
 8005568:	e027      	b.n	80055ba <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	69d8      	ldr	r0, [r3, #28]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	8a5b      	ldrh	r3, [r3, #18]
 8005578:	461a      	mov	r2, r3
 800557a:	2100      	movs	r1, #0
 800557c:	f002 feea 	bl	8008354 <memset>
        return true;
 8005580:	2301      	movs	r3, #1
 8005582:	e01a      	b.n	80055ba <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	8a5b      	ldrh	r3, [r3, #18]
 8005588:	461a      	mov	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d00b      	beq.n	80055a8 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <pb_dec_fixed_length_bytes+0x7a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	e000      	b.n	80055a0 <pb_dec_fixed_length_bytes+0x7c>
 800559e:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <pb_dec_fixed_length_bytes+0xa4>)
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	60d3      	str	r3, [r2, #12]
 80055a4:	2300      	movs	r3, #0
 80055a6:	e008      	b.n	80055ba <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	8a5b      	ldrh	r3, [r3, #18]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fe fa64 	bl	8003a80 <pb_read>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	0800920c 	.word	0x0800920c
 80055c8:	08009258 	.word	0x08009258

080055cc <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	441a      	add	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f002 ff3c 	bl	800846a <memcpy>
    
    return true;
 80055f2:	2301      	movs	r3, #1
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 80055fc:	b4b0      	push	{r4, r5, r7}
 80055fe:	b08b      	sub	sp, #44	@ 0x2c
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <pb_ostream_from_buffer+0x3c>)
 800560a:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005618:	2300      	movs	r3, #0
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	461d      	mov	r5, r3
 8005620:	f107 0414 	add.w	r4, r7, #20
 8005624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	602b      	str	r3, [r5, #0]
}
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	372c      	adds	r7, #44	@ 0x2c
 8005630:	46bd      	mov	sp, r7
 8005632:	bcb0      	pop	{r4, r5, r7}
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	080055cd 	.word	0x080055cd

0800563c <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d037      	beq.n	80056be <pb_write+0x82>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d033      	beq.n	80056be <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	441a      	add	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	429a      	cmp	r2, r3
 8005664:	d307      	bcc.n	8005676 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d90b      	bls.n	800568e <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <pb_write+0x48>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	e000      	b.n	8005686 <pb_write+0x4a>
 8005684:	4b13      	ldr	r3, [pc, #76]	@ (80056d4 <pb_write+0x98>)
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	6113      	str	r3, [r2, #16]
 800568a:	2300      	movs	r3, #0
 800568c:	e01e      	b.n	80056cc <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	4798      	blx	r3
 800569a:	4603      	mov	r3, r0
 800569c:	f083 0301 	eor.w	r3, r3, #1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <pb_write+0x78>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	e000      	b.n	80056b6 <pb_write+0x7a>
 80056b4:	4b08      	ldr	r3, [pc, #32]	@ (80056d8 <pb_write+0x9c>)
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6113      	str	r3, [r2, #16]
 80056ba:	2300      	movs	r3, #0
 80056bc:	e006      	b.n	80056cc <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60da      	str	r2, [r3, #12]
    return true;
 80056ca:	2301      	movs	r3, #1
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	0800927c 	.word	0x0800927c
 80056d8:	08009288 	.word	0x08009288

080056dc <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e00a      	b.n	8005704 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <safe_read_bool+0x22>
            return true;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e006      	b.n	800570c <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f1      	beq.n	80056ee <safe_read_bool+0x12>
    }
    return false;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b08c      	sub	sp, #48	@ 0x30
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 800572a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <encode_array+0x1c>
        return true;
 8005730:	2301      	movs	r3, #1
 8005732:	e13d      	b.n	80059b0 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	7d9b      	ldrb	r3, [r3, #22]
 8005738:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800573c:	2b80      	cmp	r3, #128	@ 0x80
 800573e:	d010      	beq.n	8005762 <encode_array+0x4a>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	8a9b      	ldrh	r3, [r3, #20]
 8005744:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005746:	429a      	cmp	r2, r3
 8005748:	d90b      	bls.n	8005762 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <encode_array+0x40>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	e000      	b.n	800575a <encode_array+0x42>
 8005758:	4b97      	ldr	r3, [pc, #604]	@ (80059b8 <encode_array+0x2a0>)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6113      	str	r3, [r2, #16]
 800575e:	2300      	movs	r3, #0
 8005760:	e126      	b.n	80059b0 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	7d9b      	ldrb	r3, [r3, #22]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	2b05      	cmp	r3, #5
 800576c:	f200 80b3 	bhi.w	80058d6 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	8a1b      	ldrh	r3, [r3, #16]
 8005774:	461a      	mov	r2, r3
 8005776:	2102      	movs	r1, #2
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fcdd 	bl	8006138 <pb_encode_tag>
 800577e:	4603      	mov	r3, r0
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <encode_array+0x76>
            return false;
 800578a:	2300      	movs	r3, #0
 800578c:	e110      	b.n	80059b0 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	7d9b      	ldrb	r3, [r3, #22]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	2b04      	cmp	r3, #4
 8005798:	d103      	bne.n	80057a2 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 800579a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a0:	e047      	b.n	8005832 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	7d9b      	ldrb	r3, [r3, #22]
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	2b05      	cmp	r3, #5
 80057ac:	d103      	bne.n	80057b6 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 80057ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b4:	e03d      	b.n	8005832 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80057b6:	f107 0308 	add.w	r3, r7, #8
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80057d0:	e026      	b.n	8005820 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fdef 	bl	80063bc <pb_enc_varint>
 80057de:	4603      	mov	r3, r0
 80057e0:	f083 0301 	eor.w	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d010      	beq.n	800580c <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <encode_array+0xe0>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	e005      	b.n	8005804 <encode_array+0xec>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <encode_array+0xea>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	e000      	b.n	8005804 <encode_array+0xec>
 8005802:	4b6e      	ldr	r3, [pc, #440]	@ (80059bc <encode_array+0x2a4>)
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6113      	str	r3, [r2, #16]
 8005808:	2300      	movs	r3, #0
 800580a:	e0d1      	b.n	80059b0 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	8a52      	ldrh	r2, [r2, #18]
 8005814:	441a      	add	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 800581a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800581c:	3301      	adds	r3, #1
 800581e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005820:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005824:	429a      	cmp	r2, r3
 8005826:	d3d4      	bcc.n	80057d2 <encode_array+0xba>
            }
            field->pData = pData_orig;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	2200      	movs	r2, #0
 8005836:	461c      	mov	r4, r3
 8005838:	4615      	mov	r5, r2
 800583a:	4622      	mov	r2, r4
 800583c:	462b      	mov	r3, r5
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fbf7 	bl	8006032 <pb_encode_varint>
 8005844:	4603      	mov	r3, r0
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <encode_array+0x13c>
            return false;
 8005850:	2300      	movs	r3, #0
 8005852:	e0ad      	b.n	80059b0 <encode_array+0x298>
        
        if (stream->callback == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800585c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800585e:	2100      	movs	r1, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff feeb 	bl	800563c <pb_write>
 8005866:	4603      	mov	r3, r0
 8005868:	e0a2      	b.n	80059b0 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800586a:	2300      	movs	r3, #0
 800586c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800586e:	e02d      	b.n	80058cc <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	7d9b      	ldrb	r3, [r3, #22]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	2b04      	cmp	r3, #4
 800587a:	d005      	beq.n	8005888 <encode_array+0x170>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	7d9b      	ldrb	r3, [r3, #22]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	2b05      	cmp	r3, #5
 8005886:	d10b      	bne.n	80058a0 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fe58 	bl	8006540 <pb_enc_fixed>
 8005890:	4603      	mov	r3, r0
 8005892:	f083 0301 	eor.w	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <encode_array+0x1a0>
                    return false;
 800589c:	2300      	movs	r3, #0
 800589e:	e087      	b.n	80059b0 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fd8a 	bl	80063bc <pb_enc_varint>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f083 0301 	eor.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <encode_array+0x1a0>
                    return false;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e07b      	b.n	80059b0 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	8a52      	ldrh	r2, [r2, #18]
 80058c0:	441a      	add	r2, r3
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80058c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058c8:	3301      	adds	r3, #1
 80058ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3cd      	bcc.n	8005870 <encode_array+0x158>
 80058d4:	e06b      	b.n	80059ae <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80058d6:	2300      	movs	r3, #0
 80058d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058da:	e064      	b.n	80059a6 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	7d9b      	ldrb	r3, [r3, #22]
 80058e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058e4:	2b80      	cmp	r3, #128	@ 0x80
 80058e6:	d147      	bne.n	8005978 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	7d9b      	ldrb	r3, [r3, #22]
 80058ec:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80058f0:	2b07      	cmp	r3, #7
 80058f2:	d005      	beq.n	8005900 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	7d9b      	ldrb	r3, [r3, #22]
 80058f8:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d13b      	bne.n	8005978 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11c      	bne.n	8005952 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fc36 	bl	800618c <pb_encode_tag_for_field>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb7f 	bl	8006032 <pb_encode_varint>
 8005934:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <encode_array+0x226>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <encode_array+0x228>
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005950:	e006      	b.n	8005960 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f951 	bl	8005bfc <encode_basic_field>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	6a3a      	ldr	r2, [r7, #32]
 8005964:	61da      	str	r2, [r3, #28]

                if (!status)
 8005966:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00d      	beq.n	8005990 <encode_array+0x278>
                    return false;
 8005974:	2300      	movs	r3, #0
 8005976:	e01b      	b.n	80059b0 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f93e 	bl	8005bfc <encode_basic_field>
 8005980:	4603      	mov	r3, r0
 8005982:	f083 0301 	eor.w	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <encode_array+0x27a>
                    return false;
 800598c:	2300      	movs	r3, #0
 800598e:	e00f      	b.n	80059b0 <encode_array+0x298>
            {
 8005990:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	8a52      	ldrh	r2, [r2, #18]
 800599a:	441a      	add	r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80059a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80059a2:	3301      	adds	r3, #1
 80059a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80059a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80059a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d396      	bcc.n	80058dc <encode_array+0x1c4>
        }
    }
    
    return true;
 80059ae:	2301      	movs	r3, #1
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3730      	adds	r7, #48	@ 0x30
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdb0      	pop	{r4, r5, r7, pc}
 80059b8:	08009294 	.word	0x08009294
 80059bc:	080092ac 	.word	0x080092ac

080059c0 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b092      	sub	sp, #72	@ 0x48
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	7d9b      	ldrb	r3, [r3, #22]
 80059cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80059d0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80059d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f040 80c9 	bne.w	8005b70 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80059de:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80059e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e100      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80059ee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80059f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d108      	bne.n	8005a0c <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e0f1      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005a0c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005a10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a14:	2b30      	cmp	r3, #48	@ 0x30
 8005a16:	d108      	bne.n	8005a2a <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	e0e2      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8005a2a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005a2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d115      	bne.n	8005a62 <pb_check_proto3_default_value+0xa2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fe4a 	bl	80056dc <safe_read_bool>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf14      	ite	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	2300      	moveq	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f083 0301 	eor.w	r3, r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e0c6      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e0bf      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005a70:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	d81c      	bhi.n	8005ab6 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005a88:	e00d      	b.n	8005aa6 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8005a8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a90:	4413      	add	r3, r2
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e0a9      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8005a9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8a5b      	ldrh	r3, [r3, #18]
 8005aaa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d3eb      	bcc.n	8005a8a <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e09c      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005ab6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	2b06      	cmp	r3, #6
 8005ac0:	d10a      	bne.n	8005ad8 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e08b      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005ad8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d108      	bne.n	8005af6 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e07c      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8005af6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	2b0b      	cmp	r3, #11
 8005b00:	d107      	bne.n	8005b12 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8a5b      	ldrh	r3, [r3, #18]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	e06e      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8005b12:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d005      	beq.n	8005b2a <pb_check_proto3_default_value+0x16a>
 8005b1e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	d161      	bne.n	8005bee <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 ffbf 	bl	8007aba <pb_field_iter_begin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d014      	beq.n	8005b6c <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff ff3a 	bl	80059c0 <pb_check_proto3_default_value>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f083 0301 	eor.w	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e049      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005b5c:	f107 030c 	add.w	r3, r7, #12
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fff3 	bl	8007b4c <pb_field_iter_next>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e03f      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005b70:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b74:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b78:	2b80      	cmp	r3, #128	@ 0x80
 8005b7a:	d107      	bne.n	8005b8c <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e031      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8005b8c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b94:	2b40      	cmp	r3, #64	@ 0x40
 8005b96:	d12a      	bne.n	8005bee <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005b98:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	2b0a      	cmp	r3, #10
 8005ba2:	d10a      	bne.n	8005bba <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8005bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e01a      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8005bf8 <pb_check_proto3_default_value+0x238>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10a      	bne.n	8005bdc <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8005bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e009      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e000      	b.n	8005bf0 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3748      	adds	r7, #72	@ 0x48
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	08007cef 	.word	0x08007cef

08005bfc <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e061      	b.n	8005cd6 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fab9 	bl	800618c <pb_encode_tag_for_field>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f083 0301 	eor.w	r3, r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <encode_basic_field+0x2e>
        return false;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e055      	b.n	8005cd6 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	7d9b      	ldrb	r3, [r3, #22]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d844      	bhi.n	8005cc0 <encode_basic_field+0xc4>
 8005c36:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <encode_basic_field+0x40>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c6d 	.word	0x08005c6d
 8005c40:	08005c79 	.word	0x08005c79
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005c79 	.word	0x08005c79
 8005c4c:	08005c85 	.word	0x08005c85
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005c91 	.word	0x08005c91
 8005c58:	08005c9d 	.word	0x08005c9d
 8005c5c:	08005ca9 	.word	0x08005ca9
 8005c60:	08005ca9 	.word	0x08005ca9
 8005c64:	08005cc1 	.word	0x08005cc1
 8005c68:	08005cb5 	.word	0x08005cb5
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fb8a 	bl	8006388 <pb_enc_bool>
 8005c74:	4603      	mov	r3, r0
 8005c76:	e02e      	b.n	8005cd6 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fb9e 	bl	80063bc <pb_enc_varint>
 8005c80:	4603      	mov	r3, r0
 8005c82:	e028      	b.n	8005cd6 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fc5a 	bl	8006540 <pb_enc_fixed>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	e022      	b.n	8005cd6 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fc82 	bl	800659c <pb_enc_bytes>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	e01c      	b.n	8005cd6 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fcba 	bl	8006618 <pb_enc_string>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	e016      	b.n	8005cd6 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fd12 	bl	80066d4 <pb_enc_submessage>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	e010      	b.n	8005cd6 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fd52 	bl	8006760 <pb_enc_fixed_length_bytes>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	e00a      	b.n	8005cd6 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <encode_basic_field+0xd2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	e000      	b.n	8005cd0 <encode_basic_field+0xd4>
 8005cce:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <encode_basic_field+0xe4>)
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6113      	str	r3, [r2, #16]
 8005cd4:	2300      	movs	r3, #0
    }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	080092b4 	.word	0x080092b4

08005ce4 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d018      	beq.n	8005d2a <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	2000      	movs	r0, #0
 8005d04:	4798      	blx	r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	f083 0301 	eor.w	r3, r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <encode_callback_field+0x3c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	e000      	b.n	8005d22 <encode_callback_field+0x3e>
 8005d20:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <encode_callback_field+0x50>)
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6113      	str	r3, [r2, #16]
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <encode_callback_field+0x48>
    }
    return true;
 8005d2a:	2301      	movs	r3, #1
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	080092c8 	.word	0x080092c8

08005d38 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	7d9b      	ldrb	r3, [r3, #22]
 8005d46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d4a:	2b30      	cmp	r3, #48	@ 0x30
 8005d4c:	d108      	bne.n	8005d60 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	881a      	ldrh	r2, [r3, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	8a1b      	ldrh	r3, [r3, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d026      	beq.n	8005daa <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e059      	b.n	8005e14 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	7d9b      	ldrb	r3, [r3, #22]
 8005d64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d11e      	bne.n	8005daa <encode_field+0x72>
    {
        if (field->pSize)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fcaf 	bl	80056dc <safe_read_bool>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f083 0301 	eor.w	r3, r3, #1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00f      	beq.n	8005daa <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e042      	b.n	8005e14 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	7d9b      	ldrb	r3, [r3, #22]
 8005d92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8005d9a:	6838      	ldr	r0, [r7, #0]
 8005d9c:	f7ff fe10 	bl	80059c0 <pb_check_proto3_default_value>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <encode_field+0x72>
                return true;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e034      	b.n	8005e14 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d113      	bne.n	8005dda <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	7d9b      	ldrb	r3, [r3, #22]
 8005db6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <encode_field+0x94>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	e000      	b.n	8005dce <encode_field+0x96>
 8005dcc:	4b13      	ldr	r3, [pc, #76]	@ (8005e1c <encode_field+0xe4>)
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6113      	str	r3, [r2, #16]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e01e      	b.n	8005e14 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e01c      	b.n	8005e14 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	7d9b      	ldrb	r3, [r3, #22]
 8005dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d105      	bne.n	8005df2 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff7b 	bl	8005ce4 <encode_callback_field>
 8005dee:	4603      	mov	r3, r0
 8005df0:	e010      	b.n	8005e14 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	7d9b      	ldrb	r3, [r3, #22]
 8005df6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d105      	bne.n	8005e0a <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fc89 	bl	8005718 <encode_array>
 8005e06:	4603      	mov	r3, r0
 8005e08:	e004      	b.n	8005e14 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fef5 	bl	8005bfc <encode_basic_field>
 8005e12:	4603      	mov	r3, r0
    }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	080092d8 	.word	0x080092d8

08005e20 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	@ 0x30
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8005e2a:	f107 0308 	add.w	r3, r7, #8
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 ff4a 	bl	8007cca <pb_field_iter_begin_extension_const>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f083 0301 	eor.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <default_extension_encoder+0x30>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	e000      	b.n	8005e52 <default_extension_encoder+0x32>
 8005e50:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <default_extension_encoder+0x50>)
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6113      	str	r3, [r2, #16]
 8005e56:	2300      	movs	r3, #0
 8005e58:	e006      	b.n	8005e68 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ff69 	bl	8005d38 <encode_field>
 8005e66:	4603      	mov	r3, r0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3730      	adds	r7, #48	@ 0x30
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	080092f0 	.word	0x080092f0

08005e74 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]

    while (extension)
 8005e86:	e01e      	b.n	8005ec6 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	72fb      	strb	r3, [r7, #11]
 8005ea2:	e005      	b.n	8005eb0 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8005ea4:	68f9      	ldr	r1, [r7, #12]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ffba 	bl	8005e20 <default_extension_encoder>
 8005eac:	4603      	mov	r3, r0
 8005eae:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	f083 0301 	eor.w	r3, r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <encode_extension_field+0x4c>
            return false;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e006      	b.n	8005ece <encode_extension_field+0x5a>
        
        extension = extension->next;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	60fb      	str	r3, [r7, #12]
    while (extension)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1dd      	bne.n	8005e88 <encode_extension_field+0x14>
    }
    
    return true;
 8005ecc:	2301      	movs	r3, #1
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08e      	sub	sp, #56	@ 0x38
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8005ee2:	f107 0310 	add.w	r3, r7, #16
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fed9 	bl	8007ca2 <pb_field_iter_begin_const>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f083 0301 	eor.w	r3, r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <pb_encode+0x2a>
        return true; /* Empty message type */
 8005efc:	2301      	movs	r3, #1
 8005efe:	e02a      	b.n	8005f56 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8005f00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	2b0a      	cmp	r3, #10
 8005f0a:	d10d      	bne.n	8005f28 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	4619      	mov	r1, r3
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff ffae 	bl	8005e74 <encode_extension_field>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f083 0301 	eor.w	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00f      	beq.n	8005f44 <pb_encode+0x6e>
                return false;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e016      	b.n	8005f56 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005f28:	f107 0310 	add.w	r3, r7, #16
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff ff02 	bl	8005d38 <encode_field>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f083 0301 	eor.w	r3, r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <pb_encode+0x6e>
                return false;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e008      	b.n	8005f56 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fdff 	bl	8007b4c <pb_field_iter_next>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1d5      	bne.n	8005f00 <pb_encode+0x2a>
    
    return true;
 8005f54:	2301      	movs	r3, #1
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3738      	adds	r7, #56	@ 0x38
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b088      	sub	sp, #32
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f76:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8005f7e:	e013      	b.n	8005fa8 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8005f80:	7efb      	ldrb	r3, [r7, #27]
 8005f82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f86:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	61fa      	str	r2, [r7, #28]
 8005f8e:	3320      	adds	r3, #32
 8005f90:	443b      	add	r3, r7
 8005f92:	7efa      	ldrb	r2, [r7, #27]
 8005f94:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa0:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	09db      	lsrs	r3, r3, #7
 8005fa6:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d805      	bhi.n	8005fba <pb_encode_varint_32+0x5c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <pb_encode_varint_32+0x22>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e2      	bne.n	8005f80 <pb_encode_varint_32+0x22>
    }

    if (high)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d024      	beq.n	800600a <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	7efb      	ldrb	r3, [r7, #27]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	08db      	lsrs	r3, r3, #3
 8005fd8:	607b      	str	r3, [r7, #4]

        while (high)
 8005fda:	e013      	b.n	8006004 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8005fdc:	7efb      	ldrb	r3, [r7, #27]
 8005fde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fe2:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	3320      	adds	r3, #32
 8005fec:	443b      	add	r3, r7
 8005fee:	7efa      	ldrb	r2, [r7, #27]
 8005ff0:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffc:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	607b      	str	r3, [r7, #4]
        while (high)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e8      	bne.n	8005fdc <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	61fa      	str	r2, [r7, #28]
 8006010:	3320      	adds	r3, #32
 8006012:	443b      	add	r3, r7
 8006014:	7efa      	ldrb	r2, [r7, #27]
 8006016:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800601a:	f107 0310 	add.w	r3, r7, #16
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	4619      	mov	r1, r3
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fb0a 	bl	800563c <pb_write>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8006032:	b590      	push	{r4, r7, lr}
 8006034:	b087      	sub	sp, #28
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800603e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006042:	2a80      	cmp	r2, #128	@ 0x80
 8006044:	f173 0300 	sbcs.w	r3, r3, #0
 8006048:	d20a      	bcs.n	8006060 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800604a:	783b      	ldrb	r3, [r7, #0]
 800604c:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800604e:	f107 0317 	add.w	r3, r7, #23
 8006052:	2201      	movs	r2, #1
 8006054:	4619      	mov	r1, r3
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff faf0 	bl	800563c <pb_write>
 800605c:	4603      	mov	r3, r0
 800605e:	e00f      	b.n	8006080 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8006060:	683c      	ldr	r4, [r7, #0]
 8006062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	000a      	movs	r2, r1
 8006070:	2300      	movs	r3, #0
 8006072:	4613      	mov	r3, r2
 8006074:	461a      	mov	r2, r3
 8006076:	4621      	mov	r1, r4
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff70 	bl	8005f5e <pb_encode_varint_32>
 800607e:	4603      	mov	r3, r0
#endif
    }
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd90      	pop	{r4, r7, pc}

08006088 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8006088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800608c:	b08a      	sub	sp, #40	@ 0x28
 800608e:	af00      	add	r7, sp, #0
 8006090:	6178      	str	r0, [r7, #20]
 8006092:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8006096:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800609a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800609e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 80060a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da15      	bge.n	80060d6 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80060aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b2:	ea00 0402 	and.w	r4, r0, r2
 80060b6:	ea01 0503 	and.w	r5, r1, r3
 80060ba:	1923      	adds	r3, r4, r4
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	eb45 0305 	adc.w	r3, r5, r5
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c8:	ea6f 0a02 	mvn.w	sl, r2
 80060cc:	ea6f 0b03 	mvn.w	fp, r3
 80060d0:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80060d4:	e007      	b.n	80060e6 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80060d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060da:	eb12 0802 	adds.w	r8, r2, r2
 80060de:	eb43 0903 	adc.w	r9, r3, r3
 80060e2:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80060e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff ffa1 	bl	8006032 <pb_encode_varint>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3728      	adds	r7, #40	@ 0x28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060fc <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8006106:	2204      	movs	r2, #4
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fa96 	bl	800563c <pb_write>
 8006110:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8006124:	2208      	movs	r2, #8
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fa87 	bl	800563c <pb_write>
 800612e:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b088      	sub	sp, #32
 800613e:	af00      	add	r7, sp, #0
 8006140:	6178      	str	r0, [r7, #20]
 8006142:	460b      	mov	r3, r1
 8006144:	60fa      	str	r2, [r7, #12]
 8006146:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	469a      	mov	sl, r3
 800614e:	4693      	mov	fp, r2
 8006150:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8006154:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	2200      	movs	r2, #0
 800615c:	4698      	mov	r8, r3
 800615e:	4691      	mov	r9, r2
 8006160:	ea44 0308 	orr.w	r3, r4, r8
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	ea45 0309 	orr.w	r3, r5, r9
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006170:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8006174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006178:	6978      	ldr	r0, [r7, #20]
 800617a:	f7ff ff5a 	bl	8006032 <pb_encode_varint>
 800617e:	4603      	mov	r3, r0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800618c <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	7d9b      	ldrb	r3, [r3, #22]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	2b0b      	cmp	r3, #11
 80061a0:	d826      	bhi.n	80061f0 <pb_encode_tag_for_field+0x64>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <pb_encode_tag_for_field+0x1c>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061d9 	.word	0x080061d9
 80061ac:	080061d9 	.word	0x080061d9
 80061b0:	080061d9 	.word	0x080061d9
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061df 	.word	0x080061df
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061eb 	.word	0x080061eb
 80061c4:	080061eb 	.word	0x080061eb
 80061c8:	080061eb 	.word	0x080061eb
 80061cc:	080061eb 	.word	0x080061eb
 80061d0:	080061f1 	.word	0x080061f1
 80061d4:	080061eb 	.word	0x080061eb
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]
            break;
 80061dc:	e014      	b.n	8006208 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80061de:	2305      	movs	r3, #5
 80061e0:	73fb      	strb	r3, [r7, #15]
            break;
 80061e2:	e011      	b.n	8006208 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
            break;
 80061e8:	e00e      	b.n	8006208 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80061ea:	2302      	movs	r3, #2
 80061ec:	73fb      	strb	r3, [r7, #15]
            break;
 80061ee:	e00b      	b.n	8006208 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <pb_encode_tag_for_field+0x72>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	e000      	b.n	8006200 <pb_encode_tag_for_field+0x74>
 80061fe:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <pb_encode_tag_for_field+0x98>)
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6113      	str	r3, [r2, #16]
 8006204:	2300      	movs	r3, #0
 8006206:	e008      	b.n	800621a <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	8a1b      	ldrh	r3, [r3, #16]
 800620c:	461a      	mov	r2, r3
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ff90 	bl	8006138 <pb_encode_tag>
 8006218:	4603      	mov	r3, r0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	080092b4 	.word	0x080092b4

08006228 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8006228:	b5b0      	push	{r4, r5, r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	461c      	mov	r4, r3
 800623a:	4615      	mov	r5, r2
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fef6 	bl	8006032 <pb_encode_varint>
 8006246:	4603      	mov	r3, r0
 8006248:	f083 0301 	eor.w	r3, r3, #1
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <pb_encode_string+0x2e>
        return false;
 8006252:	2300      	movs	r3, #0
 8006254:	e005      	b.n	8006262 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff f9ee 	bl	800563c <pb_write>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800626c <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800626c:	b5b0      	push	{r4, r5, r7, lr}
 800626e:	b08c      	sub	sp, #48	@ 0x30
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006278:	f107 0314 	add.w	r3, r7, #20
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	609a      	str	r2, [r3, #8]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fe20 	bl	8005ed6 <pb_encode>
 8006296:	4603      	mov	r3, r0
 8006298:	f083 0301 	eor.w	r3, r3, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	611a      	str	r2, [r3, #16]
#endif
        return false;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e065      	b.n	8006378 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	2200      	movs	r2, #0
 80062b4:	461c      	mov	r4, r3
 80062b6:	4615      	mov	r5, r2
 80062b8:	4622      	mov	r2, r4
 80062ba:	462b      	mov	r3, r5
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff feb8 	bl	8006032 <pb_encode_varint>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f083 0301 	eor.w	r3, r3, #1
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <pb_encode_submessage+0x66>
        return false;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e052      	b.n	8006378 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 80062da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062dc:	2100      	movs	r1, #0
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff f9ac 	bl	800563c <pb_write>
 80062e4:	4603      	mov	r3, r0
 80062e6:	e047      	b.n	8006378 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	441a      	add	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d90b      	bls.n	8006310 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <pb_encode_submessage+0x9a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	e000      	b.n	8006308 <pb_encode_submessage+0x9c>
 8006306:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <pb_encode_submessage+0x114>)
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	6113      	str	r3, [r2, #16]
 800630c:	2300      	movs	r3, #0
 800630e:	e033      	b.n	8006378 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8006328:	f107 0314 	add.w	r3, r7, #20
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff fdd0 	bl	8005ed6 <pb_encode>
 8006336:	4603      	mov	r3, r0
 8006338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	441a      	add	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800634e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006358:	429a      	cmp	r2, r3
 800635a:	d00b      	beq.n	8006374 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <pb_encode_submessage+0xfe>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	e000      	b.n	800636c <pb_encode_submessage+0x100>
 800636a:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <pb_encode_submessage+0x118>)
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	6113      	str	r3, [r2, #16]
 8006370:	2300      	movs	r3, #0
 8006372:	e001      	b.n	8006378 <pb_encode_submessage+0x10c>
    
    return status;
 8006374:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006378:	4618      	mov	r0, r3
 800637a:	3730      	adds	r7, #48	@ 0x30
 800637c:	46bd      	mov	sp, r7
 800637e:	bdb0      	pop	{r4, r5, r7, pc}
 8006380:	0800927c 	.word	0x0800927c
 8006384:	08009304 	.word	0x08009304

08006388 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006388:	b5b0      	push	{r4, r5, r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff f9a0 	bl	80056dc <safe_read_bool>
 800639c:	4603      	mov	r3, r0
 800639e:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	461c      	mov	r4, r3
 80063a6:	4615      	mov	r5, r2
 80063a8:	4622      	mov	r2, r4
 80063aa:	462b      	mov	r3, r5
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fe40 	bl	8006032 <pb_encode_varint>
 80063b2:	4603      	mov	r3, r0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bdb0      	pop	{r4, r5, r7, pc}

080063bc <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80063bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c0:	b08c      	sub	sp, #48	@ 0x30
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	61f8      	str	r0, [r7, #28]
 80063c6:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	7d9b      	ldrb	r3, [r3, #22]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d152      	bne.n	800647a <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	8a5b      	ldrh	r3, [r3, #18]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d10b      	bne.n	8006400 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2200      	movs	r2, #0
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	617a      	str	r2, [r7, #20]
 80063f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80063fa:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 80063fe:	e035      	b.n	800646c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	8a5b      	ldrh	r3, [r3, #18]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d10b      	bne.n	8006420 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	2200      	movs	r2, #0
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	60fa      	str	r2, [r7, #12]
 8006416:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800641a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800641e:	e025      	b.n	800646c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	8a5b      	ldrh	r3, [r3, #18]
 8006424:	2b04      	cmp	r3, #4
 8006426:	d10a      	bne.n	800643e <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2200      	movs	r2, #0
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006438:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800643c:	e016      	b.n	800646c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	8a5b      	ldrh	r3, [r3, #18]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d106      	bne.n	8006454 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006452:	e00b      	b.n	800646c <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <pb_enc_varint+0xa6>
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	e000      	b.n	8006464 <pb_enc_varint+0xa8>
 8006462:	4b36      	ldr	r3, [pc, #216]	@ (800653c <pb_enc_varint+0x180>)
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	6113      	str	r3, [r2, #16]
 8006468:	2300      	movs	r3, #0
 800646a:	e061      	b.n	8006530 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 800646c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006470:	69f8      	ldr	r0, [r7, #28]
 8006472:	f7ff fdde 	bl	8006032 <pb_encode_varint>
 8006476:	4603      	mov	r3, r0
 8006478:	e05a      	b.n	8006530 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	8a5b      	ldrh	r3, [r3, #18]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d10a      	bne.n	80064a4 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f993 3000 	ldrsb.w	r3, [r3]
 8006496:	b25b      	sxtb	r3, r3
 8006498:	17da      	asrs	r2, r3, #31
 800649a:	469a      	mov	sl, r3
 800649c:	4693      	mov	fp, r2
 800649e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80064a2:	e032      	b.n	800650a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	8a5b      	ldrh	r3, [r3, #18]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d10a      	bne.n	80064c2 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b4:	b21b      	sxth	r3, r3
 80064b6:	17da      	asrs	r2, r3, #31
 80064b8:	4698      	mov	r8, r3
 80064ba:	4691      	mov	r9, r2
 80064bc:	e9c7 8908 	strd	r8, r9, [r7, #32]
 80064c0:	e023      	b.n	800650a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	8a5b      	ldrh	r3, [r3, #18]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d108      	bne.n	80064dc <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	17da      	asrs	r2, r3, #31
 80064d2:	461c      	mov	r4, r3
 80064d4:	4615      	mov	r5, r2
 80064d6:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80064da:	e016      	b.n	800650a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	8a5b      	ldrh	r3, [r3, #18]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d106      	bne.n	80064f2 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80064f0:	e00b      	b.n	800650a <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <pb_enc_varint+0x144>
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	e000      	b.n	8006502 <pb_enc_varint+0x146>
 8006500:	4b0e      	ldr	r3, [pc, #56]	@ (800653c <pb_enc_varint+0x180>)
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	6113      	str	r3, [r2, #16]
 8006506:	2300      	movs	r3, #0
 8006508:	e012      	b.n	8006530 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	7d9b      	ldrb	r3, [r3, #22]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	2b03      	cmp	r3, #3
 8006514:	d106      	bne.n	8006524 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8006516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800651a:	69f8      	ldr	r0, [r7, #28]
 800651c:	f7ff fdb4 	bl	8006088 <pb_encode_svarint>
 8006520:	4603      	mov	r3, r0
 8006522:	e005      	b.n	8006530 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8006524:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006528:	69f8      	ldr	r0, [r7, #28]
 800652a:	f7ff fd82 	bl	8006032 <pb_encode_varint>
 800652e:	4603      	mov	r3, r0

    }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3730      	adds	r7, #48	@ 0x30
 8006534:	46bd      	mov	sp, r7
 8006536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653a:	bf00      	nop
 800653c:	08009318 	.word	0x08009318

08006540 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	8a5b      	ldrh	r3, [r3, #18]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d107      	bne.n	8006562 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fdcf 	bl	80060fc <pb_encode_fixed32>
 800655e:	4603      	mov	r3, r0
 8006560:	e016      	b.n	8006590 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	8a5b      	ldrh	r3, [r3, #18]
 8006566:	2b08      	cmp	r3, #8
 8006568:	d107      	bne.n	800657a <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fdd2 	bl	800611a <pb_encode_fixed64>
 8006576:	4603      	mov	r3, r0
 8006578:	e00a      	b.n	8006590 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <pb_enc_fixed+0x48>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	e000      	b.n	800658a <pb_enc_fixed+0x4a>
 8006588:	4b03      	ldr	r3, [pc, #12]	@ (8006598 <pb_enc_fixed+0x58>)
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6113      	str	r3, [r2, #16]
 800658e:	2300      	movs	r3, #0
    }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08009318 	.word	0x08009318

0800659c <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fe34 	bl	8006228 <pb_encode_string>
 80065c0:	4603      	mov	r3, r0
 80065c2:	e022      	b.n	800660a <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	7d9b      	ldrb	r3, [r3, #22]
 80065c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d113      	bne.n	80065f8 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	8a5b      	ldrh	r3, [r3, #18]
 80065da:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80065dc:	429a      	cmp	r2, r3
 80065de:	d90b      	bls.n	80065f8 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <pb_enc_bytes+0x52>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	e000      	b.n	80065f0 <pb_enc_bytes+0x54>
 80065ee:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <pb_enc_bytes+0x78>)
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6113      	str	r3, [r2, #16]
 80065f4:	2300      	movs	r3, #0
 80065f6:	e008      	b.n	800660a <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1c99      	adds	r1, r3, #2
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fe10 	bl	8006228 <pb_encode_string>
 8006608:	4603      	mov	r3, r0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	0800932c 	.word	0x0800932c

08006618 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	8a5b      	ldrh	r3, [r3, #18]
 800662a:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	7d9b      	ldrb	r3, [r3, #22]
 8006636:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800663a:	2b80      	cmp	r3, #128	@ 0x80
 800663c:	d103      	bne.n	8006646 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 800663e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	e011      	b.n	800666a <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10b      	bne.n	8006664 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <pb_enc_string+0x42>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	e000      	b.n	800665c <pb_enc_string+0x44>
 800665a:	4b1c      	ldr	r3, [pc, #112]	@ (80066cc <pb_enc_string+0xb4>)
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6113      	str	r3, [r2, #16]
 8006660:	2300      	movs	r3, #0
 8006662:	e02f      	b.n	80066c4 <pb_enc_string+0xac>

        max_size -= 1;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3b01      	subs	r3, #1
 8006668:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e020      	b.n	80066b8 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800667a:	e005      	b.n	8006688 <pb_enc_string+0x70>
        {
            size++;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	3301      	adds	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
            p++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	d203      	bcs.n	8006698 <pb_enc_string+0x80>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f1      	bne.n	800667c <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <pb_enc_string+0x96>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	e000      	b.n	80066b0 <pb_enc_string+0x98>
 80066ae:	4b08      	ldr	r3, [pc, #32]	@ (80066d0 <pb_enc_string+0xb8>)
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6113      	str	r3, [r2, #16]
 80066b4:	2300      	movs	r3, #0
 80066b6:	e005      	b.n	80066c4 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fdb3 	bl	8006228 <pb_encode_string>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	08009340 	.word	0x08009340
 80066d0:	08009354 	.word	0x08009354

080066d4 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <pb_enc_submessage+0x20>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	e000      	b.n	80066f6 <pb_enc_submessage+0x22>
 80066f4:	4b19      	ldr	r3, [pc, #100]	@ (800675c <pb_enc_submessage+0x88>)
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6113      	str	r3, [r2, #16]
 80066fa:	2300      	movs	r3, #0
 80066fc:	e029      	b.n	8006752 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	7d9b      	ldrb	r3, [r3, #22]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	2b09      	cmp	r3, #9
 8006708:	d11a      	bne.n	8006740 <pb_enc_submessage+0x6c>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	3b08      	subs	r3, #8
 8006718:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00e      	beq.n	8006740 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	3204      	adds	r2, #4
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
 8006730:	4603      	mov	r3, r0
 8006732:	f083 0301 	eor.w	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <pb_enc_submessage+0x6c>
                return false;
 800673c:	2300      	movs	r3, #0
 800673e:	e008      	b.n	8006752 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	461a      	mov	r2, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fd8e 	bl	800626c <pb_encode_submessage>
 8006750:	4603      	mov	r3, r0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	08009368 	.word	0x08009368

08006760 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	69d9      	ldr	r1, [r3, #28]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	8a5b      	ldrh	r3, [r3, #18]
 8006772:	461a      	mov	r2, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff fd57 	bl	8006228 <pb_encode_string>
 800677a:	4603      	mov	r3, r0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <TF_ClearMsg>:
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 800678c:	2218      	movs	r2, #24
 800678e:	2100      	movs	r1, #0
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fddf 	bl	8008354 <memset>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80067ae:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <TF_ClaimTx+0x20>
            TF_Error("TF already locked for tx!");
 80067b6:	4808      	ldr	r0, [pc, #32]	@ (80067d8 <TF_ClaimTx+0x38>)
 80067b8:	f001 fcca 	bl	8008150 <puts>
            return false;
 80067bc:	2300      	movs	r3, #0
 80067be:	e006      	b.n	80067ce <TF_ClaimTx+0x2e>
        }

        tf->soft_lock = true;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
        return true;
 80067cc:	2301      	movs	r3, #1
    }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	08009384 	.word	0x08009384

080067dc <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
 8006800:	2300      	movs	r3, #0
 8006802:	4618      	mov	r0, r3
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	460a      	mov	r2, r1
 8006816:	80fb      	strh	r3, [r7, #6]
 8006818:	4613      	mov	r3, r2
 800681a:	717b      	strb	r3, [r7, #5]
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b29a      	uxth	r2, r3
 8006822:	88f9      	ldrh	r1, [r7, #6]
 8006824:	797b      	ldrb	r3, [r7, #5]
 8006826:	404b      	eors	r3, r1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	4905      	ldr	r1, [pc, #20]	@ (8006840 <TF_CksumAdd+0x34>)
 800682c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006830:	4053      	eors	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	080097e0 	.word	0x080097e0

08006844 <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	80fb      	strh	r3, [r7, #6]
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 800686e:	480f      	ldr	r0, [pc, #60]	@ (80068ac <TF_InitStatic+0x50>)
 8006870:	f001 fc6e 	bl	8008150 <puts>
        return false;
 8006874:	2300      	movs	r3, #0
 8006876:	e015      	b.n	80068a4 <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 8006884:	f242 2260 	movw	r2, #8800	@ 0x2260
 8006888:	2100      	movs	r1, #0
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fd62 	bl	8008354 <memset>

    tf->usertag = usertag;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	721a      	strb	r2, [r3, #8]
    return true;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	080093a4 	.word	0x080093a4

080068b0 <renew_id_listener>:

//region Listeners

/** Reset ID listener's timeout to the original value */
static inline void _TF_FN renew_id_listener(struct TF_IdListener_ *lst)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
    lst->timeout = lst->timeout_max;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	895a      	ldrh	r2, [r3, #10]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	811a      	strh	r2, [r3, #8]
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <cleanup_id_listener>:

/** Notify callback about ID listener's demise & let it free any resources in userdata */
static void _TF_FN cleanup_id_listener(TinyFrame *tf, TF_COUNT i, struct TF_IdListener_ *lst)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	@ 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	460b      	mov	r3, r1
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	72fb      	strb	r3, [r7, #11]
    TF_Msg msg;
    if (lst->fn == NULL) return;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02f      	beq.n	8006942 <cleanup_id_listener+0x76>

    // Make user clean up their data - only if not NULL
    if (lst->userdata != NULL || lst->userdata2 != NULL) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <cleanup_id_listener+0x26>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00e      	beq.n	8006910 <cleanup_id_listener+0x44>
        msg.userdata = lst->userdata;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	623b      	str	r3, [r7, #32]
        msg.userdata2 = lst->userdata2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
        msg.data = NULL; // this is a signal that the listener should clean up
 80068fe:	2300      	movs	r3, #0
 8006900:	61bb      	str	r3, [r7, #24]
        lst->fn(tf, &msg); // return value is ignored here - use TF_STAY or TF_CLOSE
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f107 0210 	add.w	r2, r7, #16
 800690a:	4611      	mov	r1, r2
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4798      	blx	r3
    }

    lst->fn = NULL; // Discard listener
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	605a      	str	r2, [r3, #4]

    if (i == tf->count_id_lst - 1) {
 8006916:	7afa      	ldrb	r2, [r7, #11]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800691e:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006922:	3b01      	subs	r3, #1
 8006924:	429a      	cmp	r2, r3
 8006926:	d10d      	bne.n	8006944 <cleanup_id_listener+0x78>
        tf->count_id_lst--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800692e:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006932:	3b01      	subs	r3, #1
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800693c:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 8006940:	e000      	b.n	8006944 <cleanup_id_listener+0x78>
    if (lst->fn == NULL) return;
 8006942:	bf00      	nop
    }
}
 8006944:	3728      	adds	r7, #40	@ 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <cleanup_type_listener>:

/** Clean up Type listener */
static inline void _TF_FN cleanup_type_listener(TinyFrame *tf, TF_COUNT i, struct TF_TypeListener_ *lst)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	460b      	mov	r3, r1
 8006954:	607a      	str	r2, [r7, #4]
 8006956:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
    if (i == tf->count_type_lst - 1) {
 800695e:	7afa      	ldrb	r2, [r7, #11]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006966:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800696a:	3b01      	subs	r3, #1
 800696c:	429a      	cmp	r2, r3
 800696e:	d10b      	bne.n	8006988 <cleanup_type_listener+0x3e>
        tf->count_type_lst--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006976:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800697a:	3b01      	subs	r3, #1
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006984:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    }
}
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <cleanup_generic_listener>:

/** Clean up Generic listener */
static inline void _TF_FN cleanup_generic_listener(TinyFrame *tf, TF_COUNT i, struct TF_GenericListener_ *lst)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	460b      	mov	r3, r1
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
    if (i == tf->count_generic_lst - 1) {
 80069a8:	7afa      	ldrb	r2, [r7, #11]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80069b0:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80069b4:	3b01      	subs	r3, #1
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d10b      	bne.n	80069d2 <cleanup_generic_listener+0x3e>
        tf->count_generic_lst--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80069c0:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80069ce:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    }
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <TF_AddIdListener>:

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_TICKS timeout)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	807b      	strh	r3, [r7, #2]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
 80069f2:	e039      	b.n	8006a68 <TF_AddIdListener+0x88>
        lst = &tf->id_listeners[i];
 80069f4:	7dfa      	ldrb	r2, [r7, #23]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006a02:	3330      	adds	r3, #48	@ 0x30
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d127      	bne.n	8006a62 <TF_AddIdListener+0x82>
            lst->fn = cb;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	605a      	str	r2, [r3, #4]
            lst->id = msg->frame_id;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	601a      	str	r2, [r3, #0]
            lst->userdata = msg->userdata;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	60da      	str	r2, [r3, #12]
            lst->userdata2 = msg->userdata2;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	611a      	str	r2, [r3, #16]
            lst->timeout_max = lst->timeout = timeout;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	887a      	ldrh	r2, [r7, #2]
 8006a34:	811a      	strh	r2, [r3, #8]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	891a      	ldrh	r2, [r3, #8]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	815a      	strh	r2, [r3, #10]
            if (i >= tf->count_id_lst) {
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006a44:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006a48:	7dfa      	ldrb	r2, [r7, #23]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d307      	bcc.n	8006a5e <TF_AddIdListener+0x7e>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	3301      	adds	r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006a5a:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
            }
            return true;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e009      	b.n	8006a76 <TF_AddIdListener+0x96>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	3301      	adds	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d9c2      	bls.n	80069f4 <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 8006a6e:	4804      	ldr	r0, [pc, #16]	@ (8006a80 <TF_AddIdListener+0xa0>)
 8006a70:	f001 fb6e 	bl	8008150 <puts>
    return false;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	080093f8 	.word	0x080093f8

08006a84 <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	e022      	b.n	8006ada <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d114      	bne.n	8006ad4 <TF_AddGenericListener+0x50>
            lst->fn = cb;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006ab6:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d307      	bcc.n	8006ad0 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006acc:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e009      	b.n	8006ae8 <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d9d9      	bls.n	8006a94 <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 8006ae0:	4803      	ldr	r0, [pc, #12]	@ (8006af0 <TF_AddGenericListener+0x6c>)
 8006ae2:	f001 fb35 	bl	8008150 <puts>
    return false;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	0800943c 	.word	0x0800943c

08006af4 <TF_HandleReceivedMessage>:
    return false;
}

/** Handle a message that was just collected & verified by the parser */
static void _TF_FN TF_HandleReceivedMessage(TinyFrame *tf)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	@ 0x38
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
    struct TF_GenericListener_ *glst;
    TF_Result res;

    // Prepare message object
    TF_Msg msg;
    TF_ClearMsg(&msg);
 8006afc:	f107 030c 	add.w	r3, r7, #12
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fe3f 	bl	8006784 <TF_ClearMsg>
    msg.frame_id = tf->id;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	60fb      	str	r3, [r7, #12]
    msg.is_response = false;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	743b      	strb	r3, [r7, #16]
    msg.type = tf->type;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b16:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006b1a:	827b      	strh	r3, [r7, #18]
    msg.data = tf->data;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	331a      	adds	r3, #26
 8006b20:	617b      	str	r3, [r7, #20]
    msg.len = tf->len;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8b1b      	ldrh	r3, [r3, #24]
 8006b26:	833b      	strh	r3, [r7, #24]

    // The loop upper bounds are the highest currently used slot index
    // (or close to it, depending on the order of listener removals).

    // ID listeners first
    for (i = 0; i < tf->count_id_lst; i++) {
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006b2e:	e04e      	b.n	8006bce <TF_HandleReceivedMessage+0xda>
        ilst = &tf->id_listeners[i];
 8006b30:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006b40:	3330      	adds	r3, #48	@ 0x30
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24

        if (ilst->fn && ilst->id == msg.frame_id) {
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d039      	beq.n	8006bc4 <TF_HandleReceivedMessage+0xd0>
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d134      	bne.n	8006bc4 <TF_HandleReceivedMessage+0xd0>
            msg.userdata = ilst->userdata; // pass userdata pointer to the callback
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	61fb      	str	r3, [r7, #28]
            msg.userdata2 = ilst->userdata2;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	623b      	str	r3, [r7, #32]
            res = ilst->fn(tf, &msg);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f107 020c 	add.w	r2, r7, #12
 8006b6e:	4611      	mov	r1, r2
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            ilst->userdata = msg.userdata; // put it back (may have changed the pointer or set to NULL)
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	60da      	str	r2, [r3, #12]
            ilst->userdata2 = msg.userdata2; // put it back (may have changed the pointer or set to NULL)
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	611a      	str	r2, [r3, #16]

            if (res != TF_NEXT) {
 8006b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01a      	beq.n	8006bc4 <TF_HandleReceivedMessage+0xd0>
                // if it's TF_CLOSE, we assume user already cleaned up userdata
                if (res == TF_RENEW) {
 8006b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d103      	bne.n	8006b9e <TF_HandleReceivedMessage+0xaa>
                    renew_id_listener(ilst);
 8006b96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b98:	f7ff fe8a 	bl	80068b0 <renew_id_listener>
                    // Set userdata to NULL to avoid calling user for cleanup
                    ilst->userdata = NULL;
                    ilst->userdata2 = NULL;
                    cleanup_id_listener(tf, i, ilst);
                }
                return;
 8006b9c:	e09f      	b.n	8006cde <TF_HandleReceivedMessage+0x1ea>
                else if (res == TF_CLOSE) {
 8006b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	f040 809b 	bne.w	8006cde <TF_HandleReceivedMessage+0x1ea>
                    ilst->userdata = NULL;
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	2200      	movs	r2, #0
 8006bac:	60da      	str	r2, [r3, #12]
                    ilst->userdata2 = NULL;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	611a      	str	r2, [r3, #16]
                    cleanup_id_listener(tf, i, ilst);
 8006bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff fe85 	bl	80068cc <cleanup_id_listener>
                return;
 8006bc2:	e08c      	b.n	8006cde <TF_HandleReceivedMessage+0x1ea>
    for (i = 0; i < tf->count_id_lst; i++) {
 8006bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006bd4:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006bd8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d3a7      	bcc.n	8006b30 <TF_HandleReceivedMessage+0x3c>
            }
        }
    }
    // clean up for the following listeners that don't use userdata (this avoids data from
    // an ID listener that returned TF_NEXT from leaking into Type and Generic listeners)
    msg.userdata = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
    msg.userdata2 = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	623b      	str	r3, [r7, #32]

    // Type listeners
    for (i = 0; i < tf->count_type_lst; i++) {
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006bee:	e02f      	b.n	8006c50 <TF_HandleReceivedMessage+0x15c>
        tlst = &tf->type_listeners[i];
 8006bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bf4:	f203 433f 	addw	r3, r3, #1087	@ 0x43f
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (tlst->fn && tlst->type == msg.type) {
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01e      	beq.n	8006c46 <TF_HandleReceivedMessage+0x152>
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	881a      	ldrh	r2, [r3, #0]
 8006c0c:	8a7b      	ldrh	r3, [r7, #18]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d119      	bne.n	8006c46 <TF_HandleReceivedMessage+0x152>
            res = tlst->fn(tf, &msg);
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f107 020c 	add.w	r2, r7, #12
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 8006c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <TF_HandleReceivedMessage+0x152>
                // type listeners don't have userdata.
                // TF_RENEW doesn't make sense here because type listeners don't expire = same as TF_STAY

                if (res == TF_CLOSE) {
 8006c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d155      	bne.n	8006ce2 <TF_HandleReceivedMessage+0x1ee>
                    cleanup_type_listener(tf, i, tlst);
 8006c36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fe83 	bl	800694a <cleanup_type_listener>
                }
                return;
 8006c44:	e04d      	b.n	8006ce2 <TF_HandleReceivedMessage+0x1ee>
    for (i = 0; i < tf->count_type_lst; i++) {
 8006c46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006c56:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006c5a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d3c6      	bcc.n	8006bf0 <TF_HandleReceivedMessage+0xfc>
            }
        }
    }

    // Generic listeners
    for (i = 0; i < tf->count_generic_lst; i++) {
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006c68:	e02a      	b.n	8006cc0 <TF_HandleReceivedMessage+0x1cc>
        glst = &tf->generic_listeners[i];
 8006c6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c6e:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (glst->fn) {
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d019      	beq.n	8006cb6 <TF_HandleReceivedMessage+0x1c2>
            res = glst->fn(tf, &msg);
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f107 020c 	add.w	r2, r7, #12
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 8006c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <TF_HandleReceivedMessage+0x1c2>

                // note: It's not expected that user will have multiple generic listeners, or
                // ever actually remove them. They're most useful as default callbacks if no other listener
                // handled the message.

                if (res == TF_CLOSE) {
 8006c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d11f      	bne.n	8006ce6 <TF_HandleReceivedMessage+0x1f2>
                    cleanup_generic_listener(tf, i, glst);
 8006ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fe70 	bl	8006994 <cleanup_generic_listener>
                }
                return;
 8006cb4:	e017      	b.n	8006ce6 <TF_HandleReceivedMessage+0x1f2>
    for (i = 0; i < tf->count_generic_lst; i++) {
 8006cb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cba:	3301      	adds	r3, #1
 8006cbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cc6:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8006cca:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d3cb      	bcc.n	8006c6a <TF_HandleReceivedMessage+0x176>
            }
        }
    }

    TF_Error("Unhandled message, type %d", (int)msg.type);
 8006cd2:	8a7b      	ldrh	r3, [r7, #18]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4806      	ldr	r0, [pc, #24]	@ (8006cf0 <TF_HandleReceivedMessage+0x1fc>)
 8006cd8:	f001 f9d2 	bl	8008080 <iprintf>
 8006cdc:	e004      	b.n	8006ce8 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006cde:	bf00      	nop
 8006ce0:	e002      	b.n	8006ce8 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006ce2:	bf00      	nop
 8006ce4:	e000      	b.n	8006ce8 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006ce6:	bf00      	nop
}
 8006ce8:	3738      	adds	r7, #56	@ 0x38
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	080094e4 	.word	0x080094e4

08006cf4 <TF_Accept>:

//region Parser

/** Handle a received byte buffer */
void _TF_FN TF_Accept(TinyFrame *tf, const uint8_t *buffer, uint32_t count)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < count; i++) {
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e00a      	b.n	8006d1c <TF_Accept+0x28>
        TF_AcceptChar(tf, buffer[i]);
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f849 	bl	8006da8 <TF_AcceptChar>
    for (i = 0; i < count; i++) {
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3f0      	bcc.n	8006d06 <TF_Accept+0x12>
    }
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <TF_ResetParser>:

/** Reset the parser's internal state. */
void _TF_FN TF_ResetParser(TinyFrame *tf)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
    tf->state = TFState_SOF;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	741a      	strb	r2, [r3, #16]
    // more init will be done by the parser when the first byte is received
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <pars_begin_frame>:

/** SOF was received - prepare for the frame */
static void _TF_FN pars_begin_frame(TinyFrame *tf) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
    // Reset state vars
    CKSUM_RESET(tf->cksum);
 8006d50:	f7ff fd54 	bl	80067fc <TF_CksumStart>
 8006d54:	4603      	mov	r3, r0
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#if TF_USE_SOF_BYTE
    CKSUM_ADD(tf->cksum, TF_SOF_BYTE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d68:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006d6c:	21ab      	movs	r1, #171	@ 0xab
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fd4c 	bl	800680c <TF_CksumAdd>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#endif

    tf->discard_data = false;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

    // Enter ID state
    tf->state = TFState_ID;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2203      	movs	r2, #3
 8006d92:	741a      	strb	r2, [r3, #16]
    tf->rxi = 0;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <TF_AcceptChar>:

/** Handle a received char - here's the main state machine */
void _TF_FN TF_AcceptChar(TinyFrame *tf, unsigned char c)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
    // Parser timeout - clear
    if (tf->parser_timeout_ticks >= TF_PARSER_TIMEOUT_TICKS) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8a5b      	ldrh	r3, [r3, #18]
 8006db8:	2b09      	cmp	r3, #9
 8006dba:	d909      	bls.n	8006dd0 <TF_AcceptChar+0x28>
        if (tf->state != TFState_SOF) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7c1b      	ldrb	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <TF_AcceptChar+0x28>
            TF_ResetParser(tf);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ffb2 	bl	8006d2e <TF_ResetParser>
            TF_Error("Parser timeout");
 8006dca:	48b4      	ldr	r0, [pc, #720]	@ (800709c <TF_AcceptChar+0x2f4>)
 8006dcc:	f001 f9c0 	bl	8008150 <puts>
        }
    }
    tf->parser_timeout_ticks = 0;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	825a      	strh	r2, [r3, #18]
        pars_begin_frame(tf);
    }
#endif

    //@formatter:off
    switch (tf->state) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7c1b      	ldrb	r3, [r3, #16]
 8006dda:	2b06      	cmp	r3, #6
 8006ddc:	f200 8201 	bhi.w	80071e2 <TF_AcceptChar+0x43a>
 8006de0:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <TF_AcceptChar+0x40>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e81 	.word	0x08006e81
 8006df0:	08006f85 	.word	0x08006f85
 8006df4:	08006e15 	.word	0x08006e15
 8006df8:	08006ef7 	.word	0x08006ef7
 8006dfc:	08007075 	.word	0x08007075
 8006e00:	0800711f 	.word	0x0800711f
        case TFState_SOF:
            if (c == TF_SOF_BYTE) {
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	2bab      	cmp	r3, #171	@ 0xab
 8006e08:	f040 81de 	bne.w	80071c8 <TF_AcceptChar+0x420>
                pars_begin_frame(tf);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ff9b 	bl	8006d48 <pars_begin_frame>
            }
            break;
 8006e12:	e1d9      	b.n	80071c8 <TF_AcceptChar+0x420>

        case TFState_ID:
            CKSUM_ADD(tf->cksum, c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	4611      	mov	r1, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff fcf2 	bl	800680c <TF_CksumAdd>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e32:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->id, TF_ID) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	615a      	str	r2, [r3, #20]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e4a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006e4e:	3301      	adds	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e58:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e62:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	f040 81b0 	bne.w	80071cc <TF_AcceptChar+0x424>
                // Enter LEN state
                tf->state = TFState_LEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006e7e:	e1a5      	b.n	80071cc <TF_AcceptChar+0x424>

        case TFState_LEN:
            CKSUM_ADD(tf->cksum, c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e86:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006e8a:	78fa      	ldrb	r2, [r7, #3]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fcbc 	bl	800680c <TF_CksumAdd>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e9e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->len, TF_LEN) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8b1b      	ldrh	r3, [r3, #24]
 8006ea6:	b21b      	sxth	r3, r3
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	b21a      	sxth	r2, r3
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	831a      	strh	r2, [r3, #24]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ece:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f040 8177 	bne.w	80071d0 <TF_AcceptChar+0x428>
                // Enter TYPE state
                tf->state = TFState_TYPE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006ef4:	e16c      	b.n	80071d0 <TF_AcceptChar+0x428>

        case TFState_TYPE:
            CKSUM_ADD(tf->cksum, c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006efc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006f00:	78fa      	ldrb	r2, [r7, #3]
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fc81 	bl	800680c <TF_CksumAdd>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f14:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->type, TF_TYPE) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f1e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006f22:	b21b      	sxth	r3, r3
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b21a      	sxth	r2, r3
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	b21b      	sxth	r3, r3
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f38:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f42:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006f46:	3301      	adds	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f50:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f5a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	f040 8138 	bne.w	80071d4 <TF_AcceptChar+0x42c>
                #if TF_CKSUM_TYPE == TF_CKSUM_NONE
                    tf->state = TFState_DATA;
                    tf->rxi = 0;
                #else
                    // enter HEAD_CKSUM state
                    tf->state = TFState_HEAD_CKSUM;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 8006f82:	e127      	b.n	80071d4 <TF_AcceptChar+0x42c>

        case TFState_HEAD_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006f8e:	b21b      	sxth	r3, r3
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	b21a      	sxth	r2, r3
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fa4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fae:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fbc:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fc6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	f040 8104 	bne.w	80071d8 <TF_AcceptChar+0x430>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fd6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fc32 	bl	8006844 <TF_CksumEnd>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fea:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->cksum != tf->ref_cksum) {
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ff4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ffe:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8007002:	429a      	cmp	r2, r3
 8007004:	d006      	beq.n	8007014 <TF_AcceptChar+0x26c>
                    TF_Error("Rx head cksum mismatch");
 8007006:	4826      	ldr	r0, [pc, #152]	@ (80070a0 <TF_AcceptChar+0x2f8>)
 8007008:	f001 f8a2 	bl	8008150 <puts>
                    TF_ResetParser(tf);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff fe8e 	bl	8006d2e <TF_ResetParser>
                    break;
 8007012:	e0e6      	b.n	80071e2 <TF_AcceptChar+0x43a>
                }

                if (tf->len == 0) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8b1b      	ldrh	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <TF_AcceptChar+0x282>
                    // if the message has no body, we're done.
                    TF_HandleReceivedMessage(tf);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fd69 	bl	8006af4 <TF_HandleReceivedMessage>
                    TF_ResetParser(tf);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fe83 	bl	8006d2e <TF_ResetParser>
                    break;
 8007028:	e0db      	b.n	80071e2 <TF_AcceptChar+0x43a>
                }

                // Enter DATA state
                tf->state = TFState_DATA;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2205      	movs	r2, #5
 800702e:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007036:	2200      	movs	r2, #0
 8007038:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a

                CKSUM_RESET(tf->cksum); // Start collecting the payload
 800703c:	f7ff fbde 	bl	80067fc <TF_CksumStart>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800704a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->len > TF_MAX_PAYLOAD_RX) {
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8b1b      	ldrh	r3, [r3, #24]
 8007052:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8007056:	f240 80bf 	bls.w	80071d8 <TF_AcceptChar+0x430>
                    TF_Error("Rx payload too long: %d", (int)tf->len);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8b1b      	ldrh	r3, [r3, #24]
 800705e:	4619      	mov	r1, r3
 8007060:	4810      	ldr	r0, [pc, #64]	@ (80070a4 <TF_AcceptChar+0x2fc>)
 8007062:	f001 f80d 	bl	8008080 <iprintf>
                    // ERROR - frame too long. Consume, but do not store.
                    tf->discard_data = true;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800706c:	2201      	movs	r2, #1
 800706e:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                }
            }
            break;
 8007072:	e0b1      	b.n	80071d8 <TF_AcceptChar+0x430>

        case TFState_DATA:
            if (tf->discard_data) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800707a:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d012      	beq.n	80070a8 <TF_AcceptChar+0x300>
                tf->rxi++;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007088:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800708c:	3301      	adds	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007096:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800709a:	e027      	b.n	80070ec <TF_AcceptChar+0x344>
 800709c:	08009530 	.word	0x08009530
 80070a0:	08009544 	.word	0x08009544
 80070a4:	08009560 	.word	0x08009560
            } else {
                CKSUM_ADD(tf->cksum, c);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ae:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fba8 	bl	800680c <TF_CksumAdd>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                tf->data[tf->rxi++] = c;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	b291      	uxth	r1, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070de:	f8a2 109a 	strh.w	r1, [r2, #154]	@ 0x9a
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	769a      	strb	r2, [r3, #26]
            }

            if (tf->rxi == tf->len) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f2:	f8b3 209a 	ldrh.w	r2, [r3, #154]	@ 0x9a
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8b1b      	ldrh	r3, [r3, #24]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d16e      	bne.n	80071dc <TF_AcceptChar+0x434>
                    // All done
                    TF_HandleReceivedMessage(tf);
                    TF_ResetParser(tf);
                #else
                    // Enter DATA_CKSUM state
                    tf->state = TFState_DATA_CKSUM;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2206      	movs	r2, #6
 8007102:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800710a:	2200      	movs	r2, #0
 800710c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007116:	2200      	movs	r2, #0
 8007118:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 800711c:	e05e      	b.n	80071dc <TF_AcceptChar+0x434>

        case TFState_DATA_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007124:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8007128:	b21b      	sxth	r3, r3
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	b21a      	sxth	r2, r3
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	b21b      	sxth	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b21b      	sxth	r3, r3
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800713e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007148:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800714c:	3301      	adds	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007156:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007160:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8007164:	2b02      	cmp	r3, #2
 8007166:	d13b      	bne.n	80071e0 <TF_AcceptChar+0x438>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800716e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fb66 	bl	8006844 <TF_CksumEnd>
 8007178:	4603      	mov	r3, r0
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007182:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                if (!tf->discard_data) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800718c:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8007190:	f083 0301 	eor.w	r3, r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d012      	beq.n	80071c0 <TF_AcceptChar+0x418>
                    if (tf->cksum == tf->ref_cksum) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071a0:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071aa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d103      	bne.n	80071ba <TF_AcceptChar+0x412>
                        TF_HandleReceivedMessage(tf);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fc9e 	bl	8006af4 <TF_HandleReceivedMessage>
 80071b8:	e002      	b.n	80071c0 <TF_AcceptChar+0x418>
                    } else {
                        TF_Error("Body cksum mismatch");
 80071ba:	480c      	ldr	r0, [pc, #48]	@ (80071ec <TF_AcceptChar+0x444>)
 80071bc:	f000 ffc8 	bl	8008150 <puts>
                    }
                }

                TF_ResetParser(tf);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fdb4 	bl	8006d2e <TF_ResetParser>
            }
            break;
 80071c6:	e00b      	b.n	80071e0 <TF_AcceptChar+0x438>
            break;
 80071c8:	bf00      	nop
 80071ca:	e00a      	b.n	80071e2 <TF_AcceptChar+0x43a>
            break;
 80071cc:	bf00      	nop
 80071ce:	e008      	b.n	80071e2 <TF_AcceptChar+0x43a>
            break;
 80071d0:	bf00      	nop
 80071d2:	e006      	b.n	80071e2 <TF_AcceptChar+0x43a>
            break;
 80071d4:	bf00      	nop
 80071d6:	e004      	b.n	80071e2 <TF_AcceptChar+0x43a>
            break;
 80071d8:	bf00      	nop
 80071da:	e002      	b.n	80071e2 <TF_AcceptChar+0x43a>
            break;
 80071dc:	bf00      	nop
 80071de:	e000      	b.n	80071e2 <TF_AcceptChar+0x43a>
            break;
 80071e0:	bf00      	nop
    }
    //@formatter:on
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	08009580 	.word	0x08009580

080071f0 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	@ 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t b = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	623b      	str	r3, [r7, #32]
    TF_CKSUM cksum = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	83fb      	strh	r3, [r7, #30]
    uint32_t pos = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 8007212:	f7ff faf3 	bl	80067fc <TF_CksumStart>
 8007216:	4603      	mov	r3, r0
 8007218:	83fb      	strh	r3, [r7, #30]

    // Gen ID
    if (msg->is_response) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	791b      	ldrb	r3, [r3, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <TF_ComposeHead+0x3a>
        id = msg->frame_id;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	e00f      	b.n	800724a <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	1c59      	adds	r1, r3, #1
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	60d1      	str	r1, [r2, #12]
 8007234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007238:	623b      	str	r3, [r7, #32]
        if (tf->peer_bit) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	7a1b      	ldrb	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007248:	623b      	str	r3, [r7, #32]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a3a      	ldr	r2, [r7, #32]
 800724e:	601a      	str	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 8007250:	f7ff fad4 	bl	80067fc <TF_CksumStart>
 8007254:	4603      	mov	r3, r0
 8007256:	83fb      	strh	r3, [r7, #30]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	61ba      	str	r2, [r7, #24]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	22ab      	movs	r2, #171	@ 0xab
 8007264:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 8007266:	8bfb      	ldrh	r3, [r7, #30]
 8007268:	21ab      	movs	r1, #171	@ 0xab
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff face 	bl	800680c <TF_CksumAdd>
 8007270:	4603      	mov	r3, r0
 8007272:	83fb      	strh	r3, [r7, #30]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 8007274:	2303      	movs	r3, #3
 8007276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800727a:	e01c      	b.n	80072b6 <TF_ComposeHead+0xc6>
 800727c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	75fb      	strb	r3, [r7, #23]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	61ba      	str	r2, [r7, #24]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	4413      	add	r3, r2
 8007294:	7dfa      	ldrb	r2, [r7, #23]
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	7dfa      	ldrb	r2, [r7, #23]
 800729a:	8bfb      	ldrh	r3, [r7, #30]
 800729c:	4611      	mov	r1, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fab4 	bl	800680c <TF_CksumAdd>
 80072a4:	4603      	mov	r3, r0
 80072a6:	83fb      	strh	r3, [r7, #30]
 80072a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dade      	bge.n	800727c <TF_ComposeHead+0x8c>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072c4:	e01e      	b.n	8007304 <TF_ComposeHead+0x114>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	899b      	ldrh	r3, [r3, #12]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	fa42 f303 	asr.w	r3, r2, r3
 80072d6:	75fb      	strb	r3, [r7, #23]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	61ba      	str	r2, [r7, #24]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	7dfa      	ldrb	r2, [r7, #23]
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	7dfa      	ldrb	r2, [r7, #23]
 80072e8:	8bfb      	ldrh	r3, [r7, #30]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff fa8d 	bl	800680c <TF_CksumAdd>
 80072f2:	4603      	mov	r3, r0
 80072f4:	83fb      	strh	r3, [r7, #30]
 80072f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007304:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007308:	2b00      	cmp	r3, #0
 800730a:	dadc      	bge.n	80072c6 <TF_ComposeHead+0xd6>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 800730c:	2301      	movs	r3, #1
 800730e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007312:	e01e      	b.n	8007352 <TF_ComposeHead+0x162>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	88db      	ldrh	r3, [r3, #6]
 8007318:	461a      	mov	r2, r3
 800731a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	fa42 f303 	asr.w	r3, r2, r3
 8007324:	75fb      	strb	r3, [r7, #23]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	61ba      	str	r2, [r7, #24]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	4413      	add	r3, r2
 8007330:	7dfa      	ldrb	r2, [r7, #23]
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	7dfa      	ldrb	r2, [r7, #23]
 8007336:	8bfb      	ldrh	r3, [r7, #30]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fa66 	bl	800680c <TF_CksumAdd>
 8007340:	4603      	mov	r3, r0
 8007342:	83fb      	strh	r3, [r7, #30]
 8007344:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007348:	b2db      	uxtb	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007352:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007356:	2b00      	cmp	r3, #0
 8007358:	dadc      	bge.n	8007314 <TF_ComposeHead+0x124>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 800735a:	8bfb      	ldrh	r3, [r7, #30]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fa71 	bl	8006844 <TF_CksumEnd>
 8007362:	4603      	mov	r3, r0
 8007364:	83fb      	strh	r3, [r7, #30]
    WRITENUM(TF_CKSUM, cksum);
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800736c:	e014      	b.n	8007398 <TF_ComposeHead+0x1a8>
 800736e:	8bfa      	ldrh	r2, [r7, #30]
 8007370:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	fa42 f303 	asr.w	r3, r2, r3
 800737a:	75fb      	strb	r3, [r7, #23]
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	61ba      	str	r2, [r7, #24]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	7dfa      	ldrb	r2, [r7, #23]
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800738e:	b2db      	uxtb	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007398:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800739c:	2b00      	cmp	r3, #0
 800739e:	dae6      	bge.n	800736e <TF_ComposeHead+0x17e>
#endif

    return pos;
 80073a0:	69bb      	ldr	r3, [r7, #24]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3728      	adds	r7, #40	@ 0x28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b088      	sub	sp, #32
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 80073c6:	2300      	movs	r3, #0
 80073c8:	83fb      	strh	r3, [r7, #30]
 80073ca:	e019      	b.n	8007400 <TF_ComposeBody+0x56>
        b = data[i];
 80073cc:	8bfb      	ldrh	r3, [r7, #30]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	4413      	add	r3, r2
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	61ba      	str	r2, [r7, #24]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	7dfa      	ldrb	r2, [r7, #23]
 80073e2:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	7dfa      	ldrb	r2, [r7, #23]
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fa0d 	bl	800680c <TF_CksumAdd>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 80073fa:	8bfb      	ldrh	r3, [r7, #30]
 80073fc:	3301      	adds	r3, #1
 80073fe:	83fb      	strh	r3, [r7, #30]
 8007400:	8bfa      	ldrh	r2, [r7, #30]
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	429a      	cmp	r2, r3
 8007406:	d3e1      	bcc.n	80073cc <TF_ComposeBody+0x22>
    }

    return pos;
 8007408:	69bb      	ldr	r3, [r7, #24]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b086      	sub	sp, #24
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fa09 	bl	8006844 <TF_CksumEnd>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
 800743e:	e015      	b.n	800746c <TF_ComposeTail+0x5a>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	fa42 f303 	asr.w	r3, r2, r3
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	613a      	str	r2, [r7, #16]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	4413      	add	r3, r2
 800745c:	7bfa      	ldrb	r2, [r7, #15]
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b2db      	uxtb	r3, r3
 800746a:	75fb      	strb	r3, [r7, #23]
 800746c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007470:	2b00      	cmp	r3, #0
 8007472:	dae5      	bge.n	8007440 <TF_ComposeTail+0x2e>
#endif
    return pos;
 8007474:	693b      	ldr	r3, [r7, #16]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <TF_SendFrame_Begin>:
 * @param listener - response listener or NULL
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_ClaimTx(tf));
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff f987 	bl	80067a0 <TF_ClaimTx>
 8007492:	4603      	mov	r3, r0
 8007494:	f083 0301 	eor.w	r3, r3, #1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <TF_SendFrame_Begin+0x24>
 800749e:	2300      	movs	r3, #0
 80074a0:	e031      	b.n	8007506 <TF_SendFrame_Begin+0x88>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 80074a8:	3303      	adds	r3, #3
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff fe9e 	bl	80071f0 <TF_ComposeHead>
 80074b4:	4602      	mov	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80074bc:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    tf->tx_len = msg->len;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	899b      	ldrh	r3, [r3, #12]
 80074c4:	461a      	mov	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80074cc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    if (listener) {
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <TF_SendFrame_Begin+0x74>
        TF_TRY(TF_AddIdListener(tf, msg, listener, timeout));
 80074d6:	887b      	ldrh	r3, [r7, #2]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fa7f 	bl	80069e0 <TF_AddIdListener>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f083 0301 	eor.w	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <TF_SendFrame_Begin+0x74>
 80074ee:	2300      	movs	r3, #0
 80074f0:	e009      	b.n	8007506 <TF_SendFrame_Begin+0x88>
    }

    CKSUM_RESET(tf->tx_cksum);
 80074f2:	f7ff f983 	bl	80067fc <TF_CksumStart>
 80074f6:	4603      	mov	r3, r0
 80074f8:	461a      	mov	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007500:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    return true;
 8007504:	2301      	movs	r3, #1
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b088      	sub	sp, #32
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	61bb      	str	r3, [r7, #24]

    remain = length;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 8007522:	e050      	b.n	80075c6 <TF_SendFrame_Chunk+0xb8>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800752a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800752e:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	4293      	cmp	r3, r2
 8007536:	bf28      	it	cs
 8007538:	4613      	movcs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8007542:	3303      	adds	r3, #3
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800754a:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 800754e:	1898      	adds	r0, r3, r2
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	18d1      	adds	r1, r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8007560:	332c      	adds	r3, #44	@ 0x2c
 8007562:	f7ff ff22 	bl	80073aa <TF_ComposeBody>
 8007566:	4602      	mov	r2, r0
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800756e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007572:	4413      	add	r3, r2
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800757a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        remain -= chunk;
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	4413      	add	r3, r2
 800758c:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007594:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007598:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800759c:	d113      	bne.n	80075c6 <TF_SendFrame_Chunk+0xb8>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 80075a4:	3303      	adds	r3, #3
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80075ac:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 80075b0:	4619      	mov	r1, r3
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7fb ff42 	bl	800343c <TF_WriteImpl>
            tf->tx_pos = 0;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80075be:	461a      	mov	r2, r3
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    while (remain > 0) {
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1ab      	bne.n	8007524 <TF_SendFrame_Chunk+0x16>
        }
    }
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80075e4:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d03a      	beq.n	8007662 <TF_SendFrame_End+0x8c>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80075f2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80075f6:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d813      	bhi.n	8007626 <TF_SendFrame_End+0x50>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8007604:	3303      	adds	r3, #3
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800760c:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fb ff12 	bl	800343c <TF_WriteImpl>
            tf->tx_pos = 0;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800761e:	461a      	mov	r2, r3
 8007620:	2300      	movs	r3, #0
 8007622:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 800762c:	3303      	adds	r3, #3
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007634:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8007638:	441a      	add	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8007640:	332c      	adds	r3, #44	@ 0x2c
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f7ff fee4 	bl	8007412 <TF_ComposeTail>
 800764a:	4602      	mov	r2, r0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007652:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007656:	4413      	add	r3, r2
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800765e:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8007668:	3303      	adds	r3, #3
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007670:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fb fee0 	bl	800343c <TF_WriteImpl>
    TF_ReleaseTx(tf);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff f8ad 	bl	80067dc <TF_ReleaseTx>
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <TF_SendFrame>:
 * @param listener - ID listener, or NULL
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, timeout));
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff feed 	bl	800747e <TF_SendFrame_Begin>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f083 0301 	eor.w	r3, r3, #1
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <TF_SendFrame+0x2a>
 80076b0:	2300      	movs	r3, #0
 80076b2:	e013      	b.n	80076dc <TF_SendFrame+0x52>
    if (msg->len == 0 || msg->data != NULL) {
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	899b      	ldrh	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <TF_SendFrame+0x3a>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <TF_SendFrame+0x50>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	899b      	ldrh	r3, [r3, #12]
 80076cc:	461a      	mov	r2, r3
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff ff1d 	bl	800750e <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff7e 	bl	80075d6 <TF_SendFrame_End>
    }
    return true;
 80076da:	2301      	movs	r3, #1
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, 0);
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ffc8 	bl	800768a <TF_SendFrame>
 80076fa:	4603      	mov	r3, r0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <TF_Respond>:
    return TF_SendFrame(tf, msg, listener, timeout);
}

/** Like TF_Send, but with explicit frame ID (set inside the msg object), use for responses */
bool _TF_FN TF_Respond(TinyFrame *tf, TF_Msg *msg)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
    msg->is_response = true;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2201      	movs	r2, #1
 8007712:	711a      	strb	r2, [r3, #4]
    return TF_Send(tf, msg);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff ffe4 	bl	80076e4 <TF_Send>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8007726:	b480      	push	{r7}
 8007728:	b08f      	sub	sp, #60	@ 0x3c
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	891a      	ldrh	r2, [r3, #8]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	8a1b      	ldrh	r3, [r3, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d301      	bcc.n	8007740 <load_descriptor_values+0x1a>
        return false;
 800773c:	2300      	movs	r3, #0
 800773e:	e156      	b.n	80079ee <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	895b      	ldrh	r3, [r3, #10]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	b2da      	uxtb	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d05a      	beq.n	800781c <load_descriptor_values+0xf6>
 8007766:	2b02      	cmp	r3, #2
 8007768:	f200 8094 	bhi.w	8007894 <load_descriptor_values+0x16e>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <load_descriptor_values+0x50>
 8007770:	2b01      	cmp	r3, #1
 8007772:	d01f      	beq.n	80077b4 <load_descriptor_values+0x8e>
 8007774:	e08e      	b.n	8007894 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	089b      	lsrs	r3, r3, #2
 8007780:	b29b      	uxth	r3, r3
 8007782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 800778c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778e:	0e1b      	lsrs	r3, r3, #24
 8007790:	b25b      	sxtb	r3, r3
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80077a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a4:	0f1b      	lsrs	r3, r3, #28
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	825a      	strh	r2, [r3, #18]
            break;
 80077b2:	e0b4      	b.n	800791e <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	895b      	ldrh	r3, [r3, #10]
 80077be:	3301      	adds	r3, #1
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ca:	0c1b      	lsrs	r3, r3, #16
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	089b      	lsrs	r3, r3, #2
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	0f1b      	lsrs	r3, r3, #28
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	019b      	lsls	r3, r3, #6
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	0f1b      	lsrs	r3, r3, #28
 80077fa:	b25b      	sxtb	r3, r3
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	b29b      	uxth	r3, r3
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	b29b      	uxth	r3, r3
 8007810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	825a      	strh	r2, [r3, #18]
            break;
 800781a:	e080      	b.n	800791e <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	3301      	adds	r3, #1
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	895b      	ldrh	r3, [r3, #10]
 800783a:	3302      	adds	r3, #2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	895b      	ldrh	r3, [r3, #10]
 800784e:	3303      	adds	r3, #3
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8007858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	b29b      	uxth	r3, r3
 8007868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800786c:	b29a      	uxth	r2, r3
 800786e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	b29b      	uxth	r3, r3
 8007874:	019b      	lsls	r3, r3, #6
 8007876:	b29b      	uxth	r3, r3
 8007878:	4313      	orrs	r3, r2
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	825a      	strh	r2, [r3, #18]
            break;
 8007892:	e044      	b.n	800791e <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	895b      	ldrh	r3, [r3, #10]
 800789e:	3301      	adds	r3, #1
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	895b      	ldrh	r3, [r3, #10]
 80078b2:	3302      	adds	r3, #2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	895b      	ldrh	r3, [r3, #10]
 80078c6:	3303      	adds	r3, #3
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	895b      	ldrh	r3, [r3, #10]
 80078da:	3304      	adds	r3, #4
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80078ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ee:	089b      	lsrs	r3, r3, #2
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	019b      	lsls	r3, r3, #6
 8007900:	b29b      	uxth	r3, r3
 8007902:	4313      	orrs	r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	825a      	strh	r2, [r3, #18]
            break;
 800791c:	bf00      	nop
        }
    }

    if (!iter->message)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	621a      	str	r2, [r3, #32]
 8007932:	e041      	b.n	80079b8 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793a:	441a      	add	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8007940:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007950:	425b      	negs	r3, r3
 8007952:	441a      	add	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	621a      	str	r2, [r3, #32]
 8007958:	e01a      	b.n	8007990 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7d9b      	ldrb	r3, [r3, #22]
 800795e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007962:	2b20      	cmp	r3, #32
 8007964:	d111      	bne.n	800798a <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7d9b      	ldrb	r3, [r3, #22]
 800796a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7d9b      	ldrb	r3, [r3, #22]
 8007976:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800797a:	2b80      	cmp	r3, #128	@ 0x80
 800797c:	d105      	bne.n	800798a <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f103 0214 	add.w	r2, r3, #20
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]
 8007988:	e002      	b.n	8007990 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7d9b      	ldrb	r3, [r3, #22]
 8007994:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007998:	2b80      	cmp	r3, #128	@ 0x80
 800799a:	d109      	bne.n	80079b0 <load_descriptor_values+0x28a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	61da      	str	r2, [r3, #28]
 80079ae:	e003      	b.n	80079b8 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7d9b      	ldrb	r3, [r3, #22]
 80079bc:	f003 030f 	and.w	r3, r3, #15
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d005      	beq.n	80079d0 <load_descriptor_values+0x2aa>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7d9b      	ldrb	r3, [r3, #22]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d10a      	bne.n	80079e6 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	89db      	ldrh	r3, [r3, #14]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80079e4:	e002      	b.n	80079ec <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 80079ec:	2301      	movs	r3, #1
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	373c      	adds	r7, #60	@ 0x3c
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
    iter->index++;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	891b      	ldrh	r3, [r3, #8]
 8007a06:	3301      	adds	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	891a      	ldrh	r2, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	8a1b      	ldrh	r3, [r3, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d30c      	bcc.n	8007a36 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8007a34:	e03b      	b.n	8007aae <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	895b      	ldrh	r3, [r3, #10]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f003 0303 	and.w	r3, r3, #3
 8007a54:	2201      	movs	r2, #1
 8007a56:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5a:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	895a      	ldrh	r2, [r3, #10]
 8007a60:	893b      	ldrh	r3, [r7, #8]
 8007a62:	4413      	add	r3, r2
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	899b      	ldrh	r3, [r3, #12]
 8007a6e:	7afa      	ldrb	r2, [r7, #11]
 8007a70:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2201      	moveq	r2, #1
 8007a7a:	2200      	movne	r2, #0
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	4413      	add	r3, r2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	89da      	ldrh	r2, [r3, #14]
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d004      	beq.n	8007a9e <advance_iterator+0xa4>
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	2b09      	cmp	r3, #9
 8007a9c:	d101      	bne.n	8007aa2 <advance_iterator+0xa8>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <advance_iterator+0xaa>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	81da      	strh	r2, [r3, #14]
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8007ac6:	2228      	movs	r2, #40	@ 0x28
 8007ac8:	2100      	movs	r1, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fc42 	bl	8008354 <memset>

    iter->descriptor = desc;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff fe22 	bl	8007726 <load_descriptor_values>
 8007ae2:	4603      	mov	r3, r0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	0a1b      	lsrs	r3, r3, #8
 8007b0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b0e:	2b80      	cmp	r3, #128	@ 0x80
 8007b10:	d109      	bne.n	8007b26 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	3304      	adds	r3, #4
 8007b16:	461a      	mov	r2, r3
 8007b18:	6939      	ldr	r1, [r7, #16]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff ffcd 	bl	8007aba <pb_field_iter_begin>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]
 8007b24:	e008      	b.n	8007b38 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6939      	ldr	r1, [r7, #16]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff ffc3 	bl	8007aba <pb_field_iter_begin>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f103 020c 	add.w	r2, r3, #12
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	621a      	str	r2, [r3, #32]
    return status;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff50 	bl	80079fa <advance_iterator>
    (void)load_descriptor_values(iter);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff fde3 	bl	8007726 <load_descriptor_values>
    return iter->index != 0;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	891b      	ldrh	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8a1b      	ldrh	r3, [r3, #16]
 8007b84:	461a      	mov	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d101      	bne.n	8007b90 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e044      	b.n	8007c1a <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	8a9b      	ldrh	r3, [r3, #20]
 8007b96:	461a      	mov	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <pb_field_iter_find+0x2c>
    {
        return false;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e03b      	b.n	8007c1a <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	891b      	ldrh	r3, [r3, #8]
 8007ba6:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8a1b      	ldrh	r3, [r3, #16]
 8007bac:	461a      	mov	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d204      	bcs.n	8007bbe <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	8a1a      	ldrh	r2, [r3, #16]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ff1b 	bl	80079fa <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	895b      	ldrh	r3, [r3, #10]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	089a      	lsrs	r2, r3, #2
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	4053      	eors	r3, r2
 8007bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d110      	bne.n	8007c08 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fd9d 	bl	8007726 <load_descriptor_values>

                if (iter->tag == tag &&
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8a1b      	ldrh	r3, [r3, #16]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d107      	bne.n	8007c08 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7d9b      	ldrb	r3, [r3, #22]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8007c00:	2b0a      	cmp	r3, #10
 8007c02:	d001      	beq.n	8007c08 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e008      	b.n	8007c1a <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	891b      	ldrh	r3, [r3, #8]
 8007c0c:	89fa      	ldrh	r2, [r7, #14]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d1d5      	bne.n	8007bbe <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fd87 	bl	8007726 <load_descriptor_values>
        return false;
 8007c18:	2300      	movs	r3, #0
    }
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7d9b      	ldrb	r3, [r3, #22]
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	2b0a      	cmp	r3, #10
 8007c34:	d101      	bne.n	8007c3a <pb_field_iter_find_extension+0x18>
    {
        return true;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e022      	b.n	8007c80 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	891b      	ldrh	r3, [r3, #8]
 8007c3e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff feda 	bl	80079fa <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	895b      	ldrh	r3, [r3, #10]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	2b0a      	cmp	r3, #10
 8007c62:	d104      	bne.n	8007c6e <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff fd5e 	bl	8007726 <load_descriptor_values>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	e008      	b.n	8007c80 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	891b      	ldrh	r3, [r3, #8]
 8007c72:	89fa      	ldrh	r2, [r7, #14]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d1e3      	bne.n	8007c40 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff fd54 	bl	8007726 <load_descriptor_values>
        return false;
 8007c7e:	2300      	movs	r3, #0
    }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ffea 	bl	8007c88 <pb_const_cast>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff fefd 	bl	8007aba <pb_field_iter_begin>
 8007cc0:	4603      	mov	r3, r0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8007cd4:	6838      	ldr	r0, [r7, #0]
 8007cd6:	f7ff ffd7 	bl	8007c88 <pb_const_cast>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ff04 	bl	8007aec <pb_field_iter_begin_extension>
 8007ce4:	4603      	mov	r3, r0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b086      	sub	sp, #24
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8a5b      	ldrh	r3, [r3, #18]
 8007cfe:	2b08      	cmp	r3, #8
 8007d00:	d125      	bne.n	8007d4e <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01f      	beq.n	8007d4e <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <pb_default_field_callback+0x40>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	3204      	adds	r2, #4
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	4798      	blx	r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	e010      	b.n	8007d50 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00c      	beq.n	8007d4e <pb_default_field_callback+0x60>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	3204      	adds	r2, #4
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	68b8      	ldr	r0, [r7, #8]
 8007d48:	4798      	blx	r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	e000      	b.n	8007d50 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8007d4e:	2301      	movs	r3, #1

}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <calloc>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	@ (8007d64 <calloc+0xc>)
 8007d5a:	460a      	mov	r2, r1
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	f000 b802 	b.w	8007d68 <_calloc_r>
 8007d64:	20000024 	.word	0x20000024

08007d68 <_calloc_r>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	fba1 5402 	umull	r5, r4, r1, r2
 8007d6e:	b934      	cbnz	r4, 8007d7e <_calloc_r+0x16>
 8007d70:	4629      	mov	r1, r5
 8007d72:	f000 f837 	bl	8007de4 <_malloc_r>
 8007d76:	4606      	mov	r6, r0
 8007d78:	b928      	cbnz	r0, 8007d86 <_calloc_r+0x1e>
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
 8007d7e:	220c      	movs	r2, #12
 8007d80:	6002      	str	r2, [r0, #0]
 8007d82:	2600      	movs	r6, #0
 8007d84:	e7f9      	b.n	8007d7a <_calloc_r+0x12>
 8007d86:	462a      	mov	r2, r5
 8007d88:	4621      	mov	r1, r4
 8007d8a:	f000 fae3 	bl	8008354 <memset>
 8007d8e:	e7f4      	b.n	8007d7a <_calloc_r+0x12>

08007d90 <free>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	@ (8007d9c <free+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f000 bb77 	b.w	8008488 <_free_r>
 8007d9a:	bf00      	nop
 8007d9c:	20000024 	.word	0x20000024

08007da0 <sbrk_aligned>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4e0f      	ldr	r6, [pc, #60]	@ (8007de0 <sbrk_aligned+0x40>)
 8007da4:	460c      	mov	r4, r1
 8007da6:	6831      	ldr	r1, [r6, #0]
 8007da8:	4605      	mov	r5, r0
 8007daa:	b911      	cbnz	r1, 8007db2 <sbrk_aligned+0x12>
 8007dac:	f000 fb0e 	bl	80083cc <_sbrk_r>
 8007db0:	6030      	str	r0, [r6, #0]
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 fb09 	bl	80083cc <_sbrk_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	d103      	bne.n	8007dc6 <sbrk_aligned+0x26>
 8007dbe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	1cc4      	adds	r4, r0, #3
 8007dc8:	f024 0403 	bic.w	r4, r4, #3
 8007dcc:	42a0      	cmp	r0, r4
 8007dce:	d0f8      	beq.n	8007dc2 <sbrk_aligned+0x22>
 8007dd0:	1a21      	subs	r1, r4, r0
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fafa 	bl	80083cc <_sbrk_r>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d1f2      	bne.n	8007dc2 <sbrk_aligned+0x22>
 8007ddc:	e7ef      	b.n	8007dbe <sbrk_aligned+0x1e>
 8007dde:	bf00      	nop
 8007de0:	20000da4 	.word	0x20000da4

08007de4 <_malloc_r>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	1ccd      	adds	r5, r1, #3
 8007dea:	f025 0503 	bic.w	r5, r5, #3
 8007dee:	3508      	adds	r5, #8
 8007df0:	2d0c      	cmp	r5, #12
 8007df2:	bf38      	it	cc
 8007df4:	250c      	movcc	r5, #12
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	4606      	mov	r6, r0
 8007dfa:	db01      	blt.n	8007e00 <_malloc_r+0x1c>
 8007dfc:	42a9      	cmp	r1, r5
 8007dfe:	d904      	bls.n	8007e0a <_malloc_r+0x26>
 8007e00:	230c      	movs	r3, #12
 8007e02:	6033      	str	r3, [r6, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee0 <_malloc_r+0xfc>
 8007e0e:	f000 f869 	bl	8007ee4 <__malloc_lock>
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	461c      	mov	r4, r3
 8007e18:	bb44      	cbnz	r4, 8007e6c <_malloc_r+0x88>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ffbf 	bl	8007da0 <sbrk_aligned>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	4604      	mov	r4, r0
 8007e26:	d158      	bne.n	8007eda <_malloc_r+0xf6>
 8007e28:	f8d8 4000 	ldr.w	r4, [r8]
 8007e2c:	4627      	mov	r7, r4
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d143      	bne.n	8007eba <_malloc_r+0xd6>
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	d04b      	beq.n	8007ece <_malloc_r+0xea>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	eb04 0903 	add.w	r9, r4, r3
 8007e40:	f000 fac4 	bl	80083cc <_sbrk_r>
 8007e44:	4581      	cmp	r9, r0
 8007e46:	d142      	bne.n	8007ece <_malloc_r+0xea>
 8007e48:	6821      	ldr	r1, [r4, #0]
 8007e4a:	1a6d      	subs	r5, r5, r1
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ffa6 	bl	8007da0 <sbrk_aligned>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d03a      	beq.n	8007ece <_malloc_r+0xea>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	442b      	add	r3, r5
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	bb62      	cbnz	r2, 8007ec0 <_malloc_r+0xdc>
 8007e66:	f8c8 7000 	str.w	r7, [r8]
 8007e6a:	e00f      	b.n	8007e8c <_malloc_r+0xa8>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	1b52      	subs	r2, r2, r5
 8007e70:	d420      	bmi.n	8007eb4 <_malloc_r+0xd0>
 8007e72:	2a0b      	cmp	r2, #11
 8007e74:	d917      	bls.n	8007ea6 <_malloc_r+0xc2>
 8007e76:	1961      	adds	r1, r4, r5
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	bf18      	it	ne
 8007e7e:	6059      	strne	r1, [r3, #4]
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	bf08      	it	eq
 8007e84:	f8c8 1000 	streq.w	r1, [r8]
 8007e88:	5162      	str	r2, [r4, r5]
 8007e8a:	604b      	str	r3, [r1, #4]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 f82f 	bl	8007ef0 <__malloc_unlock>
 8007e92:	f104 000b 	add.w	r0, r4, #11
 8007e96:	1d23      	adds	r3, r4, #4
 8007e98:	f020 0007 	bic.w	r0, r0, #7
 8007e9c:	1ac2      	subs	r2, r0, r3
 8007e9e:	bf1c      	itt	ne
 8007ea0:	1a1b      	subne	r3, r3, r0
 8007ea2:	50a3      	strne	r3, [r4, r2]
 8007ea4:	e7af      	b.n	8007e06 <_malloc_r+0x22>
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	bf0c      	ite	eq
 8007eac:	f8c8 2000 	streq.w	r2, [r8]
 8007eb0:	605a      	strne	r2, [r3, #4]
 8007eb2:	e7eb      	b.n	8007e8c <_malloc_r+0xa8>
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	6864      	ldr	r4, [r4, #4]
 8007eb8:	e7ae      	b.n	8007e18 <_malloc_r+0x34>
 8007eba:	463c      	mov	r4, r7
 8007ebc:	687f      	ldr	r7, [r7, #4]
 8007ebe:	e7b6      	b.n	8007e2e <_malloc_r+0x4a>
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d1fb      	bne.n	8007ec0 <_malloc_r+0xdc>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6053      	str	r3, [r2, #4]
 8007ecc:	e7de      	b.n	8007e8c <_malloc_r+0xa8>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	6033      	str	r3, [r6, #0]
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f80c 	bl	8007ef0 <__malloc_unlock>
 8007ed8:	e794      	b.n	8007e04 <_malloc_r+0x20>
 8007eda:	6005      	str	r5, [r0, #0]
 8007edc:	e7d6      	b.n	8007e8c <_malloc_r+0xa8>
 8007ede:	bf00      	nop
 8007ee0:	20000da8 	.word	0x20000da8

08007ee4 <__malloc_lock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	@ (8007eec <__malloc_lock+0x8>)
 8007ee6:	f000 babe 	b.w	8008466 <__retarget_lock_acquire_recursive>
 8007eea:	bf00      	nop
 8007eec:	20000eec 	.word	0x20000eec

08007ef0 <__malloc_unlock>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	@ (8007ef8 <__malloc_unlock+0x8>)
 8007ef2:	f000 bab9 	b.w	8008468 <__retarget_lock_release_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20000eec 	.word	0x20000eec

08007efc <std>:
 8007efc:	2300      	movs	r3, #0
 8007efe:	b510      	push	{r4, lr}
 8007f00:	4604      	mov	r4, r0
 8007f02:	e9c0 3300 	strd	r3, r3, [r0]
 8007f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f0a:	6083      	str	r3, [r0, #8]
 8007f0c:	8181      	strh	r1, [r0, #12]
 8007f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f10:	81c2      	strh	r2, [r0, #14]
 8007f12:	6183      	str	r3, [r0, #24]
 8007f14:	4619      	mov	r1, r3
 8007f16:	2208      	movs	r2, #8
 8007f18:	305c      	adds	r0, #92	@ 0x5c
 8007f1a:	f000 fa1b 	bl	8008354 <memset>
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f54 <std+0x58>)
 8007f20:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f22:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <std+0x5c>)
 8007f24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <std+0x60>)
 8007f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <std+0x64>)
 8007f2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x68>)
 8007f30:	6224      	str	r4, [r4, #32]
 8007f32:	429c      	cmp	r4, r3
 8007f34:	d006      	beq.n	8007f44 <std+0x48>
 8007f36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f3a:	4294      	cmp	r4, r2
 8007f3c:	d002      	beq.n	8007f44 <std+0x48>
 8007f3e:	33d0      	adds	r3, #208	@ 0xd0
 8007f40:	429c      	cmp	r4, r3
 8007f42:	d105      	bne.n	8007f50 <std+0x54>
 8007f44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4c:	f000 ba8a 	b.w	8008464 <__retarget_lock_init_recursive>
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	bf00      	nop
 8007f54:	080081a5 	.word	0x080081a5
 8007f58:	080081c7 	.word	0x080081c7
 8007f5c:	080081ff 	.word	0x080081ff
 8007f60:	08008223 	.word	0x08008223
 8007f64:	20000dac 	.word	0x20000dac

08007f68 <stdio_exit_handler>:
 8007f68:	4a02      	ldr	r2, [pc, #8]	@ (8007f74 <stdio_exit_handler+0xc>)
 8007f6a:	4903      	ldr	r1, [pc, #12]	@ (8007f78 <stdio_exit_handler+0x10>)
 8007f6c:	4803      	ldr	r0, [pc, #12]	@ (8007f7c <stdio_exit_handler+0x14>)
 8007f6e:	f000 b869 	b.w	8008044 <_fwalk_sglue>
 8007f72:	bf00      	nop
 8007f74:	20000018 	.word	0x20000018
 8007f78:	08008e71 	.word	0x08008e71
 8007f7c:	20000028 	.word	0x20000028

08007f80 <cleanup_stdio>:
 8007f80:	6841      	ldr	r1, [r0, #4]
 8007f82:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb4 <cleanup_stdio+0x34>)
 8007f84:	4299      	cmp	r1, r3
 8007f86:	b510      	push	{r4, lr}
 8007f88:	4604      	mov	r4, r0
 8007f8a:	d001      	beq.n	8007f90 <cleanup_stdio+0x10>
 8007f8c:	f000 ff70 	bl	8008e70 <_fflush_r>
 8007f90:	68a1      	ldr	r1, [r4, #8]
 8007f92:	4b09      	ldr	r3, [pc, #36]	@ (8007fb8 <cleanup_stdio+0x38>)
 8007f94:	4299      	cmp	r1, r3
 8007f96:	d002      	beq.n	8007f9e <cleanup_stdio+0x1e>
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 ff69 	bl	8008e70 <_fflush_r>
 8007f9e:	68e1      	ldr	r1, [r4, #12]
 8007fa0:	4b06      	ldr	r3, [pc, #24]	@ (8007fbc <cleanup_stdio+0x3c>)
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	d004      	beq.n	8007fb0 <cleanup_stdio+0x30>
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fac:	f000 bf60 	b.w	8008e70 <_fflush_r>
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000dac 	.word	0x20000dac
 8007fb8:	20000e14 	.word	0x20000e14
 8007fbc:	20000e7c 	.word	0x20000e7c

08007fc0 <global_stdio_init.part.0>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <global_stdio_init.part.0+0x30>)
 8007fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8007ff4 <global_stdio_init.part.0+0x34>)
 8007fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8007ff8 <global_stdio_init.part.0+0x38>)
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2104      	movs	r1, #4
 8007fd0:	f7ff ff94 	bl	8007efc <std>
 8007fd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fd8:	2201      	movs	r2, #1
 8007fda:	2109      	movs	r1, #9
 8007fdc:	f7ff ff8e 	bl	8007efc <std>
 8007fe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fea:	2112      	movs	r1, #18
 8007fec:	f7ff bf86 	b.w	8007efc <std>
 8007ff0:	20000ee4 	.word	0x20000ee4
 8007ff4:	20000dac 	.word	0x20000dac
 8007ff8:	08007f69 	.word	0x08007f69

08007ffc <__sfp_lock_acquire>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__sfp_lock_acquire+0x8>)
 8007ffe:	f000 ba32 	b.w	8008466 <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20000eed 	.word	0x20000eed

08008008 <__sfp_lock_release>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__sfp_lock_release+0x8>)
 800800a:	f000 ba2d 	b.w	8008468 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20000eed 	.word	0x20000eed

08008014 <__sinit>:
 8008014:	b510      	push	{r4, lr}
 8008016:	4604      	mov	r4, r0
 8008018:	f7ff fff0 	bl	8007ffc <__sfp_lock_acquire>
 800801c:	6a23      	ldr	r3, [r4, #32]
 800801e:	b11b      	cbz	r3, 8008028 <__sinit+0x14>
 8008020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008024:	f7ff bff0 	b.w	8008008 <__sfp_lock_release>
 8008028:	4b04      	ldr	r3, [pc, #16]	@ (800803c <__sinit+0x28>)
 800802a:	6223      	str	r3, [r4, #32]
 800802c:	4b04      	ldr	r3, [pc, #16]	@ (8008040 <__sinit+0x2c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1f5      	bne.n	8008020 <__sinit+0xc>
 8008034:	f7ff ffc4 	bl	8007fc0 <global_stdio_init.part.0>
 8008038:	e7f2      	b.n	8008020 <__sinit+0xc>
 800803a:	bf00      	nop
 800803c:	08007f81 	.word	0x08007f81
 8008040:	20000ee4 	.word	0x20000ee4

08008044 <_fwalk_sglue>:
 8008044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008048:	4607      	mov	r7, r0
 800804a:	4688      	mov	r8, r1
 800804c:	4614      	mov	r4, r2
 800804e:	2600      	movs	r6, #0
 8008050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008054:	f1b9 0901 	subs.w	r9, r9, #1
 8008058:	d505      	bpl.n	8008066 <_fwalk_sglue+0x22>
 800805a:	6824      	ldr	r4, [r4, #0]
 800805c:	2c00      	cmp	r4, #0
 800805e:	d1f7      	bne.n	8008050 <_fwalk_sglue+0xc>
 8008060:	4630      	mov	r0, r6
 8008062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d907      	bls.n	800807c <_fwalk_sglue+0x38>
 800806c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008070:	3301      	adds	r3, #1
 8008072:	d003      	beq.n	800807c <_fwalk_sglue+0x38>
 8008074:	4629      	mov	r1, r5
 8008076:	4638      	mov	r0, r7
 8008078:	47c0      	blx	r8
 800807a:	4306      	orrs	r6, r0
 800807c:	3568      	adds	r5, #104	@ 0x68
 800807e:	e7e9      	b.n	8008054 <_fwalk_sglue+0x10>

08008080 <iprintf>:
 8008080:	b40f      	push	{r0, r1, r2, r3}
 8008082:	b507      	push	{r0, r1, r2, lr}
 8008084:	4906      	ldr	r1, [pc, #24]	@ (80080a0 <iprintf+0x20>)
 8008086:	ab04      	add	r3, sp, #16
 8008088:	6808      	ldr	r0, [r1, #0]
 800808a:	f853 2b04 	ldr.w	r2, [r3], #4
 800808e:	6881      	ldr	r1, [r0, #8]
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	f000 fbc5 	bl	8008820 <_vfiprintf_r>
 8008096:	b003      	add	sp, #12
 8008098:	f85d eb04 	ldr.w	lr, [sp], #4
 800809c:	b004      	add	sp, #16
 800809e:	4770      	bx	lr
 80080a0:	20000024 	.word	0x20000024

080080a4 <_puts_r>:
 80080a4:	6a03      	ldr	r3, [r0, #32]
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	6884      	ldr	r4, [r0, #8]
 80080aa:	4605      	mov	r5, r0
 80080ac:	460e      	mov	r6, r1
 80080ae:	b90b      	cbnz	r3, 80080b4 <_puts_r+0x10>
 80080b0:	f7ff ffb0 	bl	8008014 <__sinit>
 80080b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080b6:	07db      	lsls	r3, r3, #31
 80080b8:	d405      	bmi.n	80080c6 <_puts_r+0x22>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	0598      	lsls	r0, r3, #22
 80080be:	d402      	bmi.n	80080c6 <_puts_r+0x22>
 80080c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080c2:	f000 f9d0 	bl	8008466 <__retarget_lock_acquire_recursive>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	0719      	lsls	r1, r3, #28
 80080ca:	d502      	bpl.n	80080d2 <_puts_r+0x2e>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d135      	bne.n	800813e <_puts_r+0x9a>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4628      	mov	r0, r5
 80080d6:	f000 f8e7 	bl	80082a8 <__swsetup_r>
 80080da:	b380      	cbz	r0, 800813e <_puts_r+0x9a>
 80080dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80080e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e2:	07da      	lsls	r2, r3, #31
 80080e4:	d405      	bmi.n	80080f2 <_puts_r+0x4e>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	059b      	lsls	r3, r3, #22
 80080ea:	d402      	bmi.n	80080f2 <_puts_r+0x4e>
 80080ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ee:	f000 f9bb 	bl	8008468 <__retarget_lock_release_recursive>
 80080f2:	4628      	mov	r0, r5
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	da04      	bge.n	8008104 <_puts_r+0x60>
 80080fa:	69a2      	ldr	r2, [r4, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	dc17      	bgt.n	8008130 <_puts_r+0x8c>
 8008100:	290a      	cmp	r1, #10
 8008102:	d015      	beq.n	8008130 <_puts_r+0x8c>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	6022      	str	r2, [r4, #0]
 800810a:	7019      	strb	r1, [r3, #0]
 800810c:	68a3      	ldr	r3, [r4, #8]
 800810e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008112:	3b01      	subs	r3, #1
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	2900      	cmp	r1, #0
 8008118:	d1ed      	bne.n	80080f6 <_puts_r+0x52>
 800811a:	2b00      	cmp	r3, #0
 800811c:	da11      	bge.n	8008142 <_puts_r+0x9e>
 800811e:	4622      	mov	r2, r4
 8008120:	210a      	movs	r1, #10
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f881 	bl	800822a <__swbuf_r>
 8008128:	3001      	adds	r0, #1
 800812a:	d0d7      	beq.n	80080dc <_puts_r+0x38>
 800812c:	250a      	movs	r5, #10
 800812e:	e7d7      	b.n	80080e0 <_puts_r+0x3c>
 8008130:	4622      	mov	r2, r4
 8008132:	4628      	mov	r0, r5
 8008134:	f000 f879 	bl	800822a <__swbuf_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d1e7      	bne.n	800810c <_puts_r+0x68>
 800813c:	e7ce      	b.n	80080dc <_puts_r+0x38>
 800813e:	3e01      	subs	r6, #1
 8008140:	e7e4      	b.n	800810c <_puts_r+0x68>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	6022      	str	r2, [r4, #0]
 8008148:	220a      	movs	r2, #10
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e7ee      	b.n	800812c <_puts_r+0x88>
	...

08008150 <puts>:
 8008150:	4b02      	ldr	r3, [pc, #8]	@ (800815c <puts+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7ff bfa5 	b.w	80080a4 <_puts_r>
 800815a:	bf00      	nop
 800815c:	20000024 	.word	0x20000024

08008160 <siprintf>:
 8008160:	b40e      	push	{r1, r2, r3}
 8008162:	b510      	push	{r4, lr}
 8008164:	b09d      	sub	sp, #116	@ 0x74
 8008166:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008168:	9002      	str	r0, [sp, #8]
 800816a:	9006      	str	r0, [sp, #24]
 800816c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008170:	480a      	ldr	r0, [pc, #40]	@ (800819c <siprintf+0x3c>)
 8008172:	9107      	str	r1, [sp, #28]
 8008174:	9104      	str	r1, [sp, #16]
 8008176:	490a      	ldr	r1, [pc, #40]	@ (80081a0 <siprintf+0x40>)
 8008178:	f853 2b04 	ldr.w	r2, [r3], #4
 800817c:	9105      	str	r1, [sp, #20]
 800817e:	2400      	movs	r4, #0
 8008180:	a902      	add	r1, sp, #8
 8008182:	6800      	ldr	r0, [r0, #0]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008188:	f000 fa24 	bl	80085d4 <_svfiprintf_r>
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	701c      	strb	r4, [r3, #0]
 8008190:	b01d      	add	sp, #116	@ 0x74
 8008192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008196:	b003      	add	sp, #12
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000024 	.word	0x20000024
 80081a0:	ffff0208 	.word	0xffff0208

080081a4 <__sread>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	460c      	mov	r4, r1
 80081a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ac:	f000 f8fc 	bl	80083a8 <_read_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	bfab      	itete	ge
 80081b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081b6:	89a3      	ldrhlt	r3, [r4, #12]
 80081b8:	181b      	addge	r3, r3, r0
 80081ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081be:	bfac      	ite	ge
 80081c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081c2:	81a3      	strhlt	r3, [r4, #12]
 80081c4:	bd10      	pop	{r4, pc}

080081c6 <__swrite>:
 80081c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ca:	461f      	mov	r7, r3
 80081cc:	898b      	ldrh	r3, [r1, #12]
 80081ce:	05db      	lsls	r3, r3, #23
 80081d0:	4605      	mov	r5, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4616      	mov	r6, r2
 80081d6:	d505      	bpl.n	80081e4 <__swrite+0x1e>
 80081d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081dc:	2302      	movs	r3, #2
 80081de:	2200      	movs	r2, #0
 80081e0:	f000 f8d0 	bl	8008384 <_lseek_r>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	4632      	mov	r2, r6
 80081f2:	463b      	mov	r3, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081fa:	f000 b8f7 	b.w	80083ec <_write_r>

080081fe <__sseek>:
 80081fe:	b510      	push	{r4, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008206:	f000 f8bd 	bl	8008384 <_lseek_r>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	bf15      	itete	ne
 8008210:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800821a:	81a3      	strheq	r3, [r4, #12]
 800821c:	bf18      	it	ne
 800821e:	81a3      	strhne	r3, [r4, #12]
 8008220:	bd10      	pop	{r4, pc}

08008222 <__sclose>:
 8008222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008226:	f000 b89d 	b.w	8008364 <_close_r>

0800822a <__swbuf_r>:
 800822a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822c:	460e      	mov	r6, r1
 800822e:	4614      	mov	r4, r2
 8008230:	4605      	mov	r5, r0
 8008232:	b118      	cbz	r0, 800823c <__swbuf_r+0x12>
 8008234:	6a03      	ldr	r3, [r0, #32]
 8008236:	b90b      	cbnz	r3, 800823c <__swbuf_r+0x12>
 8008238:	f7ff feec 	bl	8008014 <__sinit>
 800823c:	69a3      	ldr	r3, [r4, #24]
 800823e:	60a3      	str	r3, [r4, #8]
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	071a      	lsls	r2, r3, #28
 8008244:	d501      	bpl.n	800824a <__swbuf_r+0x20>
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	b943      	cbnz	r3, 800825c <__swbuf_r+0x32>
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f82b 	bl	80082a8 <__swsetup_r>
 8008252:	b118      	cbz	r0, 800825c <__swbuf_r+0x32>
 8008254:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008258:	4638      	mov	r0, r7
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	6922      	ldr	r2, [r4, #16]
 8008260:	1a98      	subs	r0, r3, r2
 8008262:	6963      	ldr	r3, [r4, #20]
 8008264:	b2f6      	uxtb	r6, r6
 8008266:	4283      	cmp	r3, r0
 8008268:	4637      	mov	r7, r6
 800826a:	dc05      	bgt.n	8008278 <__swbuf_r+0x4e>
 800826c:	4621      	mov	r1, r4
 800826e:	4628      	mov	r0, r5
 8008270:	f000 fdfe 	bl	8008e70 <_fflush_r>
 8008274:	2800      	cmp	r0, #0
 8008276:	d1ed      	bne.n	8008254 <__swbuf_r+0x2a>
 8008278:	68a3      	ldr	r3, [r4, #8]
 800827a:	3b01      	subs	r3, #1
 800827c:	60a3      	str	r3, [r4, #8]
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	701e      	strb	r6, [r3, #0]
 8008286:	6962      	ldr	r2, [r4, #20]
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	429a      	cmp	r2, r3
 800828c:	d004      	beq.n	8008298 <__swbuf_r+0x6e>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	07db      	lsls	r3, r3, #31
 8008292:	d5e1      	bpl.n	8008258 <__swbuf_r+0x2e>
 8008294:	2e0a      	cmp	r6, #10
 8008296:	d1df      	bne.n	8008258 <__swbuf_r+0x2e>
 8008298:	4621      	mov	r1, r4
 800829a:	4628      	mov	r0, r5
 800829c:	f000 fde8 	bl	8008e70 <_fflush_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d0d9      	beq.n	8008258 <__swbuf_r+0x2e>
 80082a4:	e7d6      	b.n	8008254 <__swbuf_r+0x2a>
	...

080082a8 <__swsetup_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4b29      	ldr	r3, [pc, #164]	@ (8008350 <__swsetup_r+0xa8>)
 80082ac:	4605      	mov	r5, r0
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	460c      	mov	r4, r1
 80082b2:	b118      	cbz	r0, 80082bc <__swsetup_r+0x14>
 80082b4:	6a03      	ldr	r3, [r0, #32]
 80082b6:	b90b      	cbnz	r3, 80082bc <__swsetup_r+0x14>
 80082b8:	f7ff feac 	bl	8008014 <__sinit>
 80082bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c0:	0719      	lsls	r1, r3, #28
 80082c2:	d422      	bmi.n	800830a <__swsetup_r+0x62>
 80082c4:	06da      	lsls	r2, r3, #27
 80082c6:	d407      	bmi.n	80082d8 <__swsetup_r+0x30>
 80082c8:	2209      	movs	r2, #9
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082d6:	e033      	b.n	8008340 <__swsetup_r+0x98>
 80082d8:	0758      	lsls	r0, r3, #29
 80082da:	d512      	bpl.n	8008302 <__swsetup_r+0x5a>
 80082dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082de:	b141      	cbz	r1, 80082f2 <__swsetup_r+0x4a>
 80082e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082e4:	4299      	cmp	r1, r3
 80082e6:	d002      	beq.n	80082ee <__swsetup_r+0x46>
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 f8cd 	bl	8008488 <_free_r>
 80082ee:	2300      	movs	r3, #0
 80082f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	2300      	movs	r3, #0
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	f043 0308 	orr.w	r3, r3, #8
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	6923      	ldr	r3, [r4, #16]
 800830c:	b94b      	cbnz	r3, 8008322 <__swsetup_r+0x7a>
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008318:	d003      	beq.n	8008322 <__swsetup_r+0x7a>
 800831a:	4621      	mov	r1, r4
 800831c:	4628      	mov	r0, r5
 800831e:	f000 fdf5 	bl	8008f0c <__smakebuf_r>
 8008322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008326:	f013 0201 	ands.w	r2, r3, #1
 800832a:	d00a      	beq.n	8008342 <__swsetup_r+0x9a>
 800832c:	2200      	movs	r2, #0
 800832e:	60a2      	str	r2, [r4, #8]
 8008330:	6962      	ldr	r2, [r4, #20]
 8008332:	4252      	negs	r2, r2
 8008334:	61a2      	str	r2, [r4, #24]
 8008336:	6922      	ldr	r2, [r4, #16]
 8008338:	b942      	cbnz	r2, 800834c <__swsetup_r+0xa4>
 800833a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800833e:	d1c5      	bne.n	80082cc <__swsetup_r+0x24>
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	0799      	lsls	r1, r3, #30
 8008344:	bf58      	it	pl
 8008346:	6962      	ldrpl	r2, [r4, #20]
 8008348:	60a2      	str	r2, [r4, #8]
 800834a:	e7f4      	b.n	8008336 <__swsetup_r+0x8e>
 800834c:	2000      	movs	r0, #0
 800834e:	e7f7      	b.n	8008340 <__swsetup_r+0x98>
 8008350:	20000024 	.word	0x20000024

08008354 <memset>:
 8008354:	4402      	add	r2, r0
 8008356:	4603      	mov	r3, r0
 8008358:	4293      	cmp	r3, r2
 800835a:	d100      	bne.n	800835e <memset+0xa>
 800835c:	4770      	bx	lr
 800835e:	f803 1b01 	strb.w	r1, [r3], #1
 8008362:	e7f9      	b.n	8008358 <memset+0x4>

08008364 <_close_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d06      	ldr	r5, [pc, #24]	@ (8008380 <_close_r+0x1c>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7f8 fd73 	bl	8000e5a <_close>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_close_r+0x1a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_close_r+0x1a>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20000ee8 	.word	0x20000ee8

08008384 <_lseek_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	@ (80083a4 <_lseek_r+0x20>)
 8008388:	4604      	mov	r4, r0
 800838a:	4608      	mov	r0, r1
 800838c:	4611      	mov	r1, r2
 800838e:	2200      	movs	r2, #0
 8008390:	602a      	str	r2, [r5, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	f7f8 fd88 	bl	8000ea8 <_lseek>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_lseek_r+0x1e>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_lseek_r+0x1e>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20000ee8 	.word	0x20000ee8

080083a8 <_read_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d07      	ldr	r5, [pc, #28]	@ (80083c8 <_read_r+0x20>)
 80083ac:	4604      	mov	r4, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	4611      	mov	r1, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f7f8 fd16 	bl	8000de8 <_read>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_read_r+0x1e>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_read_r+0x1e>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	20000ee8 	.word	0x20000ee8

080083cc <_sbrk_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_sbrk_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f8 fd74 	bl	8000ec4 <_sbrk>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_sbrk_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_sbrk_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000ee8 	.word	0x20000ee8

080083ec <_write_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	@ (800840c <_write_r+0x20>)
 80083f0:	4604      	mov	r4, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7f8 fd11 	bl	8000e22 <_write>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_write_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_write_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20000ee8 	.word	0x20000ee8

08008410 <__errno>:
 8008410:	4b01      	ldr	r3, [pc, #4]	@ (8008418 <__errno+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20000024 	.word	0x20000024

0800841c <__libc_init_array>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4d0d      	ldr	r5, [pc, #52]	@ (8008454 <__libc_init_array+0x38>)
 8008420:	4c0d      	ldr	r4, [pc, #52]	@ (8008458 <__libc_init_array+0x3c>)
 8008422:	1b64      	subs	r4, r4, r5
 8008424:	10a4      	asrs	r4, r4, #2
 8008426:	2600      	movs	r6, #0
 8008428:	42a6      	cmp	r6, r4
 800842a:	d109      	bne.n	8008440 <__libc_init_array+0x24>
 800842c:	4d0b      	ldr	r5, [pc, #44]	@ (800845c <__libc_init_array+0x40>)
 800842e:	4c0c      	ldr	r4, [pc, #48]	@ (8008460 <__libc_init_array+0x44>)
 8008430:	f000 fe1a 	bl	8009068 <_init>
 8008434:	1b64      	subs	r4, r4, r5
 8008436:	10a4      	asrs	r4, r4, #2
 8008438:	2600      	movs	r6, #0
 800843a:	42a6      	cmp	r6, r4
 800843c:	d105      	bne.n	800844a <__libc_init_array+0x2e>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	f855 3b04 	ldr.w	r3, [r5], #4
 8008444:	4798      	blx	r3
 8008446:	3601      	adds	r6, #1
 8008448:	e7ee      	b.n	8008428 <__libc_init_array+0xc>
 800844a:	f855 3b04 	ldr.w	r3, [r5], #4
 800844e:	4798      	blx	r3
 8008450:	3601      	adds	r6, #1
 8008452:	e7f2      	b.n	800843a <__libc_init_array+0x1e>
 8008454:	08009a1c 	.word	0x08009a1c
 8008458:	08009a1c 	.word	0x08009a1c
 800845c:	08009a1c 	.word	0x08009a1c
 8008460:	08009a20 	.word	0x08009a20

08008464 <__retarget_lock_init_recursive>:
 8008464:	4770      	bx	lr

08008466 <__retarget_lock_acquire_recursive>:
 8008466:	4770      	bx	lr

08008468 <__retarget_lock_release_recursive>:
 8008468:	4770      	bx	lr

0800846a <memcpy>:
 800846a:	440a      	add	r2, r1
 800846c:	4291      	cmp	r1, r2
 800846e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008472:	d100      	bne.n	8008476 <memcpy+0xc>
 8008474:	4770      	bx	lr
 8008476:	b510      	push	{r4, lr}
 8008478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800847c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008480:	4291      	cmp	r1, r2
 8008482:	d1f9      	bne.n	8008478 <memcpy+0xe>
 8008484:	bd10      	pop	{r4, pc}
	...

08008488 <_free_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4605      	mov	r5, r0
 800848c:	2900      	cmp	r1, #0
 800848e:	d041      	beq.n	8008514 <_free_r+0x8c>
 8008490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008494:	1f0c      	subs	r4, r1, #4
 8008496:	2b00      	cmp	r3, #0
 8008498:	bfb8      	it	lt
 800849a:	18e4      	addlt	r4, r4, r3
 800849c:	f7ff fd22 	bl	8007ee4 <__malloc_lock>
 80084a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008518 <_free_r+0x90>)
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	b933      	cbnz	r3, 80084b4 <_free_r+0x2c>
 80084a6:	6063      	str	r3, [r4, #4]
 80084a8:	6014      	str	r4, [r2, #0]
 80084aa:	4628      	mov	r0, r5
 80084ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b0:	f7ff bd1e 	b.w	8007ef0 <__malloc_unlock>
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d908      	bls.n	80084ca <_free_r+0x42>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	1821      	adds	r1, r4, r0
 80084bc:	428b      	cmp	r3, r1
 80084be:	bf01      	itttt	eq
 80084c0:	6819      	ldreq	r1, [r3, #0]
 80084c2:	685b      	ldreq	r3, [r3, #4]
 80084c4:	1809      	addeq	r1, r1, r0
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	e7ed      	b.n	80084a6 <_free_r+0x1e>
 80084ca:	461a      	mov	r2, r3
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	b10b      	cbz	r3, 80084d4 <_free_r+0x4c>
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	d9fa      	bls.n	80084ca <_free_r+0x42>
 80084d4:	6811      	ldr	r1, [r2, #0]
 80084d6:	1850      	adds	r0, r2, r1
 80084d8:	42a0      	cmp	r0, r4
 80084da:	d10b      	bne.n	80084f4 <_free_r+0x6c>
 80084dc:	6820      	ldr	r0, [r4, #0]
 80084de:	4401      	add	r1, r0
 80084e0:	1850      	adds	r0, r2, r1
 80084e2:	4283      	cmp	r3, r0
 80084e4:	6011      	str	r1, [r2, #0]
 80084e6:	d1e0      	bne.n	80084aa <_free_r+0x22>
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	6053      	str	r3, [r2, #4]
 80084ee:	4408      	add	r0, r1
 80084f0:	6010      	str	r0, [r2, #0]
 80084f2:	e7da      	b.n	80084aa <_free_r+0x22>
 80084f4:	d902      	bls.n	80084fc <_free_r+0x74>
 80084f6:	230c      	movs	r3, #12
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	e7d6      	b.n	80084aa <_free_r+0x22>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	1821      	adds	r1, r4, r0
 8008500:	428b      	cmp	r3, r1
 8008502:	bf04      	itt	eq
 8008504:	6819      	ldreq	r1, [r3, #0]
 8008506:	685b      	ldreq	r3, [r3, #4]
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	bf04      	itt	eq
 800850c:	1809      	addeq	r1, r1, r0
 800850e:	6021      	streq	r1, [r4, #0]
 8008510:	6054      	str	r4, [r2, #4]
 8008512:	e7ca      	b.n	80084aa <_free_r+0x22>
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	bf00      	nop
 8008518:	20000da8 	.word	0x20000da8

0800851c <__ssputs_r>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	688e      	ldr	r6, [r1, #8]
 8008522:	461f      	mov	r7, r3
 8008524:	42be      	cmp	r6, r7
 8008526:	680b      	ldr	r3, [r1, #0]
 8008528:	4682      	mov	sl, r0
 800852a:	460c      	mov	r4, r1
 800852c:	4690      	mov	r8, r2
 800852e:	d82d      	bhi.n	800858c <__ssputs_r+0x70>
 8008530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008538:	d026      	beq.n	8008588 <__ssputs_r+0x6c>
 800853a:	6965      	ldr	r5, [r4, #20]
 800853c:	6909      	ldr	r1, [r1, #16]
 800853e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008542:	eba3 0901 	sub.w	r9, r3, r1
 8008546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800854a:	1c7b      	adds	r3, r7, #1
 800854c:	444b      	add	r3, r9
 800854e:	106d      	asrs	r5, r5, #1
 8008550:	429d      	cmp	r5, r3
 8008552:	bf38      	it	cc
 8008554:	461d      	movcc	r5, r3
 8008556:	0553      	lsls	r3, r2, #21
 8008558:	d527      	bpl.n	80085aa <__ssputs_r+0x8e>
 800855a:	4629      	mov	r1, r5
 800855c:	f7ff fc42 	bl	8007de4 <_malloc_r>
 8008560:	4606      	mov	r6, r0
 8008562:	b360      	cbz	r0, 80085be <__ssputs_r+0xa2>
 8008564:	6921      	ldr	r1, [r4, #16]
 8008566:	464a      	mov	r2, r9
 8008568:	f7ff ff7f 	bl	800846a <memcpy>
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	6126      	str	r6, [r4, #16]
 800857a:	6165      	str	r5, [r4, #20]
 800857c:	444e      	add	r6, r9
 800857e:	eba5 0509 	sub.w	r5, r5, r9
 8008582:	6026      	str	r6, [r4, #0]
 8008584:	60a5      	str	r5, [r4, #8]
 8008586:	463e      	mov	r6, r7
 8008588:	42be      	cmp	r6, r7
 800858a:	d900      	bls.n	800858e <__ssputs_r+0x72>
 800858c:	463e      	mov	r6, r7
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	4632      	mov	r2, r6
 8008592:	4641      	mov	r1, r8
 8008594:	f000 fcf6 	bl	8008f84 <memmove>
 8008598:	68a3      	ldr	r3, [r4, #8]
 800859a:	1b9b      	subs	r3, r3, r6
 800859c:	60a3      	str	r3, [r4, #8]
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	4433      	add	r3, r6
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	2000      	movs	r0, #0
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	462a      	mov	r2, r5
 80085ac:	f000 fd26 	bl	8008ffc <_realloc_r>
 80085b0:	4606      	mov	r6, r0
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d1e0      	bne.n	8008578 <__ssputs_r+0x5c>
 80085b6:	6921      	ldr	r1, [r4, #16]
 80085b8:	4650      	mov	r0, sl
 80085ba:	f7ff ff65 	bl	8008488 <_free_r>
 80085be:	230c      	movs	r3, #12
 80085c0:	f8ca 3000 	str.w	r3, [sl]
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085d0:	e7e9      	b.n	80085a6 <__ssputs_r+0x8a>
	...

080085d4 <_svfiprintf_r>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	4698      	mov	r8, r3
 80085da:	898b      	ldrh	r3, [r1, #12]
 80085dc:	061b      	lsls	r3, r3, #24
 80085de:	b09d      	sub	sp, #116	@ 0x74
 80085e0:	4607      	mov	r7, r0
 80085e2:	460d      	mov	r5, r1
 80085e4:	4614      	mov	r4, r2
 80085e6:	d510      	bpl.n	800860a <_svfiprintf_r+0x36>
 80085e8:	690b      	ldr	r3, [r1, #16]
 80085ea:	b973      	cbnz	r3, 800860a <_svfiprintf_r+0x36>
 80085ec:	2140      	movs	r1, #64	@ 0x40
 80085ee:	f7ff fbf9 	bl	8007de4 <_malloc_r>
 80085f2:	6028      	str	r0, [r5, #0]
 80085f4:	6128      	str	r0, [r5, #16]
 80085f6:	b930      	cbnz	r0, 8008606 <_svfiprintf_r+0x32>
 80085f8:	230c      	movs	r3, #12
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008600:	b01d      	add	sp, #116	@ 0x74
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	2340      	movs	r3, #64	@ 0x40
 8008608:	616b      	str	r3, [r5, #20]
 800860a:	2300      	movs	r3, #0
 800860c:	9309      	str	r3, [sp, #36]	@ 0x24
 800860e:	2320      	movs	r3, #32
 8008610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008614:	f8cd 800c 	str.w	r8, [sp, #12]
 8008618:	2330      	movs	r3, #48	@ 0x30
 800861a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087b8 <_svfiprintf_r+0x1e4>
 800861e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008622:	f04f 0901 	mov.w	r9, #1
 8008626:	4623      	mov	r3, r4
 8008628:	469a      	mov	sl, r3
 800862a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800862e:	b10a      	cbz	r2, 8008634 <_svfiprintf_r+0x60>
 8008630:	2a25      	cmp	r2, #37	@ 0x25
 8008632:	d1f9      	bne.n	8008628 <_svfiprintf_r+0x54>
 8008634:	ebba 0b04 	subs.w	fp, sl, r4
 8008638:	d00b      	beq.n	8008652 <_svfiprintf_r+0x7e>
 800863a:	465b      	mov	r3, fp
 800863c:	4622      	mov	r2, r4
 800863e:	4629      	mov	r1, r5
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff ff6b 	bl	800851c <__ssputs_r>
 8008646:	3001      	adds	r0, #1
 8008648:	f000 80a7 	beq.w	800879a <_svfiprintf_r+0x1c6>
 800864c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800864e:	445a      	add	r2, fp
 8008650:	9209      	str	r2, [sp, #36]	@ 0x24
 8008652:	f89a 3000 	ldrb.w	r3, [sl]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 809f 	beq.w	800879a <_svfiprintf_r+0x1c6>
 800865c:	2300      	movs	r3, #0
 800865e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008666:	f10a 0a01 	add.w	sl, sl, #1
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	9307      	str	r3, [sp, #28]
 800866e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008672:	931a      	str	r3, [sp, #104]	@ 0x68
 8008674:	4654      	mov	r4, sl
 8008676:	2205      	movs	r2, #5
 8008678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867c:	484e      	ldr	r0, [pc, #312]	@ (80087b8 <_svfiprintf_r+0x1e4>)
 800867e:	f7f7 fdb7 	bl	80001f0 <memchr>
 8008682:	9a04      	ldr	r2, [sp, #16]
 8008684:	b9d8      	cbnz	r0, 80086be <_svfiprintf_r+0xea>
 8008686:	06d0      	lsls	r0, r2, #27
 8008688:	bf44      	itt	mi
 800868a:	2320      	movmi	r3, #32
 800868c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008690:	0711      	lsls	r1, r2, #28
 8008692:	bf44      	itt	mi
 8008694:	232b      	movmi	r3, #43	@ 0x2b
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800869a:	f89a 3000 	ldrb.w	r3, [sl]
 800869e:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a0:	d015      	beq.n	80086ce <_svfiprintf_r+0xfa>
 80086a2:	9a07      	ldr	r2, [sp, #28]
 80086a4:	4654      	mov	r4, sl
 80086a6:	2000      	movs	r0, #0
 80086a8:	f04f 0c0a 	mov.w	ip, #10
 80086ac:	4621      	mov	r1, r4
 80086ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086b2:	3b30      	subs	r3, #48	@ 0x30
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d94b      	bls.n	8008750 <_svfiprintf_r+0x17c>
 80086b8:	b1b0      	cbz	r0, 80086e8 <_svfiprintf_r+0x114>
 80086ba:	9207      	str	r2, [sp, #28]
 80086bc:	e014      	b.n	80086e8 <_svfiprintf_r+0x114>
 80086be:	eba0 0308 	sub.w	r3, r0, r8
 80086c2:	fa09 f303 	lsl.w	r3, r9, r3
 80086c6:	4313      	orrs	r3, r2
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	46a2      	mov	sl, r4
 80086cc:	e7d2      	b.n	8008674 <_svfiprintf_r+0xa0>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	1d19      	adds	r1, r3, #4
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	9103      	str	r1, [sp, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfbb      	ittet	lt
 80086da:	425b      	neglt	r3, r3
 80086dc:	f042 0202 	orrlt.w	r2, r2, #2
 80086e0:	9307      	strge	r3, [sp, #28]
 80086e2:	9307      	strlt	r3, [sp, #28]
 80086e4:	bfb8      	it	lt
 80086e6:	9204      	strlt	r2, [sp, #16]
 80086e8:	7823      	ldrb	r3, [r4, #0]
 80086ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ec:	d10a      	bne.n	8008704 <_svfiprintf_r+0x130>
 80086ee:	7863      	ldrb	r3, [r4, #1]
 80086f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f2:	d132      	bne.n	800875a <_svfiprintf_r+0x186>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	1d1a      	adds	r2, r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	9203      	str	r2, [sp, #12]
 80086fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008700:	3402      	adds	r4, #2
 8008702:	9305      	str	r3, [sp, #20]
 8008704:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087c8 <_svfiprintf_r+0x1f4>
 8008708:	7821      	ldrb	r1, [r4, #0]
 800870a:	2203      	movs	r2, #3
 800870c:	4650      	mov	r0, sl
 800870e:	f7f7 fd6f 	bl	80001f0 <memchr>
 8008712:	b138      	cbz	r0, 8008724 <_svfiprintf_r+0x150>
 8008714:	9b04      	ldr	r3, [sp, #16]
 8008716:	eba0 000a 	sub.w	r0, r0, sl
 800871a:	2240      	movs	r2, #64	@ 0x40
 800871c:	4082      	lsls	r2, r0
 800871e:	4313      	orrs	r3, r2
 8008720:	3401      	adds	r4, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	4824      	ldr	r0, [pc, #144]	@ (80087bc <_svfiprintf_r+0x1e8>)
 800872a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800872e:	2206      	movs	r2, #6
 8008730:	f7f7 fd5e 	bl	80001f0 <memchr>
 8008734:	2800      	cmp	r0, #0
 8008736:	d036      	beq.n	80087a6 <_svfiprintf_r+0x1d2>
 8008738:	4b21      	ldr	r3, [pc, #132]	@ (80087c0 <_svfiprintf_r+0x1ec>)
 800873a:	bb1b      	cbnz	r3, 8008784 <_svfiprintf_r+0x1b0>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	3307      	adds	r3, #7
 8008740:	f023 0307 	bic.w	r3, r3, #7
 8008744:	3308      	adds	r3, #8
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874a:	4433      	add	r3, r6
 800874c:	9309      	str	r3, [sp, #36]	@ 0x24
 800874e:	e76a      	b.n	8008626 <_svfiprintf_r+0x52>
 8008750:	fb0c 3202 	mla	r2, ip, r2, r3
 8008754:	460c      	mov	r4, r1
 8008756:	2001      	movs	r0, #1
 8008758:	e7a8      	b.n	80086ac <_svfiprintf_r+0xd8>
 800875a:	2300      	movs	r3, #0
 800875c:	3401      	adds	r4, #1
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	4619      	mov	r1, r3
 8008762:	f04f 0c0a 	mov.w	ip, #10
 8008766:	4620      	mov	r0, r4
 8008768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800876c:	3a30      	subs	r2, #48	@ 0x30
 800876e:	2a09      	cmp	r2, #9
 8008770:	d903      	bls.n	800877a <_svfiprintf_r+0x1a6>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0c6      	beq.n	8008704 <_svfiprintf_r+0x130>
 8008776:	9105      	str	r1, [sp, #20]
 8008778:	e7c4      	b.n	8008704 <_svfiprintf_r+0x130>
 800877a:	fb0c 2101 	mla	r1, ip, r1, r2
 800877e:	4604      	mov	r4, r0
 8008780:	2301      	movs	r3, #1
 8008782:	e7f0      	b.n	8008766 <_svfiprintf_r+0x192>
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	462a      	mov	r2, r5
 800878a:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <_svfiprintf_r+0x1f0>)
 800878c:	a904      	add	r1, sp, #16
 800878e:	4638      	mov	r0, r7
 8008790:	f3af 8000 	nop.w
 8008794:	1c42      	adds	r2, r0, #1
 8008796:	4606      	mov	r6, r0
 8008798:	d1d6      	bne.n	8008748 <_svfiprintf_r+0x174>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	065b      	lsls	r3, r3, #25
 800879e:	f53f af2d 	bmi.w	80085fc <_svfiprintf_r+0x28>
 80087a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087a4:	e72c      	b.n	8008600 <_svfiprintf_r+0x2c>
 80087a6:	ab03      	add	r3, sp, #12
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	462a      	mov	r2, r5
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <_svfiprintf_r+0x1f0>)
 80087ae:	a904      	add	r1, sp, #16
 80087b0:	4638      	mov	r0, r7
 80087b2:	f000 f9bb 	bl	8008b2c <_printf_i>
 80087b6:	e7ed      	b.n	8008794 <_svfiprintf_r+0x1c0>
 80087b8:	080099e0 	.word	0x080099e0
 80087bc:	080099ea 	.word	0x080099ea
 80087c0:	00000000 	.word	0x00000000
 80087c4:	0800851d 	.word	0x0800851d
 80087c8:	080099e6 	.word	0x080099e6

080087cc <__sfputc_r>:
 80087cc:	6893      	ldr	r3, [r2, #8]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	b410      	push	{r4}
 80087d4:	6093      	str	r3, [r2, #8]
 80087d6:	da08      	bge.n	80087ea <__sfputc_r+0x1e>
 80087d8:	6994      	ldr	r4, [r2, #24]
 80087da:	42a3      	cmp	r3, r4
 80087dc:	db01      	blt.n	80087e2 <__sfputc_r+0x16>
 80087de:	290a      	cmp	r1, #10
 80087e0:	d103      	bne.n	80087ea <__sfputc_r+0x1e>
 80087e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e6:	f7ff bd20 	b.w	800822a <__swbuf_r>
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	1c58      	adds	r0, r3, #1
 80087ee:	6010      	str	r0, [r2, #0]
 80087f0:	7019      	strb	r1, [r3, #0]
 80087f2:	4608      	mov	r0, r1
 80087f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <__sfputs_r>:
 80087fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
 8008800:	4614      	mov	r4, r2
 8008802:	18d5      	adds	r5, r2, r3
 8008804:	42ac      	cmp	r4, r5
 8008806:	d101      	bne.n	800880c <__sfputs_r+0x12>
 8008808:	2000      	movs	r0, #0
 800880a:	e007      	b.n	800881c <__sfputs_r+0x22>
 800880c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008810:	463a      	mov	r2, r7
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ffda 	bl	80087cc <__sfputc_r>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d1f3      	bne.n	8008804 <__sfputs_r+0xa>
 800881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008820 <_vfiprintf_r>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	460d      	mov	r5, r1
 8008826:	b09d      	sub	sp, #116	@ 0x74
 8008828:	4614      	mov	r4, r2
 800882a:	4698      	mov	r8, r3
 800882c:	4606      	mov	r6, r0
 800882e:	b118      	cbz	r0, 8008838 <_vfiprintf_r+0x18>
 8008830:	6a03      	ldr	r3, [r0, #32]
 8008832:	b90b      	cbnz	r3, 8008838 <_vfiprintf_r+0x18>
 8008834:	f7ff fbee 	bl	8008014 <__sinit>
 8008838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800883a:	07d9      	lsls	r1, r3, #31
 800883c:	d405      	bmi.n	800884a <_vfiprintf_r+0x2a>
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	059a      	lsls	r2, r3, #22
 8008842:	d402      	bmi.n	800884a <_vfiprintf_r+0x2a>
 8008844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008846:	f7ff fe0e 	bl	8008466 <__retarget_lock_acquire_recursive>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	071b      	lsls	r3, r3, #28
 800884e:	d501      	bpl.n	8008854 <_vfiprintf_r+0x34>
 8008850:	692b      	ldr	r3, [r5, #16]
 8008852:	b99b      	cbnz	r3, 800887c <_vfiprintf_r+0x5c>
 8008854:	4629      	mov	r1, r5
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff fd26 	bl	80082a8 <__swsetup_r>
 800885c:	b170      	cbz	r0, 800887c <_vfiprintf_r+0x5c>
 800885e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008860:	07dc      	lsls	r4, r3, #31
 8008862:	d504      	bpl.n	800886e <_vfiprintf_r+0x4e>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008868:	b01d      	add	sp, #116	@ 0x74
 800886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	0598      	lsls	r0, r3, #22
 8008872:	d4f7      	bmi.n	8008864 <_vfiprintf_r+0x44>
 8008874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008876:	f7ff fdf7 	bl	8008468 <__retarget_lock_release_recursive>
 800887a:	e7f3      	b.n	8008864 <_vfiprintf_r+0x44>
 800887c:	2300      	movs	r3, #0
 800887e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008880:	2320      	movs	r3, #32
 8008882:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008886:	f8cd 800c 	str.w	r8, [sp, #12]
 800888a:	2330      	movs	r3, #48	@ 0x30
 800888c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a3c <_vfiprintf_r+0x21c>
 8008890:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008894:	f04f 0901 	mov.w	r9, #1
 8008898:	4623      	mov	r3, r4
 800889a:	469a      	mov	sl, r3
 800889c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a0:	b10a      	cbz	r2, 80088a6 <_vfiprintf_r+0x86>
 80088a2:	2a25      	cmp	r2, #37	@ 0x25
 80088a4:	d1f9      	bne.n	800889a <_vfiprintf_r+0x7a>
 80088a6:	ebba 0b04 	subs.w	fp, sl, r4
 80088aa:	d00b      	beq.n	80088c4 <_vfiprintf_r+0xa4>
 80088ac:	465b      	mov	r3, fp
 80088ae:	4622      	mov	r2, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7ff ffa1 	bl	80087fa <__sfputs_r>
 80088b8:	3001      	adds	r0, #1
 80088ba:	f000 80a7 	beq.w	8008a0c <_vfiprintf_r+0x1ec>
 80088be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c0:	445a      	add	r2, fp
 80088c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c4:	f89a 3000 	ldrb.w	r3, [sl]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 809f 	beq.w	8008a0c <_vfiprintf_r+0x1ec>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d8:	f10a 0a01 	add.w	sl, sl, #1
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80088e6:	4654      	mov	r4, sl
 80088e8:	2205      	movs	r2, #5
 80088ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ee:	4853      	ldr	r0, [pc, #332]	@ (8008a3c <_vfiprintf_r+0x21c>)
 80088f0:	f7f7 fc7e 	bl	80001f0 <memchr>
 80088f4:	9a04      	ldr	r2, [sp, #16]
 80088f6:	b9d8      	cbnz	r0, 8008930 <_vfiprintf_r+0x110>
 80088f8:	06d1      	lsls	r1, r2, #27
 80088fa:	bf44      	itt	mi
 80088fc:	2320      	movmi	r3, #32
 80088fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008902:	0713      	lsls	r3, r2, #28
 8008904:	bf44      	itt	mi
 8008906:	232b      	movmi	r3, #43	@ 0x2b
 8008908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800890c:	f89a 3000 	ldrb.w	r3, [sl]
 8008910:	2b2a      	cmp	r3, #42	@ 0x2a
 8008912:	d015      	beq.n	8008940 <_vfiprintf_r+0x120>
 8008914:	9a07      	ldr	r2, [sp, #28]
 8008916:	4654      	mov	r4, sl
 8008918:	2000      	movs	r0, #0
 800891a:	f04f 0c0a 	mov.w	ip, #10
 800891e:	4621      	mov	r1, r4
 8008920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008924:	3b30      	subs	r3, #48	@ 0x30
 8008926:	2b09      	cmp	r3, #9
 8008928:	d94b      	bls.n	80089c2 <_vfiprintf_r+0x1a2>
 800892a:	b1b0      	cbz	r0, 800895a <_vfiprintf_r+0x13a>
 800892c:	9207      	str	r2, [sp, #28]
 800892e:	e014      	b.n	800895a <_vfiprintf_r+0x13a>
 8008930:	eba0 0308 	sub.w	r3, r0, r8
 8008934:	fa09 f303 	lsl.w	r3, r9, r3
 8008938:	4313      	orrs	r3, r2
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	46a2      	mov	sl, r4
 800893e:	e7d2      	b.n	80088e6 <_vfiprintf_r+0xc6>
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	1d19      	adds	r1, r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	9103      	str	r1, [sp, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	bfbb      	ittet	lt
 800894c:	425b      	neglt	r3, r3
 800894e:	f042 0202 	orrlt.w	r2, r2, #2
 8008952:	9307      	strge	r3, [sp, #28]
 8008954:	9307      	strlt	r3, [sp, #28]
 8008956:	bfb8      	it	lt
 8008958:	9204      	strlt	r2, [sp, #16]
 800895a:	7823      	ldrb	r3, [r4, #0]
 800895c:	2b2e      	cmp	r3, #46	@ 0x2e
 800895e:	d10a      	bne.n	8008976 <_vfiprintf_r+0x156>
 8008960:	7863      	ldrb	r3, [r4, #1]
 8008962:	2b2a      	cmp	r3, #42	@ 0x2a
 8008964:	d132      	bne.n	80089cc <_vfiprintf_r+0x1ac>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	1d1a      	adds	r2, r3, #4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	9203      	str	r2, [sp, #12]
 800896e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008972:	3402      	adds	r4, #2
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a4c <_vfiprintf_r+0x22c>
 800897a:	7821      	ldrb	r1, [r4, #0]
 800897c:	2203      	movs	r2, #3
 800897e:	4650      	mov	r0, sl
 8008980:	f7f7 fc36 	bl	80001f0 <memchr>
 8008984:	b138      	cbz	r0, 8008996 <_vfiprintf_r+0x176>
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	eba0 000a 	sub.w	r0, r0, sl
 800898c:	2240      	movs	r2, #64	@ 0x40
 800898e:	4082      	lsls	r2, r0
 8008990:	4313      	orrs	r3, r2
 8008992:	3401      	adds	r4, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899a:	4829      	ldr	r0, [pc, #164]	@ (8008a40 <_vfiprintf_r+0x220>)
 800899c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089a0:	2206      	movs	r2, #6
 80089a2:	f7f7 fc25 	bl	80001f0 <memchr>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d03f      	beq.n	8008a2a <_vfiprintf_r+0x20a>
 80089aa:	4b26      	ldr	r3, [pc, #152]	@ (8008a44 <_vfiprintf_r+0x224>)
 80089ac:	bb1b      	cbnz	r3, 80089f6 <_vfiprintf_r+0x1d6>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	3307      	adds	r3, #7
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	3308      	adds	r3, #8
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089bc:	443b      	add	r3, r7
 80089be:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c0:	e76a      	b.n	8008898 <_vfiprintf_r+0x78>
 80089c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c6:	460c      	mov	r4, r1
 80089c8:	2001      	movs	r0, #1
 80089ca:	e7a8      	b.n	800891e <_vfiprintf_r+0xfe>
 80089cc:	2300      	movs	r3, #0
 80089ce:	3401      	adds	r4, #1
 80089d0:	9305      	str	r3, [sp, #20]
 80089d2:	4619      	mov	r1, r3
 80089d4:	f04f 0c0a 	mov.w	ip, #10
 80089d8:	4620      	mov	r0, r4
 80089da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089de:	3a30      	subs	r2, #48	@ 0x30
 80089e0:	2a09      	cmp	r2, #9
 80089e2:	d903      	bls.n	80089ec <_vfiprintf_r+0x1cc>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0c6      	beq.n	8008976 <_vfiprintf_r+0x156>
 80089e8:	9105      	str	r1, [sp, #20]
 80089ea:	e7c4      	b.n	8008976 <_vfiprintf_r+0x156>
 80089ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f0:	4604      	mov	r4, r0
 80089f2:	2301      	movs	r3, #1
 80089f4:	e7f0      	b.n	80089d8 <_vfiprintf_r+0x1b8>
 80089f6:	ab03      	add	r3, sp, #12
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	462a      	mov	r2, r5
 80089fc:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <_vfiprintf_r+0x228>)
 80089fe:	a904      	add	r1, sp, #16
 8008a00:	4630      	mov	r0, r6
 8008a02:	f3af 8000 	nop.w
 8008a06:	4607      	mov	r7, r0
 8008a08:	1c78      	adds	r0, r7, #1
 8008a0a:	d1d6      	bne.n	80089ba <_vfiprintf_r+0x19a>
 8008a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a0e:	07d9      	lsls	r1, r3, #31
 8008a10:	d405      	bmi.n	8008a1e <_vfiprintf_r+0x1fe>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	059a      	lsls	r2, r3, #22
 8008a16:	d402      	bmi.n	8008a1e <_vfiprintf_r+0x1fe>
 8008a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a1a:	f7ff fd25 	bl	8008468 <__retarget_lock_release_recursive>
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	065b      	lsls	r3, r3, #25
 8008a22:	f53f af1f 	bmi.w	8008864 <_vfiprintf_r+0x44>
 8008a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a28:	e71e      	b.n	8008868 <_vfiprintf_r+0x48>
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <_vfiprintf_r+0x228>)
 8008a32:	a904      	add	r1, sp, #16
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f879 	bl	8008b2c <_printf_i>
 8008a3a:	e7e4      	b.n	8008a06 <_vfiprintf_r+0x1e6>
 8008a3c:	080099e0 	.word	0x080099e0
 8008a40:	080099ea 	.word	0x080099ea
 8008a44:	00000000 	.word	0x00000000
 8008a48:	080087fb 	.word	0x080087fb
 8008a4c:	080099e6 	.word	0x080099e6

08008a50 <_printf_common>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	4616      	mov	r6, r2
 8008a56:	4698      	mov	r8, r3
 8008a58:	688a      	ldr	r2, [r1, #8]
 8008a5a:	690b      	ldr	r3, [r1, #16]
 8008a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bfb8      	it	lt
 8008a64:	4613      	movlt	r3, r2
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	b10a      	cbz	r2, 8008a76 <_printf_common+0x26>
 8008a72:	3301      	adds	r3, #1
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	0699      	lsls	r1, r3, #26
 8008a7a:	bf42      	ittt	mi
 8008a7c:	6833      	ldrmi	r3, [r6, #0]
 8008a7e:	3302      	addmi	r3, #2
 8008a80:	6033      	strmi	r3, [r6, #0]
 8008a82:	6825      	ldr	r5, [r4, #0]
 8008a84:	f015 0506 	ands.w	r5, r5, #6
 8008a88:	d106      	bne.n	8008a98 <_printf_common+0x48>
 8008a8a:	f104 0a19 	add.w	sl, r4, #25
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	6832      	ldr	r2, [r6, #0]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dc26      	bgt.n	8008ae6 <_printf_common+0x96>
 8008a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	3b00      	subs	r3, #0
 8008aa0:	bf18      	it	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	0692      	lsls	r2, r2, #26
 8008aa6:	d42b      	bmi.n	8008b00 <_printf_common+0xb0>
 8008aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008aac:	4641      	mov	r1, r8
 8008aae:	4638      	mov	r0, r7
 8008ab0:	47c8      	blx	r9
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d01e      	beq.n	8008af4 <_printf_common+0xa4>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	f003 0306 	and.w	r3, r3, #6
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	bf02      	ittt	eq
 8008ac2:	68e5      	ldreq	r5, [r4, #12]
 8008ac4:	6833      	ldreq	r3, [r6, #0]
 8008ac6:	1aed      	subeq	r5, r5, r3
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	bf0c      	ite	eq
 8008acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad0:	2500      	movne	r5, #0
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bfc4      	itt	gt
 8008ad6:	1a9b      	subgt	r3, r3, r2
 8008ad8:	18ed      	addgt	r5, r5, r3
 8008ada:	2600      	movs	r6, #0
 8008adc:	341a      	adds	r4, #26
 8008ade:	42b5      	cmp	r5, r6
 8008ae0:	d11a      	bne.n	8008b18 <_printf_common+0xc8>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e008      	b.n	8008af8 <_printf_common+0xa8>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4641      	mov	r1, r8
 8008aec:	4638      	mov	r0, r7
 8008aee:	47c8      	blx	r9
 8008af0:	3001      	adds	r0, #1
 8008af2:	d103      	bne.n	8008afc <_printf_common+0xac>
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afc:	3501      	adds	r5, #1
 8008afe:	e7c6      	b.n	8008a8e <_printf_common+0x3e>
 8008b00:	18e1      	adds	r1, r4, r3
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	2030      	movs	r0, #48	@ 0x30
 8008b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b0a:	4422      	add	r2, r4
 8008b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b14:	3302      	adds	r3, #2
 8008b16:	e7c7      	b.n	8008aa8 <_printf_common+0x58>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	4641      	mov	r1, r8
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c8      	blx	r9
 8008b22:	3001      	adds	r0, #1
 8008b24:	d0e6      	beq.n	8008af4 <_printf_common+0xa4>
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7d9      	b.n	8008ade <_printf_common+0x8e>
	...

08008b2c <_printf_i>:
 8008b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	7e0f      	ldrb	r7, [r1, #24]
 8008b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b34:	2f78      	cmp	r7, #120	@ 0x78
 8008b36:	4691      	mov	r9, r2
 8008b38:	4680      	mov	r8, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	469a      	mov	sl, r3
 8008b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b42:	d807      	bhi.n	8008b54 <_printf_i+0x28>
 8008b44:	2f62      	cmp	r7, #98	@ 0x62
 8008b46:	d80a      	bhi.n	8008b5e <_printf_i+0x32>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	f000 80d1 	beq.w	8008cf0 <_printf_i+0x1c4>
 8008b4e:	2f58      	cmp	r7, #88	@ 0x58
 8008b50:	f000 80b8 	beq.w	8008cc4 <_printf_i+0x198>
 8008b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b5c:	e03a      	b.n	8008bd4 <_printf_i+0xa8>
 8008b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b62:	2b15      	cmp	r3, #21
 8008b64:	d8f6      	bhi.n	8008b54 <_printf_i+0x28>
 8008b66:	a101      	add	r1, pc, #4	@ (adr r1, 8008b6c <_printf_i+0x40>)
 8008b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008b55 	.word	0x08008b55
 8008b78:	08008b55 	.word	0x08008b55
 8008b7c:	08008b55 	.word	0x08008b55
 8008b80:	08008b55 	.word	0x08008b55
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008b55 	.word	0x08008b55
 8008b8c:	08008b55 	.word	0x08008b55
 8008b90:	08008b55 	.word	0x08008b55
 8008b94:	08008b55 	.word	0x08008b55
 8008b98:	08008cd7 	.word	0x08008cd7
 8008b9c:	08008c03 	.word	0x08008c03
 8008ba0:	08008c91 	.word	0x08008c91
 8008ba4:	08008b55 	.word	0x08008b55
 8008ba8:	08008b55 	.word	0x08008b55
 8008bac:	08008cf9 	.word	0x08008cf9
 8008bb0:	08008b55 	.word	0x08008b55
 8008bb4:	08008c03 	.word	0x08008c03
 8008bb8:	08008b55 	.word	0x08008b55
 8008bbc:	08008b55 	.word	0x08008b55
 8008bc0:	08008c99 	.word	0x08008c99
 8008bc4:	6833      	ldr	r3, [r6, #0]
 8008bc6:	1d1a      	adds	r2, r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6032      	str	r2, [r6, #0]
 8008bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e09c      	b.n	8008d12 <_printf_i+0x1e6>
 8008bd8:	6833      	ldr	r3, [r6, #0]
 8008bda:	6820      	ldr	r0, [r4, #0]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	6031      	str	r1, [r6, #0]
 8008be0:	0606      	lsls	r6, r0, #24
 8008be2:	d501      	bpl.n	8008be8 <_printf_i+0xbc>
 8008be4:	681d      	ldr	r5, [r3, #0]
 8008be6:	e003      	b.n	8008bf0 <_printf_i+0xc4>
 8008be8:	0645      	lsls	r5, r0, #25
 8008bea:	d5fb      	bpl.n	8008be4 <_printf_i+0xb8>
 8008bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	da03      	bge.n	8008bfc <_printf_i+0xd0>
 8008bf4:	232d      	movs	r3, #45	@ 0x2d
 8008bf6:	426d      	negs	r5, r5
 8008bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bfc:	4858      	ldr	r0, [pc, #352]	@ (8008d60 <_printf_i+0x234>)
 8008bfe:	230a      	movs	r3, #10
 8008c00:	e011      	b.n	8008c26 <_printf_i+0xfa>
 8008c02:	6821      	ldr	r1, [r4, #0]
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	0608      	lsls	r0, r1, #24
 8008c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c0c:	d402      	bmi.n	8008c14 <_printf_i+0xe8>
 8008c0e:	0649      	lsls	r1, r1, #25
 8008c10:	bf48      	it	mi
 8008c12:	b2ad      	uxthmi	r5, r5
 8008c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c16:	4852      	ldr	r0, [pc, #328]	@ (8008d60 <_printf_i+0x234>)
 8008c18:	6033      	str	r3, [r6, #0]
 8008c1a:	bf14      	ite	ne
 8008c1c:	230a      	movne	r3, #10
 8008c1e:	2308      	moveq	r3, #8
 8008c20:	2100      	movs	r1, #0
 8008c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c26:	6866      	ldr	r6, [r4, #4]
 8008c28:	60a6      	str	r6, [r4, #8]
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	db05      	blt.n	8008c3a <_printf_i+0x10e>
 8008c2e:	6821      	ldr	r1, [r4, #0]
 8008c30:	432e      	orrs	r6, r5
 8008c32:	f021 0104 	bic.w	r1, r1, #4
 8008c36:	6021      	str	r1, [r4, #0]
 8008c38:	d04b      	beq.n	8008cd2 <_printf_i+0x1a6>
 8008c3a:	4616      	mov	r6, r2
 8008c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c40:	fb03 5711 	mls	r7, r3, r1, r5
 8008c44:	5dc7      	ldrb	r7, [r0, r7]
 8008c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c4a:	462f      	mov	r7, r5
 8008c4c:	42bb      	cmp	r3, r7
 8008c4e:	460d      	mov	r5, r1
 8008c50:	d9f4      	bls.n	8008c3c <_printf_i+0x110>
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d10b      	bne.n	8008c6e <_printf_i+0x142>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	07df      	lsls	r7, r3, #31
 8008c5a:	d508      	bpl.n	8008c6e <_printf_i+0x142>
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	6861      	ldr	r1, [r4, #4]
 8008c60:	4299      	cmp	r1, r3
 8008c62:	bfde      	ittt	le
 8008c64:	2330      	movle	r3, #48	@ 0x30
 8008c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c6a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008c6e:	1b92      	subs	r2, r2, r6
 8008c70:	6122      	str	r2, [r4, #16]
 8008c72:	f8cd a000 	str.w	sl, [sp]
 8008c76:	464b      	mov	r3, r9
 8008c78:	aa03      	add	r2, sp, #12
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	f7ff fee7 	bl	8008a50 <_printf_common>
 8008c82:	3001      	adds	r0, #1
 8008c84:	d14a      	bne.n	8008d1c <_printf_i+0x1f0>
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c8a:	b004      	add	sp, #16
 8008c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	f043 0320 	orr.w	r3, r3, #32
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	4832      	ldr	r0, [pc, #200]	@ (8008d64 <_printf_i+0x238>)
 8008c9a:	2778      	movs	r7, #120	@ 0x78
 8008c9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	6831      	ldr	r1, [r6, #0]
 8008ca4:	061f      	lsls	r7, r3, #24
 8008ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008caa:	d402      	bmi.n	8008cb2 <_printf_i+0x186>
 8008cac:	065f      	lsls	r7, r3, #25
 8008cae:	bf48      	it	mi
 8008cb0:	b2ad      	uxthmi	r5, r5
 8008cb2:	6031      	str	r1, [r6, #0]
 8008cb4:	07d9      	lsls	r1, r3, #31
 8008cb6:	bf44      	itt	mi
 8008cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8008cbc:	6023      	strmi	r3, [r4, #0]
 8008cbe:	b11d      	cbz	r5, 8008cc8 <_printf_i+0x19c>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	e7ad      	b.n	8008c20 <_printf_i+0xf4>
 8008cc4:	4826      	ldr	r0, [pc, #152]	@ (8008d60 <_printf_i+0x234>)
 8008cc6:	e7e9      	b.n	8008c9c <_printf_i+0x170>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	f023 0320 	bic.w	r3, r3, #32
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	e7f6      	b.n	8008cc0 <_printf_i+0x194>
 8008cd2:	4616      	mov	r6, r2
 8008cd4:	e7bd      	b.n	8008c52 <_printf_i+0x126>
 8008cd6:	6833      	ldr	r3, [r6, #0]
 8008cd8:	6825      	ldr	r5, [r4, #0]
 8008cda:	6961      	ldr	r1, [r4, #20]
 8008cdc:	1d18      	adds	r0, r3, #4
 8008cde:	6030      	str	r0, [r6, #0]
 8008ce0:	062e      	lsls	r6, r5, #24
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	d501      	bpl.n	8008cea <_printf_i+0x1be>
 8008ce6:	6019      	str	r1, [r3, #0]
 8008ce8:	e002      	b.n	8008cf0 <_printf_i+0x1c4>
 8008cea:	0668      	lsls	r0, r5, #25
 8008cec:	d5fb      	bpl.n	8008ce6 <_printf_i+0x1ba>
 8008cee:	8019      	strh	r1, [r3, #0]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	6123      	str	r3, [r4, #16]
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	e7bc      	b.n	8008c72 <_printf_i+0x146>
 8008cf8:	6833      	ldr	r3, [r6, #0]
 8008cfa:	1d1a      	adds	r2, r3, #4
 8008cfc:	6032      	str	r2, [r6, #0]
 8008cfe:	681e      	ldr	r6, [r3, #0]
 8008d00:	6862      	ldr	r2, [r4, #4]
 8008d02:	2100      	movs	r1, #0
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7f7 fa73 	bl	80001f0 <memchr>
 8008d0a:	b108      	cbz	r0, 8008d10 <_printf_i+0x1e4>
 8008d0c:	1b80      	subs	r0, r0, r6
 8008d0e:	6060      	str	r0, [r4, #4]
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	6123      	str	r3, [r4, #16]
 8008d14:	2300      	movs	r3, #0
 8008d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d1a:	e7aa      	b.n	8008c72 <_printf_i+0x146>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	4632      	mov	r2, r6
 8008d20:	4649      	mov	r1, r9
 8008d22:	4640      	mov	r0, r8
 8008d24:	47d0      	blx	sl
 8008d26:	3001      	adds	r0, #1
 8008d28:	d0ad      	beq.n	8008c86 <_printf_i+0x15a>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	079b      	lsls	r3, r3, #30
 8008d2e:	d413      	bmi.n	8008d58 <_printf_i+0x22c>
 8008d30:	68e0      	ldr	r0, [r4, #12]
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	4298      	cmp	r0, r3
 8008d36:	bfb8      	it	lt
 8008d38:	4618      	movlt	r0, r3
 8008d3a:	e7a6      	b.n	8008c8a <_printf_i+0x15e>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4632      	mov	r2, r6
 8008d40:	4649      	mov	r1, r9
 8008d42:	4640      	mov	r0, r8
 8008d44:	47d0      	blx	sl
 8008d46:	3001      	adds	r0, #1
 8008d48:	d09d      	beq.n	8008c86 <_printf_i+0x15a>
 8008d4a:	3501      	adds	r5, #1
 8008d4c:	68e3      	ldr	r3, [r4, #12]
 8008d4e:	9903      	ldr	r1, [sp, #12]
 8008d50:	1a5b      	subs	r3, r3, r1
 8008d52:	42ab      	cmp	r3, r5
 8008d54:	dcf2      	bgt.n	8008d3c <_printf_i+0x210>
 8008d56:	e7eb      	b.n	8008d30 <_printf_i+0x204>
 8008d58:	2500      	movs	r5, #0
 8008d5a:	f104 0619 	add.w	r6, r4, #25
 8008d5e:	e7f5      	b.n	8008d4c <_printf_i+0x220>
 8008d60:	080099f1 	.word	0x080099f1
 8008d64:	08009a02 	.word	0x08009a02

08008d68 <__sflush_r>:
 8008d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	0716      	lsls	r6, r2, #28
 8008d72:	4605      	mov	r5, r0
 8008d74:	460c      	mov	r4, r1
 8008d76:	d454      	bmi.n	8008e22 <__sflush_r+0xba>
 8008d78:	684b      	ldr	r3, [r1, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dc02      	bgt.n	8008d84 <__sflush_r+0x1c>
 8008d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dd48      	ble.n	8008e16 <__sflush_r+0xae>
 8008d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d86:	2e00      	cmp	r6, #0
 8008d88:	d045      	beq.n	8008e16 <__sflush_r+0xae>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d90:	682f      	ldr	r7, [r5, #0]
 8008d92:	6a21      	ldr	r1, [r4, #32]
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	d030      	beq.n	8008dfa <__sflush_r+0x92>
 8008d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	0759      	lsls	r1, r3, #29
 8008d9e:	d505      	bpl.n	8008dac <__sflush_r+0x44>
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	1ad2      	subs	r2, r2, r3
 8008da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008da6:	b10b      	cbz	r3, 8008dac <__sflush_r+0x44>
 8008da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	2300      	movs	r3, #0
 8008dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008db0:	6a21      	ldr	r1, [r4, #32]
 8008db2:	4628      	mov	r0, r5
 8008db4:	47b0      	blx	r6
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	d106      	bne.n	8008dca <__sflush_r+0x62>
 8008dbc:	6829      	ldr	r1, [r5, #0]
 8008dbe:	291d      	cmp	r1, #29
 8008dc0:	d82b      	bhi.n	8008e1a <__sflush_r+0xb2>
 8008dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e6c <__sflush_r+0x104>)
 8008dc4:	40ca      	lsrs	r2, r1
 8008dc6:	07d6      	lsls	r6, r2, #31
 8008dc8:	d527      	bpl.n	8008e1a <__sflush_r+0xb2>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	6062      	str	r2, [r4, #4]
 8008dce:	04d9      	lsls	r1, r3, #19
 8008dd0:	6922      	ldr	r2, [r4, #16]
 8008dd2:	6022      	str	r2, [r4, #0]
 8008dd4:	d504      	bpl.n	8008de0 <__sflush_r+0x78>
 8008dd6:	1c42      	adds	r2, r0, #1
 8008dd8:	d101      	bne.n	8008dde <__sflush_r+0x76>
 8008dda:	682b      	ldr	r3, [r5, #0]
 8008ddc:	b903      	cbnz	r3, 8008de0 <__sflush_r+0x78>
 8008dde:	6560      	str	r0, [r4, #84]	@ 0x54
 8008de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008de2:	602f      	str	r7, [r5, #0]
 8008de4:	b1b9      	cbz	r1, 8008e16 <__sflush_r+0xae>
 8008de6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d002      	beq.n	8008df4 <__sflush_r+0x8c>
 8008dee:	4628      	mov	r0, r5
 8008df0:	f7ff fb4a 	bl	8008488 <_free_r>
 8008df4:	2300      	movs	r3, #0
 8008df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008df8:	e00d      	b.n	8008e16 <__sflush_r+0xae>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b0      	blx	r6
 8008e00:	4602      	mov	r2, r0
 8008e02:	1c50      	adds	r0, r2, #1
 8008e04:	d1c9      	bne.n	8008d9a <__sflush_r+0x32>
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0c6      	beq.n	8008d9a <__sflush_r+0x32>
 8008e0c:	2b1d      	cmp	r3, #29
 8008e0e:	d001      	beq.n	8008e14 <__sflush_r+0xac>
 8008e10:	2b16      	cmp	r3, #22
 8008e12:	d11e      	bne.n	8008e52 <__sflush_r+0xea>
 8008e14:	602f      	str	r7, [r5, #0]
 8008e16:	2000      	movs	r0, #0
 8008e18:	e022      	b.n	8008e60 <__sflush_r+0xf8>
 8008e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e1e:	b21b      	sxth	r3, r3
 8008e20:	e01b      	b.n	8008e5a <__sflush_r+0xf2>
 8008e22:	690f      	ldr	r7, [r1, #16]
 8008e24:	2f00      	cmp	r7, #0
 8008e26:	d0f6      	beq.n	8008e16 <__sflush_r+0xae>
 8008e28:	0793      	lsls	r3, r2, #30
 8008e2a:	680e      	ldr	r6, [r1, #0]
 8008e2c:	bf08      	it	eq
 8008e2e:	694b      	ldreq	r3, [r1, #20]
 8008e30:	600f      	str	r7, [r1, #0]
 8008e32:	bf18      	it	ne
 8008e34:	2300      	movne	r3, #0
 8008e36:	eba6 0807 	sub.w	r8, r6, r7
 8008e3a:	608b      	str	r3, [r1, #8]
 8008e3c:	f1b8 0f00 	cmp.w	r8, #0
 8008e40:	dde9      	ble.n	8008e16 <__sflush_r+0xae>
 8008e42:	6a21      	ldr	r1, [r4, #32]
 8008e44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e46:	4643      	mov	r3, r8
 8008e48:	463a      	mov	r2, r7
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b0      	blx	r6
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	dc08      	bgt.n	8008e64 <__sflush_r+0xfc>
 8008e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e64:	4407      	add	r7, r0
 8008e66:	eba8 0800 	sub.w	r8, r8, r0
 8008e6a:	e7e7      	b.n	8008e3c <__sflush_r+0xd4>
 8008e6c:	20400001 	.word	0x20400001

08008e70 <_fflush_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	690b      	ldr	r3, [r1, #16]
 8008e74:	4605      	mov	r5, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	b913      	cbnz	r3, 8008e80 <_fflush_r+0x10>
 8008e7a:	2500      	movs	r5, #0
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	b118      	cbz	r0, 8008e8a <_fflush_r+0x1a>
 8008e82:	6a03      	ldr	r3, [r0, #32]
 8008e84:	b90b      	cbnz	r3, 8008e8a <_fflush_r+0x1a>
 8008e86:	f7ff f8c5 	bl	8008014 <__sinit>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0f3      	beq.n	8008e7a <_fflush_r+0xa>
 8008e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e94:	07d0      	lsls	r0, r2, #31
 8008e96:	d404      	bmi.n	8008ea2 <_fflush_r+0x32>
 8008e98:	0599      	lsls	r1, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_fflush_r+0x32>
 8008e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e9e:	f7ff fae2 	bl	8008466 <__retarget_lock_acquire_recursive>
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	f7ff ff5f 	bl	8008d68 <__sflush_r>
 8008eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eac:	07da      	lsls	r2, r3, #31
 8008eae:	4605      	mov	r5, r0
 8008eb0:	d4e4      	bmi.n	8008e7c <_fflush_r+0xc>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	059b      	lsls	r3, r3, #22
 8008eb6:	d4e1      	bmi.n	8008e7c <_fflush_r+0xc>
 8008eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eba:	f7ff fad5 	bl	8008468 <__retarget_lock_release_recursive>
 8008ebe:	e7dd      	b.n	8008e7c <_fflush_r+0xc>

08008ec0 <__swhatbuf_r>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	b096      	sub	sp, #88	@ 0x58
 8008ecc:	4615      	mov	r5, r2
 8008ece:	461e      	mov	r6, r3
 8008ed0:	da0d      	bge.n	8008eee <__swhatbuf_r+0x2e>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ed8:	f04f 0100 	mov.w	r1, #0
 8008edc:	bf14      	ite	ne
 8008ede:	2340      	movne	r3, #64	@ 0x40
 8008ee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	6031      	str	r1, [r6, #0]
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	b016      	add	sp, #88	@ 0x58
 8008eec:	bd70      	pop	{r4, r5, r6, pc}
 8008eee:	466a      	mov	r2, sp
 8008ef0:	f000 f862 	bl	8008fb8 <_fstat_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	dbec      	blt.n	8008ed2 <__swhatbuf_r+0x12>
 8008ef8:	9901      	ldr	r1, [sp, #4]
 8008efa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008efe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f02:	4259      	negs	r1, r3
 8008f04:	4159      	adcs	r1, r3
 8008f06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f0a:	e7eb      	b.n	8008ee4 <__swhatbuf_r+0x24>

08008f0c <__smakebuf_r>:
 8008f0c:	898b      	ldrh	r3, [r1, #12]
 8008f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f10:	079d      	lsls	r5, r3, #30
 8008f12:	4606      	mov	r6, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	d507      	bpl.n	8008f28 <__smakebuf_r+0x1c>
 8008f18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	6123      	str	r3, [r4, #16]
 8008f20:	2301      	movs	r3, #1
 8008f22:	6163      	str	r3, [r4, #20]
 8008f24:	b003      	add	sp, #12
 8008f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f28:	ab01      	add	r3, sp, #4
 8008f2a:	466a      	mov	r2, sp
 8008f2c:	f7ff ffc8 	bl	8008ec0 <__swhatbuf_r>
 8008f30:	9f00      	ldr	r7, [sp, #0]
 8008f32:	4605      	mov	r5, r0
 8008f34:	4639      	mov	r1, r7
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7fe ff54 	bl	8007de4 <_malloc_r>
 8008f3c:	b948      	cbnz	r0, 8008f52 <__smakebuf_r+0x46>
 8008f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f42:	059a      	lsls	r2, r3, #22
 8008f44:	d4ee      	bmi.n	8008f24 <__smakebuf_r+0x18>
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	f043 0302 	orr.w	r3, r3, #2
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	e7e2      	b.n	8008f18 <__smakebuf_r+0xc>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	6020      	str	r0, [r4, #0]
 8008f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f62:	b15b      	cbz	r3, 8008f7c <__smakebuf_r+0x70>
 8008f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f837 	bl	8008fdc <_isatty_r>
 8008f6e:	b128      	cbz	r0, 8008f7c <__smakebuf_r+0x70>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	431d      	orrs	r5, r3
 8008f80:	81a5      	strh	r5, [r4, #12]
 8008f82:	e7cf      	b.n	8008f24 <__smakebuf_r+0x18>

08008f84 <memmove>:
 8008f84:	4288      	cmp	r0, r1
 8008f86:	b510      	push	{r4, lr}
 8008f88:	eb01 0402 	add.w	r4, r1, r2
 8008f8c:	d902      	bls.n	8008f94 <memmove+0x10>
 8008f8e:	4284      	cmp	r4, r0
 8008f90:	4623      	mov	r3, r4
 8008f92:	d807      	bhi.n	8008fa4 <memmove+0x20>
 8008f94:	1e43      	subs	r3, r0, #1
 8008f96:	42a1      	cmp	r1, r4
 8008f98:	d008      	beq.n	8008fac <memmove+0x28>
 8008f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fa2:	e7f8      	b.n	8008f96 <memmove+0x12>
 8008fa4:	4402      	add	r2, r0
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	428a      	cmp	r2, r1
 8008faa:	d100      	bne.n	8008fae <memmove+0x2a>
 8008fac:	bd10      	pop	{r4, pc}
 8008fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fb6:	e7f7      	b.n	8008fa8 <memmove+0x24>

08008fb8 <_fstat_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d07      	ldr	r5, [pc, #28]	@ (8008fd8 <_fstat_r+0x20>)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	f7f7 ff54 	bl	8000e72 <_fstat>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	d102      	bne.n	8008fd4 <_fstat_r+0x1c>
 8008fce:	682b      	ldr	r3, [r5, #0]
 8008fd0:	b103      	cbz	r3, 8008fd4 <_fstat_r+0x1c>
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	bd38      	pop	{r3, r4, r5, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000ee8 	.word	0x20000ee8

08008fdc <_isatty_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d06      	ldr	r5, [pc, #24]	@ (8008ff8 <_isatty_r+0x1c>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	f7f7 ff53 	bl	8000e92 <_isatty>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_isatty_r+0x1a>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_isatty_r+0x1a>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	20000ee8 	.word	0x20000ee8

08008ffc <_realloc_r>:
 8008ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009000:	4607      	mov	r7, r0
 8009002:	4614      	mov	r4, r2
 8009004:	460d      	mov	r5, r1
 8009006:	b921      	cbnz	r1, 8009012 <_realloc_r+0x16>
 8009008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800900c:	4611      	mov	r1, r2
 800900e:	f7fe bee9 	b.w	8007de4 <_malloc_r>
 8009012:	b92a      	cbnz	r2, 8009020 <_realloc_r+0x24>
 8009014:	f7ff fa38 	bl	8008488 <_free_r>
 8009018:	4625      	mov	r5, r4
 800901a:	4628      	mov	r0, r5
 800901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009020:	f000 f81a 	bl	8009058 <_malloc_usable_size_r>
 8009024:	4284      	cmp	r4, r0
 8009026:	4606      	mov	r6, r0
 8009028:	d802      	bhi.n	8009030 <_realloc_r+0x34>
 800902a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800902e:	d8f4      	bhi.n	800901a <_realloc_r+0x1e>
 8009030:	4621      	mov	r1, r4
 8009032:	4638      	mov	r0, r7
 8009034:	f7fe fed6 	bl	8007de4 <_malloc_r>
 8009038:	4680      	mov	r8, r0
 800903a:	b908      	cbnz	r0, 8009040 <_realloc_r+0x44>
 800903c:	4645      	mov	r5, r8
 800903e:	e7ec      	b.n	800901a <_realloc_r+0x1e>
 8009040:	42b4      	cmp	r4, r6
 8009042:	4622      	mov	r2, r4
 8009044:	4629      	mov	r1, r5
 8009046:	bf28      	it	cs
 8009048:	4632      	movcs	r2, r6
 800904a:	f7ff fa0e 	bl	800846a <memcpy>
 800904e:	4629      	mov	r1, r5
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff fa19 	bl	8008488 <_free_r>
 8009056:	e7f1      	b.n	800903c <_realloc_r+0x40>

08009058 <_malloc_usable_size_r>:
 8009058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905c:	1f18      	subs	r0, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfbc      	itt	lt
 8009062:	580b      	ldrlt	r3, [r1, r0]
 8009064:	18c0      	addlt	r0, r0, r3
 8009066:	4770      	bx	lr

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
