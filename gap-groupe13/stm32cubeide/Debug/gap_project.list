
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000836c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0800850c  0800850c  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e60  08008e60  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e60  08008e60  00009e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e68  08008e68  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e68  08008e68  00009e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e6c  08008e6c  00009e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008e70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000074  08008ee4  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08008ee4  0000a67c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011725  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325b  00000000  00000000  0001b7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0001ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a05  00000000  00000000  0001f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954f  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010651  00000000  00000000  0003969c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091302  00000000  00000000  00049ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dafef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000db034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084f4 	.word	0x080084f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080084f4 	.word	0x080084f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <cmd_ping_callback>:

#include "gapcli_cmd_callback.h"


void cmd_ping_callback(gapcom_handle_t *handle, const void *proto_msg)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	gapcom_respond_ping(handle, GAPErrorCode_GAP_OK);
 80005b6:	2100      	movs	r1, #0
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f002 fdfb 	bl	80031b4 <gapcom_respond_ping>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <close_sender>:
static UART_HandleTypeDef *huart2_handle;

static gapcom_handle_t *gapcom_handle_instance;

int close_sender(gapcom_sender_t *self)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
	return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <open_sender>:

int open_sender(gapcom_sender_t *self)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	return 0;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <send_sender>:

ssize_t send_sender(gapcom_sender_t *self, const uint8_t *buf, size_t len)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit_IT(huart2_handle, buf, len);
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <send_sender+0x38>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	b292      	uxth	r2, r2
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fbae 	bl	8001d6c <HAL_UART_Transmit_IT>
 8000610:	4603      	mov	r3, r0
 8000612:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <send_sender+0x2a>
        return (ssize_t)len;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	e001      	b.n	8000622 <send_sender+0x2e>
    } else {
        return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000090 	.word	0x20000090

08000630 <create_gapcom_instance>:
		.open = open_sender,
		.send = send_sender
};

void create_gapcom_instance(UART_HandleTypeDef *handle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	huart2_handle = handle;
 8000638:	4a0c      	ldr	r2, [pc, #48]	@ (800066c <create_gapcom_instance+0x3c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
	gapcom_handle_instance = gapcom_create();
 800063e:	f002 faef 	bl	8002c20 <gapcom_create>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <create_gapcom_instance+0x40>)
 8000646:	6013      	str	r3, [r2, #0]
	gapcom_set_sender_impl(gapcom_handle_instance, &gapcom_sender_t_impl);
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <create_gapcom_instance+0x40>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4909      	ldr	r1, [pc, #36]	@ (8000674 <create_gapcom_instance+0x44>)
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fb16 	bl	8002c80 <gapcom_set_sender_impl>
	gapcom_install_callback(gapcom_handle_instance, cmd_ping_callback,GAPCOM_MSG_MIN);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <create_gapcom_instance+0x40>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	4907      	ldr	r1, [pc, #28]	@ (8000678 <create_gapcom_instance+0x48>)
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fb21 	bl	8002ca4 <gapcom_install_callback>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000090 	.word	0x20000090
 8000670:	20000094 	.word	0x20000094
 8000674:	20000000 	.word	0x20000000
 8000678:	080005ad 	.word	0x080005ad

0800067c <receive_gapcom_incoming_uart_message>:

void receive_gapcom_incoming_uart_message(uint8_t *buf, uint16_t size)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
	gapcom_accept(gapcom_handle_instance, buf, size);
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <receive_gapcom_incoming_uart_message+0x24>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	887a      	ldrh	r2, [r7, #2]
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fb20 	bl	8002cd6 <gapcom_accept>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000094 	.word	0x20000094

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fb04 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f814 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 f8c8 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b4:	f000 f870 	bl	8000798 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80006b8:	f000 f89a 	bl	80007f0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  create_gapcom_instance(&huart2);
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <main+0x2c>)
 80006be:	f7ff ffb7 	bl	8000630 <create_gapcom_instance>
  HAL_UART_Receive_IT(&huart2, rx_buff, 6);
 80006c2:	2206      	movs	r2, #6
 80006c4:	4903      	ldr	r1, [pc, #12]	@ (80006d4 <main+0x30>)
 80006c6:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <main+0x2c>)
 80006c8:	f001 fb86 	bl	8001dd8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x28>
 80006d0:	20000098 	.word	0x20000098
 80006d4:	20000128 	.word	0x20000128

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	@ 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 fa22 	bl	8007b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <SystemClock_Config+0xb8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <SystemClock_Config+0xb8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <SystemClock_Config+0xb8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <SystemClock_Config+0xbc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <SystemClock_Config+0xbc>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <SystemClock_Config+0xbc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fe65 	bl	800141c <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000758:	f000 f8cc 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f8c8 	bl	800190c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000782:	f000 f8b7 	bl	80008f4 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_USART2_UART_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007d4:	f001 fa7a 	bl	8001ccc <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80007de:	f000 f889 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000098 	.word	0x20000098
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART6_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 80007fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000800:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000828:	f001 fa50 	bl	8001ccc <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f85f 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000e0 	.word	0x200000e0
 8000840:	40011400 	.word	0x40011400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_GPIO_Init+0x7c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a17      	ldr	r2, [pc, #92]	@ (80008c0 <MX_GPIO_Init+0x7c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_GPIO_Init+0x7c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_GPIO_Init+0x7c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <MX_GPIO_Init+0x7c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_GPIO_Init+0x7c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <MX_GPIO_Init+0x80>)
 8000898:	f000 fda6 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800089c:	2320      	movs	r3, #32
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_GPIO_Init+0x80>)
 80008b4:	f000 fc14 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rx_buff, 6);
 80008d0:	2206      	movs	r2, #6
 80008d2:	4906      	ldr	r1, [pc, #24]	@ (80008ec <HAL_UART_RxCpltCallback+0x24>)
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <HAL_UART_RxCpltCallback+0x28>)
 80008d6:	f001 fa7f 	bl	8001dd8 <HAL_UART_Receive_IT>
	receive_gapcom_incoming_uart_message(rx_buff, 6);
 80008da:	2106      	movs	r1, #6
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <HAL_UART_RxCpltCallback+0x24>)
 80008de:	f7ff fecd 	bl	800067c <receive_gapcom_incoming_uart_message>


}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000128 	.word	0x20000128
 80008f0:	20000098 	.word	0x20000098

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d134      	bne.n	80009dc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a38      	ldr	r2, [pc, #224]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a31      	ldr	r2, [pc, #196]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4826      	ldr	r0, [pc, #152]	@ (8000a60 <HAL_UART_MspInit+0x110>)
 80009c6:	f000 fb8b 	bl	80010e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2026      	movs	r0, #38	@ 0x26
 80009d0:	f000 fabd 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009d4:	2026      	movs	r0, #38	@ 0x26
 80009d6:	f000 fad6 	bl	8000f86 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80009da:	e038      	b.n	8000a4e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a20      	ldr	r2, [pc, #128]	@ (8000a64 <HAL_UART_MspInit+0x114>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d133      	bne.n	8000a4e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a1b      	ldr	r2, [pc, #108]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1e:	23c0      	movs	r3, #192	@ 0xc0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <HAL_UART_MspInit+0x118>)
 8000a3a:	f000 fb51 	bl	80010e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2047      	movs	r0, #71	@ 0x47
 8000a44:	f000 fa83 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a48:	2047      	movs	r0, #71	@ 0x47
 8000a4a:	f000 fa9c 	bl	8000f86 <HAL_NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40011400 	.word	0x40011400
 8000a68:	40020800 	.word	0x40020800

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac2:	f000 f949 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	f001 f9a7 	bl	8001e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <USART6_IRQHandler+0x10>)
 8000ae6:	f001 f99d 	bl	8001e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000e0 	.word	0x200000e0

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f006 fff4 	bl	8007bec <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20018000 	.word	0x20018000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000528 	.word	0x20000528
 8000c38:	20000680 	.word	0x20000680

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f006 ffb3 	bl	8007bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fd07 	bl	80006a4 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ca4:	08008e70 	.word	0x08008e70
  ldr r2, =_sbss
 8000ca8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cac:	2000067c 	.word	0x2000067c

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f92b 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fe0a 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f943 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d34:	f000 f90b 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	20000014 	.word	0x20000014
 8000d54:	20000010 	.word	0x20000010

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000014 	.word	0x20000014
 8000d7c:	2000052c 	.word	0x2000052c

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000052c 	.word	0x2000052c

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff29 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff3e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff31 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff feda 	bl	8000d80 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d008      	beq.n	8000fec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2280      	movs	r2, #128	@ 0x80
 8000fde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e052      	b.n	8001092 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0216 	bic.w	r2, r2, #22
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800100a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <HAL_DMA_Abort+0x62>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0208 	bic.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103c:	e013      	b.n	8001066 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800103e:	f7ff fe9f 	bl	8000d80 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b05      	cmp	r3, #5
 800104a:	d90c      	bls.n	8001066 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2220      	movs	r2, #32
 8001050:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2203      	movs	r2, #3
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e015      	b.n	8001092 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e4      	bne.n	800103e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001078:	223f      	movs	r2, #63	@ 0x3f
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e00c      	b.n	80010d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2205      	movs	r2, #5
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e159      	b.n	80013b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 8148 	bne.w	80013aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d005      	beq.n	8001132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	2b02      	cmp	r3, #2
 8001130:	d130      	bne.n	8001194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a2 	beq.w	80013aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b57      	ldr	r3, [pc, #348]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a56      	ldr	r2, [pc, #344]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b54      	ldr	r3, [pc, #336]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a52      	ldr	r2, [pc, #328]	@ (80013cc <HAL_GPIO_Init+0x2ec>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a49      	ldr	r2, [pc, #292]	@ (80013d0 <HAL_GPIO_Init+0x2f0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x202>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a48      	ldr	r2, [pc, #288]	@ (80013d4 <HAL_GPIO_Init+0x2f4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x1fe>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a47      	ldr	r2, [pc, #284]	@ (80013d8 <HAL_GPIO_Init+0x2f8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x1fa>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a46      	ldr	r2, [pc, #280]	@ (80013dc <HAL_GPIO_Init+0x2fc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x1f6>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a45      	ldr	r2, [pc, #276]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x1f2>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e008      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x204>
 80012e2:	2300      	movs	r3, #0
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	f002 0203 	and.w	r2, r2, #3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	@ (80013cc <HAL_GPIO_Init+0x2ec>)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a2f      	ldr	r2, [pc, #188]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a24      	ldr	r2, [pc, #144]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001356:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137a:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a4:	4a0f      	ldr	r2, [pc, #60]	@ (80013e4 <HAL_GPIO_Init+0x304>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f67f aea2 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e267      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800143a:	4b88      	ldr	r3, [pc, #544]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00c      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001446:	4b85      	ldr	r3, [pc, #532]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800144e:	2b08      	cmp	r3, #8
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b82      	ldr	r3, [pc, #520]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b7e      	ldr	r3, [pc, #504]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e242      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b70      	ldr	r3, [pc, #448]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6f      	ldr	r2, [pc, #444]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6c      	ldr	r2, [pc, #432]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b69      	ldr	r3, [pc, #420]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a68      	ldr	r2, [pc, #416]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b66      	ldr	r3, [pc, #408]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc54 	bl	8000d80 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fc50 	bl	8000d80 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	@ 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e207      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5b      	ldr	r3, [pc, #364]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc40 	bl	8000d80 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fc3c 	bl	8000d80 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	@ 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f3      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b51      	ldr	r3, [pc, #324]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001532:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b44      	ldr	r3, [pc, #272]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b41      	ldr	r3, [pc, #260]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c7      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4937      	ldr	r1, [pc, #220]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_RCC_OscConfig+0x244>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fbf5 	bl	8000d80 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fbf1 	bl	8000d80 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a8      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b28      	ldr	r3, [pc, #160]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4925      	ldr	r1, [pc, #148]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <HAL_RCC_OscConfig+0x244>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fbd4 	bl	8000d80 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fbd0 	bl	8000d80 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e187      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_RCC_OscConfig+0x248>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fbb4 	bl	8000d80 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fbb0 	bl	8000d80 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e167      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_RCC_OscConfig+0x240>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_OscConfig+0x248>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fb9d 	bl	8000d80 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00e      	b.n	8001668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fb99 	bl	8000d80 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d907      	bls.n	8001668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e150      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800165c:	40023800 	.word	0x40023800
 8001660:	42470000 	.word	0x42470000
 8001664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b88      	ldr	r3, [pc, #544]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ea      	bne.n	800164a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8097 	beq.w	80017b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b81      	ldr	r3, [pc, #516]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b7d      	ldr	r3, [pc, #500]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	4a7c      	ldr	r2, [pc, #496]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a2:	4b7a      	ldr	r3, [pc, #488]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b77      	ldr	r3, [pc, #476]	@ (8001890 <HAL_RCC_OscConfig+0x474>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b74      	ldr	r3, [pc, #464]	@ (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a73      	ldr	r2, [pc, #460]	@ (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb59 	bl	8000d80 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fb55 	bl	8000d80 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e10c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001890 <HAL_RCC_OscConfig+0x474>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x2ea>
 80016f8:	4b64      	ldr	r3, [pc, #400]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fc:	4a63      	ldr	r2, [pc, #396]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	@ 0x70
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x30c>
 800170e:	4b5f      	ldr	r3, [pc, #380]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	4a5e      	ldr	r2, [pc, #376]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	@ 0x70
 800171a:	4b5c      	ldr	r3, [pc, #368]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171e:	4a5b      	ldr	r2, [pc, #364]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	@ 0x70
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001728:	4b58      	ldr	r3, [pc, #352]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172c:	4a57      	ldr	r2, [pc, #348]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	@ 0x70
 8001734:	4b55      	ldr	r3, [pc, #340]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001738:	4a54      	ldr	r2, [pc, #336]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fb1a 	bl	8000d80 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fb16 	bl	8000d80 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0cb      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	4b49      	ldr	r3, [pc, #292]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ee      	beq.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fb04 	bl	8000d80 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fb00 	bl	8000d80 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0b5      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ee      	bne.n	800177c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	4a38      	ldr	r2, [pc, #224]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a1 	beq.w	80018fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d05c      	beq.n	8001880 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d141      	bne.n	8001852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fad4 	bl	8000d80 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fad0 	bl	8000d80 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e087      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	491b      	ldr	r1, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_RCC_OscConfig+0x478>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff faa9 	bl	8000d80 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff faa5 	bl	8000d80 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e05c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x416>
 8001850:	e054      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fa92 	bl	8000d80 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fa8e 	bl	8000d80 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e045      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e038      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000
 8001894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b68      	ldr	r3, [pc, #416]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90c      	bls.n	8001948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b65      	ldr	r3, [pc, #404]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e067      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4934      	ldr	r1, [pc, #208]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f9c0 	bl	8000d80 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f9bc 	bl	8000d80 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	@ (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f920 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08008a0c 	.word	0x08008a0c
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	20000010 	.word	0x20000010

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b090      	sub	sp, #64	@ 0x40
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80a1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e09b      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b10:	e09b      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b16:	e098      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b4f      	ldr	r3, [pc, #316]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b22:	4b4d      	ldr	r3, [pc, #308]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d028      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b40:	2100      	movs	r1, #0
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b44:	fb03 f201 	mul.w	r2, r3, r1
 8001b48:	2300      	movs	r3, #0
 8001b4a:	fb00 f303 	mul.w	r3, r0, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a43      	ldr	r2, [pc, #268]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b52:	fba0 1202 	umull	r1, r2, r0, r2
 8001b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b58:	460a      	mov	r2, r1
 8001b5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b5e:	4413      	add	r3, r2
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b64:	2200      	movs	r2, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	61fa      	str	r2, [r7, #28]
 8001b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b72:	f7fe fb85 	bl	8000280 <__aeabi_uldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b7e:	e053      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b80:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	2200      	movs	r2, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	617a      	str	r2, [r7, #20]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b92:	f04f 0b00 	mov.w	fp, #0
 8001b96:	4652      	mov	r2, sl
 8001b98:	465b      	mov	r3, fp
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	0159      	lsls	r1, r3, #5
 8001ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba8:	0150      	lsls	r0, r2, #5
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ebb2 080a 	subs.w	r8, r2, sl
 8001bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bca:	ebb2 0408 	subs.w	r4, r2, r8
 8001bce:	eb63 0509 	sbc.w	r5, r3, r9
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	00eb      	lsls	r3, r5, #3
 8001bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be0:	00e2      	lsls	r2, r4, #3
 8001be2:	4614      	mov	r4, r2
 8001be4:	461d      	mov	r5, r3
 8001be6:	eb14 030a 	adds.w	r3, r4, sl
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	eb45 030b 	adc.w	r3, r5, fp
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c12:	2200      	movs	r2, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c1c:	f7fe fb30 	bl	8000280 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3740      	adds	r7, #64	@ 0x40
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	017d7840 	.word	0x017d7840

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000000c 	.word	0x2000000c

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08008a1c 	.word	0x08008a1c

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08008a1c 	.word	0x08008a1c

08001ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e042      	b.n	8001d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fe2c 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	@ 0x24
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fd11 	bl	8002738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d121      	bne.n	8001dca <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_UART_Transmit_IT+0x26>
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e01a      	b.n	8001dcc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	88fa      	ldrh	r2, [r7, #6]
 8001da0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2221      	movs	r2, #33	@ 0x21
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d112      	bne.n	8001e18 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_UART_Receive_IT+0x26>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00b      	b.n	8001e1a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 faba 	bl	8002388 <UART_Start_Receive_IT>
 8001e14:	4603      	mov	r3, r0
 8001e16:	e000      	b.n	8001e1a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0ba      	sub	sp, #232	@ 0xe8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_UART_IRQHandler+0x66>
 8001e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fb99 	bl	80025ba <UART_Receive_IT>
      return;
 8001e88:	e25b      	b.n	8002342 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80de 	beq.w	8002050 <HAL_UART_IRQHandler+0x22c>
 8001e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d106      	bne.n	8001eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ea4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80d1 	beq.w	8002050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xae>
 8001eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_UART_IRQHandler+0xd2>
 8001ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f043 0202 	orr.w	r2, r3, #2
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_UART_IRQHandler+0xf6>
 8001f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d011      	beq.n	8001f4a <HAL_UART_IRQHandler+0x126>
 8001f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f043 0208 	orr.w	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 81f2 	beq.w	8002338 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_UART_IRQHandler+0x14e>
 8001f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fb24 	bl	80025ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7c:	2b40      	cmp	r3, #64	@ 0x40
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d103      	bne.n	8001f9e <HAL_UART_IRQHandler+0x17a>
 8001f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d04f      	beq.n	800203e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fa2c 	bl	80023fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fae:	2b40      	cmp	r3, #64	@ 0x40
 8001fb0:	d141      	bne.n	8002036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fc0:	e853 3f00 	ldrex	r3, [r3]
 8001fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3314      	adds	r3, #20
 8001fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001fde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fee:	e841 2300 	strex	r3, r2, [r1]
 8001ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1d9      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d013      	beq.n	800202e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200a:	4a7e      	ldr	r2, [pc, #504]	@ (8002204 <HAL_UART_IRQHandler+0x3e0>)
 800200c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f841 	bl	800109a <HAL_DMA_Abort_IT>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002028:	4610      	mov	r0, r2
 800202a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800202c:	e00e      	b.n	800204c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f994 	bl	800235c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	e00a      	b.n	800204c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f990 	bl	800235c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203c:	e006      	b.n	800204c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f98c 	bl	800235c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800204a:	e175      	b.n	8002338 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800204c:	bf00      	nop
    return;
 800204e:	e173      	b.n	8002338 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	2b01      	cmp	r3, #1
 8002056:	f040 814f 	bne.w	80022f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800205a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8148 	beq.w	80022f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8141 	beq.w	80022f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002096:	2b40      	cmp	r3, #64	@ 0x40
 8002098:	f040 80b6 	bne.w	8002208 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80020a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8145 	beq.w	800233c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020ba:	429a      	cmp	r2, r3
 80020bc:	f080 813e 	bcs.w	800233c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d2:	f000 8088 	beq.w	80021e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	330c      	adds	r3, #12
 80020dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	330c      	adds	r3, #12
 80020fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002102:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800210e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002112:	e841 2300 	strex	r3, r2, [r1]
 8002116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800211a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1d9      	bne.n	80020d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3314      	adds	r3, #20
 8002128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800212c:	e853 3f00 	ldrex	r3, [r3]
 8002130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3314      	adds	r3, #20
 8002142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800214a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800214e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002152:	e841 2300 	strex	r3, r2, [r1]
 8002156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1e1      	bne.n	8002122 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3314      	adds	r3, #20
 8002164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002168:	e853 3f00 	ldrex	r3, [r3]
 800216c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800216e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3314      	adds	r3, #20
 800217e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e3      	bne.n	800215e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ae:	e853 3f00 	ldrex	r3, [r3]
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80021b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b6:	f023 0310 	bic.w	r3, r3, #16
 80021ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	330c      	adds	r3, #12
 80021c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80021c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d0:	e841 2300 	strex	r3, r2, [r1]
 80021d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80021d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e3      	bne.n	80021a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe feea 	bl	8000fba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f8b7 	bl	8002370 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002202:	e09b      	b.n	800233c <HAL_UART_IRQHandler+0x518>
 8002204:	080024c3 	.word	0x080024c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002210:	b29b      	uxth	r3, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 808e 	beq.w	8002340 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8089 	beq.w	8002340 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	e853 3f00 	ldrex	r3, [r3]
 800223c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002244:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	330c      	adds	r3, #12
 800224e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002252:	647a      	str	r2, [r7, #68]	@ 0x44
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e3      	bne.n	800222e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3314      	adds	r3, #20
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	623b      	str	r3, [r7, #32]
   return(result);
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3314      	adds	r3, #20
 8002286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800228a:	633a      	str	r2, [r7, #48]	@ 0x30
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e3      	bne.n	8002266 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	e853 3f00 	ldrex	r3, [r3]
 80022ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0310 	bic.w	r3, r3, #16
 80022c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80022d0:	61fa      	str	r2, [r7, #28]
 80022d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	69b9      	ldr	r1, [r7, #24]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	e841 2300 	strex	r3, r2, [r1]
 80022dc:	617b      	str	r3, [r7, #20]
   return(result);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e3      	bne.n	80022ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f83d 	bl	8002370 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022f6:	e023      	b.n	8002340 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_UART_IRQHandler+0x4f4>
 8002304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8ea 	bl	80024ea <UART_Transmit_IT>
    return;
 8002316:	e014      	b.n	8002342 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <HAL_UART_IRQHandler+0x51e>
 8002324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f92a 	bl	800258a <UART_EndTransmit_IT>
    return;
 8002336:	e004      	b.n	8002342 <HAL_UART_IRQHandler+0x51e>
    return;
 8002338:	bf00      	nop
 800233a:	e002      	b.n	8002342 <HAL_UART_IRQHandler+0x51e>
      return;
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <HAL_UART_IRQHandler+0x51e>
      return;
 8002340:	bf00      	nop
  }
}
 8002342:	37e8      	adds	r7, #232	@ 0xe8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2222      	movs	r2, #34	@ 0x22
 80023b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0220 	orr.w	r2, r2, #32
 80023ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b095      	sub	sp, #84	@ 0x54
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	330c      	adds	r3, #12
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	e853 3f00 	ldrex	r3, [r3]
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800241a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002424:	643a      	str	r2, [r7, #64]	@ 0x40
 8002426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002428:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800242a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800242c:	e841 2300 	strex	r3, r2, [r1]
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e5      	bne.n	8002404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3314      	adds	r3, #20
 800243e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	e853 3f00 	ldrex	r3, [r3]
 8002446:	61fb      	str	r3, [r7, #28]
   return(result);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3314      	adds	r3, #20
 8002456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002458:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800245e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002460:	e841 2300 	strex	r3, r2, [r1]
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1e5      	bne.n	8002438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	2b01      	cmp	r3, #1
 8002472:	d119      	bne.n	80024a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	60bb      	str	r3, [r7, #8]
   return(result);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0310 	bic.w	r3, r3, #16
 800248a:	647b      	str	r3, [r7, #68]	@ 0x44
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002494:	61ba      	str	r2, [r7, #24]
 8002496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6979      	ldr	r1, [r7, #20]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	613b      	str	r3, [r7, #16]
   return(result);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024b6:	bf00      	nop
 80024b8:	3754      	adds	r7, #84	@ 0x54
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff3d 	bl	800235c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b21      	cmp	r3, #33	@ 0x21
 80024fc:	d13e      	bne.n	800257c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002506:	d114      	bne.n	8002532 <UART_Transmit_IT+0x48>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d110      	bne.n	8002532 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	1c9a      	adds	r2, r3, #2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	621a      	str	r2, [r3, #32]
 8002530:	e008      	b.n	8002544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6211      	str	r1, [r2, #32]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4619      	mov	r1, r3
 8002552:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10f      	bne.n	8002578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fecc 	bl	8002348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b08c      	sub	sp, #48	@ 0x30
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b22      	cmp	r3, #34	@ 0x22
 80025cc:	f040 80ae 	bne.w	800272c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d8:	d117      	bne.n	800260a <UART_Receive_IT+0x50>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	1c9a      	adds	r2, r3, #2
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
 8002608:	e026      	b.n	8002658 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800261c:	d007      	beq.n	800262e <UART_Receive_IT+0x74>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <UART_Receive_IT+0x82>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e008      	b.n	800264e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002648:	b2da      	uxtb	r2, r3
 800264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29b      	uxth	r3, r3
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002668:	2b00      	cmp	r3, #0
 800266a:	d15d      	bne.n	8002728 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0220 	bic.w	r2, r2, #32
 800267a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800268a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d135      	bne.n	800271e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	e853 3f00 	ldrex	r3, [r3]
 80026c6:	613b      	str	r3, [r7, #16]
   return(result);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f023 0310 	bic.w	r3, r3, #16
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d8:	623a      	str	r2, [r7, #32]
 80026da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	69f9      	ldr	r1, [r7, #28]
 80026de:	6a3a      	ldr	r2, [r7, #32]
 80026e0:	e841 2300 	strex	r3, r2, [r1]
 80026e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e5      	bne.n	80026b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d10a      	bne.n	8002710 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fe2a 	bl	8002370 <HAL_UARTEx_RxEventCallback>
 800271c:	e002      	b.n	8002724 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe f8d2 	bl	80008c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e002      	b.n	800272e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3730      	adds	r7, #48	@ 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800273c:	b0c0      	sub	sp, #256	@ 0x100
 800273e:	af00      	add	r7, sp, #0
 8002740:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	ea40 0301 	orr.w	r3, r0, r1
 8002760:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	431a      	orrs	r2, r3
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	431a      	orrs	r2, r3
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002790:	f021 010c 	bic.w	r1, r1, #12
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800279e:	430b      	orrs	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b2:	6999      	ldr	r1, [r3, #24]
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	ea40 0301 	orr.w	r3, r0, r1
 80027be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002a04 <UART_SetConfig+0x2cc>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d005      	beq.n	80027d8 <UART_SetConfig+0xa0>
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002a08 <UART_SetConfig+0x2d0>)
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d104      	bne.n	80027e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027d8:	f7ff fa64 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80027dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027e0:	e003      	b.n	80027ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff fa4b 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80027e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027f4:	f040 810c 	bne.w	8002a10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002802:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002806:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	1891      	adds	r1, r2, r2
 8002810:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002812:	415b      	adcs	r3, r3
 8002814:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002816:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800281a:	4621      	mov	r1, r4
 800281c:	eb12 0801 	adds.w	r8, r2, r1
 8002820:	4629      	mov	r1, r5
 8002822:	eb43 0901 	adc.w	r9, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283a:	4690      	mov	r8, r2
 800283c:	4699      	mov	r9, r3
 800283e:	4623      	mov	r3, r4
 8002840:	eb18 0303 	adds.w	r3, r8, r3
 8002844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002848:	462b      	mov	r3, r5
 800284a:	eb49 0303 	adc.w	r3, r9, r3
 800284e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800285e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002862:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002866:	460b      	mov	r3, r1
 8002868:	18db      	adds	r3, r3, r3
 800286a:	653b      	str	r3, [r7, #80]	@ 0x50
 800286c:	4613      	mov	r3, r2
 800286e:	eb42 0303 	adc.w	r3, r2, r3
 8002872:	657b      	str	r3, [r7, #84]	@ 0x54
 8002874:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002878:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800287c:	f7fd fd00 	bl	8000280 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4b61      	ldr	r3, [pc, #388]	@ (8002a0c <UART_SetConfig+0x2d4>)
 8002886:	fba3 2302 	umull	r2, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	011c      	lsls	r4, r3, #4
 800288e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002898:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800289c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	1891      	adds	r1, r2, r2
 80028a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028a8:	415b      	adcs	r3, r3
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028b0:	4641      	mov	r1, r8
 80028b2:	eb12 0a01 	adds.w	sl, r2, r1
 80028b6:	4649      	mov	r1, r9
 80028b8:	eb43 0b01 	adc.w	fp, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d0:	4692      	mov	sl, r2
 80028d2:	469b      	mov	fp, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	eb1a 0303 	adds.w	r3, sl, r3
 80028da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028de:	464b      	mov	r3, r9
 80028e0:	eb4b 0303 	adc.w	r3, fp, r3
 80028e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028fc:	460b      	mov	r3, r1
 80028fe:	18db      	adds	r3, r3, r3
 8002900:	643b      	str	r3, [r7, #64]	@ 0x40
 8002902:	4613      	mov	r3, r2
 8002904:	eb42 0303 	adc.w	r3, r2, r3
 8002908:	647b      	str	r3, [r7, #68]	@ 0x44
 800290a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800290e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002912:	f7fd fcb5 	bl	8000280 <__aeabi_uldivmod>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4611      	mov	r1, r2
 800291c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a0c <UART_SetConfig+0x2d4>)
 800291e:	fba3 2301 	umull	r2, r3, r3, r1
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2264      	movs	r2, #100	@ 0x64
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	1acb      	subs	r3, r1, r3
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002932:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <UART_SetConfig+0x2d4>)
 8002934:	fba3 2302 	umull	r2, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002940:	441c      	add	r4, r3
 8002942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800294c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002950:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	1891      	adds	r1, r2, r2
 800295a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800295c:	415b      	adcs	r3, r3
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002964:	4641      	mov	r1, r8
 8002966:	1851      	adds	r1, r2, r1
 8002968:	6339      	str	r1, [r7, #48]	@ 0x30
 800296a:	4649      	mov	r1, r9
 800296c:	414b      	adcs	r3, r1
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800297c:	4659      	mov	r1, fp
 800297e:	00cb      	lsls	r3, r1, #3
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002986:	4651      	mov	r1, sl
 8002988:	00ca      	lsls	r2, r1, #3
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	4603      	mov	r3, r0
 8002990:	4642      	mov	r2, r8
 8002992:	189b      	adds	r3, r3, r2
 8002994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002998:	464b      	mov	r3, r9
 800299a:	460a      	mov	r2, r1
 800299c:	eb42 0303 	adc.w	r3, r2, r3
 80029a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029b8:	460b      	mov	r3, r1
 80029ba:	18db      	adds	r3, r3, r3
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029be:	4613      	mov	r3, r2
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029ce:	f7fd fc57 	bl	8000280 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <UART_SetConfig+0x2d4>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2164      	movs	r1, #100	@ 0x64
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3332      	adds	r3, #50	@ 0x32
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <UART_SetConfig+0x2d4>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	f003 0207 	and.w	r2, r3, #7
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4422      	add	r2, r4
 80029fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a00:	e106      	b.n	8002c10 <UART_SetConfig+0x4d8>
 8002a02:	bf00      	nop
 8002a04:	40011000 	.word	0x40011000
 8002a08:	40011400 	.word	0x40011400
 8002a0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a22:	4642      	mov	r2, r8
 8002a24:	464b      	mov	r3, r9
 8002a26:	1891      	adds	r1, r2, r2
 8002a28:	6239      	str	r1, [r7, #32]
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a32:	4641      	mov	r1, r8
 8002a34:	1854      	adds	r4, r2, r1
 8002a36:	4649      	mov	r1, r9
 8002a38:	eb43 0501 	adc.w	r5, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	00eb      	lsls	r3, r5, #3
 8002a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	18e3      	adds	r3, r4, r3
 8002a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a58:	464b      	mov	r3, r9
 8002a5a:	eb45 0303 	adc.w	r3, r5, r3
 8002a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a7e:	4629      	mov	r1, r5
 8002a80:	008b      	lsls	r3, r1, #2
 8002a82:	4621      	mov	r1, r4
 8002a84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a88:	4621      	mov	r1, r4
 8002a8a:	008a      	lsls	r2, r1, #2
 8002a8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a90:	f7fd fbf6 	bl	8000280 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b60      	ldr	r3, [pc, #384]	@ (8002c1c <UART_SetConfig+0x4e4>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011c      	lsls	r4, r3, #4
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002aac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ab0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	61b9      	str	r1, [r7, #24]
 8002abc:	415b      	adcs	r3, r3
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	1851      	adds	r1, r2, r1
 8002ac8:	6139      	str	r1, [r7, #16]
 8002aca:	4649      	mov	r1, r9
 8002acc:	414b      	adcs	r3, r1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002adc:	4659      	mov	r1, fp
 8002ade:	00cb      	lsls	r3, r1, #3
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	00ca      	lsls	r2, r1, #3
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	4642      	mov	r2, r8
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	008b      	lsls	r3, r1, #2
 8002b20:	4641      	mov	r1, r8
 8002b22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b26:	4641      	mov	r1, r8
 8002b28:	008a      	lsls	r2, r1, #2
 8002b2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b2e:	f7fd fba7 	bl	8000280 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	4b38      	ldr	r3, [pc, #224]	@ (8002c1c <UART_SetConfig+0x4e4>)
 8002b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2264      	movs	r2, #100	@ 0x64
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	1acb      	subs	r3, r1, r3
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	3332      	adds	r3, #50	@ 0x32
 8002b4c:	4a33      	ldr	r2, [pc, #204]	@ (8002c1c <UART_SetConfig+0x4e4>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b58:	441c      	add	r4, r3
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b62:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	415b      	adcs	r3, r3
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b78:	4641      	mov	r1, r8
 8002b7a:	1851      	adds	r1, r2, r1
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	4649      	mov	r1, r9
 8002b80:	414b      	adcs	r3, r1
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b90:	4659      	mov	r1, fp
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002baa:	464b      	mov	r3, r9
 8002bac:	460a      	mov	r2, r1
 8002bae:	eb42 0303 	adc.w	r3, r2, r3
 8002bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bbe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bcc:	4649      	mov	r1, r9
 8002bce:	008b      	lsls	r3, r1, #2
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	008a      	lsls	r2, r1, #2
 8002bda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bde:	f7fd fb4f 	bl	8000280 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <UART_SetConfig+0x4e4>)
 8002be8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	2164      	movs	r1, #100	@ 0x64
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	3332      	adds	r3, #50	@ 0x32
 8002bfa:	4a08      	ldr	r2, [pc, #32]	@ (8002c1c <UART_SetConfig+0x4e4>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4422      	add	r2, r4
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c16:	46bd      	mov	sp, r7
 8002c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1c:	51eb851f 	.word	0x51eb851f

08002c20 <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 8002c26:	f243 3114 	movw	r1, #13076	@ 0x3314
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f004 fca4 	bl	8007578 <calloc>
 8002c30:	4603      	mov	r3, r0
 8002c32:	607b      	str	r3, [r7, #4]
    if (!handle)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fa1c 	bl	800607c <TF_InitStatic>
 8002c44:	4603      	mov	r3, r0
 8002c46:	70fb      	strb	r3, [r7, #3]
    if (!status)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f083 0301 	eor.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4909      	ldr	r1, [pc, #36]	@ (8002c7c <gapcom_create+0x5c>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fb23 	bl	80062a4 <TF_AddGenericListener>

    goto end;
 8002c5e:	e007      	b.n	8002c70 <gapcom_create+0x50>
        goto free_handle;
 8002c60:	bf00      	nop

free_handle:
    free(handle);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f004 fca4 	bl	80075b0 <free>
    handle = NULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	e000      	b.n	8002c70 <gapcom_create+0x50>
        goto end;
 8002c6e:	bf00      	nop
end:
    return handle;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	08002d49 	.word	0x08002d49

08002c80 <gapcom_set_sender_impl>:
        free(handle);
    }
}

void gapcom_set_sender_impl(gapcom_handle_t* handle, gapcom_sender_t* sender_impl)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    handle->sender_impl = sender_impl;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c90:	461a      	mov	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <gapcom_install_callback>:

void gapcom_install_callback(
    gapcom_handle_t* handle,
    gapcom_callback_t callback,
    gapcom_msg_t msg_type)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	71fb      	strb	r3, [r7, #7]
    if (msg_type < GAPCOM_MSG_MIN || msg_type > GAPCOM_MSG_MAX)
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2b0e      	cmp	r3, #14
 8002cb6:	d808      	bhi.n	8002cca <gapcom_install_callback+0x26>
        log_com("Unexpected msg_type for callback: %u", msg_type);
        return;
    }
    else
    {
        handle->user_callback[msg_type] = callback;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e000      	b.n	8002ccc <gapcom_install_callback+0x28>
        return;
 8002cca:	bf00      	nop
    }
}
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <gapcom_accept>:
{
    handle->user_callback[msg_type] = NULL;
}

void gapcom_accept(gapcom_handle_t* handle, const uint8_t* buf, size_t len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
    log_com("Accepting message");
    /* CAUTION: TinyFrame offers no way of checking if this succeeded ! */
    TF_Accept(&handle->tf_handle, buf, len);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fc13 	bl	8006514 <TF_Accept>
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8002cfe:	2218      	movs	r2, #24
 8002d00:	2100      	movs	r1, #0
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f004 ff14 	bl	8007b30 <memset>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <TF_WriteImpl>:
#include <pb_decode.h>
#include <stdint.h>
#include <unistd.h>

void TF_WriteImpl(TinyFrame* tf_handle, const uint8_t* buf, uint32_t len)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
    ssize_t bytes_sent;
    gapcom_handle_t* handle;
    gapcom_sender_t* sender;

    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
    sender = handle->sender_impl;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d2a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8002d2e:	617b      	str	r3, [r7, #20]
    bytes_sent = sender->send(sender, buf, len);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	6978      	ldr	r0, [r7, #20]
 8002d3a:	4798      	blx	r3
 8002d3c:	6138      	str	r0, [r7, #16]
    if (bytes_sent < 0)
    {
        log_com("Failed to send message, returned %lld", bytes_sent);
    }
}
 8002d3e:	bf00      	nop
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b0a3      	sub	sp, #140	@ 0x8c
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6178      	str	r0, [r7, #20]
 8002d50:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	88db      	ldrh	r3, [r3, #6]
 8002d64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d68:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 8002d74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 81e0 	beq.w	800313c <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f103 011a 	add.w	r1, r3, #26
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	8b1b      	ldrh	r3, [r3, #24]
 8002d86:	461a      	mov	r2, r3
 8002d88:	463b      	mov	r3, r7
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fb3a 	bl	8003404 <pb_istream_from_buffer>
 8002d90:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002d94:	463b      	mov	r3, r7
 8002d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	88db      	ldrh	r3, [r3, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11a      	bne.n	8002dda <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 8002daa:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002dae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002db2:	49b9      	ldr	r1, [pc, #740]	@ (8003098 <gapcom_tf_id_listener+0x350>)
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fc5f 	bl	8004678 <pb_decode>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002dc0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 81bc 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002dca:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002dce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002dd6:	4798      	blx	r3
 8002dd8:	e1b3      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	88db      	ldrh	r3, [r3, #6]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d11a      	bne.n	8002e18 <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 8002de8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002dec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002df0:	49aa      	ldr	r1, [pc, #680]	@ (800309c <gapcom_tf_id_listener+0x354>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fc40 	bl	8004678 <pb_decode>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002dfe:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 819d 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002e08:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e0e:	4611      	mov	r1, r2
 8002e10:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e14:	4798      	blx	r3
 8002e16:	e194      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	88db      	ldrh	r3, [r3, #6]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11a      	bne.n	8002e56 <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 8002e26:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002e2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e2e:	499c      	ldr	r1, [pc, #624]	@ (80030a0 <gapcom_tf_id_listener+0x358>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 fc21 	bl	8004678 <pb_decode>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002e3c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 817e 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002e46:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e52:	4798      	blx	r3
 8002e54:	e175      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	88db      	ldrh	r3, [r3, #6]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d11a      	bne.n	8002e94 <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8002e64:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002e68:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e6c:	498d      	ldr	r1, [pc, #564]	@ (80030a4 <gapcom_tf_id_listener+0x35c>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 fc02 	bl	8004678 <pb_decode>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002e7a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 815f 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002e84:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002e88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e90:	4798      	blx	r3
 8002e92:	e156      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	88db      	ldrh	r3, [r3, #6]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d11a      	bne.n	8002ed2 <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 8002ea2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002ea6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002eaa:	497f      	ldr	r1, [pc, #508]	@ (80030a8 <gapcom_tf_id_listener+0x360>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fbe3 	bl	8004678 <pb_decode>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002eb8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8140 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002ec2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002ec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ec8:	4611      	mov	r1, r2
 8002eca:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002ece:	4798      	blx	r3
 8002ed0:	e137      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	88db      	ldrh	r3, [r3, #6]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d11a      	bne.n	8002f10 <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 8002ee0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002ee4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ee8:	4970      	ldr	r1, [pc, #448]	@ (80030ac <gapcom_tf_id_listener+0x364>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fbc4 	bl	8004678 <pb_decode>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002ef6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8121 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002f00:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002f04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f06:	4611      	mov	r1, r2
 8002f08:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f0c:	4798      	blx	r3
 8002f0e:	e118      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	88db      	ldrh	r3, [r3, #6]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d11d      	bne.n	8002f54 <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 8002f18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8002f24:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002f28:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f2c:	4960      	ldr	r1, [pc, #384]	@ (80030b0 <gapcom_tf_id_listener+0x368>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fba2 	bl	8004678 <pb_decode>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f3a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80ff 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002f44:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002f48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f50:	4798      	blx	r3
 8002f52:	e0f6      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	88db      	ldrh	r3, [r3, #6]
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	d11a      	bne.n	8002f92 <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 8002f62:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f66:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f6a:	4952      	ldr	r1, [pc, #328]	@ (80030b4 <gapcom_tf_id_listener+0x36c>)
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 fb83 	bl	8004678 <pb_decode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f78:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80e0 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002f82:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f88:	4611      	mov	r1, r2
 8002f8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f8e:	4798      	blx	r3
 8002f90:	e0d7      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	88db      	ldrh	r3, [r3, #6]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11a      	bne.n	8002fd0 <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 8002fa0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002fa4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002fa8:	4943      	ldr	r1, [pc, #268]	@ (80030b8 <gapcom_tf_id_listener+0x370>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 fb64 	bl	8004678 <pb_decode>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002fb6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80c1 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 8002fc0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002fcc:	4798      	blx	r3
 8002fce:	e0b8      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	88db      	ldrh	r3, [r3, #6]
 8002fd4:	2b09      	cmp	r3, #9
 8002fd6:	d120      	bne.n	800301a <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002fde:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 8002fea:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002fee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ff2:	4932      	ldr	r1, [pc, #200]	@ (80030bc <gapcom_tf_id_listener+0x374>)
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fb3f 	bl	8004678 <pb_decode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003000:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 809c 	beq.w	8003142 <gapcom_tf_id_listener+0x3fa>
 800300a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800300e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003010:	4611      	mov	r1, r2
 8003012:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003016:	4798      	blx	r3
 8003018:	e093      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	88db      	ldrh	r3, [r3, #6]
 800301e:	2b0a      	cmp	r3, #10
 8003020:	d119      	bne.n	8003056 <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 8003028:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800302c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003030:	4923      	ldr	r1, [pc, #140]	@ (80030c0 <gapcom_tf_id_listener+0x378>)
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fb20 	bl	8004678 <pb_decode>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800303e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003042:	2b00      	cmp	r3, #0
 8003044:	d07d      	beq.n	8003142 <gapcom_tf_id_listener+0x3fa>
 8003046:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800304a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800304c:	4611      	mov	r1, r2
 800304e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003052:	4798      	blx	r3
 8003054:	e075      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	88db      	ldrh	r3, [r3, #6]
 800305a:	2b0b      	cmp	r3, #11
 800305c:	d134      	bne.n	80030c8 <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 800305e:	f107 0320 	add.w	r3, r7, #32
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 8003068:	f107 0220 	add.w	r2, r7, #32
 800306c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003070:	4914      	ldr	r1, [pc, #80]	@ (80030c4 <gapcom_tf_id_listener+0x37c>)
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fb00 	bl	8004678 <pb_decode>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800307e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003082:	2b00      	cmp	r3, #0
 8003084:	d05d      	beq.n	8003142 <gapcom_tf_id_listener+0x3fa>
 8003086:	f107 0220 	add.w	r2, r7, #32
 800308a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800308c:	4611      	mov	r1, r2
 800308e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003092:	4798      	blx	r3
 8003094:	e055      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
 8003096:	bf00      	nop
 8003098:	08008a2c 	.word	0x08008a2c
 800309c:	08008a50 	.word	0x08008a50
 80030a0:	08008a74 	.word	0x08008a74
 80030a4:	08008a98 	.word	0x08008a98
 80030a8:	08008abc 	.word	0x08008abc
 80030ac:	08008ae0 	.word	0x08008ae0
 80030b0:	08008b08 	.word	0x08008b08
 80030b4:	08008b2c 	.word	0x08008b2c
 80030b8:	08008b4c 	.word	0x08008b4c
 80030bc:	08008b78 	.word	0x08008b78
 80030c0:	08008b98 	.word	0x08008b98
 80030c4:	08008bcc 	.word	0x08008bcc
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	88db      	ldrh	r3, [r3, #6]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d118      	bne.n	8003102 <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 80030d0:	2300      	movs	r3, #0
 80030d2:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 80030d4:	f107 021c 	add.w	r2, r7, #28
 80030d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030dc:	491b      	ldr	r1, [pc, #108]	@ (800314c <gapcom_tf_id_listener+0x404>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 faca 	bl	8004678 <pb_decode>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80030ea:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d027      	beq.n	8003142 <gapcom_tf_id_listener+0x3fa>
 80030f2:	f107 021c 	add.w	r2, r7, #28
 80030f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030f8:	4611      	mov	r1, r2
 80030fa:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030fe:	4798      	blx	r3
 8003100:	e01f      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	88db      	ldrh	r3, [r3, #6]
 8003106:	2b0d      	cmp	r3, #13
 8003108:	d11a      	bne.n	8003140 <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 800310a:	2300      	movs	r3, #0
 800310c:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 800310e:	f107 0218 	add.w	r2, r7, #24
 8003112:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003116:	490e      	ldr	r1, [pc, #56]	@ (8003150 <gapcom_tf_id_listener+0x408>)
 8003118:	4618      	mov	r0, r3
 800311a:	f001 faad 	bl	8004678 <pb_decode>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003124:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <gapcom_tf_id_listener+0x3fa>
 800312c:	f107 0218 	add.w	r2, r7, #24
 8003130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003132:	4611      	mov	r1, r2
 8003134:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003138:	4798      	blx	r3
 800313a:	e002      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
        goto end;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 8003140:	bf00      	nop
    return TF_STAY;
 8003142:	2301      	movs	r3, #1
}
 8003144:	4618      	mov	r0, r3
 8003146:	378c      	adds	r7, #140	@ 0x8c
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	08008bf0 	.word	0x08008bf0
 8003150:	08008c14 	.word	0x08008c14

08003154 <gapcom_encapsulate_tf>:

int gapcom_encapsulate_tf(
    gapcom_handle_t* handle,
    gapcom_msg_t msg_type,
    int msg_len)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	460b      	mov	r3, r1
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	72fb      	strb	r3, [r7, #11]
    /* Build TinyFrame frame pointing to payload */
    TF_ClearMsg(&handle->tf_msg);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8003168:	3320      	adds	r3, #32
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fdc3 	bl	8002cf6 <TF_ClearMsg>
    handle->tf_msg.type = msg_type;
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800317a:	f8a3 2266 	strh.w	r2, [r3, #614]	@ 0x266
    handle->tf_msg.data = (const uint8_t*)(&handle->sendbuf);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 8003184:	3334      	adds	r3, #52	@ 0x34
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800318c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    handle->tf_msg.len = (TF_LEN)msg_len;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800319a:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
    /* When the payload is empty (which can happen with protobuf, for example
     * with a single numeric field with value 0 : it will get compressed and
     * interpreted as 0 upon decoding) the payload CRC is not appended by
     * TinyFrame. Otherwise, we do have a payload CRC as a footer.
     */
    if (msg_len > 0)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	dd01      	ble.n	80031a8 <gapcom_encapsulate_tf+0x54>
        return GAPCOM_TF_HEADER_SIZE_BYTES + GAPCOM_TF_FOOTER_SIZE_BYTES;
 80031a4:	230d      	movs	r3, #13
 80031a6:	e000      	b.n	80031aa <gapcom_encapsulate_tf+0x56>
    else
        return GAPCOM_TF_HEADER_SIZE_BYTES;
 80031a8:	230b      	movs	r3, #11
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <gapcom_respond_ping>:
 ************************/

int gapcom_respond_ping(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b092      	sub	sp, #72	@ 0x48
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	61f8      	str	r0, [r7, #28]
 80031bc:	460b      	mov	r3, r1
 80031be:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPPingResp resp = GAPPingResp_init_zero;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 80031ca:	7efb      	ldrb	r3, [r7, #27]
 80031cc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPPingResp_fields, resp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d6:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 80031da:	3334      	adds	r3, #52	@ 0x34
 80031dc:	4638      	mov	r0, r7
 80031de:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 80031e2:	4619      	mov	r1, r3
 80031e4:	f001 fe1a 	bl	8004e1c <pb_ostream_from_buffer>
 80031e8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80031ec:	463d      	mov	r5, r7
 80031ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f2:	682b      	ldr	r3, [r5, #0]
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80031fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fe:	4919      	ldr	r1, [pc, #100]	@ (8003264 <gapcom_respond_ping+0xb0>)
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fa78 	bl	80056f6 <pb_encode>
 8003206:	4603      	mov	r3, r0
 8003208:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800320c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <gapcom_respond_ping+0x66>
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	643b      	str	r3, [r7, #64]	@ 0x40
 8003218:	e002      	b.n	8003220 <gapcom_respond_ping+0x6c>
 800321a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800321e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003224:	4413      	add	r3, r2
 8003226:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 8003228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800322e:	d012      	beq.n	8003256 <gapcom_respond_ping+0xa2>
    {
        log_com("Failed to encode Ping protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_PING_RESP, ret);
 8003230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003232:	2101      	movs	r1, #1
 8003234:	69f8      	ldr	r0, [r7, #28]
 8003236:	f7ff ff8d 	bl	8003154 <gapcom_encapsulate_tf>
 800323a:	4602      	mov	r2, r0
 800323c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323e:	4413      	add	r3, r2
 8003240:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 800324a:	3320      	adds	r3, #32
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f003 fe68 	bl	8006f24 <TF_Respond>
 8003254:	e000      	b.n	8003258 <gapcom_respond_ping+0xa4>
        goto end;
 8003256:	bf00      	nop

end:
    return ret;
 8003258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800325a:	4618      	mov	r0, r3
 800325c:	3748      	adds	r7, #72	@ 0x48
 800325e:	46bd      	mov	sp, r7
 8003260:	bdb0      	pop	{r4, r5, r7, pc}
 8003262:	bf00      	nop
 8003264:	08008a50 	.word	0x08008a50

08003268 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6979      	ldr	r1, [r7, #20]
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	f004 fcd8 	bl	8007c46 <memcpy>
    }
    
    return true;
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
    if (count == 0)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <pb_read+0x16>
        return true;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e05f      	b.n	8003376 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d123      	bne.n	8003304 <pb_read+0x64>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003380 <pb_read+0xe0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01e      	beq.n	8003304 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 80032c6:	e011      	b.n	80032ec <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80032c8:	f107 0310 	add.w	r3, r7, #16
 80032cc:	2210      	movs	r2, #16
 80032ce:	4619      	mov	r1, r3
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff ffe5 	bl	80032a0 <pb_read>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <pb_read+0x46>
				return false;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e047      	b.n	8003376 <pb_read+0xd6>
			
			count -= 16;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3b10      	subs	r3, #16
 80032ea:	607b      	str	r3, [r7, #4]
		while (count > 16)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d8ea      	bhi.n	80032c8 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 80032f2:	f107 0310 	add.w	r3, r7, #16
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4619      	mov	r1, r3
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff ffd0 	bl	80032a0 <pb_read>
 8003300:	4603      	mov	r3, r0
 8003302:	e038      	b.n	8003376 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d90b      	bls.n	8003326 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <pb_read+0x7c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	e000      	b.n	800331e <pb_read+0x7e>
 800331c:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <pb_read+0xe4>)
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	60d3      	str	r3, [r2, #12]
 8003322:	2300      	movs	r3, #0
 8003324:	e027      	b.n	8003376 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	4798      	blx	r3
 8003332:	4603      	mov	r3, r0
 8003334:	f083 0301 	eor.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <pb_read+0xac>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	e000      	b.n	800334e <pb_read+0xae>
 800334c:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <pb_read+0xe8>)
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	60d3      	str	r3, [r2, #12]
 8003352:	2300      	movs	r3, #0
 8003354:	e00f      	b.n	8003376 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d903      	bls.n	8003368 <pb_read+0xc8>
        stream->bytes_left = 0;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e005      	b.n	8003374 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad2      	subs	r2, r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]

    return true;
 8003374:	2301      	movs	r3, #1
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	08003269 	.word	0x08003269
 8003384:	0800850c 	.word	0x0800850c
 8003388:	0800851c 	.word	0x0800851c

0800338c <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <pb_readbyte+0x20>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	e000      	b.n	80033ae <pb_readbyte+0x22>
 80033ac:	4b13      	ldr	r3, [pc, #76]	@ (80033fc <pb_readbyte+0x70>)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	60d3      	str	r3, [r2, #12]
 80033b2:	2300      	movs	r3, #0
 80033b4:	e01d      	b.n	80033f2 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <pb_readbyte+0x50>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	e000      	b.n	80033de <pb_readbyte+0x52>
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <pb_readbyte+0x74>)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	60d3      	str	r3, [r2, #12]
 80033e2:	2300      	movs	r3, #0
 80033e4:	e005      	b.n	80033f2 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]
    
    return true;    
 80033f0:	2301      	movs	r3, #1
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	0800850c 	.word	0x0800850c
 8003400:	0800851c 	.word	0x0800851c

08003404 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8003404:	b490      	push	{r4, r7}
 8003406:	b08a      	sub	sp, #40	@ 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8003410:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <pb_istream_from_buffer+0x38>)
 8003412:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	461c      	mov	r4, r3
 8003428:	f107 0318 	add.w	r3, r7, #24
 800342c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800342e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	3728      	adds	r7, #40	@ 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bc90      	pop	{r4, r7}
 800343a:	4770      	bx	lr
 800343c:	08003269 	.word	0x08003269

08003440 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800344c:	f107 0315 	add.w	r3, r7, #21
 8003450:	4619      	mov	r1, r3
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ff9a 	bl	800338c <pb_readbyte>
 8003458:	4603      	mov	r3, r0
 800345a:	f083 0301 	eor.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003478:	2300      	movs	r3, #0
 800347a:	e084      	b.n	8003586 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 800347c:	7d7b      	ldrb	r3, [r7, #21]
 800347e:	b25b      	sxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	db02      	blt.n	800348a <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003484:	7d7b      	ldrb	r3, [r7, #21]
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e079      	b.n	800357e <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800348a:	2307      	movs	r3, #7
 800348c:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800348e:	7d7b      	ldrb	r3, [r7, #21]
 8003490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003494:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8003496:	f107 0315 	add.w	r3, r7, #21
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff75 	bl	800338c <pb_readbyte>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f083 0301 	eor.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <pb_decode_varint32_eof+0x72>
                return false;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e069      	b.n	8003586 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b1f      	cmp	r3, #31
 80034b6:	d92f      	bls.n	8003518 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80034bc:	d801      	bhi.n	80034c2 <pb_decode_varint32_eof+0x82>
 80034be:	23ff      	movs	r3, #255	@ 0xff
 80034c0:	e000      	b.n	80034c4 <pb_decode_varint32_eof+0x84>
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034c6:	7d7b      	ldrb	r3, [r7, #21]
 80034c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 80034d0:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da05      	bge.n	80034e2 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 80034d6:	7d7b      	ldrb	r3, [r7, #21]
 80034d8:	7dfa      	ldrb	r2, [r7, #23]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d101      	bne.n	80034e2 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <pb_decode_varint32_eof+0xa4>
 80034e2:	2300      	movs	r3, #0
 80034e4:	75bb      	strb	r3, [r7, #22]
 80034e6:	7dbb      	ldrb	r3, [r7, #22]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034f2:	d805      	bhi.n	8003500 <pb_decode_varint32_eof+0xc0>
 80034f4:	7dbb      	ldrb	r3, [r7, #22]
 80034f6:	f083 0301 	eor.w	r3, r3, #1
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d037      	beq.n	8003570 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <pb_decode_varint32_eof+0xce>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	e000      	b.n	8003510 <pb_decode_varint32_eof+0xd0>
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <pb_decode_varint32_eof+0x150>)
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	2300      	movs	r3, #0
 8003516:	e036      	b.n	8003586 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b1c      	cmp	r3, #28
 800351c:	d11f      	bne.n	800355e <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 800351e:	7d7b      	ldrb	r3, [r7, #21]
 8003520:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <pb_decode_varint32_eof+0x10a>
 8003528:	7d7b      	ldrb	r3, [r7, #21]
 800352a:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800352e:	2b78      	cmp	r3, #120	@ 0x78
 8003530:	d00b      	beq.n	800354a <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <pb_decode_varint32_eof+0x100>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	e000      	b.n	8003542 <pb_decode_varint32_eof+0x102>
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <pb_decode_varint32_eof+0x150>)
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	60d3      	str	r3, [r2, #12]
 8003546:	2300      	movs	r3, #0
 8003548:	e01d      	b.n	8003586 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 800354a:	7d7b      	ldrb	r3, [r7, #21]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	4313      	orrs	r3, r2
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e008      	b.n	8003570 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800355e:	7d7b      	ldrb	r3, [r7, #21]
 8003560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	4313      	orrs	r3, r2
 800356e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	3307      	adds	r3, #7
 8003574:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8003576:	7d7b      	ldrb	r3, [r7, #21]
 8003578:	b25b      	sxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	db8b      	blt.n	8003496 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	601a      	str	r2, [r3, #0]
   return true;
 8003584:	2301      	movs	r3, #1
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08008528 	.word	0x08008528

08003594 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800359e:	2200      	movs	r2, #0
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff4c 	bl	8003440 <pb_decode_varint32_eof>
 80035a8:	4603      	mov	r3, r0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b08a      	sub	sp, #40	@ 0x28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 80035d0:	f107 0317 	add.w	r3, r7, #23
 80035d4:	4619      	mov	r1, r3
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff fed8 	bl	800338c <pb_readbyte>
 80035dc:	4603      	mov	r3, r0
 80035de:	f083 0301 	eor.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <pb_decode_varint+0x38>
            return false;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e041      	b.n	8003670 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80035f0:	d910      	bls.n	8003614 <pb_decode_varint+0x60>
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <pb_decode_varint+0x56>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	e000      	b.n	800360c <pb_decode_varint+0x58>
 800360a:	4b1c      	ldr	r3, [pc, #112]	@ (800367c <pb_decode_varint+0xc8>)
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	60d3      	str	r3, [r2, #12]
 8003610:	2300      	movs	r3, #0
 8003612:	e02d      	b.n	8003670 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2200      	movs	r2, #0
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8003624:	f04f 0900 	mov.w	r9, #0
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	f1a3 0120 	sub.w	r1, r3, #32
 800362e:	f1c3 0220 	rsb	r2, r3, #32
 8003632:	fa09 f503 	lsl.w	r5, r9, r3
 8003636:	fa08 f101 	lsl.w	r1, r8, r1
 800363a:	430d      	orrs	r5, r1
 800363c:	fa28 f202 	lsr.w	r2, r8, r2
 8003640:	4315      	orrs	r5, r2
 8003642:	fa08 f403 	lsl.w	r4, r8, r3
 8003646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364a:	ea42 0a04 	orr.w	sl, r2, r4
 800364e:	ea43 0b05 	orr.w	fp, r3, r5
 8003652:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	3307      	adds	r3, #7
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	b25b      	sxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	dbb5      	blt.n	80035d0 <pb_decode_varint+0x1c>
    
    *dest = result;
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800366a:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	@ 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	08008528 	.word	0x08008528

08003680 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003688:	f107 030f 	add.w	r3, r7, #15
 800368c:	2201      	movs	r2, #1
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fe05 	bl	80032a0 <pb_read>
 8003696:	4603      	mov	r3, r0
 8003698:	f083 0301 	eor.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <pb_skip_varint+0x26>
            return false;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e004      	b.n	80036b0 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dbec      	blt.n	8003688 <pb_skip_varint+0x8>
    return true;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff64 	bl	8003594 <pb_decode_varint32>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <pb_skip_string+0x24>
        return false;
 80036d8:	2300      	movs	r3, #0
 80036da:	e006      	b.n	80036ea <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fddc 	bl	80032a0 <pb_read>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fe90 	bl	8003440 <pb_decode_varint32_eof>
 8003720:	4603      	mov	r3, r0
 8003722:	f083 0301 	eor.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <pb_decode_tag+0x3e>
    {
        return false;
 800372c:	2300      	movs	r3, #0
 800372e:	e00b      	b.n	8003748 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	701a      	strb	r2, [r3, #0]
    return true;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d826      	bhi.n	80037b0 <pb_skip_field+0x60>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <pb_skip_field+0x18>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003781 	.word	0x08003781
 800376c:	0800378b 	.word	0x0800378b
 8003770:	08003799 	.word	0x08003799
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037b1 	.word	0x080037b1
 800377c:	080037a3 	.word	0x080037a3
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff7d 	bl	8003680 <pb_skip_varint>
 8003786:	4603      	mov	r3, r0
 8003788:	e01d      	b.n	80037c6 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800378a:	2208      	movs	r2, #8
 800378c:	2100      	movs	r1, #0
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fd86 	bl	80032a0 <pb_read>
 8003794:	4603      	mov	r3, r0
 8003796:	e016      	b.n	80037c6 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ff8d 	bl	80036b8 <pb_skip_string>
 800379e:	4603      	mov	r3, r0
 80037a0:	e011      	b.n	80037c6 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80037a2:	2204      	movs	r2, #4
 80037a4:	2100      	movs	r1, #0
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fd7a 	bl	80032a0 <pb_read>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e00a      	b.n	80037c6 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <pb_skip_field+0x6e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	e000      	b.n	80037c0 <pb_skip_field+0x70>
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <pb_skip_field+0x80>)
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	60d3      	str	r3, [r2, #12]
 80037c4:	2300      	movs	r3, #0
    }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	08008538 	.word	0x08008538

080037d4 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	460b      	mov	r3, r1
 80037e2:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 80037ea:	7afb      	ldrb	r3, [r7, #11]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d03f      	beq.n	8003870 <read_raw_value+0x9c>
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	dc47      	bgt.n	8003884 <read_raw_value+0xb0>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <read_raw_value+0x2a>
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d02f      	beq.n	800385c <read_raw_value+0x88>
 80037fc:	e042      	b.n	8003884 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	d20b      	bcs.n	8003830 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <read_raw_value+0x52>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	e000      	b.n	8003828 <read_raw_value+0x54>
 8003826:	4b1f      	ldr	r3, [pc, #124]	@ (80038a4 <read_raw_value+0xd0>)
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	60d3      	str	r3, [r2, #12]
 800382c:	2300      	movs	r3, #0
 800382e:	e034      	b.n	800389a <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8003830:	2201      	movs	r2, #1
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff fd33 	bl	80032a0 <pb_read>
 800383a:	4603      	mov	r3, r0
 800383c:	f083 0301 	eor.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <read_raw_value+0x76>
                    return false;
 8003846:	2300      	movs	r3, #0
 8003848:	e027      	b.n	800389a <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b25b      	sxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	dbd5      	blt.n	8003804 <read_raw_value+0x30>
            return true;
 8003858:	2301      	movs	r3, #1
 800385a:	e01e      	b.n	800389a <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2208      	movs	r2, #8
 8003860:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8003862:	2208      	movs	r2, #8
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff fd1a 	bl	80032a0 <pb_read>
 800386c:	4603      	mov	r3, r0
 800386e:	e014      	b.n	800389a <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8003876:	2204      	movs	r2, #4
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fd10 	bl	80032a0 <pb_read>
 8003880:	4603      	mov	r3, r0
 8003882:	e00a      	b.n	800389a <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <read_raw_value+0xbe>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	e000      	b.n	8003894 <read_raw_value+0xc0>
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <read_raw_value+0xd4>)
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	60d3      	str	r3, [r2, #12]
 8003898:	2300      	movs	r3, #0
    }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08008528 	.word	0x08008528
 80038a8:	08008538 	.word	0x08008538

080038ac <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80038b6:	f107 030c 	add.w	r3, r7, #12
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fe69 	bl	8003594 <pb_decode_varint32>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f083 0301 	eor.w	r3, r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <pb_make_string_substream+0x26>
        return false;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e020      	b.n	8003914 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4614      	mov	r4, r2
 80038d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d20b      	bcs.n	8003900 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <pb_make_string_substream+0x4a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	e000      	b.n	80038f8 <pb_make_string_substream+0x4c>
 80038f6:	4b09      	ldr	r3, [pc, #36]	@ (800391c <pb_make_string_substream+0x70>)
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	60d3      	str	r3, [r2, #12]
 80038fc:	2300      	movs	r3, #0
 80038fe:	e009      	b.n	8003914 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	609a      	str	r2, [r3, #8]
    return true;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bd90      	pop	{r4, r7, pc}
 800391c:	0800854c 	.word	0x0800854c

08003920 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	461a      	mov	r2, r3
 8003938:	2100      	movs	r1, #0
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f7ff fcb0 	bl	80032a0 <pb_read>
 8003940:	4603      	mov	r3, r0
 8003942:	f083 0301 	eor.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <pb_close_string_substream+0x30>
            return false;
 800394c:	2300      	movs	r3, #0
 800394e:	e008      	b.n	8003962 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003960:	2301      	movs	r3, #1
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	460b      	mov	r3, r1
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7d9b      	ldrb	r3, [r3, #22]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2b0b      	cmp	r3, #11
 8003984:	f200 80d4 	bhi.w	8003b30 <decode_basic_field+0x1c4>
 8003988:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <decode_basic_field+0x24>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c1 	.word	0x080039c1
 8003994:	080039f1 	.word	0x080039f1
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	08003a21 	.word	0x08003a21
 80039a4:	08003a55 	.word	0x08003a55
 80039a8:	08003a89 	.word	0x08003a89
 80039ac:	08003ab3 	.word	0x08003ab3
 80039b0:	08003add 	.word	0x08003add
 80039b4:	08003add 	.word	0x08003add
 80039b8:	08003b31 	.word	0x08003b31
 80039bc:	08003b07 	.word	0x08003b07
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <decode_basic_field+0x78>
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	2bff      	cmp	r3, #255	@ 0xff
 80039ca:	d00b      	beq.n	80039e4 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <decode_basic_field+0x6e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	e000      	b.n	80039dc <decode_basic_field+0x70>
 80039da:	4b5d      	ldr	r3, [pc, #372]	@ (8003b50 <decode_basic_field+0x1e4>)
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	2300      	movs	r3, #0
 80039e2:	e0b0      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fef6 	bl	80047d8 <pb_dec_bool>
 80039ec:	4603      	mov	r3, r0
 80039ee:	e0aa      	b.n	8003b46 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <decode_basic_field+0xa8>
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	2bff      	cmp	r3, #255	@ 0xff
 80039fa:	d00b      	beq.n	8003a14 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <decode_basic_field+0x9e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	e000      	b.n	8003a0c <decode_basic_field+0xa0>
 8003a0a:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	60d3      	str	r3, [r2, #12]
 8003a10:	2300      	movs	r3, #0
 8003a12:	e098      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 feee 	bl	80047f8 <pb_dec_varint>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	e092      	b.n	8003b46 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8003a20:	7afb      	ldrb	r3, [r7, #11]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d00e      	beq.n	8003a44 <decode_basic_field+0xd8>
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	2bff      	cmp	r3, #255	@ 0xff
 8003a2a:	d00b      	beq.n	8003a44 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <decode_basic_field+0xce>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	e000      	b.n	8003a3c <decode_basic_field+0xd0>
 8003a3a:	4b45      	ldr	r3, [pc, #276]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	2300      	movs	r3, #0
 8003a42:	e080      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fe8a 	bl	8004764 <pb_decode_fixed32>
 8003a50:	4603      	mov	r3, r0
 8003a52:	e078      	b.n	8003b46 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d00e      	beq.n	8003a78 <decode_basic_field+0x10c>
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	2bff      	cmp	r3, #255	@ 0xff
 8003a5e:	d00b      	beq.n	8003a78 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <decode_basic_field+0x102>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	e000      	b.n	8003a70 <decode_basic_field+0x104>
 8003a6e:	4b38      	ldr	r3, [pc, #224]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	60d3      	str	r3, [r2, #12]
 8003a74:	2300      	movs	r3, #0
 8003a76:	e066      	b.n	8003b46 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fe8c 	bl	800479c <pb_decode_fixed64>
 8003a84:	4603      	mov	r3, r0
 8003a86:	e05e      	b.n	8003b46 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d00b      	beq.n	8003aa6 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <decode_basic_field+0x130>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	e000      	b.n	8003a9e <decode_basic_field+0x132>
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	60d3      	str	r3, [r2, #12]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e04f      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 ffd1 	bl	8004a50 <pb_dec_bytes>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	e049      	b.n	8003b46 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d00b      	beq.n	8003ad0 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <decode_basic_field+0x15a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	e000      	b.n	8003ac8 <decode_basic_field+0x15c>
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	60d3      	str	r3, [r2, #12]
 8003acc:	2300      	movs	r3, #0
 8003ace:	e03a      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f001 f830 	bl	8004b38 <pb_dec_string>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	e034      	b.n	8003b46 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d00b      	beq.n	8003afa <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <decode_basic_field+0x184>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	e000      	b.n	8003af2 <decode_basic_field+0x186>
 8003af0:	4b17      	ldr	r3, [pc, #92]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	60d3      	str	r3, [r2, #12]
 8003af6:	2300      	movs	r3, #0
 8003af8:	e025      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f001 f897 	bl	8004c30 <pb_dec_submessage>
 8003b02:	4603      	mov	r3, r0
 8003b04:	e01f      	b.n	8003b46 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8003b06:	7afb      	ldrb	r3, [r7, #11]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d00b      	beq.n	8003b24 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <decode_basic_field+0x1ae>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	e000      	b.n	8003b1c <decode_basic_field+0x1b0>
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b50 <decode_basic_field+0x1e4>)
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	60d3      	str	r3, [r2, #12]
 8003b20:	2300      	movs	r3, #0
 8003b22:	e010      	b.n	8003b46 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 f90c 	bl	8004d44 <pb_dec_fixed_length_bytes>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	e00a      	b.n	8003b46 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <decode_basic_field+0x1d2>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	e000      	b.n	8003b40 <decode_basic_field+0x1d4>
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <decode_basic_field+0x1e8>)
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	2300      	movs	r3, #0
    }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	08008564 	.word	0x08008564
 8003b54:	08008574 	.word	0x08008574

08003b58 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b096      	sub	sp, #88	@ 0x58
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	460b      	mov	r3, r1
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7d9b      	ldrb	r3, [r3, #22]
 8003b6a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b6e:	2b30      	cmp	r3, #48	@ 0x30
 8003b70:	f000 80c2 	beq.w	8003cf8 <decode_static_field+0x1a0>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	f200 811a 	bhi.w	8003dae <decode_static_field+0x256>
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d01f      	beq.n	8003bbe <decode_static_field+0x66>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	f200 8115 	bhi.w	8003dae <decode_static_field+0x256>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <decode_static_field+0x36>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d008      	beq.n	8003b9e <decode_static_field+0x46>
 8003b8c:	e10f      	b.n	8003dae <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4619      	mov	r1, r3
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff fee9 	bl	800396c <decode_basic_field>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	e112      	b.n	8003dc4 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff fed9 	bl	800396c <decode_basic_field>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	e102      	b.n	8003dc4 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d16c      	bne.n	8003c9e <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7d9b      	ldrb	r3, [r3, #22]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d866      	bhi.n	8003c9e <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	8a52      	ldrh	r2, [r2, #18]
 8003be4:	4611      	mov	r1, r2
 8003be6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003be8:	8812      	ldrh	r2, [r2, #0]
 8003bea:	fb01 f202 	mul.w	r2, r1, r2
 8003bee:	441a      	add	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8003bf4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff fe56 	bl	80038ac <pb_make_string_substream>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01f      	beq.n	8003c4c <decode_static_field+0xf4>
                    return false;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e0d9      	b.n	8003dc4 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8003c10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	21ff      	movs	r1, #255	@ 0xff
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fea7 	bl	800396c <decode_basic_field>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f083 0301 	eor.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <decode_static_field+0xda>
                    {
                        status = false;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8003c30:	e015      	b.n	8003c5e <decode_static_field+0x106>
                    }
                    (*size)++;
 8003c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c3c:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	8a52      	ldrh	r2, [r2, #18]
 8003c46:	441a      	add	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <decode_static_field+0x106>
 8003c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8a9b      	ldrh	r3, [r3, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3d8      	bcc.n	8003c10 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <decode_static_field+0x11a>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	e000      	b.n	8003c74 <decode_static_field+0x11c>
 8003c72:	4b56      	ldr	r3, [pc, #344]	@ (8003dcc <decode_static_field+0x274>)
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	60d3      	str	r3, [r2, #12]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e0a3      	b.n	8003dc4 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8003c7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c80:	4619      	mov	r1, r3
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f7ff fe4c 	bl	8003920 <pb_close_string_substream>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f083 0301 	eor.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <decode_static_field+0x140>
                    return false;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e095      	b.n	8003dc4 <decode_static_field+0x26c>

                return status;
 8003c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003c9c:	e092      	b.n	8003dc4 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	8a52      	ldrh	r2, [r2, #18]
 8003cac:	4611      	mov	r1, r2
 8003cae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cb0:	8812      	ldrh	r2, [r2, #0]
 8003cb2:	fb01 f202 	mul.w	r2, r1, r2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	b291      	uxth	r1, r2
 8003cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cc6:	8011      	strh	r1, [r2, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	8a92      	ldrh	r2, [r2, #20]
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d30b      	bcc.n	8003ce8 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <decode_static_field+0x186>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	e000      	b.n	8003ce0 <decode_static_field+0x188>
 8003cde:	4b3b      	ldr	r3, [pc, #236]	@ (8003dcc <decode_static_field+0x274>)
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	60d3      	str	r3, [r2, #12]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e06d      	b.n	8003dc4 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4619      	mov	r1, r3
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff fe3c 	bl	800396c <decode_basic_field>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	e065      	b.n	8003dc4 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7d9b      	ldrb	r3, [r3, #22]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d005      	beq.n	8003d10 <decode_static_field+0x1b8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7d9b      	ldrb	r3, [r3, #22]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	d141      	bne.n	8003d94 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d03a      	beq.n	8003d94 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69d8      	ldr	r0, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8a5b      	ldrh	r3, [r3, #18]
 8003d26:	461a      	mov	r2, r3
 8003d28:	2100      	movs	r1, #0
 8003d2a:	f003 ff01 	bl	8007b30 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d022      	beq.n	8003d94 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 fabd 	bl	80072da <pb_field_iter_begin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8003d66:	f107 0314 	add.w	r3, r7, #20
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fa4d 	bl	800420a <pb_message_set_to_defaults>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f083 0301 	eor.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <decode_static_field+0x232>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	e000      	b.n	8003d8c <decode_static_field+0x234>
 8003d8a:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <decode_static_field+0x278>)
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	60d3      	str	r3, [r2, #12]
 8003d90:	2300      	movs	r3, #0
 8003d92:	e017      	b.n	8003dc4 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	8a12      	ldrh	r2, [r2, #16]
 8003d9c:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8003d9e:	7afb      	ldrb	r3, [r7, #11]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff fde1 	bl	800396c <decode_basic_field>
 8003daa:	4603      	mov	r3, r0
 8003dac:	e00a      	b.n	8003dc4 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <decode_static_field+0x264>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	e000      	b.n	8003dbe <decode_static_field+0x266>
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <decode_static_field+0x27c>)
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	60d3      	str	r3, [r2, #12]
 8003dc2:	2300      	movs	r3, #0
    }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3758      	adds	r7, #88	@ 0x58
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	08008588 	.word	0x08008588
 8003dd0:	08008598 	.word	0x08008598
 8003dd4:	08008574 	.word	0x08008574

08003dd8 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	460b      	mov	r3, r1
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <decode_pointer_field+0x1c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	e000      	b.n	8003df6 <decode_pointer_field+0x1e>
 8003df4:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <decode_pointer_field+0x30>)
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	60d3      	str	r3, [r2, #12]
 8003dfa:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	080085b0 	.word	0x080085b0

08003e0c <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b097      	sub	sp, #92	@ 0x5c
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	61f8      	str	r0, [r7, #28]
 8003e14:	460b      	mov	r3, r1
 8003e16:	617a      	str	r2, [r7, #20]
 8003e18:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8003e24:	7efb      	ldrb	r3, [r7, #27]
 8003e26:	4619      	mov	r1, r3
 8003e28:	69f8      	ldr	r0, [r7, #28]
 8003e2a:	f7ff fc91 	bl	8003750 <pb_skip_field>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	e070      	b.n	8003f14 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8003e32:	7efb      	ldrb	r3, [r7, #27]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d145      	bne.n	8003ec4 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003e38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	69f8      	ldr	r0, [r7, #28]
 8003e40:	f7ff fd34 	bl	80038ac <pb_make_string_substream>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f083 0301 	eor.w	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <decode_callback_field+0x48>
            return false;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e05f      	b.n	8003f14 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e56:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	2100      	movs	r1, #0
 8003e66:	4798      	blx	r3
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <decode_callback_field+0x76>
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	e005      	b.n	8003e8e <decode_callback_field+0x82>
 8003e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <decode_callback_field+0x80>
 8003e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e8a:	e000      	b.n	8003e8e <decode_callback_field+0x82>
 8003e8c:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <decode_callback_field+0x110>)
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	60d3      	str	r3, [r2, #12]
                return false;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e03e      	b.n	8003f14 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8003e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <decode_callback_field+0x98>
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8d7      	bhi.n	8003e54 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8003ea4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	69f8      	ldr	r0, [r7, #28]
 8003eac:	f7ff fd38 	bl	8003920 <pb_close_string_substream>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f083 0301 	eor.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <decode_callback_field+0xb4>
            return false;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e029      	b.n	8003f14 <decode_callback_field+0x108>

        return true;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e027      	b.n	8003f14 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ecc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003ed0:	7ef9      	ldrb	r1, [r7, #27]
 8003ed2:	69f8      	ldr	r0, [r7, #28]
 8003ed4:	f7ff fc7e 	bl	80037d4 <read_raw_value>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f083 0301 	eor.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <decode_callback_field+0xdc>
            return false;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e015      	b.n	8003f14 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eea:	463b      	mov	r3, r7
 8003eec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fa87 	bl	8003404 <pb_istream_from_buffer>
 8003ef6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003efa:	463b      	mov	r3, r7
 8003efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4798      	blx	r3
 8003f12:	4603      	mov	r3, r0
    }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	375c      	adds	r7, #92	@ 0x5c
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd90      	pop	{r4, r7, pc}
 8003f1c:	080085c4 	.word	0x080085c4

08003f20 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7d9b      	ldrb	r3, [r3, #22]
 8003f32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f36:	2b80      	cmp	r3, #128	@ 0x80
 8003f38:	d00e      	beq.n	8003f58 <decode_field+0x38>
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d81c      	bhi.n	8003f78 <decode_field+0x58>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <decode_field+0x28>
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d010      	beq.n	8003f68 <decode_field+0x48>
 8003f46:	e017      	b.n	8003f78 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003f48:	7afb      	ldrb	r3, [r7, #11]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff fe02 	bl	8003b58 <decode_static_field>
 8003f54:	4603      	mov	r3, r0
 8003f56:	e01a      	b.n	8003f8e <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff ff3a 	bl	8003dd8 <decode_pointer_field>
 8003f64:	4603      	mov	r3, r0
 8003f66:	e012      	b.n	8003f8e <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8003f68:	7afb      	ldrb	r3, [r7, #11]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff4c 	bl	8003e0c <decode_callback_field>
 8003f74:	4603      	mov	r3, r0
 8003f76:	e00a      	b.n	8003f8e <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <decode_field+0x66>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	e000      	b.n	8003f88 <decode_field+0x68>
 8003f86:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <decode_field+0x78>)
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	2300      	movs	r3, #0
    }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	08008574 	.word	0x08008574

08003f9c <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	@ 0x38
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 f9ab 	bl	800730c <pb_field_iter_begin_extension>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <default_extension_decoder+0x34>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	e000      	b.n	8003fd2 <default_extension_decoder+0x36>
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <default_extension_decoder+0x70>)
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	60d3      	str	r3, [r2, #12]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e014      	b.n	8004004 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8003fda:	8c3b      	ldrh	r3, [r7, #32]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d102      	bne.n	8003fea <default_extension_decoder+0x4e>
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <default_extension_decoder+0x52>
        return true;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00a      	b.n	8004004 <default_extension_decoder+0x68>

    extension->found = true;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8003ff4:	f107 0210 	add.w	r2, r7, #16
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff ff8f 	bl	8003f20 <decode_field>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3738      	adds	r7, #56	@ 0x38
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	080085d4 	.word	0x080085d4

08004010 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8004026:	e022      	b.n	800406e <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681c      	ldr	r4, [r3, #0]
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	47a0      	blx	r4
 8004042:	4603      	mov	r3, r0
 8004044:	75fb      	strb	r3, [r7, #23]
 8004046:	e007      	b.n	8004058 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff ffa4 	bl	8003f9c <default_extension_decoder>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	f083 0301 	eor.w	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <decode_extension+0x58>
            return false;
 8004064:	2300      	movs	r3, #0
 8004066:	e00b      	b.n	8004080 <decode_extension+0x70>
        
        extension = extension->next;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <decode_extension+0x6e>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d0d4      	beq.n	8004028 <decode_extension+0x18>
    }
    
    return true;
 800407e:	2301      	movs	r3, #1
}
 8004080:	4618      	mov	r0, r3
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd90      	pop	{r4, r7, pc}

08004088 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	@ 0x38
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7d9b      	ldrb	r3, [r3, #22]
 8004094:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004098:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	2b0a      	cmp	r3, #10
 80040a2:	d124      	bne.n	80040ee <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80040ac:	e01b      	b.n	80040e6 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 f929 	bl	800730c <pb_field_iter_begin_extension>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00f      	beq.n	80040e0 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	2200      	movs	r2, #0
 80040c4:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f89d 	bl	800420a <pb_message_set_to_defaults>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f083 0301 	eor.w	r3, r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <pb_field_set_to_default+0x58>
                    return false;
 80040dc:	2300      	movs	r3, #0
 80040de:	e090      	b.n	8004202 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e0      	bne.n	80040ae <pb_field_set_to_default+0x26>
 80040ec:	e088      	b.n	8004200 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80040ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80040f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d166      	bne.n	80041c8 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8004100:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004104:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004108:	2b10      	cmp	r3, #16
 800410a:	d108      	bne.n	800411e <pb_field_set_to_default+0x96>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e012      	b.n	8004144 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800411e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004122:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004126:	2b20      	cmp	r3, #32
 8004128:	d005      	beq.n	8004136 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800412a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800412e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004132:	2b30      	cmp	r3, #48	@ 0x30
 8004134:	d106      	bne.n	8004144 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	2200      	movs	r2, #0
 800413c:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8004144:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004148:	2b00      	cmp	r3, #0
 800414a:	d059      	beq.n	8004200 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7d9b      	ldrb	r3, [r3, #22]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2b08      	cmp	r3, #8
 8004156:	d005      	beq.n	8004164 <pb_field_set_to_default+0xdc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7d9b      	ldrb	r3, [r3, #22]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2b09      	cmp	r3, #9
 8004162:	d128      	bne.n	80041b6 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004180:	2b00      	cmp	r3, #0
 8004182:	d018      	beq.n	80041b6 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	f107 0308 	add.w	r3, r7, #8
 8004190:	4618      	mov	r0, r3
 8004192:	f003 f8a2 	bl	80072da <pb_field_iter_begin>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d030      	beq.n	80041fe <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f832 	bl	800420a <pb_message_set_to_defaults>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f083 0301 	eor.w	r3, r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d025      	beq.n	80041fe <pb_field_set_to_default+0x176>
                        return false;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e025      	b.n	8004202 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69d8      	ldr	r0, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8a5b      	ldrh	r3, [r3, #18]
 80041be:	461a      	mov	r2, r3
 80041c0:	2100      	movs	r1, #0
 80041c2:	f003 fcb5 	bl	8007b30 <memset>
 80041c6:	e01b      	b.n	8004200 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80041c8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80041cc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041d0:	2b80      	cmp	r3, #128	@ 0x80
 80041d2:	d115      	bne.n	8004200 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80041dc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80041e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d005      	beq.n	80041f4 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80041e8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80041ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80041f0:	2b30      	cmp	r3, #48	@ 0x30
 80041f2:	d105      	bne.n	8004200 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	2200      	movs	r2, #0
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	e000      	b.n	8004200 <pb_field_set_to_default+0x178>
            {
 80041fe:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8004200:	2301      	movs	r3, #1
}
 8004202:	4618      	mov	r0, r3
 8004204:	3738      	adds	r7, #56	@ 0x38
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800420a:	b590      	push	{r4, r7, lr}
 800420c:	b08d      	sub	sp, #52	@ 0x34
 800420e:	af00      	add	r7, sp, #0
 8004210:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8004212:	f107 0320 	add.w	r3, r7, #32
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8004224:	2300      	movs	r3, #0
 8004226:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d020      	beq.n	8004274 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6899      	ldr	r1, [r3, #8]
 8004238:	463b      	mov	r3, r7
 800423a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f8e0 	bl	8003404 <pb_istream_from_buffer>
 8004244:	f107 0420 	add.w	r4, r7, #32
 8004248:	463b      	mov	r3, r7
 800424a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800424c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004250:	f107 031a 	add.w	r3, r7, #26
 8004254:	f107 021c 	add.w	r2, r7, #28
 8004258:	f107 011b 	add.w	r1, r7, #27
 800425c:	f107 0020 	add.w	r0, r7, #32
 8004260:	f7ff fa47 	bl	80036f2 <pb_decode_tag>
 8004264:	4603      	mov	r3, r0
 8004266:	f083 0301 	eor.w	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <pb_message_set_to_defaults+0x6a>
            return false;
 8004270:	2300      	movs	r3, #0
 8004272:	e043      	b.n	80042fc <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f7ff ff07 	bl	8004088 <pb_field_set_to_default>
 800427a:	4603      	mov	r3, r0
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <pb_message_set_to_defaults+0x80>
            return false;
 8004286:	2300      	movs	r3, #0
 8004288:	e038      	b.n	80042fc <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02e      	beq.n	80042ee <pb_message_set_to_defaults+0xe4>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	8a1b      	ldrh	r3, [r3, #16]
 8004294:	461a      	mov	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d128      	bne.n	80042ee <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 800429c:	7ef9      	ldrb	r1, [r7, #27]
 800429e:	f107 0320 	add.w	r3, r7, #32
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fe3b 	bl	8003f20 <decode_field>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <pb_message_set_to_defaults+0xb0>
                return false;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e020      	b.n	80042fc <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80042ba:	f107 031a 	add.w	r3, r7, #26
 80042be:	f107 021c 	add.w	r2, r7, #28
 80042c2:	f107 011b 	add.w	r1, r7, #27
 80042c6:	f107 0020 	add.w	r0, r7, #32
 80042ca:	f7ff fa12 	bl	80036f2 <pb_decode_tag>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f083 0301 	eor.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <pb_message_set_to_defaults+0xd4>
                return false;
 80042da:	2300      	movs	r3, #0
 80042dc:	e00e      	b.n	80042fc <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f003 f83c 	bl	800736c <pb_field_iter_next>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1bc      	bne.n	8004274 <pb_message_set_to_defaults+0x6a>

    return true;
 80042fa:	2301      	movs	r3, #1
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3734      	adds	r7, #52	@ 0x34
 8004300:	46bd      	mov	sp, r7
 8004302:	bd90      	pop	{r4, r7, pc}

08004304 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b09a      	sub	sp, #104	@ 0x68
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 800431a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800431e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 800432e:	2300      	movs	r3, #0
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
 8004332:	2300      	movs	r3, #0
 8004334:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800433a:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 800433c:	f107 0318 	add.w	r3, r7, #24
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f002 ffc8 	bl	80072da <pb_field_iter_begin>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8102 	beq.w	8004556 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 80fc 	bne.w	8004556 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 800435e:	f107 0318 	add.w	r3, r7, #24
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff51 	bl	800420a <pb_message_set_to_defaults>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80f0 	beq.w	8004556 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <pb_decode_inner+0x80>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	e000      	b.n	8004386 <pb_decode_inner+0x82>
 8004384:	4b99      	ldr	r3, [pc, #612]	@ (80045ec <pb_decode_inner+0x2e8>)
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	60d3      	str	r3, [r2, #12]
 800438a:	2300      	movs	r3, #0
 800438c:	e16d      	b.n	800466a <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800438e:	f107 0312 	add.w	r3, r7, #18
 8004392:	f107 0214 	add.w	r2, r7, #20
 8004396:	f107 0113 	add.w	r1, r7, #19
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff f9a9 	bl	80036f2 <pb_decode_tag>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f083 0301 	eor.w	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <pb_decode_inner+0xb4>
        {
            if (eof)
 80043ac:	7cbb      	ldrb	r3, [r7, #18]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 80d7 	bne.w	8004562 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e158      	b.n	800466a <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d111      	bne.n	80043e2 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 80ce 	bne.w	8004566 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <pb_decode_inner+0xd4>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	e000      	b.n	80043da <pb_decode_inner+0xd6>
 80043d8:	4b85      	ldr	r3, [pc, #532]	@ (80045f0 <pb_decode_inner+0x2ec>)
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	60d3      	str	r3, [r2, #12]
 80043de:	2300      	movs	r3, #0
 80043e0:	e143      	b.n	800466a <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	f107 0318 	add.w	r3, r7, #24
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f002 ffd3 	bl	8007396 <pb_field_iter_find>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f083 0301 	eor.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <pb_decode_inner+0x104>
 80043fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	2b0a      	cmp	r3, #10
 8004406:	d13c      	bne.n	8004482 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8004408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800440a:	2b00      	cmp	r3, #0
 800440c:	d112      	bne.n	8004434 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800440e:	f107 0318 	add.w	r3, r7, #24
 8004412:	4618      	mov	r0, r3
 8004414:	f003 f815 	bl	8007442 <pb_field_iter_find_extension>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 800441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8004424:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004426:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8004428:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004432:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004438:	429a      	cmp	r2, r3
 800443a:	d815      	bhi.n	8004468 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	7cfa      	ldrb	r2, [r7, #19]
 8004446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff fde1 	bl	8004010 <decode_extension>
 800444e:	4603      	mov	r3, r0
 8004450:	f083 0301 	eor.w	r3, r3, #1
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <pb_decode_inner+0x15a>
                    return false;
 800445a:	2300      	movs	r3, #0
 800445c:	e105      	b.n	800466a <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004464:	429a      	cmp	r2, r3
 8004466:	d173      	bne.n	8004550 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff f96f 	bl	8003750 <pb_skip_field>
 8004472:	4603      	mov	r3, r0
 8004474:	f083 0301 	eor.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d06a      	beq.n	8004554 <pb_decode_inner+0x250>
                return false;
 800447e:	2300      	movs	r3, #0
 8004480:	e0f3      	b.n	800466a <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8004482:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004486:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800448a:	2b20      	cmp	r3, #32
 800448c:	d12e      	bne.n	80044ec <pb_decode_inner+0x1e8>
 800448e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004490:	f107 0318 	add.w	r3, r7, #24
 8004494:	3314      	adds	r3, #20
 8004496:	429a      	cmp	r2, r3
 8004498:	d128      	bne.n	80044ec <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 800449a:	8c3b      	ldrh	r3, [r7, #32]
 800449c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d020      	beq.n	80044e6 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 80044a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80044a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d011      	beq.n	80044d4 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 80044b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 80044b4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d00b      	beq.n	80044d4 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <pb_decode_inner+0x1c6>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	e000      	b.n	80044cc <pb_decode_inner+0x1c8>
 80044ca:	4b4a      	ldr	r3, [pc, #296]	@ (80045f4 <pb_decode_inner+0x2f0>)
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	60d3      	str	r3, [r2, #12]
 80044d0:	2300      	movs	r3, #0
 80044d2:	e0ca      	b.n	800466a <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 80044d4:	8c3b      	ldrh	r3, [r7, #32]
 80044d6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 80044e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80044e2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 80044e6:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 80044ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11c      	bne.n	8004532 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80044f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80044fc:	d819      	bhi.n	8004532 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80044fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2201      	movs	r2, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 800450c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	b29b      	uxth	r3, r3
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	3368      	adds	r3, #104	@ 0x68
 8004516:	443b      	add	r3, r7
 8004518:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800451c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	b29b      	uxth	r3, r3
 8004522:	4619      	mov	r1, r3
 8004524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004526:	431a      	orrs	r2, r3
 8004528:	008b      	lsls	r3, r1, #2
 800452a:	3368      	adds	r3, #104	@ 0x68
 800452c:	443b      	add	r3, r7
 800452e:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8004532:	7cfb      	ldrb	r3, [r7, #19]
 8004534:	f107 0218 	add.w	r2, r7, #24
 8004538:	4619      	mov	r1, r3
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fcf0 	bl	8003f20 <decode_field>
 8004540:	4603      	mov	r3, r0
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <pb_decode_inner+0x252>
            return false;
 800454c:	2300      	movs	r3, #0
 800454e:	e08c      	b.n	800466a <pb_decode_inner+0x366>
                    continue;
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <pb_decode_inner+0x252>
            continue;
 8004554:	bf00      	nop
    while (stream->bytes_left)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f47f af17 	bne.w	800438e <pb_decode_inner+0x8a>
 8004560:	e002      	b.n	8004568 <pb_decode_inner+0x264>
                break;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <pb_decode_inner+0x264>
            break;
 8004566:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004568:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800456c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004570:	4293      	cmp	r3, r2
 8004572:	d011      	beq.n	8004598 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004574:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004578:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800457c:	429a      	cmp	r2, r3
 800457e:	d00b      	beq.n	8004598 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <pb_decode_inner+0x28a>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	e000      	b.n	8004590 <pb_decode_inner+0x28c>
 800458e:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <pb_decode_inner+0x2f0>)
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	60d3      	str	r3, [r2, #12]
 8004594:	2300      	movs	r3, #0
 8004596:	e068      	b.n	800466a <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	8a5b      	ldrh	r3, [r3, #18]
 800459c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 80045a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05f      	beq.n	8004668 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80045a8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	d902      	bls.n	80045b6 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 80045b0:	2340      	movs	r3, #64	@ 0x40
 80045b2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80045bc:	e023      	b.n	8004606 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 80045be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3368      	adds	r3, #104	@ 0x68
 80045c6:	443b      	add	r3, r7
 80045c8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80045cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d014      	beq.n	80045fc <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <pb_decode_inner+0x2dc>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	e000      	b.n	80045e2 <pb_decode_inner+0x2de>
 80045e0:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <pb_decode_inner+0x2f4>)
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	60d3      	str	r3, [r2, #12]
 80045e6:	2300      	movs	r3, #0
 80045e8:	e03f      	b.n	800466a <pb_decode_inner+0x366>
 80045ea:	bf00      	nop
 80045ec:	08008598 	.word	0x08008598
 80045f0:	080085e8 	.word	0x080085e8
 80045f4:	080085f4 	.word	0x080085f4
 80045f8:	08008618 	.word	0x08008618
            for (i = 0; i < (req_field_count >> 5); i++)
 80045fc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004600:	3301      	adds	r3, #1
 8004602:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004606:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	b29b      	uxth	r3, r3
 800460e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8004612:	429a      	cmp	r2, r3
 8004614:	d3d3      	bcc.n	80045be <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8004616:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2b00      	cmp	r3, #0
 8004620:	d022      	beq.n	8004668 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004622:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	b29b      	uxth	r3, r3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	3368      	adds	r3, #104	@ 0x68
 800462e:	443b      	add	r3, r7
 8004630:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004634:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f1c3 0320 	rsb	r3, r3, #32
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4619      	mov	r1, r3
 8004648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464a:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800464c:	429a      	cmp	r2, r3
 800464e:	d00b      	beq.n	8004668 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <pb_decode_inner+0x35a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	e000      	b.n	8004660 <pb_decode_inner+0x35c>
 800465e:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <pb_decode_inner+0x370>)
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	60d3      	str	r3, [r2, #12]
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	3768      	adds	r7, #104	@ 0x68
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	08008618 	.word	0x08008618

08004678 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004684:	2300      	movs	r3, #0
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff fe3a 	bl	8004304 <pb_decode_inner>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004694:	7dfb      	ldrb	r3, [r7, #23]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe ff70 	bl	8003594 <pb_decode_varint32>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f083 0301 	eor.w	r3, r3, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <pb_decode_bool+0x26>
        return false;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e008      	b.n	80046d6 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	701a      	strb	r2, [r3, #0]
    return true;
 80046d4:	2301      	movs	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80046de:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 80046ea:	f107 0308 	add.w	r3, r7, #8
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fe ff5f 	bl	80035b4 <pb_decode_varint>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <pb_decode_svarint+0x28>
        return false;
 8004702:	2300      	movs	r3, #0
 8004704:	e029      	b.n	800475a <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8004706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800470a:	f002 0401 	and.w	r4, r2, #1
 800470e:	2500      	movs	r5, #0
 8004710:	ea54 0305 	orrs.w	r3, r4, r5
 8004714:	d013      	beq.n	800473e <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8004716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	0842      	lsrs	r2, r0, #1
 8004724:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004728:	084b      	lsrs	r3, r1, #1
 800472a:	ea6f 0802 	mvn.w	r8, r2
 800472e:	ea6f 0903 	mvn.w	r9, r3
 8004732:	4642      	mov	r2, r8
 8004734:	464b      	mov	r3, r9
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	e9c1 2300 	strd	r2, r3, [r1]
 800473c:	e00c      	b.n	8004758 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800473e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	0842      	lsrs	r2, r0, #1
 800474c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004750:	084b      	lsrs	r3, r1, #1
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004758:	2301      	movs	r3, #1
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004764 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 800476e:	f107 030c 	add.w	r3, r7, #12
 8004772:	2204      	movs	r2, #4
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fe fd92 	bl	80032a0 <pb_read>
 800477c:	4603      	mov	r3, r0
 800477e:	f083 0301 	eor.w	r3, r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <pb_decode_fixed32+0x28>
        return false;
 8004788:	2300      	movs	r3, #0
 800478a:	e003      	b.n	8004794 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8004792:	2301      	movs	r3, #1
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	2208      	movs	r2, #8
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fe fd76 	bl	80032a0 <pb_read>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f083 0301 	eor.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <pb_decode_fixed64+0x28>
        return false;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e005      	b.n	80047d0 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80047c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff58 	bl	800469e <pb_decode_bool>
 80047ee:	4603      	mov	r3, r0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b094      	sub	sp, #80	@ 0x50
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6278      	str	r0, [r7, #36]	@ 0x24
 8004802:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	7d9b      	ldrb	r3, [r3, #22]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	2b02      	cmp	r3, #2
 800480e:	d179      	bne.n	8004904 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8004810:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004814:	4619      	mov	r1, r3
 8004816:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004818:	f7fe fecc 	bl	80035b4 <pb_decode_varint>
 800481c:	4603      	mov	r3, r0
 800481e:	f083 0301 	eor.w	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <pb_dec_varint+0x34>
            return false;
 8004828:	2300      	movs	r3, #0
 800482a:	e107      	b.n	8004a3c <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	8a5b      	ldrh	r3, [r3, #18]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d10a      	bne.n	800484a <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800483c:	e9c1 2300 	strd	r2, r3, [r1]
 8004840:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004844:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8004848:	e046      	b.n	80048d8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	8a5b      	ldrh	r3, [r3, #18]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d10e      	bne.n	8004870 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8004852:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4602      	mov	r2, r0
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	617a      	str	r2, [r7, #20]
 8004866:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800486a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800486e:	e033      	b.n	80048d8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	8a5b      	ldrh	r3, [r3, #18]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d10f      	bne.n	8004898 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8004878:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	b282      	uxth	r2, r0
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	2200      	movs	r2, #0
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	60fa      	str	r2, [r7, #12]
 800488e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004892:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8004896:	e01f      	b.n	80048d8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	8a5b      	ldrh	r3, [r3, #18]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10f      	bne.n	80048c0 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80048a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	b2c2      	uxtb	r2, r0
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2200      	movs	r2, #0
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80048ba:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80048be:	e00b      	b.n	80048d8 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <pb_dec_varint+0xd6>
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	e000      	b.n	80048d0 <pb_dec_varint+0xd8>
 80048ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004a48 <pb_dec_varint+0x250>)
 80048d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d2:	60d3      	str	r3, [r2, #12]
 80048d4:	2300      	movs	r3, #0
 80048d6:	e0b1      	b.n	8004a3c <pb_dec_varint+0x244>

        if (clamped != value)
 80048d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80048e0:	4299      	cmp	r1, r3
 80048e2:	bf08      	it	eq
 80048e4:	4290      	cmpeq	r0, r2
 80048e6:	d00b      	beq.n	8004900 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <pb_dec_varint+0xfe>
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	e000      	b.n	80048f8 <pb_dec_varint+0x100>
 80048f6:	4b55      	ldr	r3, [pc, #340]	@ (8004a4c <pb_dec_varint+0x254>)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fa:	60d3      	str	r3, [r2, #12]
 80048fc:	2300      	movs	r3, #0
 80048fe:	e09d      	b.n	8004a3c <pb_dec_varint+0x244>

        return true;
 8004900:	2301      	movs	r3, #1
 8004902:	e09b      	b.n	8004a3c <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	7d9b      	ldrb	r3, [r3, #22]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2b03      	cmp	r3, #3
 800490e:	d10d      	bne.n	800492c <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8004910:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004914:	4619      	mov	r1, r3
 8004916:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004918:	f7ff fee1 	bl	80046de <pb_decode_svarint>
 800491c:	4603      	mov	r3, r0
 800491e:	f083 0301 	eor.w	r3, r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <pb_dec_varint+0x176>
                return false;
 8004928:	2300      	movs	r3, #0
 800492a:	e087      	b.n	8004a3c <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 800492c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004930:	4619      	mov	r1, r3
 8004932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004934:	f7fe fe3e 	bl	80035b4 <pb_decode_varint>
 8004938:	4603      	mov	r3, r0
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <pb_dec_varint+0x150>
                return false;
 8004944:	2300      	movs	r3, #0
 8004946:	e079      	b.n	8004a3c <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	8a5b      	ldrh	r3, [r3, #18]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d104      	bne.n	800495a <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8004950:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004954:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004958:	e009      	b.n	800496e <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800495a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800495e:	4613      	mov	r3, r2
 8004960:	17da      	asrs	r2, r3, #31
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800496a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	8a5b      	ldrh	r3, [r3, #18]
 8004972:	2b08      	cmp	r3, #8
 8004974:	d10a      	bne.n	800498c <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	69d9      	ldr	r1, [r3, #28]
 800497a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800497e:	e9c1 2300 	strd	r2, r3, [r1]
 8004982:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004986:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800498a:	e042      	b.n	8004a12 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	8a5b      	ldrh	r3, [r3, #18]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d10c      	bne.n	80049ae <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8004994:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	4602      	mov	r2, r0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	17da      	asrs	r2, r3, #31
 80049a4:	469a      	mov	sl, r3
 80049a6:	4693      	mov	fp, r2
 80049a8:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 80049ac:	e031      	b.n	8004a12 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	8a5b      	ldrh	r3, [r3, #18]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d10e      	bne.n	80049d4 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80049b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	b202      	sxth	r2, r0
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	17da      	asrs	r2, r3, #31
 80049ca:	4698      	mov	r8, r3
 80049cc:	4691      	mov	r9, r2
 80049ce:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 80049d2:	e01e      	b.n	8004a12 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	8a5b      	ldrh	r3, [r3, #18]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10e      	bne.n	80049fa <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80049dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	b242      	sxtb	r2, r0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	f993 3000 	ldrsb.w	r3, [r3]
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	17da      	asrs	r2, r3, #31
 80049f0:	461c      	mov	r4, r3
 80049f2:	4615      	mov	r5, r2
 80049f4:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80049f8:	e00b      	b.n	8004a12 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <pb_dec_varint+0x210>
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	e000      	b.n	8004a0a <pb_dec_varint+0x212>
 8004a08:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <pb_dec_varint+0x250>)
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	60d3      	str	r3, [r2, #12]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e014      	b.n	8004a3c <pb_dec_varint+0x244>

        if (clamped != svalue)
 8004a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8004a1a:	4299      	cmp	r1, r3
 8004a1c:	bf08      	it	eq
 8004a1e:	4290      	cmpeq	r0, r2
 8004a20:	d00b      	beq.n	8004a3a <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <pb_dec_varint+0x238>
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	e000      	b.n	8004a32 <pb_dec_varint+0x23a>
 8004a30:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <pb_dec_varint+0x254>)
 8004a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a34:	60d3      	str	r3, [r2, #12]
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <pb_dec_varint+0x244>

        return true;
 8004a3a:	2301      	movs	r3, #1
    }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3750      	adds	r7, #80	@ 0x50
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a46:	bf00      	nop
 8004a48:	08008630 	.word	0x08008630
 8004a4c:	08008644 	.word	0x08008644

08004a50 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004a5a:	f107 030c 	add.w	r3, r7, #12
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fe fd97 	bl	8003594 <pb_decode_varint32>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f083 0301 	eor.w	r3, r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <pb_dec_bytes+0x26>
        return false;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e055      	b.n	8004b22 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a7c:	d30b      	bcc.n	8004a96 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <pb_dec_bytes+0x3c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	e000      	b.n	8004a8e <pb_dec_bytes+0x3e>
 8004a8c:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <pb_dec_bytes+0xdc>)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	60d3      	str	r3, [r2, #12]
 8004a92:	2300      	movs	r3, #0
 8004a94:	e045      	b.n	8004b22 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3302      	adds	r3, #2
 8004a9a:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d20b      	bcs.n	8004abc <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <pb_dec_bytes+0x62>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	e000      	b.n	8004ab4 <pb_dec_bytes+0x64>
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b30 <pb_dec_bytes+0xe0>)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60d3      	str	r3, [r2, #12]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e032      	b.n	8004b22 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	7d9b      	ldrb	r3, [r3, #22]
 8004ac0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ac4:	2b80      	cmp	r3, #128	@ 0x80
 8004ac6:	d10b      	bne.n	8004ae0 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <pb_dec_bytes+0x86>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	e000      	b.n	8004ad8 <pb_dec_bytes+0x88>
 8004ad6:	4b17      	ldr	r3, [pc, #92]	@ (8004b34 <pb_dec_bytes+0xe4>)
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	60d3      	str	r3, [r2, #12]
 8004adc:	2300      	movs	r3, #0
 8004ade:	e020      	b.n	8004b22 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	8a5b      	ldrh	r3, [r3, #18]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d90b      	bls.n	8004b04 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <pb_dec_bytes+0xaa>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	e000      	b.n	8004afc <pb_dec_bytes+0xac>
 8004afa:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <pb_dec_bytes+0xdc>)
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	60d3      	str	r3, [r2, #12]
 8004b00:	2300      	movs	r3, #0
 8004b02:	e00e      	b.n	8004b22 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3302      	adds	r3, #2
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fe fbc0 	bl	80032a0 <pb_read>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08008658 	.word	0x08008658
 8004b30:	08008668 	.word	0x08008668
 8004b34:	080085b0 	.word	0x080085b0

08004b38 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fe fd20 	bl	8003594 <pb_decode_varint32>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f083 0301 	eor.w	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <pb_dec_string+0x2c>
        return false;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e05a      	b.n	8004c1a <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b6a:	d10b      	bne.n	8004b84 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <pb_dec_string+0x42>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	e000      	b.n	8004b7c <pb_dec_string+0x44>
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c24 <pb_dec_string+0xec>)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	60d3      	str	r3, [r2, #12]
 8004b80:	2300      	movs	r3, #0
 8004b82:	e04a      	b.n	8004c1a <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d20b      	bcs.n	8004baa <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <pb_dec_string+0x68>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	e000      	b.n	8004ba2 <pb_dec_string+0x6a>
 8004ba0:	4b20      	ldr	r3, [pc, #128]	@ (8004c24 <pb_dec_string+0xec>)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	60d3      	str	r3, [r2, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e037      	b.n	8004c1a <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	7d9b      	ldrb	r3, [r3, #22]
 8004bae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bb2:	2b80      	cmp	r3, #128	@ 0x80
 8004bb4:	d10b      	bne.n	8004bce <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <pb_dec_string+0x8c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	e000      	b.n	8004bc6 <pb_dec_string+0x8e>
 8004bc4:	4b18      	ldr	r3, [pc, #96]	@ (8004c28 <pb_dec_string+0xf0>)
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	60d3      	str	r3, [r2, #12]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e025      	b.n	8004c1a <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	8a5b      	ldrh	r3, [r3, #18]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d90b      	bls.n	8004bf2 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <pb_dec_string+0xb0>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	e000      	b.n	8004bea <pb_dec_string+0xb2>
 8004be8:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <pb_dec_string+0xf4>)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	60d3      	str	r3, [r2, #12]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e013      	b.n	8004c1a <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fe fb4c 	bl	80032a0 <pb_read>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f083 0301 	eor.w	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <pb_dec_string+0xe0>
        return false;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8004c18:	2301      	movs	r3, #1
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	08008668 	.word	0x08008668
 8004c28:	080085b0 	.word	0x080085b0
 8004c2c:	08008678 	.word	0x08008678

08004c30 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	@ 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fe fe2d 	bl	80038ac <pb_make_string_substream>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f083 0301 	eor.w	r3, r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <pb_dec_submessage+0x32>
        return false;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e069      	b.n	8004d36 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <pb_dec_submessage+0x48>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	e000      	b.n	8004c7a <pb_dec_submessage+0x4a>
 8004c78:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <pb_dec_submessage+0x110>)
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	60d3      	str	r3, [r2, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e059      	b.n	8004d36 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	7d9b      	ldrb	r3, [r3, #22]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d11c      	bne.n	8004cc8 <pb_dec_submessage+0x98>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	3b08      	subs	r3, #8
 8004c9c:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	3204      	adds	r2, #4
 8004cae:	f107 000c 	add.w	r0, r7, #12
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	4798      	blx	r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d022      	beq.n	8004d16 <pb_dec_submessage+0xe6>
 8004cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cd4:	f083 0301 	eor.w	r3, r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	7d9b      	ldrb	r3, [r3, #22]
 8004ce6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d107      	bne.n	8004cfe <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	7d9b      	ldrb	r3, [r3, #22]
 8004cf2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d001      	beq.n	8004cfe <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	f107 000c 	add.w	r0, r7, #12
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f7ff fafa 	bl	8004304 <pb_decode_inner>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8004d16:	f107 030c 	add.w	r3, r7, #12
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fe fdff 	bl	8003920 <pb_close_string_substream>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f083 0301 	eor.w	r3, r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <pb_dec_submessage+0x102>
        return false;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e001      	b.n	8004d36 <pb_dec_submessage+0x106>

    return status;
 8004d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	@ 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	08008688 	.word	0x08008688

08004d44 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004d4e:	f107 030c 	add.w	r3, r7, #12
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fe fc1d 	bl	8003594 <pb_decode_varint32>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f083 0301 	eor.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <pb_dec_fixed_length_bytes+0x26>
        return false;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e037      	b.n	8004dda <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d70:	d30b      	bcc.n	8004d8a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <pb_dec_fixed_length_bytes+0x3c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	e000      	b.n	8004d82 <pb_dec_fixed_length_bytes+0x3e>
 8004d80:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <pb_dec_fixed_length_bytes+0xa0>)
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	60d3      	str	r3, [r2, #12]
 8004d86:	2300      	movs	r3, #0
 8004d88:	e027      	b.n	8004dda <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	69d8      	ldr	r0, [r3, #28]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	8a5b      	ldrh	r3, [r3, #18]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f002 fec8 	bl	8007b30 <memset>
        return true;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01a      	b.n	8004dda <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	8a5b      	ldrh	r3, [r3, #18]
 8004da8:	461a      	mov	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d00b      	beq.n	8004dc8 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <pb_dec_fixed_length_bytes+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	e000      	b.n	8004dc0 <pb_dec_fixed_length_bytes+0x7c>
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <pb_dec_fixed_length_bytes+0xa4>)
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	60d3      	str	r3, [r2, #12]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e008      	b.n	8004dda <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	69d9      	ldr	r1, [r3, #28]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	8a5b      	ldrh	r3, [r3, #18]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fe fa64 	bl	80032a0 <pb_read>
 8004dd8:	4603      	mov	r3, r0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	08008658 	.word	0x08008658
 8004de8:	080086a4 	.word	0x080086a4

08004dec <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	6978      	ldr	r0, [r7, #20]
 8004e0e:	f002 ff1a 	bl	8007c46 <memcpy>
    
    return true;
 8004e12:	2301      	movs	r3, #1
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8004e1c:	b4b0      	push	{r4, r5, r7}
 8004e1e:	b08b      	sub	sp, #44	@ 0x2c
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <pb_ostream_from_buffer+0x3c>)
 8004e2a:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	461d      	mov	r5, r3
 8004e40:	f107 0414 	add.w	r4, r7, #20
 8004e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	602b      	str	r3, [r5, #0]
}
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	372c      	adds	r7, #44	@ 0x2c
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bcb0      	pop	{r4, r5, r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	08004ded 	.word	0x08004ded

08004e5c <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d037      	beq.n	8004ede <pb_write+0x82>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d033      	beq.n	8004ede <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d307      	bcc.n	8004e96 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	441a      	add	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90b      	bls.n	8004eae <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <pb_write+0x48>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	e000      	b.n	8004ea6 <pb_write+0x4a>
 8004ea4:	4b13      	ldr	r3, [pc, #76]	@ (8004ef4 <pb_write+0x98>)
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6113      	str	r3, [r2, #16]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e01e      	b.n	8004eec <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f083 0301 	eor.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <pb_write+0x78>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	e000      	b.n	8004ed6 <pb_write+0x7a>
 8004ed4:	4b08      	ldr	r3, [pc, #32]	@ (8004ef8 <pb_write+0x9c>)
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	6113      	str	r3, [r2, #16]
 8004eda:	2300      	movs	r3, #0
 8004edc:	e006      	b.n	8004eec <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	60da      	str	r2, [r3, #12]
    return true;
 8004eea:	2301      	movs	r3, #1
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	080086c8 	.word	0x080086c8
 8004ef8:	080086d4 	.word	0x080086d4

08004efc <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e00a      	b.n	8004f24 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <safe_read_bool+0x22>
            return true;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e006      	b.n	8004f2c <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f1      	beq.n	8004f0e <safe_read_bool+0x12>
    }
    return false;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b08c      	sub	sp, #48	@ 0x30
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8004f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <encode_array+0x1c>
        return true;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e13d      	b.n	80051d0 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	7d9b      	ldrb	r3, [r3, #22]
 8004f58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f5c:	2b80      	cmp	r3, #128	@ 0x80
 8004f5e:	d010      	beq.n	8004f82 <encode_array+0x4a>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	8a9b      	ldrh	r3, [r3, #20]
 8004f64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d90b      	bls.n	8004f82 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <encode_array+0x40>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	e000      	b.n	8004f7a <encode_array+0x42>
 8004f78:	4b97      	ldr	r3, [pc, #604]	@ (80051d8 <encode_array+0x2a0>)
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6113      	str	r3, [r2, #16]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e126      	b.n	80051d0 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	7d9b      	ldrb	r3, [r3, #22]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	f200 80b3 	bhi.w	80050f6 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	8a1b      	ldrh	r3, [r3, #16]
 8004f94:	461a      	mov	r2, r3
 8004f96:	2102      	movs	r1, #2
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fcdd 	bl	8005958 <pb_encode_tag>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f083 0301 	eor.w	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <encode_array+0x76>
            return false;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e110      	b.n	80051d0 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	7d9b      	ldrb	r3, [r3, #22]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d103      	bne.n	8004fc2 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8004fba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fc0:	e047      	b.n	8005052 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	7d9b      	ldrb	r3, [r3, #22]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d103      	bne.n	8004fd6 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8004fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fd4:	e03d      	b.n	8005052 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	609a      	str	r2, [r3, #8]
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004ff0:	e026      	b.n	8005040 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fdef 	bl	8005bdc <pb_enc_varint>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f083 0301 	eor.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <encode_array+0xe0>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	e005      	b.n	8005024 <encode_array+0xec>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <encode_array+0xea>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	e000      	b.n	8005024 <encode_array+0xec>
 8005022:	4b6e      	ldr	r3, [pc, #440]	@ (80051dc <encode_array+0x2a4>)
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6113      	str	r3, [r2, #16]
 8005028:	2300      	movs	r3, #0
 800502a:	e0d1      	b.n	80051d0 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	8a52      	ldrh	r2, [r2, #18]
 8005034:	441a      	add	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 800503a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800503c:	3301      	adds	r3, #1
 800503e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005040:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005044:	429a      	cmp	r2, r3
 8005046:	d3d4      	bcc.n	8004ff2 <encode_array+0xba>
            }
            field->pData = pData_orig;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	2200      	movs	r2, #0
 8005056:	461c      	mov	r4, r3
 8005058:	4615      	mov	r5, r2
 800505a:	4622      	mov	r2, r4
 800505c:	462b      	mov	r3, r5
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fbf7 	bl	8005852 <pb_encode_varint>
 8005064:	4603      	mov	r3, r0
 8005066:	f083 0301 	eor.w	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <encode_array+0x13c>
            return false;
 8005070:	2300      	movs	r3, #0
 8005072:	e0ad      	b.n	80051d0 <encode_array+0x298>
        
        if (stream->callback == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800507c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800507e:	2100      	movs	r1, #0
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff feeb 	bl	8004e5c <pb_write>
 8005086:	4603      	mov	r3, r0
 8005088:	e0a2      	b.n	80051d0 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800508a:	2300      	movs	r3, #0
 800508c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800508e:	e02d      	b.n	80050ec <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	7d9b      	ldrb	r3, [r3, #22]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	2b04      	cmp	r3, #4
 800509a:	d005      	beq.n	80050a8 <encode_array+0x170>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	7d9b      	ldrb	r3, [r3, #22]
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	d10b      	bne.n	80050c0 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fe58 	bl	8005d60 <pb_enc_fixed>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f083 0301 	eor.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <encode_array+0x1a0>
                    return false;
 80050bc:	2300      	movs	r3, #0
 80050be:	e087      	b.n	80051d0 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fd8a 	bl	8005bdc <pb_enc_varint>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f083 0301 	eor.w	r3, r3, #1
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <encode_array+0x1a0>
                    return false;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e07b      	b.n	80051d0 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	8a52      	ldrh	r2, [r2, #18]
 80050e0:	441a      	add	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80050e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050e8:	3301      	adds	r3, #1
 80050ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80050ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3cd      	bcc.n	8005090 <encode_array+0x158>
 80050f4:	e06b      	b.n	80051ce <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050fa:	e064      	b.n	80051c6 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	7d9b      	ldrb	r3, [r3, #22]
 8005100:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005104:	2b80      	cmp	r3, #128	@ 0x80
 8005106:	d147      	bne.n	8005198 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	7d9b      	ldrb	r3, [r3, #22]
 800510c:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005110:	2b07      	cmp	r3, #7
 8005112:	d005      	beq.n	8005120 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	7d9b      	ldrb	r3, [r3, #22]
 8005118:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800511c:	2b06      	cmp	r3, #6
 800511e:	d13b      	bne.n	8005198 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11c      	bne.n	8005172 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fc36 	bl	80059ac <pb_encode_tag_for_field>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fb7f 	bl	8005852 <pb_encode_varint>
 8005154:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <encode_array+0x226>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <encode_array+0x228>
 800515e:	2300      	movs	r3, #0
 8005160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005170:	e006      	b.n	8005180 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8005172:	6839      	ldr	r1, [r7, #0]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f951 	bl	800541c <encode_basic_field>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	61da      	str	r2, [r3, #28]

                if (!status)
 8005186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800518a:	f083 0301 	eor.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <encode_array+0x278>
                    return false;
 8005194:	2300      	movs	r3, #0
 8005196:	e01b      	b.n	80051d0 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f93e 	bl	800541c <encode_basic_field>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f083 0301 	eor.w	r3, r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <encode_array+0x27a>
                    return false;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e00f      	b.n	80051d0 <encode_array+0x298>
            {
 80051b0:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	8a52      	ldrh	r2, [r2, #18]
 80051ba:	441a      	add	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80051c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051c2:	3301      	adds	r3, #1
 80051c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80051c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80051c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d396      	bcc.n	80050fc <encode_array+0x1c4>
        }
    }
    
    return true;
 80051ce:	2301      	movs	r3, #1
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3730      	adds	r7, #48	@ 0x30
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bdb0      	pop	{r4, r5, r7, pc}
 80051d8:	080086e0 	.word	0x080086e0
 80051dc:	080086f8 	.word	0x080086f8

080051e0 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b092      	sub	sp, #72	@ 0x48
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	7d9b      	ldrb	r3, [r3, #22]
 80051ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80051f0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80051f4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 80c9 	bne.w	8005390 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80051fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005202:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800520a:	2300      	movs	r3, #0
 800520c:	e100      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800520e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005212:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005216:	2b20      	cmp	r3, #32
 8005218:	d108      	bne.n	800522c <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e0f1      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800522c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005230:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005234:	2b30      	cmp	r3, #48	@ 0x30
 8005236:	d108      	bne.n	800524a <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e0e2      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800524a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800524e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005252:	2b10      	cmp	r3, #16
 8005254:	d115      	bne.n	8005282 <pb_check_proto3_default_value+0xa2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fe4a 	bl	8004efc <safe_read_bool>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f083 0301 	eor.w	r3, r3, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	e0c6      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 800528c:	2300      	movs	r3, #0
 800528e:	e0bf      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005290:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	2b05      	cmp	r3, #5
 800529a:	d81c      	bhi.n	80052d6 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80052a8:	e00d      	b.n	80052c6 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 80052aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80052ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052b0:	4413      	add	r3, r2
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e0a9      	b.n	8005410 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 80052bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80052c0:	3301      	adds	r3, #1
 80052c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8a5b      	ldrh	r3, [r3, #18]
 80052ca:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3eb      	bcc.n	80052aa <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e09c      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80052d6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d10a      	bne.n	80052f8 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 80052e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e08b      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80052f8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2b07      	cmp	r3, #7
 8005302:	d108      	bne.n	8005316 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	e07c      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8005316:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	2b0b      	cmp	r3, #11
 8005320:	d107      	bne.n	8005332 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8a5b      	ldrh	r3, [r3, #18]
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e06e      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8005332:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	2b08      	cmp	r3, #8
 800533c:	d005      	beq.n	800534a <pb_check_proto3_default_value+0x16a>
 800533e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	2b09      	cmp	r3, #9
 8005348:	d161      	bne.n	800540e <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	4618      	mov	r0, r3
 8005358:	f001 ffbf 	bl	80072da <pb_field_iter_begin>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d014      	beq.n	800538c <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ff3a 	bl	80051e0 <pb_check_proto3_default_value>
 800536c:	4603      	mov	r3, r0
 800536e:	f083 0301 	eor.w	r3, r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005378:	2300      	movs	r3, #0
 800537a:	e049      	b.n	8005410 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 800537c:	f107 030c 	add.w	r3, r7, #12
 8005380:	4618      	mov	r0, r3
 8005382:	f001 fff3 	bl	800736c <pb_field_iter_next>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ea      	bne.n	8005362 <pb_check_proto3_default_value+0x182>
            }
            return true;
 800538c:	2301      	movs	r3, #1
 800538e:	e03f      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005390:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005394:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d107      	bne.n	80053ac <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e031      	b.n	8005410 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 80053ac:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80053b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053b4:	2b40      	cmp	r3, #64	@ 0x40
 80053b6:	d12a      	bne.n	800540e <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80053b8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2b0a      	cmp	r3, #10
 80053c2:	d10a      	bne.n	80053da <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 80053cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e01a      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005418 <pb_check_proto3_default_value+0x238>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10a      	bne.n	80053fc <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 80053ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e009      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e000      	b.n	8005410 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3748      	adds	r7, #72	@ 0x48
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	0800750f 	.word	0x0800750f

0800541c <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800542e:	2301      	movs	r3, #1
 8005430:	e061      	b.n	80054f6 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fab9 	bl	80059ac <pb_encode_tag_for_field>
 800543a:	4603      	mov	r3, r0
 800543c:	f083 0301 	eor.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <encode_basic_field+0x2e>
        return false;
 8005446:	2300      	movs	r3, #0
 8005448:	e055      	b.n	80054f6 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	7d9b      	ldrb	r3, [r3, #22]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	2b0b      	cmp	r3, #11
 8005454:	d844      	bhi.n	80054e0 <encode_basic_field+0xc4>
 8005456:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <encode_basic_field+0x40>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	0800548d 	.word	0x0800548d
 8005460:	08005499 	.word	0x08005499
 8005464:	08005499 	.word	0x08005499
 8005468:	08005499 	.word	0x08005499
 800546c:	080054a5 	.word	0x080054a5
 8005470:	080054a5 	.word	0x080054a5
 8005474:	080054b1 	.word	0x080054b1
 8005478:	080054bd 	.word	0x080054bd
 800547c:	080054c9 	.word	0x080054c9
 8005480:	080054c9 	.word	0x080054c9
 8005484:	080054e1 	.word	0x080054e1
 8005488:	080054d5 	.word	0x080054d5
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fb8a 	bl	8005ba8 <pb_enc_bool>
 8005494:	4603      	mov	r3, r0
 8005496:	e02e      	b.n	80054f6 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fb9e 	bl	8005bdc <pb_enc_varint>
 80054a0:	4603      	mov	r3, r0
 80054a2:	e028      	b.n	80054f6 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fc5a 	bl	8005d60 <pb_enc_fixed>
 80054ac:	4603      	mov	r3, r0
 80054ae:	e022      	b.n	80054f6 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fc82 	bl	8005dbc <pb_enc_bytes>
 80054b8:	4603      	mov	r3, r0
 80054ba:	e01c      	b.n	80054f6 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fcba 	bl	8005e38 <pb_enc_string>
 80054c4:	4603      	mov	r3, r0
 80054c6:	e016      	b.n	80054f6 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fd12 	bl	8005ef4 <pb_enc_submessage>
 80054d0:	4603      	mov	r3, r0
 80054d2:	e010      	b.n	80054f6 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fd52 	bl	8005f80 <pb_enc_fixed_length_bytes>
 80054dc:	4603      	mov	r3, r0
 80054de:	e00a      	b.n	80054f6 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <encode_basic_field+0xd2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	e000      	b.n	80054f0 <encode_basic_field+0xd4>
 80054ee:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <encode_basic_field+0xe4>)
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6113      	str	r3, [r2, #16]
 80054f4:	2300      	movs	r3, #0
    }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	08008700 	.word	0x08008700

08005504 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d018      	beq.n	800554a <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	2000      	movs	r0, #0
 8005524:	4798      	blx	r3
 8005526:	4603      	mov	r3, r0
 8005528:	f083 0301 	eor.w	r3, r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <encode_callback_field+0x3c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	e000      	b.n	8005542 <encode_callback_field+0x3e>
 8005540:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <encode_callback_field+0x50>)
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <encode_callback_field+0x48>
    }
    return true;
 800554a:	2301      	movs	r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	08008714 	.word	0x08008714

08005558 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	7d9b      	ldrb	r3, [r3, #22]
 8005566:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800556a:	2b30      	cmp	r3, #48	@ 0x30
 800556c:	d108      	bne.n	8005580 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	8a1b      	ldrh	r3, [r3, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d026      	beq.n	80055ca <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800557c:	2301      	movs	r3, #1
 800557e:	e059      	b.n	8005634 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	7d9b      	ldrb	r3, [r3, #22]
 8005584:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005588:	2b10      	cmp	r3, #16
 800558a:	d11e      	bne.n	80055ca <encode_field+0x72>
    {
        if (field->pSize)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fcaf 	bl	8004efc <safe_read_bool>
 800559e:	4603      	mov	r3, r0
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00f      	beq.n	80055ca <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e042      	b.n	8005634 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	7d9b      	ldrb	r3, [r3, #22]
 80055b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 80055ba:	6838      	ldr	r0, [r7, #0]
 80055bc:	f7ff fe10 	bl	80051e0 <pb_check_proto3_default_value>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <encode_field+0x72>
                return true;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e034      	b.n	8005634 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d113      	bne.n	80055fa <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	7d9b      	ldrb	r3, [r3, #22]
 80055d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <encode_field+0x94>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	e000      	b.n	80055ee <encode_field+0x96>
 80055ec:	4b13      	ldr	r3, [pc, #76]	@ (800563c <encode_field+0xe4>)
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6113      	str	r3, [r2, #16]
 80055f2:	2300      	movs	r3, #0
 80055f4:	e01e      	b.n	8005634 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e01c      	b.n	8005634 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	7d9b      	ldrb	r3, [r3, #22]
 80055fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d105      	bne.n	8005612 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff ff7b 	bl	8005504 <encode_callback_field>
 800560e:	4603      	mov	r3, r0
 8005610:	e010      	b.n	8005634 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	7d9b      	ldrb	r3, [r3, #22]
 8005616:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800561a:	2b20      	cmp	r3, #32
 800561c:	d105      	bne.n	800562a <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fc89 	bl	8004f38 <encode_array>
 8005626:	4603      	mov	r3, r0
 8005628:	e004      	b.n	8005634 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fef5 	bl	800541c <encode_basic_field>
 8005632:	4603      	mov	r3, r0
    }
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	08008724 	.word	0x08008724

08005640 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08c      	sub	sp, #48	@ 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800564a:	f107 0308 	add.w	r3, r7, #8
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f001 ff4a 	bl	80074ea <pb_field_iter_begin_extension_const>
 8005656:	4603      	mov	r3, r0
 8005658:	f083 0301 	eor.w	r3, r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <default_extension_encoder+0x30>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	e000      	b.n	8005672 <default_extension_encoder+0x32>
 8005670:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <default_extension_encoder+0x50>)
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6113      	str	r3, [r2, #16]
 8005676:	2300      	movs	r3, #0
 8005678:	e006      	b.n	8005688 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff69 	bl	8005558 <encode_field>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3730      	adds	r7, #48	@ 0x30
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	0800873c 	.word	0x0800873c

08005694 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]

    while (extension)
 80056a6:	e01e      	b.n	80056e6 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
 80056be:	4603      	mov	r3, r0
 80056c0:	72fb      	strb	r3, [r7, #11]
 80056c2:	e005      	b.n	80056d0 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff ffba 	bl	8005640 <default_extension_encoder>
 80056cc:	4603      	mov	r3, r0
 80056ce:	72fb      	strb	r3, [r7, #11]

        if (!status)
 80056d0:	7afb      	ldrb	r3, [r7, #11]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <encode_extension_field+0x4c>
            return false;
 80056dc:	2300      	movs	r3, #0
 80056de:	e006      	b.n	80056ee <encode_extension_field+0x5a>
        
        extension = extension->next;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60fb      	str	r3, [r7, #12]
    while (extension)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1dd      	bne.n	80056a8 <encode_extension_field+0x14>
    }
    
    return true;
 80056ec:	2301      	movs	r3, #1
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b08e      	sub	sp, #56	@ 0x38
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f001 fed9 	bl	80074c2 <pb_field_iter_begin_const>
 8005710:	4603      	mov	r3, r0
 8005712:	f083 0301 	eor.w	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <pb_encode+0x2a>
        return true; /* Empty message type */
 800571c:	2301      	movs	r3, #1
 800571e:	e02a      	b.n	8005776 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8005720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2b0a      	cmp	r3, #10
 800572a:	d10d      	bne.n	8005748 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800572c:	f107 0310 	add.w	r3, r7, #16
 8005730:	4619      	mov	r1, r3
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff ffae 	bl	8005694 <encode_extension_field>
 8005738:	4603      	mov	r3, r0
 800573a:	f083 0301 	eor.w	r3, r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00f      	beq.n	8005764 <pb_encode+0x6e>
                return false;
 8005744:	2300      	movs	r3, #0
 8005746:	e016      	b.n	8005776 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005748:	f107 0310 	add.w	r3, r7, #16
 800574c:	4619      	mov	r1, r3
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff ff02 	bl	8005558 <encode_field>
 8005754:	4603      	mov	r3, r0
 8005756:	f083 0301 	eor.w	r3, r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <pb_encode+0x6e>
                return false;
 8005760:	2300      	movs	r3, #0
 8005762:	e008      	b.n	8005776 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fdff 	bl	800736c <pb_field_iter_next>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1d5      	bne.n	8005720 <pb_encode+0x2a>
    
    return true;
 8005774:	2301      	movs	r3, #1
}
 8005776:	4618      	mov	r0, r3
 8005778:	3738      	adds	r7, #56	@ 0x38
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b088      	sub	sp, #32
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005796:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	09db      	lsrs	r3, r3, #7
 800579c:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800579e:	e013      	b.n	80057c8 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 80057a0:	7efb      	ldrb	r3, [r7, #27]
 80057a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a6:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	61fa      	str	r2, [r7, #28]
 80057ae:	3320      	adds	r3, #32
 80057b0:	443b      	add	r3, r7
 80057b2:	7efa      	ldrb	r2, [r7, #27]
 80057b4:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c0:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	09db      	lsrs	r3, r3, #7
 80057c6:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d805      	bhi.n	80057da <pb_encode_varint_32+0x5c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e5      	bne.n	80057a0 <pb_encode_varint_32+0x22>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e2      	bne.n	80057a0 <pb_encode_varint_32+0x22>
    }

    if (high)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d024      	beq.n	800582a <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	7efb      	ldrb	r3, [r7, #27]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	08db      	lsrs	r3, r3, #3
 80057f8:	607b      	str	r3, [r7, #4]

        while (high)
 80057fa:	e013      	b.n	8005824 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 80057fc:	7efb      	ldrb	r3, [r7, #27]
 80057fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005802:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	61fa      	str	r2, [r7, #28]
 800580a:	3320      	adds	r3, #32
 800580c:	443b      	add	r3, r7
 800580e:	7efa      	ldrb	r2, [r7, #27]
 8005810:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800581c:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	607b      	str	r3, [r7, #4]
        while (high)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e8      	bne.n	80057fc <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	61fa      	str	r2, [r7, #28]
 8005830:	3320      	adds	r3, #32
 8005832:	443b      	add	r3, r7
 8005834:	7efa      	ldrb	r2, [r7, #27]
 8005836:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	4619      	mov	r1, r3
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff fb0a 	bl	8004e5c <pb_write>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005852:	b590      	push	{r4, r7, lr}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800585e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005862:	2a80      	cmp	r2, #128	@ 0x80
 8005864:	f173 0300 	sbcs.w	r3, r3, #0
 8005868:	d20a      	bcs.n	8005880 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800586a:	783b      	ldrb	r3, [r7, #0]
 800586c:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800586e:	f107 0317 	add.w	r3, r7, #23
 8005872:	2201      	movs	r2, #1
 8005874:	4619      	mov	r1, r3
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff faf0 	bl	8004e5c <pb_write>
 800587c:	4603      	mov	r3, r0
 800587e:	e00f      	b.n	80058a0 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8005880:	683c      	ldr	r4, [r7, #0]
 8005882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	000a      	movs	r2, r1
 8005890:	2300      	movs	r3, #0
 8005892:	4613      	mov	r3, r2
 8005894:	461a      	mov	r2, r3
 8005896:	4621      	mov	r1, r4
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff ff70 	bl	800577e <pb_encode_varint_32>
 800589e:	4603      	mov	r3, r0
#endif
    }
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd90      	pop	{r4, r7, pc}

080058a8 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b08a      	sub	sp, #40	@ 0x28
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6178      	str	r0, [r7, #20]
 80058b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058ba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80058be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 80058c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da15      	bge.n	80058f6 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80058ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d2:	ea00 0402 	and.w	r4, r0, r2
 80058d6:	ea01 0503 	and.w	r5, r1, r3
 80058da:	1923      	adds	r3, r4, r4
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	eb45 0305 	adc.w	r3, r5, r5
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e8:	ea6f 0a02 	mvn.w	sl, r2
 80058ec:	ea6f 0b03 	mvn.w	fp, r3
 80058f0:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80058f4:	e007      	b.n	8005906 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80058f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058fa:	eb12 0802 	adds.w	r8, r2, r2
 80058fe:	eb43 0903 	adc.w	r9, r3, r3
 8005902:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8005906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800590a:	6978      	ldr	r0, [r7, #20]
 800590c:	f7ff ffa1 	bl	8005852 <pb_encode_varint>
 8005910:	4603      	mov	r3, r0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3728      	adds	r7, #40	@ 0x28
 8005916:	46bd      	mov	sp, r7
 8005918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800591c <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8005926:	2204      	movs	r2, #4
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fa96 	bl	8004e5c <pb_write>
 8005930:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8005944:	2208      	movs	r2, #8
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff fa87 	bl	8004e5c <pb_write>
 800594e:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800595c:	b088      	sub	sp, #32
 800595e:	af00      	add	r7, sp, #0
 8005960:	6178      	str	r0, [r7, #20]
 8005962:	460b      	mov	r3, r1
 8005964:	60fa      	str	r2, [r7, #12]
 8005966:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	469a      	mov	sl, r3
 800596e:	4693      	mov	fp, r2
 8005970:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8005974:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	2200      	movs	r2, #0
 800597c:	4698      	mov	r8, r3
 800597e:	4691      	mov	r9, r2
 8005980:	ea44 0308 	orr.w	r3, r4, r8
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	ea45 0309 	orr.w	r3, r5, r9
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005990:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8005994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005998:	6978      	ldr	r0, [r7, #20]
 800599a:	f7ff ff5a 	bl	8005852 <pb_encode_varint>
 800599e:	4603      	mov	r3, r0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080059ac <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	7d9b      	ldrb	r3, [r3, #22]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	2b0b      	cmp	r3, #11
 80059c0:	d826      	bhi.n	8005a10 <pb_encode_tag_for_field+0x64>
 80059c2:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <pb_encode_tag_for_field+0x1c>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059f9 	.word	0x080059f9
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	080059ff 	.word	0x080059ff
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a0b 	.word	0x08005a0b
 80059e8:	08005a0b 	.word	0x08005a0b
 80059ec:	08005a0b 	.word	0x08005a0b
 80059f0:	08005a11 	.word	0x08005a11
 80059f4:	08005a0b 	.word	0x08005a0b
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]
            break;
 80059fc:	e014      	b.n	8005a28 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80059fe:	2305      	movs	r3, #5
 8005a00:	73fb      	strb	r3, [r7, #15]
            break;
 8005a02:	e011      	b.n	8005a28 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
            break;
 8005a08:	e00e      	b.n	8005a28 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	73fb      	strb	r3, [r7, #15]
            break;
 8005a0e:	e00b      	b.n	8005a28 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <pb_encode_tag_for_field+0x72>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	e000      	b.n	8005a20 <pb_encode_tag_for_field+0x74>
 8005a1e:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <pb_encode_tag_for_field+0x98>)
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6113      	str	r3, [r2, #16]
 8005a24:	2300      	movs	r3, #0
 8005a26:	e008      	b.n	8005a3a <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	8a1b      	ldrh	r3, [r3, #16]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff90 	bl	8005958 <pb_encode_tag>
 8005a38:	4603      	mov	r3, r0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08008700 	.word	0x08008700

08005a48 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8005a48:	b5b0      	push	{r4, r5, r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	461c      	mov	r4, r3
 8005a5a:	4615      	mov	r5, r2
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	462b      	mov	r3, r5
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fef6 	bl	8005852 <pb_encode_varint>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f083 0301 	eor.w	r3, r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <pb_encode_string+0x2e>
        return false;
 8005a72:	2300      	movs	r3, #0
 8005a74:	e005      	b.n	8005a82 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff f9ee 	bl	8004e5c <pb_write>
 8005a80:	4603      	mov	r3, r0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a8c <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b08c      	sub	sp, #48	@ 0x30
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fe20 	bl	80056f6 <pb_encode>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f083 0301 	eor.w	r3, r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e065      	b.n	8005b98 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	461c      	mov	r4, r3
 8005ad6:	4615      	mov	r5, r2
 8005ad8:	4622      	mov	r2, r4
 8005ada:	462b      	mov	r3, r5
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff feb8 	bl	8005852 <pb_encode_varint>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f083 0301 	eor.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <pb_encode_submessage+0x66>
        return false;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e052      	b.n	8005b98 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005afc:	2100      	movs	r1, #0
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff f9ac 	bl	8004e5c <pb_write>
 8005b04:	4603      	mov	r3, r0
 8005b06:	e047      	b.n	8005b98 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0e:	441a      	add	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d90b      	bls.n	8005b30 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <pb_encode_submessage+0x9a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	e000      	b.n	8005b28 <pb_encode_submessage+0x9c>
 8005b26:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba0 <pb_encode_submessage+0x114>)
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	6113      	str	r3, [r2, #16]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e033      	b.n	8005b98 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fdd0 	bl	80056f6 <pb_encode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	441a      	add	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d00b      	beq.n	8005b94 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <pb_encode_submessage+0xfe>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	e000      	b.n	8005b8c <pb_encode_submessage+0x100>
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <pb_encode_submessage+0x118>)
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	6113      	str	r3, [r2, #16]
 8005b90:	2300      	movs	r3, #0
 8005b92:	e001      	b.n	8005b98 <pb_encode_submessage+0x10c>
    
    return status;
 8005b94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3730      	adds	r7, #48	@ 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba0:	080086c8 	.word	0x080086c8
 8005ba4:	08008750 	.word	0x08008750

08005ba8 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f9a0 	bl	8004efc <safe_read_bool>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	461c      	mov	r4, r3
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	4622      	mov	r2, r4
 8005bca:	462b      	mov	r3, r5
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fe40 	bl	8005852 <pb_encode_varint>
 8005bd2:	4603      	mov	r3, r0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bdb0      	pop	{r4, r5, r7, pc}

08005bdc <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b08c      	sub	sp, #48	@ 0x30
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	61f8      	str	r0, [r7, #28]
 8005be6:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	7d9b      	ldrb	r3, [r3, #22]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d152      	bne.n	8005c9a <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	8a5b      	ldrh	r3, [r3, #18]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10b      	bne.n	8005c20 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2200      	movs	r2, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	617a      	str	r2, [r7, #20]
 8005c16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c1a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005c1e:	e035      	b.n	8005c8c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	8a5b      	ldrh	r3, [r3, #18]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d10b      	bne.n	8005c40 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	60fa      	str	r2, [r7, #12]
 8005c36:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005c3a:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005c3e:	e025      	b.n	8005c8c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	8a5b      	ldrh	r3, [r3, #18]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d10a      	bne.n	8005c5e <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c58:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005c5c:	e016      	b.n	8005c8c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	8a5b      	ldrh	r3, [r3, #18]
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d106      	bne.n	8005c74 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005c72:	e00b      	b.n	8005c8c <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <pb_enc_varint+0xa6>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	e000      	b.n	8005c84 <pb_enc_varint+0xa8>
 8005c82:	4b36      	ldr	r3, [pc, #216]	@ (8005d5c <pb_enc_varint+0x180>)
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	6113      	str	r3, [r2, #16]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e061      	b.n	8005d50 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8005c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c90:	69f8      	ldr	r0, [r7, #28]
 8005c92:	f7ff fdde 	bl	8005852 <pb_encode_varint>
 8005c96:	4603      	mov	r3, r0
 8005c98:	e05a      	b.n	8005d50 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	8a5b      	ldrh	r3, [r3, #18]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10a      	bne.n	8005cc4 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	17da      	asrs	r2, r3, #31
 8005cba:	469a      	mov	sl, r3
 8005cbc:	4693      	mov	fp, r2
 8005cbe:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005cc2:	e032      	b.n	8005d2a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	8a5b      	ldrh	r3, [r3, #18]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d10a      	bne.n	8005ce2 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	17da      	asrs	r2, r3, #31
 8005cd8:	4698      	mov	r8, r3
 8005cda:	4691      	mov	r9, r2
 8005cdc:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8005ce0:	e023      	b.n	8005d2a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	8a5b      	ldrh	r3, [r3, #18]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d108      	bne.n	8005cfc <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	17da      	asrs	r2, r3, #31
 8005cf2:	461c      	mov	r4, r3
 8005cf4:	4615      	mov	r5, r2
 8005cf6:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8005cfa:	e016      	b.n	8005d2a <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	8a5b      	ldrh	r3, [r3, #18]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d106      	bne.n	8005d12 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005d10:	e00b      	b.n	8005d2a <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <pb_enc_varint+0x144>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	e000      	b.n	8005d22 <pb_enc_varint+0x146>
 8005d20:	4b0e      	ldr	r3, [pc, #56]	@ (8005d5c <pb_enc_varint+0x180>)
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	6113      	str	r3, [r2, #16]
 8005d26:	2300      	movs	r3, #0
 8005d28:	e012      	b.n	8005d50 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	7d9b      	ldrb	r3, [r3, #22]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d106      	bne.n	8005d44 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8005d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d3a:	69f8      	ldr	r0, [r7, #28]
 8005d3c:	f7ff fdb4 	bl	80058a8 <pb_encode_svarint>
 8005d40:	4603      	mov	r3, r0
 8005d42:	e005      	b.n	8005d50 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8005d44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d48:	69f8      	ldr	r0, [r7, #28]
 8005d4a:	f7ff fd82 	bl	8005852 <pb_encode_varint>
 8005d4e:	4603      	mov	r3, r0

    }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3730      	adds	r7, #48	@ 0x30
 8005d54:	46bd      	mov	sp, r7
 8005d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08008764 	.word	0x08008764

08005d60 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	8a5b      	ldrh	r3, [r3, #18]
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d107      	bne.n	8005d82 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fdcf 	bl	800591c <pb_encode_fixed32>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	e016      	b.n	8005db0 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	8a5b      	ldrh	r3, [r3, #18]
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d107      	bne.n	8005d9a <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fdd2 	bl	800593a <pb_encode_fixed64>
 8005d96:	4603      	mov	r3, r0
 8005d98:	e00a      	b.n	8005db0 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <pb_enc_fixed+0x48>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	e000      	b.n	8005daa <pb_enc_fixed+0x4a>
 8005da8:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <pb_enc_fixed+0x58>)
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6113      	str	r3, [r2, #16]
 8005dae:	2300      	movs	r3, #0
    }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	08008764 	.word	0x08008764

08005dbc <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fe34 	bl	8005a48 <pb_encode_string>
 8005de0:	4603      	mov	r3, r0
 8005de2:	e022      	b.n	8005e2a <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	7d9b      	ldrb	r3, [r3, #22]
 8005de8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d113      	bne.n	8005e18 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	8a5b      	ldrh	r3, [r3, #18]
 8005dfa:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d90b      	bls.n	8005e18 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <pb_enc_bytes+0x52>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	e000      	b.n	8005e10 <pb_enc_bytes+0x54>
 8005e0e:	4b09      	ldr	r3, [pc, #36]	@ (8005e34 <pb_enc_bytes+0x78>)
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6113      	str	r3, [r2, #16]
 8005e14:	2300      	movs	r3, #0
 8005e16:	e008      	b.n	8005e2a <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1c99      	adds	r1, r3, #2
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fe10 	bl	8005a48 <pb_encode_string>
 8005e28:	4603      	mov	r3, r0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	08008778 	.word	0x08008778

08005e38 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	8a5b      	ldrh	r3, [r3, #18]
 8005e4a:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	7d9b      	ldrb	r3, [r3, #22]
 8005e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e5a:	2b80      	cmp	r3, #128	@ 0x80
 8005e5c:	d103      	bne.n	8005e66 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e011      	b.n	8005e8a <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <pb_enc_string+0x42>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	e000      	b.n	8005e7c <pb_enc_string+0x44>
 8005e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005eec <pb_enc_string+0xb4>)
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6113      	str	r3, [r2, #16]
 8005e80:	2300      	movs	r3, #0
 8005e82:	e02f      	b.n	8005ee4 <pb_enc_string+0xac>

        max_size -= 1;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e020      	b.n	8005ed8 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8005e9a:	e005      	b.n	8005ea8 <pb_enc_string+0x70>
        {
            size++;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
            p++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d203      	bcs.n	8005eb8 <pb_enc_string+0x80>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f1      	bne.n	8005e9c <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <pb_enc_string+0x96>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	e000      	b.n	8005ed0 <pb_enc_string+0x98>
 8005ece:	4b08      	ldr	r3, [pc, #32]	@ (8005ef0 <pb_enc_string+0xb8>)
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6113      	str	r3, [r2, #16]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e005      	b.n	8005ee4 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fdb3 	bl	8005a48 <pb_encode_string>
 8005ee2:	4603      	mov	r3, r0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	0800878c 	.word	0x0800878c
 8005ef0:	080087a0 	.word	0x080087a0

08005ef4 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <pb_enc_submessage+0x20>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	e000      	b.n	8005f16 <pb_enc_submessage+0x22>
 8005f14:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <pb_enc_submessage+0x88>)
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6113      	str	r3, [r2, #16]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e029      	b.n	8005f72 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	7d9b      	ldrb	r3, [r3, #22]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d11a      	bne.n	8005f60 <pb_enc_submessage+0x6c>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	3b08      	subs	r3, #8
 8005f38:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	3204      	adds	r2, #4
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	f083 0301 	eor.w	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <pb_enc_submessage+0x6c>
                return false;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e008      	b.n	8005f72 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fd8e 	bl	8005a8c <pb_encode_submessage>
 8005f70:	4603      	mov	r3, r0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	080087b4 	.word	0x080087b4

08005f80 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	69d9      	ldr	r1, [r3, #28]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	8a5b      	ldrh	r3, [r3, #18]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff fd57 	bl	8005a48 <pb_encode_string>
 8005f9a:	4603      	mov	r3, r0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <TF_ClearMsg>:
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8005fac:	2218      	movs	r2, #24
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fdbd 	bl	8007b30 <memset>
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005fce:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <TF_ClaimTx+0x20>
            TF_Error("TF already locked for tx!");
 8005fd6:	4808      	ldr	r0, [pc, #32]	@ (8005ff8 <TF_ClaimTx+0x38>)
 8005fd8:	f001 fcca 	bl	8007970 <puts>
            return false;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e006      	b.n	8005fee <TF_ClaimTx+0x2e>
        }

        tf->soft_lock = true;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
        return true;
 8005fec:	2301      	movs	r3, #1
    }
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	080087d0 	.word	0x080087d0

08005ffc <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800600a:	2200      	movs	r2, #0
 800600c:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4618      	mov	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	460a      	mov	r2, r1
 8006036:	80fb      	strh	r3, [r7, #6]
 8006038:	4613      	mov	r3, r2
 800603a:	717b      	strb	r3, [r7, #5]
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	b29a      	uxth	r2, r3
 8006042:	88f9      	ldrh	r1, [r7, #6]
 8006044:	797b      	ldrb	r3, [r7, #5]
 8006046:	404b      	eors	r3, r1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	4905      	ldr	r1, [pc, #20]	@ (8006060 <TF_CksumAdd+0x34>)
 800604c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006050:	4053      	eors	r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	08008c2c 	.word	0x08008c2c

08006064 <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	80fb      	strh	r3, [r7, #6]
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 800608e:	480f      	ldr	r0, [pc, #60]	@ (80060cc <TF_InitStatic+0x50>)
 8006090:	f001 fc6e 	bl	8007970 <puts>
        return false;
 8006094:	2300      	movs	r3, #0
 8006096:	e015      	b.n	80060c4 <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 80060a4:	f242 2260 	movw	r2, #8800	@ 0x2260
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fd40 	bl	8007b30 <memset>

    tf->usertag = usertag;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	721a      	strb	r2, [r3, #8]
    return true;
 80060c2:	2301      	movs	r3, #1
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	080087f0 	.word	0x080087f0

080060d0 <renew_id_listener>:

//region Listeners

/** Reset ID listener's timeout to the original value */
static inline void _TF_FN renew_id_listener(struct TF_IdListener_ *lst)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
    lst->timeout = lst->timeout_max;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	895a      	ldrh	r2, [r3, #10]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	811a      	strh	r2, [r3, #8]
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <cleanup_id_listener>:

/** Notify callback about ID listener's demise & let it free any resources in userdata */
static void _TF_FN cleanup_id_listener(TinyFrame *tf, TF_COUNT i, struct TF_IdListener_ *lst)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	@ 0x28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	460b      	mov	r3, r1
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	72fb      	strb	r3, [r7, #11]
    TF_Msg msg;
    if (lst->fn == NULL) return;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02f      	beq.n	8006162 <cleanup_id_listener+0x76>

    // Make user clean up their data - only if not NULL
    if (lst->userdata != NULL || lst->userdata2 != NULL) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <cleanup_id_listener+0x26>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00e      	beq.n	8006130 <cleanup_id_listener+0x44>
        msg.userdata = lst->userdata;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	623b      	str	r3, [r7, #32]
        msg.userdata2 = lst->userdata2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
        msg.data = NULL; // this is a signal that the listener should clean up
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
        lst->fn(tf, &msg); // return value is ignored here - use TF_STAY or TF_CLOSE
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f107 0210 	add.w	r2, r7, #16
 800612a:	4611      	mov	r1, r2
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	4798      	blx	r3
    }

    lst->fn = NULL; // Discard listener
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	605a      	str	r2, [r3, #4]

    if (i == tf->count_id_lst - 1) {
 8006136:	7afa      	ldrb	r2, [r7, #11]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800613e:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006142:	3b01      	subs	r3, #1
 8006144:	429a      	cmp	r2, r3
 8006146:	d10d      	bne.n	8006164 <cleanup_id_listener+0x78>
        tf->count_id_lst--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800614e:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006152:	3b01      	subs	r3, #1
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800615c:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 8006160:	e000      	b.n	8006164 <cleanup_id_listener+0x78>
    if (lst->fn == NULL) return;
 8006162:	bf00      	nop
    }
}
 8006164:	3728      	adds	r7, #40	@ 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <cleanup_type_listener>:

/** Clean up Type listener */
static inline void _TF_FN cleanup_type_listener(TinyFrame *tf, TF_COUNT i, struct TF_TypeListener_ *lst)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	460b      	mov	r3, r1
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
    if (i == tf->count_type_lst - 1) {
 800617e:	7afa      	ldrb	r2, [r7, #11]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006186:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800618a:	3b01      	subs	r3, #1
 800618c:	429a      	cmp	r2, r3
 800618e:	d10b      	bne.n	80061a8 <cleanup_type_listener+0x3e>
        tf->count_type_lst--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006196:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800619a:	3b01      	subs	r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061a4:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    }
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <cleanup_generic_listener>:

/** Clean up Generic listener */
static inline void _TF_FN cleanup_generic_listener(TinyFrame *tf, TF_COUNT i, struct TF_GenericListener_ *lst)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	460b      	mov	r3, r1
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
    if (i == tf->count_generic_lst - 1) {
 80061c8:	7afa      	ldrb	r2, [r7, #11]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061d0:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80061d4:	3b01      	subs	r3, #1
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d10b      	bne.n	80061f2 <cleanup_generic_listener+0x3e>
        tf->count_generic_lst--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061e0:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061ee:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    }
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <TF_AddIdListener>:

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_TICKS timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	807b      	strh	r3, [r7, #2]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]
 8006212:	e039      	b.n	8006288 <TF_AddIdListener+0x88>
        lst = &tf->id_listeners[i];
 8006214:	7dfa      	ldrb	r2, [r7, #23]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006222:	3330      	adds	r3, #48	@ 0x30
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d127      	bne.n	8006282 <TF_AddIdListener+0x82>
            lst->fn = cb;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]
            lst->id = msg->frame_id;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	601a      	str	r2, [r3, #0]
            lst->userdata = msg->userdata;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	60da      	str	r2, [r3, #12]
            lst->userdata2 = msg->userdata2;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	611a      	str	r2, [r3, #16]
            lst->timeout_max = lst->timeout = timeout;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	811a      	strh	r2, [r3, #8]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	891a      	ldrh	r2, [r3, #8]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	815a      	strh	r2, [r3, #10]
            if (i >= tf->count_id_lst) {
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006264:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006268:	7dfa      	ldrb	r2, [r7, #23]
 800626a:	429a      	cmp	r2, r3
 800626c:	d307      	bcc.n	800627e <TF_AddIdListener+0x7e>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	3301      	adds	r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800627a:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
            }
            return true;
 800627e:	2301      	movs	r3, #1
 8006280:	e009      	b.n	8006296 <TF_AddIdListener+0x96>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	3301      	adds	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	2b09      	cmp	r3, #9
 800628c:	d9c2      	bls.n	8006214 <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 800628e:	4804      	ldr	r0, [pc, #16]	@ (80062a0 <TF_AddIdListener+0xa0>)
 8006290:	f001 fb6e 	bl	8007970 <puts>
    return false;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	08008844 	.word	0x08008844

080062a4 <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
 80062b2:	e022      	b.n	80062fa <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d114      	bne.n	80062f4 <TF_AddGenericListener+0x50>
            lst->fn = cb;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062d6:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80062da:	7bfa      	ldrb	r2, [r7, #15]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d307      	bcc.n	80062f0 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	3301      	adds	r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80062ec:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e009      	b.n	8006308 <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	3301      	adds	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d9d9      	bls.n	80062b4 <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 8006300:	4803      	ldr	r0, [pc, #12]	@ (8006310 <TF_AddGenericListener+0x6c>)
 8006302:	f001 fb35 	bl	8007970 <puts>
    return false;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	08008888 	.word	0x08008888

08006314 <TF_HandleReceivedMessage>:
    return false;
}

/** Handle a message that was just collected & verified by the parser */
static void _TF_FN TF_HandleReceivedMessage(TinyFrame *tf)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	@ 0x38
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
    struct TF_GenericListener_ *glst;
    TF_Result res;

    // Prepare message object
    TF_Msg msg;
    TF_ClearMsg(&msg);
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fe3f 	bl	8005fa4 <TF_ClearMsg>
    msg.frame_id = tf->id;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	60fb      	str	r3, [r7, #12]
    msg.is_response = false;
 800632c:	2300      	movs	r3, #0
 800632e:	743b      	strb	r3, [r7, #16]
    msg.type = tf->type;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006336:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800633a:	827b      	strh	r3, [r7, #18]
    msg.data = tf->data;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	331a      	adds	r3, #26
 8006340:	617b      	str	r3, [r7, #20]
    msg.len = tf->len;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8b1b      	ldrh	r3, [r3, #24]
 8006346:	833b      	strh	r3, [r7, #24]

    // The loop upper bounds are the highest currently used slot index
    // (or close to it, depending on the order of listener removals).

    // ID listeners first
    for (i = 0; i < tf->count_id_lst; i++) {
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800634e:	e04e      	b.n	80063ee <TF_HandleReceivedMessage+0xda>
        ilst = &tf->id_listeners[i];
 8006350:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006360:	3330      	adds	r3, #48	@ 0x30
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24

        if (ilst->fn && ilst->id == msg.frame_id) {
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d039      	beq.n	80063e4 <TF_HandleReceivedMessage+0xd0>
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	429a      	cmp	r2, r3
 8006378:	d134      	bne.n	80063e4 <TF_HandleReceivedMessage+0xd0>
            msg.userdata = ilst->userdata; // pass userdata pointer to the callback
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	61fb      	str	r3, [r7, #28]
            msg.userdata2 = ilst->userdata2;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	623b      	str	r3, [r7, #32]
            res = ilst->fn(tf, &msg);
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f107 020c 	add.w	r2, r7, #12
 800638e:	4611      	mov	r1, r2
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            ilst->userdata = msg.userdata; // put it back (may have changed the pointer or set to NULL)
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	60da      	str	r2, [r3, #12]
            ilst->userdata2 = msg.userdata2; // put it back (may have changed the pointer or set to NULL)
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	611a      	str	r2, [r3, #16]

            if (res != TF_NEXT) {
 80063a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01a      	beq.n	80063e4 <TF_HandleReceivedMessage+0xd0>
                // if it's TF_CLOSE, we assume user already cleaned up userdata
                if (res == TF_RENEW) {
 80063ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d103      	bne.n	80063be <TF_HandleReceivedMessage+0xaa>
                    renew_id_listener(ilst);
 80063b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063b8:	f7ff fe8a 	bl	80060d0 <renew_id_listener>
                    // Set userdata to NULL to avoid calling user for cleanup
                    ilst->userdata = NULL;
                    ilst->userdata2 = NULL;
                    cleanup_id_listener(tf, i, ilst);
                }
                return;
 80063bc:	e09f      	b.n	80064fe <TF_HandleReceivedMessage+0x1ea>
                else if (res == TF_CLOSE) {
 80063be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	f040 809b 	bne.w	80064fe <TF_HandleReceivedMessage+0x1ea>
                    ilst->userdata = NULL;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	2200      	movs	r2, #0
 80063cc:	60da      	str	r2, [r3, #12]
                    ilst->userdata2 = NULL;
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	2200      	movs	r2, #0
 80063d2:	611a      	str	r2, [r3, #16]
                    cleanup_id_listener(tf, i, ilst);
 80063d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fe85 	bl	80060ec <cleanup_id_listener>
                return;
 80063e2:	e08c      	b.n	80064fe <TF_HandleReceivedMessage+0x1ea>
    for (i = 0; i < tf->count_id_lst; i++) {
 80063e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063e8:	3301      	adds	r3, #1
 80063ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80063f4:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 80063f8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3a7      	bcc.n	8006350 <TF_HandleReceivedMessage+0x3c>
            }
        }
    }
    // clean up for the following listeners that don't use userdata (this avoids data from
    // an ID listener that returned TF_NEXT from leaking into Type and Generic listeners)
    msg.userdata = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	61fb      	str	r3, [r7, #28]
    msg.userdata2 = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	623b      	str	r3, [r7, #32]

    // Type listeners
    for (i = 0; i < tf->count_type_lst; i++) {
 8006408:	2300      	movs	r3, #0
 800640a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800640e:	e02f      	b.n	8006470 <TF_HandleReceivedMessage+0x15c>
        tlst = &tf->type_listeners[i];
 8006410:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006414:	f203 433f 	addw	r3, r3, #1087	@ 0x43f
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (tlst->fn && tlst->type == msg.type) {
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01e      	beq.n	8006466 <TF_HandleReceivedMessage+0x152>
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	8a7b      	ldrh	r3, [r7, #18]
 800642e:	429a      	cmp	r2, r3
 8006430:	d119      	bne.n	8006466 <TF_HandleReceivedMessage+0x152>
            res = tlst->fn(tf, &msg);
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f107 020c 	add.w	r2, r7, #12
 800643a:	4611      	mov	r1, r2
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
 8006440:	4603      	mov	r3, r0
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 8006446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <TF_HandleReceivedMessage+0x152>
                // type listeners don't have userdata.
                // TF_RENEW doesn't make sense here because type listeners don't expire = same as TF_STAY

                if (res == TF_CLOSE) {
 800644e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006452:	2b03      	cmp	r3, #3
 8006454:	d155      	bne.n	8006502 <TF_HandleReceivedMessage+0x1ee>
                    cleanup_type_listener(tf, i, tlst);
 8006456:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800645a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fe83 	bl	800616a <cleanup_type_listener>
                }
                return;
 8006464:	e04d      	b.n	8006502 <TF_HandleReceivedMessage+0x1ee>
    for (i = 0; i < tf->count_type_lst; i++) {
 8006466:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800646a:	3301      	adds	r3, #1
 800646c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006476:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 800647a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800647e:	429a      	cmp	r2, r3
 8006480:	d3c6      	bcc.n	8006410 <TF_HandleReceivedMessage+0xfc>
            }
        }
    }

    // Generic listeners
    for (i = 0; i < tf->count_generic_lst; i++) {
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006488:	e02a      	b.n	80064e0 <TF_HandleReceivedMessage+0x1cc>
        glst = &tf->generic_listeners[i];
 800648a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800648e:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	633b      	str	r3, [r7, #48]	@ 0x30

        if (glst->fn) {
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <TF_HandleReceivedMessage+0x1c2>
            res = glst->fn(tf, &msg);
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f107 020c 	add.w	r2, r7, #12
 80064aa:	4611      	mov	r1, r2
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 80064b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <TF_HandleReceivedMessage+0x1c2>

                // note: It's not expected that user will have multiple generic listeners, or
                // ever actually remove them. They're most useful as default callbacks if no other listener
                // handled the message.

                if (res == TF_CLOSE) {
 80064be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d11f      	bne.n	8006506 <TF_HandleReceivedMessage+0x1f2>
                    cleanup_generic_listener(tf, i, glst);
 80064c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fe70 	bl	80061b4 <cleanup_generic_listener>
                }
                return;
 80064d4:	e017      	b.n	8006506 <TF_HandleReceivedMessage+0x1f2>
    for (i = 0; i < tf->count_generic_lst; i++) {
 80064d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064da:	3301      	adds	r3, #1
 80064dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80064e6:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80064ea:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3cb      	bcc.n	800648a <TF_HandleReceivedMessage+0x176>
            }
        }
    }

    TF_Error("Unhandled message, type %d", (int)msg.type);
 80064f2:	8a7b      	ldrh	r3, [r7, #18]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4806      	ldr	r0, [pc, #24]	@ (8006510 <TF_HandleReceivedMessage+0x1fc>)
 80064f8:	f001 f9d2 	bl	80078a0 <iprintf>
 80064fc:	e004      	b.n	8006508 <TF_HandleReceivedMessage+0x1f4>
                return;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006506:	bf00      	nop
}
 8006508:	3738      	adds	r7, #56	@ 0x38
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	08008930 	.word	0x08008930

08006514 <TF_Accept>:

//region Parser

/** Handle a received byte buffer */
void _TF_FN TF_Accept(TinyFrame *tf, const uint8_t *buffer, uint32_t count)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < count; i++) {
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e00a      	b.n	800653c <TF_Accept+0x28>
        TF_AcceptChar(tf, buffer[i]);
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f849 	bl	80065c8 <TF_AcceptChar>
    for (i = 0; i < count; i++) {
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	3301      	adds	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d3f0      	bcc.n	8006526 <TF_Accept+0x12>
    }
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <TF_ResetParser>:

/** Reset the parser's internal state. */
void _TF_FN TF_ResetParser(TinyFrame *tf)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
    tf->state = TFState_SOF;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	741a      	strb	r2, [r3, #16]
    // more init will be done by the parser when the first byte is received
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <pars_begin_frame>:

/** SOF was received - prepare for the frame */
static void _TF_FN pars_begin_frame(TinyFrame *tf) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
    // Reset state vars
    CKSUM_RESET(tf->cksum);
 8006570:	f7ff fd54 	bl	800601c <TF_CksumStart>
 8006574:	4603      	mov	r3, r0
 8006576:	461a      	mov	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800657e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#if TF_USE_SOF_BYTE
    CKSUM_ADD(tf->cksum, TF_SOF_BYTE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006588:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800658c:	21ab      	movs	r1, #171	@ 0xab
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fd4c 	bl	800602c <TF_CksumAdd>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800659e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#endif

    tf->discard_data = false;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

    // Enter ID state
    tf->state = TFState_ID;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2203      	movs	r2, #3
 80065b2:	741a      	strb	r2, [r3, #16]
    tf->rxi = 0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <TF_AcceptChar>:

/** Handle a received char - here's the main state machine */
void _TF_FN TF_AcceptChar(TinyFrame *tf, unsigned char c)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
    // Parser timeout - clear
    if (tf->parser_timeout_ticks >= TF_PARSER_TIMEOUT_TICKS) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8a5b      	ldrh	r3, [r3, #18]
 80065d8:	2b09      	cmp	r3, #9
 80065da:	d909      	bls.n	80065f0 <TF_AcceptChar+0x28>
        if (tf->state != TFState_SOF) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7c1b      	ldrb	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <TF_AcceptChar+0x28>
            TF_ResetParser(tf);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff ffb2 	bl	800654e <TF_ResetParser>
            TF_Error("Parser timeout");
 80065ea:	48b4      	ldr	r0, [pc, #720]	@ (80068bc <TF_AcceptChar+0x2f4>)
 80065ec:	f001 f9c0 	bl	8007970 <puts>
        }
    }
    tf->parser_timeout_ticks = 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	825a      	strh	r2, [r3, #18]
        pars_begin_frame(tf);
    }
#endif

    //@formatter:off
    switch (tf->state) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	7c1b      	ldrb	r3, [r3, #16]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	f200 8201 	bhi.w	8006a02 <TF_AcceptChar+0x43a>
 8006600:	a201      	add	r2, pc, #4	@ (adr r2, 8006608 <TF_AcceptChar+0x40>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006625 	.word	0x08006625
 800660c:	080066a1 	.word	0x080066a1
 8006610:	080067a5 	.word	0x080067a5
 8006614:	08006635 	.word	0x08006635
 8006618:	08006717 	.word	0x08006717
 800661c:	08006895 	.word	0x08006895
 8006620:	0800693f 	.word	0x0800693f
        case TFState_SOF:
            if (c == TF_SOF_BYTE) {
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	2bab      	cmp	r3, #171	@ 0xab
 8006628:	f040 81de 	bne.w	80069e8 <TF_AcceptChar+0x420>
                pars_begin_frame(tf);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff9b 	bl	8006568 <pars_begin_frame>
            }
            break;
 8006632:	e1d9      	b.n	80069e8 <TF_AcceptChar+0x420>

        case TFState_ID:
            CKSUM_ADD(tf->cksum, c);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800663a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fcf2 	bl	800602c <TF_CksumAdd>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006652:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->id, TF_ID) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	615a      	str	r2, [r3, #20]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800666a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800666e:	3301      	adds	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006678:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006682:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006686:	2b04      	cmp	r3, #4
 8006688:	f040 81b0 	bne.w	80069ec <TF_AcceptChar+0x424>
                // Enter LEN state
                tf->state = TFState_LEN;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006698:	2200      	movs	r2, #0
 800669a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 800669e:	e1a5      	b.n	80069ec <TF_AcceptChar+0x424>

        case TFState_LEN:
            CKSUM_ADD(tf->cksum, c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fcbc 	bl	800602c <TF_CksumAdd>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066be:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->len, TF_LEN) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8b1b      	ldrh	r3, [r3, #24]
 80066c6:	b21b      	sxth	r3, r3
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	b21a      	sxth	r2, r3
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	b21b      	sxth	r3, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b21b      	sxth	r3, r3
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	831a      	strh	r2, [r3, #24]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80066e4:	3301      	adds	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	f040 8177 	bne.w	80069f0 <TF_AcceptChar+0x428>
                // Enter TYPE state
                tf->state = TFState_TYPE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2204      	movs	r2, #4
 8006706:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670e:	2200      	movs	r2, #0
 8006710:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006714:	e16c      	b.n	80069f0 <TF_AcceptChar+0x428>

        case TFState_TYPE:
            CKSUM_ADD(tf->cksum, c);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fc81 	bl	800602c <TF_CksumAdd>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006734:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->type, TF_TYPE) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006742:	b21b      	sxth	r3, r3
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	b21a      	sxth	r2, r3
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	b21b      	sxth	r3, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	b21b      	sxth	r3, r3
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006758:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006766:	3301      	adds	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006770:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800677a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800677e:	2b02      	cmp	r3, #2
 8006780:	f040 8138 	bne.w	80069f4 <TF_AcceptChar+0x42c>
                #if TF_CKSUM_TYPE == TF_CKSUM_NONE
                    tf->state = TFState_DATA;
                    tf->rxi = 0;
                #else
                    // enter HEAD_CKSUM state
                    tf->state = TFState_HEAD_CKSUM;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006790:	2200      	movs	r2, #0
 8006792:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679c:	2200      	movs	r2, #0
 800679e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 80067a2:	e127      	b.n	80069f4 <TF_AcceptChar+0x42c>

        case TFState_HEAD_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067aa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80067ae:	b21b      	sxth	r3, r3
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	b21a      	sxth	r2, r3
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	b21b      	sxth	r3, r3
 80067b8:	4313      	orrs	r3, r2
 80067ba:	b21b      	sxth	r3, r3
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ce:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80067d2:	3301      	adds	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067dc:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	f040 8104 	bne.w	80069f8 <TF_AcceptChar+0x430>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fc32 	bl	8006064 <TF_CksumEnd>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800680a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->cksum != tf->ref_cksum) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006814:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800681e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006822:	429a      	cmp	r2, r3
 8006824:	d006      	beq.n	8006834 <TF_AcceptChar+0x26c>
                    TF_Error("Rx head cksum mismatch");
 8006826:	4826      	ldr	r0, [pc, #152]	@ (80068c0 <TF_AcceptChar+0x2f8>)
 8006828:	f001 f8a2 	bl	8007970 <puts>
                    TF_ResetParser(tf);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff fe8e 	bl	800654e <TF_ResetParser>
                    break;
 8006832:	e0e6      	b.n	8006a02 <TF_AcceptChar+0x43a>
                }

                if (tf->len == 0) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8b1b      	ldrh	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <TF_AcceptChar+0x282>
                    // if the message has no body, we're done.
                    TF_HandleReceivedMessage(tf);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fd69 	bl	8006314 <TF_HandleReceivedMessage>
                    TF_ResetParser(tf);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fe83 	bl	800654e <TF_ResetParser>
                    break;
 8006848:	e0db      	b.n	8006a02 <TF_AcceptChar+0x43a>
                }

                // Enter DATA state
                tf->state = TFState_DATA;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2205      	movs	r2, #5
 800684e:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006856:	2200      	movs	r2, #0
 8006858:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a

                CKSUM_RESET(tf->cksum); // Start collecting the payload
 800685c:	f7ff fbde 	bl	800601c <TF_CksumStart>
 8006860:	4603      	mov	r3, r0
 8006862:	461a      	mov	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->len > TF_MAX_PAYLOAD_RX) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8b1b      	ldrh	r3, [r3, #24]
 8006872:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8006876:	f240 80bf 	bls.w	80069f8 <TF_AcceptChar+0x430>
                    TF_Error("Rx payload too long: %d", (int)tf->len);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8b1b      	ldrh	r3, [r3, #24]
 800687e:	4619      	mov	r1, r3
 8006880:	4810      	ldr	r0, [pc, #64]	@ (80068c4 <TF_AcceptChar+0x2fc>)
 8006882:	f001 f80d 	bl	80078a0 <iprintf>
                    // ERROR - frame too long. Consume, but do not store.
                    tf->discard_data = true;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688c:	2201      	movs	r2, #1
 800688e:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                }
            }
            break;
 8006892:	e0b1      	b.n	80069f8 <TF_AcceptChar+0x430>

        case TFState_DATA:
            if (tf->discard_data) {
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689a:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d012      	beq.n	80068c8 <TF_AcceptChar+0x300>
                tf->rxi++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80068ac:	3301      	adds	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80068ba:	e027      	b.n	800690c <TF_AcceptChar+0x344>
 80068bc:	0800897c 	.word	0x0800897c
 80068c0:	08008990 	.word	0x08008990
 80068c4:	080089ac 	.word	0x080089ac
            } else {
                CKSUM_ADD(tf->cksum, c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ce:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fba8 	bl	800602c <TF_CksumAdd>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                tf->data[tf->rxi++] = c;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	b291      	uxth	r1, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068fe:	f8a2 109a 	strh.w	r1, [r2, #154]	@ 0x9a
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4413      	add	r3, r2
 8006908:	78fa      	ldrb	r2, [r7, #3]
 800690a:	769a      	strb	r2, [r3, #26]
            }

            if (tf->rxi == tf->len) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006912:	f8b3 209a 	ldrh.w	r2, [r3, #154]	@ 0x9a
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8b1b      	ldrh	r3, [r3, #24]
 800691a:	429a      	cmp	r2, r3
 800691c:	d16e      	bne.n	80069fc <TF_AcceptChar+0x434>
                    // All done
                    TF_HandleReceivedMessage(tf);
                    TF_ResetParser(tf);
                #else
                    // Enter DATA_CKSUM state
                    tf->state = TFState_DATA_CKSUM;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2206      	movs	r2, #6
 8006922:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800692a:	2200      	movs	r2, #0
 800692c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006936:	2200      	movs	r2, #0
 8006938:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 800693c:	e05e      	b.n	80069fc <TF_AcceptChar+0x434>

        case TFState_DATA_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006944:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006948:	b21b      	sxth	r3, r3
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	b21a      	sxth	r2, r3
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	b21b      	sxth	r3, r3
 8006952:	4313      	orrs	r3, r2
 8006954:	b21b      	sxth	r3, r3
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006968:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800696c:	3301      	adds	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006976:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006980:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006984:	2b02      	cmp	r3, #2
 8006986:	d13b      	bne.n	8006a00 <TF_AcceptChar+0x438>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800698e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fb66 	bl	8006064 <TF_CksumEnd>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                if (!tf->discard_data) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ac:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80069b0:	f083 0301 	eor.w	r3, r3, #1
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d012      	beq.n	80069e0 <TF_AcceptChar+0x418>
                    if (tf->cksum == tf->ref_cksum) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c0:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ca:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d103      	bne.n	80069da <TF_AcceptChar+0x412>
                        TF_HandleReceivedMessage(tf);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fc9e 	bl	8006314 <TF_HandleReceivedMessage>
 80069d8:	e002      	b.n	80069e0 <TF_AcceptChar+0x418>
                    } else {
                        TF_Error("Body cksum mismatch");
 80069da:	480c      	ldr	r0, [pc, #48]	@ (8006a0c <TF_AcceptChar+0x444>)
 80069dc:	f000 ffc8 	bl	8007970 <puts>
                    }
                }

                TF_ResetParser(tf);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fdb4 	bl	800654e <TF_ResetParser>
            }
            break;
 80069e6:	e00b      	b.n	8006a00 <TF_AcceptChar+0x438>
            break;
 80069e8:	bf00      	nop
 80069ea:	e00a      	b.n	8006a02 <TF_AcceptChar+0x43a>
            break;
 80069ec:	bf00      	nop
 80069ee:	e008      	b.n	8006a02 <TF_AcceptChar+0x43a>
            break;
 80069f0:	bf00      	nop
 80069f2:	e006      	b.n	8006a02 <TF_AcceptChar+0x43a>
            break;
 80069f4:	bf00      	nop
 80069f6:	e004      	b.n	8006a02 <TF_AcceptChar+0x43a>
            break;
 80069f8:	bf00      	nop
 80069fa:	e002      	b.n	8006a02 <TF_AcceptChar+0x43a>
            break;
 80069fc:	bf00      	nop
 80069fe:	e000      	b.n	8006a02 <TF_AcceptChar+0x43a>
            break;
 8006a00:	bf00      	nop
    }
    //@formatter:on
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	080089cc 	.word	0x080089cc

08006a10 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	@ 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t b = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	623b      	str	r3, [r7, #32]
    TF_CKSUM cksum = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	83fb      	strh	r3, [r7, #30]
    uint32_t pos = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 8006a32:	f7ff faf3 	bl	800601c <TF_CksumStart>
 8006a36:	4603      	mov	r3, r0
 8006a38:	83fb      	strh	r3, [r7, #30]

    // Gen ID
    if (msg->is_response) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	791b      	ldrb	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <TF_ComposeHead+0x3a>
        id = msg->frame_id;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	e00f      	b.n	8006a6a <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	60d1      	str	r1, [r2, #12]
 8006a54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a58:	623b      	str	r3, [r7, #32]
        if (tf->peer_bit) {
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7a1b      	ldrb	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a68:	623b      	str	r3, [r7, #32]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	601a      	str	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 8006a70:	f7ff fad4 	bl	800601c <TF_CksumStart>
 8006a74:	4603      	mov	r3, r0
 8006a76:	83fb      	strh	r3, [r7, #30]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	61ba      	str	r2, [r7, #24]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	22ab      	movs	r2, #171	@ 0xab
 8006a84:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 8006a86:	8bfb      	ldrh	r3, [r7, #30]
 8006a88:	21ab      	movs	r1, #171	@ 0xab
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff face 	bl	800602c <TF_CksumAdd>
 8006a90:	4603      	mov	r3, r0
 8006a92:	83fb      	strh	r3, [r7, #30]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 8006a94:	2303      	movs	r3, #3
 8006a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a9a:	e01c      	b.n	8006ad6 <TF_ComposeHead+0xc6>
 8006a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	6a3a      	ldr	r2, [r7, #32]
 8006aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa8:	75fb      	strb	r3, [r7, #23]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	61ba      	str	r2, [r7, #24]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	7dfa      	ldrb	r2, [r7, #23]
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	7dfa      	ldrb	r2, [r7, #23]
 8006aba:	8bfb      	ldrh	r3, [r7, #30]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff fab4 	bl	800602c <TF_CksumAdd>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	83fb      	strh	r3, [r7, #30]
 8006ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	dade      	bge.n	8006a9c <TF_ComposeHead+0x8c>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ae4:	e01e      	b.n	8006b24 <TF_ComposeHead+0x114>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	899b      	ldrh	r3, [r3, #12]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	fa42 f303 	asr.w	r3, r2, r3
 8006af6:	75fb      	strb	r3, [r7, #23]
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	61ba      	str	r2, [r7, #24]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	7dfa      	ldrb	r2, [r7, #23]
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	7dfa      	ldrb	r2, [r7, #23]
 8006b08:	8bfb      	ldrh	r3, [r7, #30]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fa8d 	bl	800602c <TF_CksumAdd>
 8006b12:	4603      	mov	r3, r0
 8006b14:	83fb      	strh	r3, [r7, #30]
 8006b16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dadc      	bge.n	8006ae6 <TF_ComposeHead+0xd6>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b32:	e01e      	b.n	8006b72 <TF_ComposeHead+0x162>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	88db      	ldrh	r3, [r3, #6]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	fa42 f303 	asr.w	r3, r2, r3
 8006b44:	75fb      	strb	r3, [r7, #23]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	61ba      	str	r2, [r7, #24]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	7dfa      	ldrb	r2, [r7, #23]
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	7dfa      	ldrb	r2, [r7, #23]
 8006b56:	8bfb      	ldrh	r3, [r7, #30]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fa66 	bl	800602c <TF_CksumAdd>
 8006b60:	4603      	mov	r3, r0
 8006b62:	83fb      	strh	r3, [r7, #30]
 8006b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dadc      	bge.n	8006b34 <TF_ComposeHead+0x124>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 8006b7a:	8bfb      	ldrh	r3, [r7, #30]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff fa71 	bl	8006064 <TF_CksumEnd>
 8006b82:	4603      	mov	r3, r0
 8006b84:	83fb      	strh	r3, [r7, #30]
    WRITENUM(TF_CKSUM, cksum);
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b8c:	e014      	b.n	8006bb8 <TF_ComposeHead+0x1a8>
 8006b8e:	8bfa      	ldrh	r2, [r7, #30]
 8006b90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	fa42 f303 	asr.w	r3, r2, r3
 8006b9a:	75fb      	strb	r3, [r7, #23]
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	61ba      	str	r2, [r7, #24]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	7dfa      	ldrb	r2, [r7, #23]
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dae6      	bge.n	8006b8e <TF_ComposeHead+0x17e>
#endif

    return pos;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3728      	adds	r7, #40	@ 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b088      	sub	sp, #32
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 8006be6:	2300      	movs	r3, #0
 8006be8:	83fb      	strh	r3, [r7, #30]
 8006bea:	e019      	b.n	8006c20 <TF_ComposeBody+0x56>
        b = data[i];
 8006bec:	8bfb      	ldrh	r3, [r7, #30]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	61ba      	str	r2, [r7, #24]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	7dfa      	ldrb	r2, [r7, #23]
 8006c02:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	7dfa      	ldrb	r2, [r7, #23]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fa0d 	bl	800602c <TF_CksumAdd>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 8006c1a:	8bfb      	ldrh	r3, [r7, #30]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	83fb      	strh	r3, [r7, #30]
 8006c20:	8bfa      	ldrh	r2, [r7, #30]
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d3e1      	bcc.n	8006bec <TF_ComposeBody+0x22>
    }

    return pos;
 8006c28:	69bb      	ldr	r3, [r7, #24]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fa09 	bl	8006064 <TF_CksumEnd>
 8006c52:	4603      	mov	r3, r0
 8006c54:	461a      	mov	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
 8006c5e:	e015      	b.n	8006c8c <TF_ComposeTail+0x5a>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	fa42 f303 	asr.w	r3, r2, r3
 8006c70:	73fb      	strb	r3, [r7, #15]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	613a      	str	r2, [r7, #16]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	75fb      	strb	r3, [r7, #23]
 8006c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dae5      	bge.n	8006c60 <TF_ComposeTail+0x2e>
#endif
    return pos;
 8006c94:	693b      	ldr	r3, [r7, #16]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <TF_SendFrame_Begin>:
 * @param listener - response listener or NULL
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_ClaimTx(tf));
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff f987 	bl	8005fc0 <TF_ClaimTx>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f083 0301 	eor.w	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <TF_SendFrame_Begin+0x24>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e031      	b.n	8006d26 <TF_SendFrame_Begin+0x88>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006cc8:	3303      	adds	r3, #3
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fe9e 	bl	8006a10 <TF_ComposeHead>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cdc:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    tf->tx_len = msg->len;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	899b      	ldrh	r3, [r3, #12]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cec:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    if (listener) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <TF_SendFrame_Begin+0x74>
        TF_TRY(TF_AddIdListener(tf, msg, listener, timeout));
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fa7f 	bl	8006200 <TF_AddIdListener>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f083 0301 	eor.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <TF_SendFrame_Begin+0x74>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e009      	b.n	8006d26 <TF_SendFrame_Begin+0x88>
    }

    CKSUM_RESET(tf->tx_cksum);
 8006d12:	f7ff f983 	bl	800601c <TF_CksumStart>
 8006d16:	4603      	mov	r3, r0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006d20:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    return true;
 8006d24:	2301      	movs	r3, #1
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b088      	sub	sp, #32
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]

    remain = length;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 8006d42:	e050      	b.n	8006de6 <TF_SendFrame_Chunk+0xb8>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006d4a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006d4e:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	bf28      	it	cs
 8006d58:	4613      	movcs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006d62:	3303      	adds	r3, #3
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006d6a:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006d6e:	1898      	adds	r0, r3, r2
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	18d1      	adds	r1, r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006d80:	332c      	adds	r3, #44	@ 0x2c
 8006d82:	f7ff ff22 	bl	8006bca <TF_ComposeBody>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006d8e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006d92:	4413      	add	r3, r2
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006d9a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        remain -= chunk;
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006db4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006db8:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8006dbc:	d113      	bne.n	8006de6 <TF_SendFrame_Chunk+0xb8>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006dc4:	3303      	adds	r3, #3
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006dcc:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7fb ff9c 	bl	8002d10 <TF_WriteImpl>
            tf->tx_pos = 0;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006dde:	461a      	mov	r2, r3
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    while (remain > 0) {
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ab      	bne.n	8006d44 <TF_SendFrame_Chunk+0x16>
        }
    }
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e04:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03a      	beq.n	8006e82 <TF_SendFrame_End+0x8c>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e12:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006e16:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d813      	bhi.n	8006e46 <TF_SendFrame_End+0x50>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006e24:	3303      	adds	r3, #3
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e2c:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fb ff6c 	bl	8002d10 <TF_WriteImpl>
            tf->tx_pos = 0;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2300      	movs	r3, #0
 8006e42:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e54:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006e58:	441a      	add	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006e60:	332c      	adds	r3, #44	@ 0x2c
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f7ff fee4 	bl	8006c32 <TF_ComposeTail>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e72:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006e76:	4413      	add	r3, r2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e7e:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006e88:	3303      	adds	r3, #3
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e90:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fb ff3a 	bl	8002d10 <TF_WriteImpl>
    TF_ReleaseTx(tf);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff f8ad 	bl	8005ffc <TF_ReleaseTx>
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <TF_SendFrame>:
 * @param listener - ID listener, or NULL
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, timeout));
 8006eb8:	887b      	ldrh	r3, [r7, #2]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff feed 	bl	8006c9e <TF_SendFrame_Begin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f083 0301 	eor.w	r3, r3, #1
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <TF_SendFrame+0x2a>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e013      	b.n	8006efc <TF_SendFrame+0x52>
    if (msg->len == 0 || msg->data != NULL) {
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	899b      	ldrh	r3, [r3, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <TF_SendFrame+0x3a>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <TF_SendFrame+0x50>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6899      	ldr	r1, [r3, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	899b      	ldrh	r3, [r3, #12]
 8006eec:	461a      	mov	r2, r3
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff ff1d 	bl	8006d2e <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff7e 	bl	8006df6 <TF_SendFrame_End>
    }
    return true;
 8006efa:	2301      	movs	r3, #1
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, 0);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2200      	movs	r2, #0
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ffc8 	bl	8006eaa <TF_SendFrame>
 8006f1a:	4603      	mov	r3, r0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <TF_Respond>:
    return TF_SendFrame(tf, msg, listener, timeout);
}

/** Like TF_Send, but with explicit frame ID (set inside the msg object), use for responses */
bool _TF_FN TF_Respond(TinyFrame *tf, TF_Msg *msg)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
    msg->is_response = true;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2201      	movs	r2, #1
 8006f32:	711a      	strb	r2, [r3, #4]
    return TF_Send(tf, msg);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff ffe4 	bl	8006f04 <TF_Send>
 8006f3c:	4603      	mov	r3, r0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b08f      	sub	sp, #60	@ 0x3c
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	891a      	ldrh	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	8a1b      	ldrh	r3, [r3, #16]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d301      	bcc.n	8006f60 <load_descriptor_values+0x1a>
        return false;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e156      	b.n	800720e <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	895b      	ldrh	r3, [r3, #10]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8006f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d05a      	beq.n	800703c <load_descriptor_values+0xf6>
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	f200 8094 	bhi.w	80070b4 <load_descriptor_values+0x16e>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <load_descriptor_values+0x50>
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d01f      	beq.n	8006fd4 <load_descriptor_values+0x8e>
 8006f94:	e08e      	b.n	80070b4 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	089b      	lsrs	r3, r3, #2
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8006fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fae:	0e1b      	lsrs	r3, r3, #24
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8006fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbc:	0c1b      	lsrs	r3, r3, #16
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8006fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc4:	0f1b      	lsrs	r3, r3, #28
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	825a      	strh	r2, [r3, #18]
            break;
 8006fd2:	e0b4      	b.n	800713e <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	895b      	ldrh	r3, [r3, #10]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	089b      	lsrs	r3, r3, #2
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007002:	b29a      	uxth	r2, r3
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	0f1b      	lsrs	r3, r3, #28
 8007008:	b29b      	uxth	r3, r3
 800700a:	019b      	lsls	r3, r3, #6
 800700c:	b29b      	uxth	r3, r3
 800700e:	4313      	orrs	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	0f1b      	lsrs	r3, r3, #28
 800701a:	b25b      	sxtb	r3, r3
 800701c:	f003 030f 	and.w	r3, r3, #15
 8007020:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	b29b      	uxth	r3, r3
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	b29b      	uxth	r3, r3
 8007030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	825a      	strh	r2, [r3, #18]
            break;
 800703a:	e080      	b.n	800713e <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	895b      	ldrh	r3, [r3, #10]
 8007046:	3301      	adds	r3, #1
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	895b      	ldrh	r3, [r3, #10]
 800705a:	3302      	adds	r3, #2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	895b      	ldrh	r3, [r3, #10]
 800706e:	3303      	adds	r3, #3
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	0c1b      	lsrs	r3, r3, #16
 800707c:	b29a      	uxth	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	089b      	lsrs	r3, r3, #2
 8007086:	b29b      	uxth	r3, r3
 8007088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800708c:	b29a      	uxth	r2, r3
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	b29b      	uxth	r3, r3
 8007094:	019b      	lsls	r3, r3, #6
 8007096:	b29b      	uxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b29a      	uxth	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	825a      	strh	r2, [r3, #18]
            break;
 80070b2:	e044      	b.n	800713e <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	895b      	ldrh	r3, [r3, #10]
 80070be:	3301      	adds	r3, #1
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	895b      	ldrh	r3, [r3, #10]
 80070d2:	3302      	adds	r3, #2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	895b      	ldrh	r3, [r3, #10]
 80070e6:	3303      	adds	r3, #3
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	895b      	ldrh	r3, [r3, #10]
 80070fa:	3304      	adds	r3, #4
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	089b      	lsrs	r3, r3, #2
 8007110:	b29b      	uxth	r3, r3
 8007112:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007116:	b29a      	uxth	r2, r3
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	019b      	lsls	r3, r3, #6
 8007120:	b29b      	uxth	r3, r3
 8007122:	4313      	orrs	r3, r2
 8007124:	b29a      	uxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	b29a      	uxth	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	825a      	strh	r2, [r3, #18]
            break;
 800713c:	bf00      	nop
        }
    }

    if (!iter->message)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	621a      	str	r2, [r3, #32]
 8007152:	e041      	b.n	80071d8 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715a:	441a      	add	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8007160:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007170:	425b      	negs	r3, r3
 8007172:	441a      	add	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	621a      	str	r2, [r3, #32]
 8007178:	e01a      	b.n	80071b0 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	7d9b      	ldrb	r3, [r3, #22]
 800717e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007182:	2b20      	cmp	r3, #32
 8007184:	d111      	bne.n	80071aa <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7d9b      	ldrb	r3, [r3, #22]
 800718a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7d9b      	ldrb	r3, [r3, #22]
 8007196:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800719a:	2b80      	cmp	r3, #128	@ 0x80
 800719c:	d105      	bne.n	80071aa <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f103 0214 	add.w	r2, r3, #20
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	621a      	str	r2, [r3, #32]
 80071a8:	e002      	b.n	80071b0 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7d9b      	ldrb	r3, [r3, #22]
 80071b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071b8:	2b80      	cmp	r3, #128	@ 0x80
 80071ba:	d109      	bne.n	80071d0 <load_descriptor_values+0x28a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	61da      	str	r2, [r3, #28]
 80071ce:	e003      	b.n	80071d8 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699a      	ldr	r2, [r3, #24]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7d9b      	ldrb	r3, [r3, #22]
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d005      	beq.n	80071f0 <load_descriptor_values+0x2aa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7d9b      	ldrb	r3, [r3, #22]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	d10a      	bne.n	8007206 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	89db      	ldrh	r3, [r3, #14]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	625a      	str	r2, [r3, #36]	@ 0x24
 8007204:	e002      	b.n	800720c <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 800720c:	2301      	movs	r3, #1
}
 800720e:	4618      	mov	r0, r3
 8007210:	373c      	adds	r7, #60	@ 0x3c
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
    iter->index++;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	891b      	ldrh	r3, [r3, #8]
 8007226:	3301      	adds	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	891a      	ldrh	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	8a1b      	ldrh	r3, [r3, #16]
 8007238:	429a      	cmp	r2, r3
 800723a:	d30c      	bcc.n	8007256 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8007254:	e03b      	b.n	80072ce <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	895b      	ldrh	r3, [r3, #10]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	2201      	movs	r2, #1
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	895a      	ldrh	r2, [r3, #10]
 8007280:	893b      	ldrh	r3, [r7, #8]
 8007282:	4413      	add	r3, r2
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	899b      	ldrh	r3, [r3, #12]
 800728e:	7afa      	ldrb	r2, [r7, #11]
 8007290:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007294:	2a00      	cmp	r2, #0
 8007296:	bf0c      	ite	eq
 8007298:	2201      	moveq	r2, #1
 800729a:	2200      	movne	r2, #0
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	4413      	add	r3, r2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	89da      	ldrh	r2, [r3, #14]
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d004      	beq.n	80072be <advance_iterator+0xa4>
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d101      	bne.n	80072c2 <advance_iterator+0xa8>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <advance_iterator+0xaa>
 80072c2:	2300      	movs	r3, #0
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	4413      	add	r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	81da      	strh	r2, [r3, #14]
}
 80072ce:	bf00      	nop
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 80072e6:	2228      	movs	r2, #40	@ 0x28
 80072e8:	2100      	movs	r1, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fc20 	bl	8007b30 <memset>

    iter->descriptor = desc;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	601a      	str	r2, [r3, #0]
    iter->message = message;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fe22 	bl	8006f46 <load_descriptor_values>
 8007302:	4603      	mov	r3, r0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800732e:	2b80      	cmp	r3, #128	@ 0x80
 8007330:	d109      	bne.n	8007346 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3304      	adds	r3, #4
 8007336:	461a      	mov	r2, r3
 8007338:	6939      	ldr	r1, [r7, #16]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff ffcd 	bl	80072da <pb_field_iter_begin>
 8007340:	4603      	mov	r3, r0
 8007342:	75fb      	strb	r3, [r7, #23]
 8007344:	e008      	b.n	8007358 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	461a      	mov	r2, r3
 800734c:	6939      	ldr	r1, [r7, #16]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff ffc3 	bl	80072da <pb_field_iter_begin>
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f103 020c 	add.w	r2, r3, #12
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	621a      	str	r2, [r3, #32]
    return status;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff ff50 	bl	800721a <advance_iterator>
    (void)load_descriptor_values(iter);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fde3 	bl	8006f46 <load_descriptor_values>
    return iter->index != 0;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	891b      	ldrh	r3, [r3, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8a1b      	ldrh	r3, [r3, #16]
 80073a4:	461a      	mov	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d101      	bne.n	80073b0 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80073ac:	2301      	movs	r3, #1
 80073ae:	e044      	b.n	800743a <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	8a9b      	ldrh	r3, [r3, #20]
 80073b6:	461a      	mov	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d901      	bls.n	80073c2 <pb_field_iter_find+0x2c>
    {
        return false;
 80073be:	2300      	movs	r3, #0
 80073c0:	e03b      	b.n	800743a <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	891b      	ldrh	r3, [r3, #8]
 80073c6:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8a1b      	ldrh	r3, [r3, #16]
 80073cc:	461a      	mov	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d204      	bcs.n	80073de <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	8a1a      	ldrh	r2, [r3, #16]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff ff1b 	bl	800721a <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	895b      	ldrh	r3, [r3, #10]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	089a      	lsrs	r2, r3, #2
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	4053      	eors	r3, r2
 80073fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007402:	2b00      	cmp	r3, #0
 8007404:	d110      	bne.n	8007428 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fd9d 	bl	8006f46 <load_descriptor_values>

                if (iter->tag == tag &&
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	8a1b      	ldrh	r3, [r3, #16]
 8007410:	461a      	mov	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	4293      	cmp	r3, r2
 8007416:	d107      	bne.n	8007428 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7d9b      	ldrb	r3, [r3, #22]
 800741c:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8007420:	2b0a      	cmp	r3, #10
 8007422:	d001      	beq.n	8007428 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007424:	2301      	movs	r3, #1
 8007426:	e008      	b.n	800743a <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	891b      	ldrh	r3, [r3, #8]
 800742c:	89fa      	ldrh	r2, [r7, #14]
 800742e:	429a      	cmp	r2, r3
 8007430:	d1d5      	bne.n	80073de <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fd87 	bl	8006f46 <load_descriptor_values>
        return false;
 8007438:	2300      	movs	r3, #0
    }
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7d9b      	ldrb	r3, [r3, #22]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	2b0a      	cmp	r3, #10
 8007454:	d101      	bne.n	800745a <pb_field_iter_find_extension+0x18>
    {
        return true;
 8007456:	2301      	movs	r3, #1
 8007458:	e022      	b.n	80074a0 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	891b      	ldrh	r3, [r3, #8]
 800745e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff feda 	bl	800721a <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	0a1b      	lsrs	r3, r3, #8
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	2b0a      	cmp	r3, #10
 8007482:	d104      	bne.n	800748e <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff fd5e 	bl	8006f46 <load_descriptor_values>
 800748a:	4603      	mov	r3, r0
 800748c:	e008      	b.n	80074a0 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	891b      	ldrh	r3, [r3, #8]
 8007492:	89fa      	ldrh	r2, [r7, #14]
 8007494:	429a      	cmp	r2, r3
 8007496:	d1e3      	bne.n	8007460 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fd54 	bl	8006f46 <load_descriptor_values>
        return false;
 800749e:	2300      	movs	r3, #0
    }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]
    return t.p1;
 80074b4:	68fb      	ldr	r3, [r7, #12]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff ffea 	bl	80074a8 <pb_const_cast>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fefd 	bl	80072da <pb_field_iter_begin>
 80074e0:	4603      	mov	r3, r0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 80074f4:	6838      	ldr	r0, [r7, #0]
 80074f6:	f7ff ffd7 	bl	80074a8 <pb_const_cast>
 80074fa:	4603      	mov	r3, r0
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff ff04 	bl	800730c <pb_field_iter_begin_extension>
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8a5b      	ldrh	r3, [r3, #18]
 800751e:	2b08      	cmp	r3, #8
 8007520:	d125      	bne.n	800756e <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01f      	beq.n	800756e <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00c      	beq.n	800754e <pb_default_field_callback+0x40>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	3204      	adds	r2, #4
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	e010      	b.n	8007570 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00c      	beq.n	800756e <pb_default_field_callback+0x60>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	3204      	adds	r2, #4
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	68b8      	ldr	r0, [r7, #8]
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	e000      	b.n	8007570 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 800756e:	2301      	movs	r3, #1

}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <calloc>:
 8007578:	4b02      	ldr	r3, [pc, #8]	@ (8007584 <calloc+0xc>)
 800757a:	460a      	mov	r2, r1
 800757c:	4601      	mov	r1, r0
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	f000 b802 	b.w	8007588 <_calloc_r>
 8007584:	20000024 	.word	0x20000024

08007588 <_calloc_r>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	fba1 5402 	umull	r5, r4, r1, r2
 800758e:	b934      	cbnz	r4, 800759e <_calloc_r+0x16>
 8007590:	4629      	mov	r1, r5
 8007592:	f000 f837 	bl	8007604 <_malloc_r>
 8007596:	4606      	mov	r6, r0
 8007598:	b928      	cbnz	r0, 80075a6 <_calloc_r+0x1e>
 800759a:	4630      	mov	r0, r6
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	220c      	movs	r2, #12
 80075a0:	6002      	str	r2, [r0, #0]
 80075a2:	2600      	movs	r6, #0
 80075a4:	e7f9      	b.n	800759a <_calloc_r+0x12>
 80075a6:	462a      	mov	r2, r5
 80075a8:	4621      	mov	r1, r4
 80075aa:	f000 fac1 	bl	8007b30 <memset>
 80075ae:	e7f4      	b.n	800759a <_calloc_r+0x12>

080075b0 <free>:
 80075b0:	4b02      	ldr	r3, [pc, #8]	@ (80075bc <free+0xc>)
 80075b2:	4601      	mov	r1, r0
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	f000 bb55 	b.w	8007c64 <_free_r>
 80075ba:	bf00      	nop
 80075bc:	20000024 	.word	0x20000024

080075c0 <sbrk_aligned>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007600 <sbrk_aligned+0x40>)
 80075c4:	460c      	mov	r4, r1
 80075c6:	6831      	ldr	r1, [r6, #0]
 80075c8:	4605      	mov	r5, r0
 80075ca:	b911      	cbnz	r1, 80075d2 <sbrk_aligned+0x12>
 80075cc:	f000 faec 	bl	8007ba8 <_sbrk_r>
 80075d0:	6030      	str	r0, [r6, #0]
 80075d2:	4621      	mov	r1, r4
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fae7 	bl	8007ba8 <_sbrk_r>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	d103      	bne.n	80075e6 <sbrk_aligned+0x26>
 80075de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80075e2:	4620      	mov	r0, r4
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	1cc4      	adds	r4, r0, #3
 80075e8:	f024 0403 	bic.w	r4, r4, #3
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d0f8      	beq.n	80075e2 <sbrk_aligned+0x22>
 80075f0:	1a21      	subs	r1, r4, r0
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 fad8 	bl	8007ba8 <_sbrk_r>
 80075f8:	3001      	adds	r0, #1
 80075fa:	d1f2      	bne.n	80075e2 <sbrk_aligned+0x22>
 80075fc:	e7ef      	b.n	80075de <sbrk_aligned+0x1e>
 80075fe:	bf00      	nop
 8007600:	20000530 	.word	0x20000530

08007604 <_malloc_r>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	1ccd      	adds	r5, r1, #3
 800760a:	f025 0503 	bic.w	r5, r5, #3
 800760e:	3508      	adds	r5, #8
 8007610:	2d0c      	cmp	r5, #12
 8007612:	bf38      	it	cc
 8007614:	250c      	movcc	r5, #12
 8007616:	2d00      	cmp	r5, #0
 8007618:	4606      	mov	r6, r0
 800761a:	db01      	blt.n	8007620 <_malloc_r+0x1c>
 800761c:	42a9      	cmp	r1, r5
 800761e:	d904      	bls.n	800762a <_malloc_r+0x26>
 8007620:	230c      	movs	r3, #12
 8007622:	6033      	str	r3, [r6, #0]
 8007624:	2000      	movs	r0, #0
 8007626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800762a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007700 <_malloc_r+0xfc>
 800762e:	f000 f869 	bl	8007704 <__malloc_lock>
 8007632:	f8d8 3000 	ldr.w	r3, [r8]
 8007636:	461c      	mov	r4, r3
 8007638:	bb44      	cbnz	r4, 800768c <_malloc_r+0x88>
 800763a:	4629      	mov	r1, r5
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff ffbf 	bl	80075c0 <sbrk_aligned>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	4604      	mov	r4, r0
 8007646:	d158      	bne.n	80076fa <_malloc_r+0xf6>
 8007648:	f8d8 4000 	ldr.w	r4, [r8]
 800764c:	4627      	mov	r7, r4
 800764e:	2f00      	cmp	r7, #0
 8007650:	d143      	bne.n	80076da <_malloc_r+0xd6>
 8007652:	2c00      	cmp	r4, #0
 8007654:	d04b      	beq.n	80076ee <_malloc_r+0xea>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	eb04 0903 	add.w	r9, r4, r3
 8007660:	f000 faa2 	bl	8007ba8 <_sbrk_r>
 8007664:	4581      	cmp	r9, r0
 8007666:	d142      	bne.n	80076ee <_malloc_r+0xea>
 8007668:	6821      	ldr	r1, [r4, #0]
 800766a:	1a6d      	subs	r5, r5, r1
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f7ff ffa6 	bl	80075c0 <sbrk_aligned>
 8007674:	3001      	adds	r0, #1
 8007676:	d03a      	beq.n	80076ee <_malloc_r+0xea>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	442b      	add	r3, r5
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	f8d8 3000 	ldr.w	r3, [r8]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	bb62      	cbnz	r2, 80076e0 <_malloc_r+0xdc>
 8007686:	f8c8 7000 	str.w	r7, [r8]
 800768a:	e00f      	b.n	80076ac <_malloc_r+0xa8>
 800768c:	6822      	ldr	r2, [r4, #0]
 800768e:	1b52      	subs	r2, r2, r5
 8007690:	d420      	bmi.n	80076d4 <_malloc_r+0xd0>
 8007692:	2a0b      	cmp	r2, #11
 8007694:	d917      	bls.n	80076c6 <_malloc_r+0xc2>
 8007696:	1961      	adds	r1, r4, r5
 8007698:	42a3      	cmp	r3, r4
 800769a:	6025      	str	r5, [r4, #0]
 800769c:	bf18      	it	ne
 800769e:	6059      	strne	r1, [r3, #4]
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	bf08      	it	eq
 80076a4:	f8c8 1000 	streq.w	r1, [r8]
 80076a8:	5162      	str	r2, [r4, r5]
 80076aa:	604b      	str	r3, [r1, #4]
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 f82f 	bl	8007710 <__malloc_unlock>
 80076b2:	f104 000b 	add.w	r0, r4, #11
 80076b6:	1d23      	adds	r3, r4, #4
 80076b8:	f020 0007 	bic.w	r0, r0, #7
 80076bc:	1ac2      	subs	r2, r0, r3
 80076be:	bf1c      	itt	ne
 80076c0:	1a1b      	subne	r3, r3, r0
 80076c2:	50a3      	strne	r3, [r4, r2]
 80076c4:	e7af      	b.n	8007626 <_malloc_r+0x22>
 80076c6:	6862      	ldr	r2, [r4, #4]
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	bf0c      	ite	eq
 80076cc:	f8c8 2000 	streq.w	r2, [r8]
 80076d0:	605a      	strne	r2, [r3, #4]
 80076d2:	e7eb      	b.n	80076ac <_malloc_r+0xa8>
 80076d4:	4623      	mov	r3, r4
 80076d6:	6864      	ldr	r4, [r4, #4]
 80076d8:	e7ae      	b.n	8007638 <_malloc_r+0x34>
 80076da:	463c      	mov	r4, r7
 80076dc:	687f      	ldr	r7, [r7, #4]
 80076de:	e7b6      	b.n	800764e <_malloc_r+0x4a>
 80076e0:	461a      	mov	r2, r3
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	d1fb      	bne.n	80076e0 <_malloc_r+0xdc>
 80076e8:	2300      	movs	r3, #0
 80076ea:	6053      	str	r3, [r2, #4]
 80076ec:	e7de      	b.n	80076ac <_malloc_r+0xa8>
 80076ee:	230c      	movs	r3, #12
 80076f0:	6033      	str	r3, [r6, #0]
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f80c 	bl	8007710 <__malloc_unlock>
 80076f8:	e794      	b.n	8007624 <_malloc_r+0x20>
 80076fa:	6005      	str	r5, [r0, #0]
 80076fc:	e7d6      	b.n	80076ac <_malloc_r+0xa8>
 80076fe:	bf00      	nop
 8007700:	20000534 	.word	0x20000534

08007704 <__malloc_lock>:
 8007704:	4801      	ldr	r0, [pc, #4]	@ (800770c <__malloc_lock+0x8>)
 8007706:	f000 ba9c 	b.w	8007c42 <__retarget_lock_acquire_recursive>
 800770a:	bf00      	nop
 800770c:	20000678 	.word	0x20000678

08007710 <__malloc_unlock>:
 8007710:	4801      	ldr	r0, [pc, #4]	@ (8007718 <__malloc_unlock+0x8>)
 8007712:	f000 ba97 	b.w	8007c44 <__retarget_lock_release_recursive>
 8007716:	bf00      	nop
 8007718:	20000678 	.word	0x20000678

0800771c <std>:
 800771c:	2300      	movs	r3, #0
 800771e:	b510      	push	{r4, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	e9c0 3300 	strd	r3, r3, [r0]
 8007726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800772a:	6083      	str	r3, [r0, #8]
 800772c:	8181      	strh	r1, [r0, #12]
 800772e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007730:	81c2      	strh	r2, [r0, #14]
 8007732:	6183      	str	r3, [r0, #24]
 8007734:	4619      	mov	r1, r3
 8007736:	2208      	movs	r2, #8
 8007738:	305c      	adds	r0, #92	@ 0x5c
 800773a:	f000 f9f9 	bl	8007b30 <memset>
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <std+0x58>)
 8007740:	6263      	str	r3, [r4, #36]	@ 0x24
 8007742:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <std+0x5c>)
 8007744:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <std+0x60>)
 8007748:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800774a:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <std+0x64>)
 800774c:	6323      	str	r3, [r4, #48]	@ 0x30
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <std+0x68>)
 8007750:	6224      	str	r4, [r4, #32]
 8007752:	429c      	cmp	r4, r3
 8007754:	d006      	beq.n	8007764 <std+0x48>
 8007756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800775a:	4294      	cmp	r4, r2
 800775c:	d002      	beq.n	8007764 <std+0x48>
 800775e:	33d0      	adds	r3, #208	@ 0xd0
 8007760:	429c      	cmp	r4, r3
 8007762:	d105      	bne.n	8007770 <std+0x54>
 8007764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776c:	f000 ba68 	b.w	8007c40 <__retarget_lock_init_recursive>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	bf00      	nop
 8007774:	08007981 	.word	0x08007981
 8007778:	080079a3 	.word	0x080079a3
 800777c:	080079db 	.word	0x080079db
 8007780:	080079ff 	.word	0x080079ff
 8007784:	20000538 	.word	0x20000538

08007788 <stdio_exit_handler>:
 8007788:	4a02      	ldr	r2, [pc, #8]	@ (8007794 <stdio_exit_handler+0xc>)
 800778a:	4903      	ldr	r1, [pc, #12]	@ (8007798 <stdio_exit_handler+0x10>)
 800778c:	4803      	ldr	r0, [pc, #12]	@ (800779c <stdio_exit_handler+0x14>)
 800778e:	f000 b869 	b.w	8007864 <_fwalk_sglue>
 8007792:	bf00      	nop
 8007794:	20000018 	.word	0x20000018
 8007798:	0800839d 	.word	0x0800839d
 800779c:	20000028 	.word	0x20000028

080077a0 <cleanup_stdio>:
 80077a0:	6841      	ldr	r1, [r0, #4]
 80077a2:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <cleanup_stdio+0x34>)
 80077a4:	4299      	cmp	r1, r3
 80077a6:	b510      	push	{r4, lr}
 80077a8:	4604      	mov	r4, r0
 80077aa:	d001      	beq.n	80077b0 <cleanup_stdio+0x10>
 80077ac:	f000 fdf6 	bl	800839c <_fflush_r>
 80077b0:	68a1      	ldr	r1, [r4, #8]
 80077b2:	4b09      	ldr	r3, [pc, #36]	@ (80077d8 <cleanup_stdio+0x38>)
 80077b4:	4299      	cmp	r1, r3
 80077b6:	d002      	beq.n	80077be <cleanup_stdio+0x1e>
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fdef 	bl	800839c <_fflush_r>
 80077be:	68e1      	ldr	r1, [r4, #12]
 80077c0:	4b06      	ldr	r3, [pc, #24]	@ (80077dc <cleanup_stdio+0x3c>)
 80077c2:	4299      	cmp	r1, r3
 80077c4:	d004      	beq.n	80077d0 <cleanup_stdio+0x30>
 80077c6:	4620      	mov	r0, r4
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f000 bde6 	b.w	800839c <_fflush_r>
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	bf00      	nop
 80077d4:	20000538 	.word	0x20000538
 80077d8:	200005a0 	.word	0x200005a0
 80077dc:	20000608 	.word	0x20000608

080077e0 <global_stdio_init.part.0>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <global_stdio_init.part.0+0x30>)
 80077e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007814 <global_stdio_init.part.0+0x34>)
 80077e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007818 <global_stdio_init.part.0+0x38>)
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	4620      	mov	r0, r4
 80077ec:	2200      	movs	r2, #0
 80077ee:	2104      	movs	r1, #4
 80077f0:	f7ff ff94 	bl	800771c <std>
 80077f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077f8:	2201      	movs	r2, #1
 80077fa:	2109      	movs	r1, #9
 80077fc:	f7ff ff8e 	bl	800771c <std>
 8007800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007804:	2202      	movs	r2, #2
 8007806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780a:	2112      	movs	r1, #18
 800780c:	f7ff bf86 	b.w	800771c <std>
 8007810:	20000670 	.word	0x20000670
 8007814:	20000538 	.word	0x20000538
 8007818:	08007789 	.word	0x08007789

0800781c <__sfp_lock_acquire>:
 800781c:	4801      	ldr	r0, [pc, #4]	@ (8007824 <__sfp_lock_acquire+0x8>)
 800781e:	f000 ba10 	b.w	8007c42 <__retarget_lock_acquire_recursive>
 8007822:	bf00      	nop
 8007824:	20000679 	.word	0x20000679

08007828 <__sfp_lock_release>:
 8007828:	4801      	ldr	r0, [pc, #4]	@ (8007830 <__sfp_lock_release+0x8>)
 800782a:	f000 ba0b 	b.w	8007c44 <__retarget_lock_release_recursive>
 800782e:	bf00      	nop
 8007830:	20000679 	.word	0x20000679

08007834 <__sinit>:
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	f7ff fff0 	bl	800781c <__sfp_lock_acquire>
 800783c:	6a23      	ldr	r3, [r4, #32]
 800783e:	b11b      	cbz	r3, 8007848 <__sinit+0x14>
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	f7ff bff0 	b.w	8007828 <__sfp_lock_release>
 8007848:	4b04      	ldr	r3, [pc, #16]	@ (800785c <__sinit+0x28>)
 800784a:	6223      	str	r3, [r4, #32]
 800784c:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <__sinit+0x2c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f5      	bne.n	8007840 <__sinit+0xc>
 8007854:	f7ff ffc4 	bl	80077e0 <global_stdio_init.part.0>
 8007858:	e7f2      	b.n	8007840 <__sinit+0xc>
 800785a:	bf00      	nop
 800785c:	080077a1 	.word	0x080077a1
 8007860:	20000670 	.word	0x20000670

08007864 <_fwalk_sglue>:
 8007864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007868:	4607      	mov	r7, r0
 800786a:	4688      	mov	r8, r1
 800786c:	4614      	mov	r4, r2
 800786e:	2600      	movs	r6, #0
 8007870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007874:	f1b9 0901 	subs.w	r9, r9, #1
 8007878:	d505      	bpl.n	8007886 <_fwalk_sglue+0x22>
 800787a:	6824      	ldr	r4, [r4, #0]
 800787c:	2c00      	cmp	r4, #0
 800787e:	d1f7      	bne.n	8007870 <_fwalk_sglue+0xc>
 8007880:	4630      	mov	r0, r6
 8007882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d907      	bls.n	800789c <_fwalk_sglue+0x38>
 800788c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007890:	3301      	adds	r3, #1
 8007892:	d003      	beq.n	800789c <_fwalk_sglue+0x38>
 8007894:	4629      	mov	r1, r5
 8007896:	4638      	mov	r0, r7
 8007898:	47c0      	blx	r8
 800789a:	4306      	orrs	r6, r0
 800789c:	3568      	adds	r5, #104	@ 0x68
 800789e:	e7e9      	b.n	8007874 <_fwalk_sglue+0x10>

080078a0 <iprintf>:
 80078a0:	b40f      	push	{r0, r1, r2, r3}
 80078a2:	b507      	push	{r0, r1, r2, lr}
 80078a4:	4906      	ldr	r1, [pc, #24]	@ (80078c0 <iprintf+0x20>)
 80078a6:	ab04      	add	r3, sp, #16
 80078a8:	6808      	ldr	r0, [r1, #0]
 80078aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ae:	6881      	ldr	r1, [r0, #8]
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	f000 fa4b 	bl	8007d4c <_vfiprintf_r>
 80078b6:	b003      	add	sp, #12
 80078b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078bc:	b004      	add	sp, #16
 80078be:	4770      	bx	lr
 80078c0:	20000024 	.word	0x20000024

080078c4 <_puts_r>:
 80078c4:	6a03      	ldr	r3, [r0, #32]
 80078c6:	b570      	push	{r4, r5, r6, lr}
 80078c8:	6884      	ldr	r4, [r0, #8]
 80078ca:	4605      	mov	r5, r0
 80078cc:	460e      	mov	r6, r1
 80078ce:	b90b      	cbnz	r3, 80078d4 <_puts_r+0x10>
 80078d0:	f7ff ffb0 	bl	8007834 <__sinit>
 80078d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078d6:	07db      	lsls	r3, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_puts_r+0x22>
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	0598      	lsls	r0, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_puts_r+0x22>
 80078e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e2:	f000 f9ae 	bl	8007c42 <__retarget_lock_acquire_recursive>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	0719      	lsls	r1, r3, #28
 80078ea:	d502      	bpl.n	80078f2 <_puts_r+0x2e>
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d135      	bne.n	800795e <_puts_r+0x9a>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 f8c5 	bl	8007a84 <__swsetup_r>
 80078fa:	b380      	cbz	r0, 800795e <_puts_r+0x9a>
 80078fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007902:	07da      	lsls	r2, r3, #31
 8007904:	d405      	bmi.n	8007912 <_puts_r+0x4e>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	059b      	lsls	r3, r3, #22
 800790a:	d402      	bmi.n	8007912 <_puts_r+0x4e>
 800790c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800790e:	f000 f999 	bl	8007c44 <__retarget_lock_release_recursive>
 8007912:	4628      	mov	r0, r5
 8007914:	bd70      	pop	{r4, r5, r6, pc}
 8007916:	2b00      	cmp	r3, #0
 8007918:	da04      	bge.n	8007924 <_puts_r+0x60>
 800791a:	69a2      	ldr	r2, [r4, #24]
 800791c:	429a      	cmp	r2, r3
 800791e:	dc17      	bgt.n	8007950 <_puts_r+0x8c>
 8007920:	290a      	cmp	r1, #10
 8007922:	d015      	beq.n	8007950 <_puts_r+0x8c>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	7019      	strb	r1, [r3, #0]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007932:	3b01      	subs	r3, #1
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	2900      	cmp	r1, #0
 8007938:	d1ed      	bne.n	8007916 <_puts_r+0x52>
 800793a:	2b00      	cmp	r3, #0
 800793c:	da11      	bge.n	8007962 <_puts_r+0x9e>
 800793e:	4622      	mov	r2, r4
 8007940:	210a      	movs	r1, #10
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f85f 	bl	8007a06 <__swbuf_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d0d7      	beq.n	80078fc <_puts_r+0x38>
 800794c:	250a      	movs	r5, #10
 800794e:	e7d7      	b.n	8007900 <_puts_r+0x3c>
 8007950:	4622      	mov	r2, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f000 f857 	bl	8007a06 <__swbuf_r>
 8007958:	3001      	adds	r0, #1
 800795a:	d1e7      	bne.n	800792c <_puts_r+0x68>
 800795c:	e7ce      	b.n	80078fc <_puts_r+0x38>
 800795e:	3e01      	subs	r6, #1
 8007960:	e7e4      	b.n	800792c <_puts_r+0x68>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	6022      	str	r2, [r4, #0]
 8007968:	220a      	movs	r2, #10
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e7ee      	b.n	800794c <_puts_r+0x88>
	...

08007970 <puts>:
 8007970:	4b02      	ldr	r3, [pc, #8]	@ (800797c <puts+0xc>)
 8007972:	4601      	mov	r1, r0
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f7ff bfa5 	b.w	80078c4 <_puts_r>
 800797a:	bf00      	nop
 800797c:	20000024 	.word	0x20000024

08007980 <__sread>:
 8007980:	b510      	push	{r4, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	f000 f8fc 	bl	8007b84 <_read_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	bfab      	itete	ge
 8007990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007992:	89a3      	ldrhlt	r3, [r4, #12]
 8007994:	181b      	addge	r3, r3, r0
 8007996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800799a:	bfac      	ite	ge
 800799c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800799e:	81a3      	strhlt	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__swrite>:
 80079a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	461f      	mov	r7, r3
 80079a8:	898b      	ldrh	r3, [r1, #12]
 80079aa:	05db      	lsls	r3, r3, #23
 80079ac:	4605      	mov	r5, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4616      	mov	r6, r2
 80079b2:	d505      	bpl.n	80079c0 <__swrite+0x1e>
 80079b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b8:	2302      	movs	r3, #2
 80079ba:	2200      	movs	r2, #0
 80079bc:	f000 f8d0 	bl	8007b60 <_lseek_r>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d6:	f000 b8f7 	b.w	8007bc8 <_write_r>

080079da <__sseek>:
 80079da:	b510      	push	{r4, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e2:	f000 f8bd 	bl	8007b60 <_lseek_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	bf15      	itete	ne
 80079ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079f6:	81a3      	strheq	r3, [r4, #12]
 80079f8:	bf18      	it	ne
 80079fa:	81a3      	strhne	r3, [r4, #12]
 80079fc:	bd10      	pop	{r4, pc}

080079fe <__sclose>:
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 b89d 	b.w	8007b40 <_close_r>

08007a06 <__swbuf_r>:
 8007a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a08:	460e      	mov	r6, r1
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	b118      	cbz	r0, 8007a18 <__swbuf_r+0x12>
 8007a10:	6a03      	ldr	r3, [r0, #32]
 8007a12:	b90b      	cbnz	r3, 8007a18 <__swbuf_r+0x12>
 8007a14:	f7ff ff0e 	bl	8007834 <__sinit>
 8007a18:	69a3      	ldr	r3, [r4, #24]
 8007a1a:	60a3      	str	r3, [r4, #8]
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	071a      	lsls	r2, r3, #28
 8007a20:	d501      	bpl.n	8007a26 <__swbuf_r+0x20>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	b943      	cbnz	r3, 8007a38 <__swbuf_r+0x32>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 f82b 	bl	8007a84 <__swsetup_r>
 8007a2e:	b118      	cbz	r0, 8007a38 <__swbuf_r+0x32>
 8007a30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a34:	4638      	mov	r0, r7
 8007a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	6922      	ldr	r2, [r4, #16]
 8007a3c:	1a98      	subs	r0, r3, r2
 8007a3e:	6963      	ldr	r3, [r4, #20]
 8007a40:	b2f6      	uxtb	r6, r6
 8007a42:	4283      	cmp	r3, r0
 8007a44:	4637      	mov	r7, r6
 8007a46:	dc05      	bgt.n	8007a54 <__swbuf_r+0x4e>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 fca6 	bl	800839c <_fflush_r>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d1ed      	bne.n	8007a30 <__swbuf_r+0x2a>
 8007a54:	68a3      	ldr	r3, [r4, #8]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	60a3      	str	r3, [r4, #8]
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	701e      	strb	r6, [r3, #0]
 8007a62:	6962      	ldr	r2, [r4, #20]
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d004      	beq.n	8007a74 <__swbuf_r+0x6e>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	07db      	lsls	r3, r3, #31
 8007a6e:	d5e1      	bpl.n	8007a34 <__swbuf_r+0x2e>
 8007a70:	2e0a      	cmp	r6, #10
 8007a72:	d1df      	bne.n	8007a34 <__swbuf_r+0x2e>
 8007a74:	4621      	mov	r1, r4
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fc90 	bl	800839c <_fflush_r>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d0d9      	beq.n	8007a34 <__swbuf_r+0x2e>
 8007a80:	e7d6      	b.n	8007a30 <__swbuf_r+0x2a>
	...

08007a84 <__swsetup_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4b29      	ldr	r3, [pc, #164]	@ (8007b2c <__swsetup_r+0xa8>)
 8007a88:	4605      	mov	r5, r0
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	b118      	cbz	r0, 8007a98 <__swsetup_r+0x14>
 8007a90:	6a03      	ldr	r3, [r0, #32]
 8007a92:	b90b      	cbnz	r3, 8007a98 <__swsetup_r+0x14>
 8007a94:	f7ff fece 	bl	8007834 <__sinit>
 8007a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9c:	0719      	lsls	r1, r3, #28
 8007a9e:	d422      	bmi.n	8007ae6 <__swsetup_r+0x62>
 8007aa0:	06da      	lsls	r2, r3, #27
 8007aa2:	d407      	bmi.n	8007ab4 <__swsetup_r+0x30>
 8007aa4:	2209      	movs	r2, #9
 8007aa6:	602a      	str	r2, [r5, #0]
 8007aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ab2:	e033      	b.n	8007b1c <__swsetup_r+0x98>
 8007ab4:	0758      	lsls	r0, r3, #29
 8007ab6:	d512      	bpl.n	8007ade <__swsetup_r+0x5a>
 8007ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aba:	b141      	cbz	r1, 8007ace <__swsetup_r+0x4a>
 8007abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	d002      	beq.n	8007aca <__swsetup_r+0x46>
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f8cd 	bl	8007c64 <_free_r>
 8007aca:	2300      	movs	r3, #0
 8007acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f043 0308 	orr.w	r3, r3, #8
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	b94b      	cbnz	r3, 8007afe <__swsetup_r+0x7a>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007af4:	d003      	beq.n	8007afe <__swsetup_r+0x7a>
 8007af6:	4621      	mov	r1, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 fc9d 	bl	8008438 <__smakebuf_r>
 8007afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b02:	f013 0201 	ands.w	r2, r3, #1
 8007b06:	d00a      	beq.n	8007b1e <__swsetup_r+0x9a>
 8007b08:	2200      	movs	r2, #0
 8007b0a:	60a2      	str	r2, [r4, #8]
 8007b0c:	6962      	ldr	r2, [r4, #20]
 8007b0e:	4252      	negs	r2, r2
 8007b10:	61a2      	str	r2, [r4, #24]
 8007b12:	6922      	ldr	r2, [r4, #16]
 8007b14:	b942      	cbnz	r2, 8007b28 <__swsetup_r+0xa4>
 8007b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b1a:	d1c5      	bne.n	8007aa8 <__swsetup_r+0x24>
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	0799      	lsls	r1, r3, #30
 8007b20:	bf58      	it	pl
 8007b22:	6962      	ldrpl	r2, [r4, #20]
 8007b24:	60a2      	str	r2, [r4, #8]
 8007b26:	e7f4      	b.n	8007b12 <__swsetup_r+0x8e>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e7f7      	b.n	8007b1c <__swsetup_r+0x98>
 8007b2c:	20000024 	.word	0x20000024

08007b30 <memset>:
 8007b30:	4402      	add	r2, r0
 8007b32:	4603      	mov	r3, r0
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d100      	bne.n	8007b3a <memset+0xa>
 8007b38:	4770      	bx	lr
 8007b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b3e:	e7f9      	b.n	8007b34 <memset+0x4>

08007b40 <_close_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	@ (8007b5c <_close_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7f9 f80b 	bl	8000b66 <_close>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_close_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_close_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20000674 	.word	0x20000674

08007b60 <_lseek_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	@ (8007b80 <_lseek_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f7f9 f820 	bl	8000bb4 <_lseek>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_lseek_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_lseek_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	20000674 	.word	0x20000674

08007b84 <_read_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	@ (8007ba4 <_read_r+0x20>)
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4608      	mov	r0, r1
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	602a      	str	r2, [r5, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f7f8 ffae 	bl	8000af4 <_read>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_read_r+0x1e>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_read_r+0x1e>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	20000674 	.word	0x20000674

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	@ (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7f9 f80c 	bl	8000bd0 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20000674 	.word	0x20000674

08007bc8 <_write_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	@ (8007be8 <_write_r+0x20>)
 8007bcc:	4604      	mov	r4, r0
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	602a      	str	r2, [r5, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f7f8 ffa9 	bl	8000b2e <_write>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_write_r+0x1e>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_write_r+0x1e>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20000674 	.word	0x20000674

08007bec <__errno>:
 8007bec:	4b01      	ldr	r3, [pc, #4]	@ (8007bf4 <__errno+0x8>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000024 	.word	0x20000024

08007bf8 <__libc_init_array>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8007c30 <__libc_init_array+0x38>)
 8007bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8007c34 <__libc_init_array+0x3c>)
 8007bfe:	1b64      	subs	r4, r4, r5
 8007c00:	10a4      	asrs	r4, r4, #2
 8007c02:	2600      	movs	r6, #0
 8007c04:	42a6      	cmp	r6, r4
 8007c06:	d109      	bne.n	8007c1c <__libc_init_array+0x24>
 8007c08:	4d0b      	ldr	r5, [pc, #44]	@ (8007c38 <__libc_init_array+0x40>)
 8007c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c3c <__libc_init_array+0x44>)
 8007c0c:	f000 fc72 	bl	80084f4 <_init>
 8007c10:	1b64      	subs	r4, r4, r5
 8007c12:	10a4      	asrs	r4, r4, #2
 8007c14:	2600      	movs	r6, #0
 8007c16:	42a6      	cmp	r6, r4
 8007c18:	d105      	bne.n	8007c26 <__libc_init_array+0x2e>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c20:	4798      	blx	r3
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7ee      	b.n	8007c04 <__libc_init_array+0xc>
 8007c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2a:	4798      	blx	r3
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	e7f2      	b.n	8007c16 <__libc_init_array+0x1e>
 8007c30:	08008e68 	.word	0x08008e68
 8007c34:	08008e68 	.word	0x08008e68
 8007c38:	08008e68 	.word	0x08008e68
 8007c3c:	08008e6c 	.word	0x08008e6c

08007c40 <__retarget_lock_init_recursive>:
 8007c40:	4770      	bx	lr

08007c42 <__retarget_lock_acquire_recursive>:
 8007c42:	4770      	bx	lr

08007c44 <__retarget_lock_release_recursive>:
 8007c44:	4770      	bx	lr

08007c46 <memcpy>:
 8007c46:	440a      	add	r2, r1
 8007c48:	4291      	cmp	r1, r2
 8007c4a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007c4e:	d100      	bne.n	8007c52 <memcpy+0xc>
 8007c50:	4770      	bx	lr
 8007c52:	b510      	push	{r4, lr}
 8007c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c5c:	4291      	cmp	r1, r2
 8007c5e:	d1f9      	bne.n	8007c54 <memcpy+0xe>
 8007c60:	bd10      	pop	{r4, pc}
	...

08007c64 <_free_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4605      	mov	r5, r0
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d041      	beq.n	8007cf0 <_free_r+0x8c>
 8007c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c70:	1f0c      	subs	r4, r1, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	18e4      	addlt	r4, r4, r3
 8007c78:	f7ff fd44 	bl	8007704 <__malloc_lock>
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf4 <_free_r+0x90>)
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	b933      	cbnz	r3, 8007c90 <_free_r+0x2c>
 8007c82:	6063      	str	r3, [r4, #4]
 8007c84:	6014      	str	r4, [r2, #0]
 8007c86:	4628      	mov	r0, r5
 8007c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c8c:	f7ff bd40 	b.w	8007710 <__malloc_unlock>
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	d908      	bls.n	8007ca6 <_free_r+0x42>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	1821      	adds	r1, r4, r0
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf01      	itttt	eq
 8007c9c:	6819      	ldreq	r1, [r3, #0]
 8007c9e:	685b      	ldreq	r3, [r3, #4]
 8007ca0:	1809      	addeq	r1, r1, r0
 8007ca2:	6021      	streq	r1, [r4, #0]
 8007ca4:	e7ed      	b.n	8007c82 <_free_r+0x1e>
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b10b      	cbz	r3, 8007cb0 <_free_r+0x4c>
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	d9fa      	bls.n	8007ca6 <_free_r+0x42>
 8007cb0:	6811      	ldr	r1, [r2, #0]
 8007cb2:	1850      	adds	r0, r2, r1
 8007cb4:	42a0      	cmp	r0, r4
 8007cb6:	d10b      	bne.n	8007cd0 <_free_r+0x6c>
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	4401      	add	r1, r0
 8007cbc:	1850      	adds	r0, r2, r1
 8007cbe:	4283      	cmp	r3, r0
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	d1e0      	bne.n	8007c86 <_free_r+0x22>
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	6053      	str	r3, [r2, #4]
 8007cca:	4408      	add	r0, r1
 8007ccc:	6010      	str	r0, [r2, #0]
 8007cce:	e7da      	b.n	8007c86 <_free_r+0x22>
 8007cd0:	d902      	bls.n	8007cd8 <_free_r+0x74>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	e7d6      	b.n	8007c86 <_free_r+0x22>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	1821      	adds	r1, r4, r0
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf04      	itt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	bf04      	itt	eq
 8007ce8:	1809      	addeq	r1, r1, r0
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	6054      	str	r4, [r2, #4]
 8007cee:	e7ca      	b.n	8007c86 <_free_r+0x22>
 8007cf0:	bd38      	pop	{r3, r4, r5, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000534 	.word	0x20000534

08007cf8 <__sfputc_r>:
 8007cf8:	6893      	ldr	r3, [r2, #8]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	b410      	push	{r4}
 8007d00:	6093      	str	r3, [r2, #8]
 8007d02:	da08      	bge.n	8007d16 <__sfputc_r+0x1e>
 8007d04:	6994      	ldr	r4, [r2, #24]
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	db01      	blt.n	8007d0e <__sfputc_r+0x16>
 8007d0a:	290a      	cmp	r1, #10
 8007d0c:	d103      	bne.n	8007d16 <__sfputc_r+0x1e>
 8007d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d12:	f7ff be78 	b.w	8007a06 <__swbuf_r>
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	1c58      	adds	r0, r3, #1
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	7019      	strb	r1, [r3, #0]
 8007d1e:	4608      	mov	r0, r1
 8007d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <__sfputs_r>:
 8007d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	18d5      	adds	r5, r2, r3
 8007d30:	42ac      	cmp	r4, r5
 8007d32:	d101      	bne.n	8007d38 <__sfputs_r+0x12>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e007      	b.n	8007d48 <__sfputs_r+0x22>
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ffda 	bl	8007cf8 <__sfputc_r>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d1f3      	bne.n	8007d30 <__sfputs_r+0xa>
 8007d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d4c <_vfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	460d      	mov	r5, r1
 8007d52:	b09d      	sub	sp, #116	@ 0x74
 8007d54:	4614      	mov	r4, r2
 8007d56:	4698      	mov	r8, r3
 8007d58:	4606      	mov	r6, r0
 8007d5a:	b118      	cbz	r0, 8007d64 <_vfiprintf_r+0x18>
 8007d5c:	6a03      	ldr	r3, [r0, #32]
 8007d5e:	b90b      	cbnz	r3, 8007d64 <_vfiprintf_r+0x18>
 8007d60:	f7ff fd68 	bl	8007834 <__sinit>
 8007d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d66:	07d9      	lsls	r1, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_vfiprintf_r+0x2a>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	059a      	lsls	r2, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_vfiprintf_r+0x2a>
 8007d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d72:	f7ff ff66 	bl	8007c42 <__retarget_lock_acquire_recursive>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	071b      	lsls	r3, r3, #28
 8007d7a:	d501      	bpl.n	8007d80 <_vfiprintf_r+0x34>
 8007d7c:	692b      	ldr	r3, [r5, #16]
 8007d7e:	b99b      	cbnz	r3, 8007da8 <_vfiprintf_r+0x5c>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff fe7e 	bl	8007a84 <__swsetup_r>
 8007d88:	b170      	cbz	r0, 8007da8 <_vfiprintf_r+0x5c>
 8007d8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d8c:	07dc      	lsls	r4, r3, #31
 8007d8e:	d504      	bpl.n	8007d9a <_vfiprintf_r+0x4e>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d94:	b01d      	add	sp, #116	@ 0x74
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	89ab      	ldrh	r3, [r5, #12]
 8007d9c:	0598      	lsls	r0, r3, #22
 8007d9e:	d4f7      	bmi.n	8007d90 <_vfiprintf_r+0x44>
 8007da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007da2:	f7ff ff4f 	bl	8007c44 <__retarget_lock_release_recursive>
 8007da6:	e7f3      	b.n	8007d90 <_vfiprintf_r+0x44>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dac:	2320      	movs	r3, #32
 8007dae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db6:	2330      	movs	r3, #48	@ 0x30
 8007db8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f68 <_vfiprintf_r+0x21c>
 8007dbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dc0:	f04f 0901 	mov.w	r9, #1
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	469a      	mov	sl, r3
 8007dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dcc:	b10a      	cbz	r2, 8007dd2 <_vfiprintf_r+0x86>
 8007dce:	2a25      	cmp	r2, #37	@ 0x25
 8007dd0:	d1f9      	bne.n	8007dc6 <_vfiprintf_r+0x7a>
 8007dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd6:	d00b      	beq.n	8007df0 <_vfiprintf_r+0xa4>
 8007dd8:	465b      	mov	r3, fp
 8007dda:	4622      	mov	r2, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ffa1 	bl	8007d26 <__sfputs_r>
 8007de4:	3001      	adds	r0, #1
 8007de6:	f000 80a7 	beq.w	8007f38 <_vfiprintf_r+0x1ec>
 8007dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dec:	445a      	add	r2, fp
 8007dee:	9209      	str	r2, [sp, #36]	@ 0x24
 8007df0:	f89a 3000 	ldrb.w	r3, [sl]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 809f 	beq.w	8007f38 <_vfiprintf_r+0x1ec>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e04:	f10a 0a01 	add.w	sl, sl, #1
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e10:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e12:	4654      	mov	r4, sl
 8007e14:	2205      	movs	r2, #5
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	4853      	ldr	r0, [pc, #332]	@ (8007f68 <_vfiprintf_r+0x21c>)
 8007e1c:	f7f8 f9e0 	bl	80001e0 <memchr>
 8007e20:	9a04      	ldr	r2, [sp, #16]
 8007e22:	b9d8      	cbnz	r0, 8007e5c <_vfiprintf_r+0x110>
 8007e24:	06d1      	lsls	r1, r2, #27
 8007e26:	bf44      	itt	mi
 8007e28:	2320      	movmi	r3, #32
 8007e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e2e:	0713      	lsls	r3, r2, #28
 8007e30:	bf44      	itt	mi
 8007e32:	232b      	movmi	r3, #43	@ 0x2b
 8007e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e38:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3e:	d015      	beq.n	8007e6c <_vfiprintf_r+0x120>
 8007e40:	9a07      	ldr	r2, [sp, #28]
 8007e42:	4654      	mov	r4, sl
 8007e44:	2000      	movs	r0, #0
 8007e46:	f04f 0c0a 	mov.w	ip, #10
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e50:	3b30      	subs	r3, #48	@ 0x30
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d94b      	bls.n	8007eee <_vfiprintf_r+0x1a2>
 8007e56:	b1b0      	cbz	r0, 8007e86 <_vfiprintf_r+0x13a>
 8007e58:	9207      	str	r2, [sp, #28]
 8007e5a:	e014      	b.n	8007e86 <_vfiprintf_r+0x13a>
 8007e5c:	eba0 0308 	sub.w	r3, r0, r8
 8007e60:	fa09 f303 	lsl.w	r3, r9, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	46a2      	mov	sl, r4
 8007e6a:	e7d2      	b.n	8007e12 <_vfiprintf_r+0xc6>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1d19      	adds	r1, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9103      	str	r1, [sp, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbb      	ittet	lt
 8007e78:	425b      	neglt	r3, r3
 8007e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7e:	9307      	strge	r3, [sp, #28]
 8007e80:	9307      	strlt	r3, [sp, #28]
 8007e82:	bfb8      	it	lt
 8007e84:	9204      	strlt	r2, [sp, #16]
 8007e86:	7823      	ldrb	r3, [r4, #0]
 8007e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e8a:	d10a      	bne.n	8007ea2 <_vfiprintf_r+0x156>
 8007e8c:	7863      	ldrb	r3, [r4, #1]
 8007e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e90:	d132      	bne.n	8007ef8 <_vfiprintf_r+0x1ac>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	9203      	str	r2, [sp, #12]
 8007e9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e9e:	3402      	adds	r4, #2
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f78 <_vfiprintf_r+0x22c>
 8007ea6:	7821      	ldrb	r1, [r4, #0]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	4650      	mov	r0, sl
 8007eac:	f7f8 f998 	bl	80001e0 <memchr>
 8007eb0:	b138      	cbz	r0, 8007ec2 <_vfiprintf_r+0x176>
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	eba0 000a 	sub.w	r0, r0, sl
 8007eb8:	2240      	movs	r2, #64	@ 0x40
 8007eba:	4082      	lsls	r2, r0
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	3401      	adds	r4, #1
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec6:	4829      	ldr	r0, [pc, #164]	@ (8007f6c <_vfiprintf_r+0x220>)
 8007ec8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ecc:	2206      	movs	r2, #6
 8007ece:	f7f8 f987 	bl	80001e0 <memchr>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d03f      	beq.n	8007f56 <_vfiprintf_r+0x20a>
 8007ed6:	4b26      	ldr	r3, [pc, #152]	@ (8007f70 <_vfiprintf_r+0x224>)
 8007ed8:	bb1b      	cbnz	r3, 8007f22 <_vfiprintf_r+0x1d6>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	3307      	adds	r3, #7
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee8:	443b      	add	r3, r7
 8007eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eec:	e76a      	b.n	8007dc4 <_vfiprintf_r+0x78>
 8007eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	e7a8      	b.n	8007e4a <_vfiprintf_r+0xfe>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	3401      	adds	r4, #1
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	4619      	mov	r1, r3
 8007f00:	f04f 0c0a 	mov.w	ip, #10
 8007f04:	4620      	mov	r0, r4
 8007f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0a:	3a30      	subs	r2, #48	@ 0x30
 8007f0c:	2a09      	cmp	r2, #9
 8007f0e:	d903      	bls.n	8007f18 <_vfiprintf_r+0x1cc>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0c6      	beq.n	8007ea2 <_vfiprintf_r+0x156>
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	e7c4      	b.n	8007ea2 <_vfiprintf_r+0x156>
 8007f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e7f0      	b.n	8007f04 <_vfiprintf_r+0x1b8>
 8007f22:	ab03      	add	r3, sp, #12
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	462a      	mov	r2, r5
 8007f28:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <_vfiprintf_r+0x228>)
 8007f2a:	a904      	add	r1, sp, #16
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f3af 8000 	nop.w
 8007f32:	4607      	mov	r7, r0
 8007f34:	1c78      	adds	r0, r7, #1
 8007f36:	d1d6      	bne.n	8007ee6 <_vfiprintf_r+0x19a>
 8007f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f3a:	07d9      	lsls	r1, r3, #31
 8007f3c:	d405      	bmi.n	8007f4a <_vfiprintf_r+0x1fe>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	059a      	lsls	r2, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_vfiprintf_r+0x1fe>
 8007f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f46:	f7ff fe7d 	bl	8007c44 <__retarget_lock_release_recursive>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	065b      	lsls	r3, r3, #25
 8007f4e:	f53f af1f 	bmi.w	8007d90 <_vfiprintf_r+0x44>
 8007f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f54:	e71e      	b.n	8007d94 <_vfiprintf_r+0x48>
 8007f56:	ab03      	add	r3, sp, #12
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4b05      	ldr	r3, [pc, #20]	@ (8007f74 <_vfiprintf_r+0x228>)
 8007f5e:	a904      	add	r1, sp, #16
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f879 	bl	8008058 <_printf_i>
 8007f66:	e7e4      	b.n	8007f32 <_vfiprintf_r+0x1e6>
 8007f68:	08008e2c 	.word	0x08008e2c
 8007f6c:	08008e36 	.word	0x08008e36
 8007f70:	00000000 	.word	0x00000000
 8007f74:	08007d27 	.word	0x08007d27
 8007f78:	08008e32 	.word	0x08008e32

08007f7c <_printf_common>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	4616      	mov	r6, r2
 8007f82:	4698      	mov	r8, r3
 8007f84:	688a      	ldr	r2, [r1, #8]
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	bfb8      	it	lt
 8007f90:	4613      	movlt	r3, r2
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f98:	4607      	mov	r7, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b10a      	cbz	r2, 8007fa2 <_printf_common+0x26>
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	0699      	lsls	r1, r3, #26
 8007fa6:	bf42      	ittt	mi
 8007fa8:	6833      	ldrmi	r3, [r6, #0]
 8007faa:	3302      	addmi	r3, #2
 8007fac:	6033      	strmi	r3, [r6, #0]
 8007fae:	6825      	ldr	r5, [r4, #0]
 8007fb0:	f015 0506 	ands.w	r5, r5, #6
 8007fb4:	d106      	bne.n	8007fc4 <_printf_common+0x48>
 8007fb6:	f104 0a19 	add.w	sl, r4, #25
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	6832      	ldr	r2, [r6, #0]
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc26      	bgt.n	8008012 <_printf_common+0x96>
 8007fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	3b00      	subs	r3, #0
 8007fcc:	bf18      	it	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	0692      	lsls	r2, r2, #26
 8007fd2:	d42b      	bmi.n	800802c <_printf_common+0xb0>
 8007fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fd8:	4641      	mov	r1, r8
 8007fda:	4638      	mov	r0, r7
 8007fdc:	47c8      	blx	r9
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d01e      	beq.n	8008020 <_printf_common+0xa4>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6922      	ldr	r2, [r4, #16]
 8007fe6:	f003 0306 	and.w	r3, r3, #6
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	bf02      	ittt	eq
 8007fee:	68e5      	ldreq	r5, [r4, #12]
 8007ff0:	6833      	ldreq	r3, [r6, #0]
 8007ff2:	1aed      	subeq	r5, r5, r3
 8007ff4:	68a3      	ldr	r3, [r4, #8]
 8007ff6:	bf0c      	ite	eq
 8007ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ffc:	2500      	movne	r5, #0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	bfc4      	itt	gt
 8008002:	1a9b      	subgt	r3, r3, r2
 8008004:	18ed      	addgt	r5, r5, r3
 8008006:	2600      	movs	r6, #0
 8008008:	341a      	adds	r4, #26
 800800a:	42b5      	cmp	r5, r6
 800800c:	d11a      	bne.n	8008044 <_printf_common+0xc8>
 800800e:	2000      	movs	r0, #0
 8008010:	e008      	b.n	8008024 <_printf_common+0xa8>
 8008012:	2301      	movs	r3, #1
 8008014:	4652      	mov	r2, sl
 8008016:	4641      	mov	r1, r8
 8008018:	4638      	mov	r0, r7
 800801a:	47c8      	blx	r9
 800801c:	3001      	adds	r0, #1
 800801e:	d103      	bne.n	8008028 <_printf_common+0xac>
 8008020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	3501      	adds	r5, #1
 800802a:	e7c6      	b.n	8007fba <_printf_common+0x3e>
 800802c:	18e1      	adds	r1, r4, r3
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	2030      	movs	r0, #48	@ 0x30
 8008032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008036:	4422      	add	r2, r4
 8008038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800803c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008040:	3302      	adds	r3, #2
 8008042:	e7c7      	b.n	8007fd4 <_printf_common+0x58>
 8008044:	2301      	movs	r3, #1
 8008046:	4622      	mov	r2, r4
 8008048:	4641      	mov	r1, r8
 800804a:	4638      	mov	r0, r7
 800804c:	47c8      	blx	r9
 800804e:	3001      	adds	r0, #1
 8008050:	d0e6      	beq.n	8008020 <_printf_common+0xa4>
 8008052:	3601      	adds	r6, #1
 8008054:	e7d9      	b.n	800800a <_printf_common+0x8e>
	...

08008058 <_printf_i>:
 8008058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	7e0f      	ldrb	r7, [r1, #24]
 800805e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008060:	2f78      	cmp	r7, #120	@ 0x78
 8008062:	4691      	mov	r9, r2
 8008064:	4680      	mov	r8, r0
 8008066:	460c      	mov	r4, r1
 8008068:	469a      	mov	sl, r3
 800806a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800806e:	d807      	bhi.n	8008080 <_printf_i+0x28>
 8008070:	2f62      	cmp	r7, #98	@ 0x62
 8008072:	d80a      	bhi.n	800808a <_printf_i+0x32>
 8008074:	2f00      	cmp	r7, #0
 8008076:	f000 80d1 	beq.w	800821c <_printf_i+0x1c4>
 800807a:	2f58      	cmp	r7, #88	@ 0x58
 800807c:	f000 80b8 	beq.w	80081f0 <_printf_i+0x198>
 8008080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008088:	e03a      	b.n	8008100 <_printf_i+0xa8>
 800808a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800808e:	2b15      	cmp	r3, #21
 8008090:	d8f6      	bhi.n	8008080 <_printf_i+0x28>
 8008092:	a101      	add	r1, pc, #4	@ (adr r1, 8008098 <_printf_i+0x40>)
 8008094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008098:	080080f1 	.word	0x080080f1
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008081 	.word	0x08008081
 80080a4:	08008081 	.word	0x08008081
 80080a8:	08008081 	.word	0x08008081
 80080ac:	08008081 	.word	0x08008081
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008081 	.word	0x08008081
 80080b8:	08008081 	.word	0x08008081
 80080bc:	08008081 	.word	0x08008081
 80080c0:	08008081 	.word	0x08008081
 80080c4:	08008203 	.word	0x08008203
 80080c8:	0800812f 	.word	0x0800812f
 80080cc:	080081bd 	.word	0x080081bd
 80080d0:	08008081 	.word	0x08008081
 80080d4:	08008081 	.word	0x08008081
 80080d8:	08008225 	.word	0x08008225
 80080dc:	08008081 	.word	0x08008081
 80080e0:	0800812f 	.word	0x0800812f
 80080e4:	08008081 	.word	0x08008081
 80080e8:	08008081 	.word	0x08008081
 80080ec:	080081c5 	.word	0x080081c5
 80080f0:	6833      	ldr	r3, [r6, #0]
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6032      	str	r2, [r6, #0]
 80080f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008100:	2301      	movs	r3, #1
 8008102:	e09c      	b.n	800823e <_printf_i+0x1e6>
 8008104:	6833      	ldr	r3, [r6, #0]
 8008106:	6820      	ldr	r0, [r4, #0]
 8008108:	1d19      	adds	r1, r3, #4
 800810a:	6031      	str	r1, [r6, #0]
 800810c:	0606      	lsls	r6, r0, #24
 800810e:	d501      	bpl.n	8008114 <_printf_i+0xbc>
 8008110:	681d      	ldr	r5, [r3, #0]
 8008112:	e003      	b.n	800811c <_printf_i+0xc4>
 8008114:	0645      	lsls	r5, r0, #25
 8008116:	d5fb      	bpl.n	8008110 <_printf_i+0xb8>
 8008118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800811c:	2d00      	cmp	r5, #0
 800811e:	da03      	bge.n	8008128 <_printf_i+0xd0>
 8008120:	232d      	movs	r3, #45	@ 0x2d
 8008122:	426d      	negs	r5, r5
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008128:	4858      	ldr	r0, [pc, #352]	@ (800828c <_printf_i+0x234>)
 800812a:	230a      	movs	r3, #10
 800812c:	e011      	b.n	8008152 <_printf_i+0xfa>
 800812e:	6821      	ldr	r1, [r4, #0]
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	0608      	lsls	r0, r1, #24
 8008134:	f853 5b04 	ldr.w	r5, [r3], #4
 8008138:	d402      	bmi.n	8008140 <_printf_i+0xe8>
 800813a:	0649      	lsls	r1, r1, #25
 800813c:	bf48      	it	mi
 800813e:	b2ad      	uxthmi	r5, r5
 8008140:	2f6f      	cmp	r7, #111	@ 0x6f
 8008142:	4852      	ldr	r0, [pc, #328]	@ (800828c <_printf_i+0x234>)
 8008144:	6033      	str	r3, [r6, #0]
 8008146:	bf14      	ite	ne
 8008148:	230a      	movne	r3, #10
 800814a:	2308      	moveq	r3, #8
 800814c:	2100      	movs	r1, #0
 800814e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008152:	6866      	ldr	r6, [r4, #4]
 8008154:	60a6      	str	r6, [r4, #8]
 8008156:	2e00      	cmp	r6, #0
 8008158:	db05      	blt.n	8008166 <_printf_i+0x10e>
 800815a:	6821      	ldr	r1, [r4, #0]
 800815c:	432e      	orrs	r6, r5
 800815e:	f021 0104 	bic.w	r1, r1, #4
 8008162:	6021      	str	r1, [r4, #0]
 8008164:	d04b      	beq.n	80081fe <_printf_i+0x1a6>
 8008166:	4616      	mov	r6, r2
 8008168:	fbb5 f1f3 	udiv	r1, r5, r3
 800816c:	fb03 5711 	mls	r7, r3, r1, r5
 8008170:	5dc7      	ldrb	r7, [r0, r7]
 8008172:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008176:	462f      	mov	r7, r5
 8008178:	42bb      	cmp	r3, r7
 800817a:	460d      	mov	r5, r1
 800817c:	d9f4      	bls.n	8008168 <_printf_i+0x110>
 800817e:	2b08      	cmp	r3, #8
 8008180:	d10b      	bne.n	800819a <_printf_i+0x142>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	07df      	lsls	r7, r3, #31
 8008186:	d508      	bpl.n	800819a <_printf_i+0x142>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	6861      	ldr	r1, [r4, #4]
 800818c:	4299      	cmp	r1, r3
 800818e:	bfde      	ittt	le
 8008190:	2330      	movle	r3, #48	@ 0x30
 8008192:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008196:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800819a:	1b92      	subs	r2, r2, r6
 800819c:	6122      	str	r2, [r4, #16]
 800819e:	f8cd a000 	str.w	sl, [sp]
 80081a2:	464b      	mov	r3, r9
 80081a4:	aa03      	add	r2, sp, #12
 80081a6:	4621      	mov	r1, r4
 80081a8:	4640      	mov	r0, r8
 80081aa:	f7ff fee7 	bl	8007f7c <_printf_common>
 80081ae:	3001      	adds	r0, #1
 80081b0:	d14a      	bne.n	8008248 <_printf_i+0x1f0>
 80081b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b6:	b004      	add	sp, #16
 80081b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	f043 0320 	orr.w	r3, r3, #32
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	4832      	ldr	r0, [pc, #200]	@ (8008290 <_printf_i+0x238>)
 80081c6:	2778      	movs	r7, #120	@ 0x78
 80081c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	6831      	ldr	r1, [r6, #0]
 80081d0:	061f      	lsls	r7, r3, #24
 80081d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80081d6:	d402      	bmi.n	80081de <_printf_i+0x186>
 80081d8:	065f      	lsls	r7, r3, #25
 80081da:	bf48      	it	mi
 80081dc:	b2ad      	uxthmi	r5, r5
 80081de:	6031      	str	r1, [r6, #0]
 80081e0:	07d9      	lsls	r1, r3, #31
 80081e2:	bf44      	itt	mi
 80081e4:	f043 0320 	orrmi.w	r3, r3, #32
 80081e8:	6023      	strmi	r3, [r4, #0]
 80081ea:	b11d      	cbz	r5, 80081f4 <_printf_i+0x19c>
 80081ec:	2310      	movs	r3, #16
 80081ee:	e7ad      	b.n	800814c <_printf_i+0xf4>
 80081f0:	4826      	ldr	r0, [pc, #152]	@ (800828c <_printf_i+0x234>)
 80081f2:	e7e9      	b.n	80081c8 <_printf_i+0x170>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	f023 0320 	bic.w	r3, r3, #32
 80081fa:	6023      	str	r3, [r4, #0]
 80081fc:	e7f6      	b.n	80081ec <_printf_i+0x194>
 80081fe:	4616      	mov	r6, r2
 8008200:	e7bd      	b.n	800817e <_printf_i+0x126>
 8008202:	6833      	ldr	r3, [r6, #0]
 8008204:	6825      	ldr	r5, [r4, #0]
 8008206:	6961      	ldr	r1, [r4, #20]
 8008208:	1d18      	adds	r0, r3, #4
 800820a:	6030      	str	r0, [r6, #0]
 800820c:	062e      	lsls	r6, r5, #24
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	d501      	bpl.n	8008216 <_printf_i+0x1be>
 8008212:	6019      	str	r1, [r3, #0]
 8008214:	e002      	b.n	800821c <_printf_i+0x1c4>
 8008216:	0668      	lsls	r0, r5, #25
 8008218:	d5fb      	bpl.n	8008212 <_printf_i+0x1ba>
 800821a:	8019      	strh	r1, [r3, #0]
 800821c:	2300      	movs	r3, #0
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	4616      	mov	r6, r2
 8008222:	e7bc      	b.n	800819e <_printf_i+0x146>
 8008224:	6833      	ldr	r3, [r6, #0]
 8008226:	1d1a      	adds	r2, r3, #4
 8008228:	6032      	str	r2, [r6, #0]
 800822a:	681e      	ldr	r6, [r3, #0]
 800822c:	6862      	ldr	r2, [r4, #4]
 800822e:	2100      	movs	r1, #0
 8008230:	4630      	mov	r0, r6
 8008232:	f7f7 ffd5 	bl	80001e0 <memchr>
 8008236:	b108      	cbz	r0, 800823c <_printf_i+0x1e4>
 8008238:	1b80      	subs	r0, r0, r6
 800823a:	6060      	str	r0, [r4, #4]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	2300      	movs	r3, #0
 8008242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008246:	e7aa      	b.n	800819e <_printf_i+0x146>
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	4632      	mov	r2, r6
 800824c:	4649      	mov	r1, r9
 800824e:	4640      	mov	r0, r8
 8008250:	47d0      	blx	sl
 8008252:	3001      	adds	r0, #1
 8008254:	d0ad      	beq.n	80081b2 <_printf_i+0x15a>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	079b      	lsls	r3, r3, #30
 800825a:	d413      	bmi.n	8008284 <_printf_i+0x22c>
 800825c:	68e0      	ldr	r0, [r4, #12]
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	4298      	cmp	r0, r3
 8008262:	bfb8      	it	lt
 8008264:	4618      	movlt	r0, r3
 8008266:	e7a6      	b.n	80081b6 <_printf_i+0x15e>
 8008268:	2301      	movs	r3, #1
 800826a:	4632      	mov	r2, r6
 800826c:	4649      	mov	r1, r9
 800826e:	4640      	mov	r0, r8
 8008270:	47d0      	blx	sl
 8008272:	3001      	adds	r0, #1
 8008274:	d09d      	beq.n	80081b2 <_printf_i+0x15a>
 8008276:	3501      	adds	r5, #1
 8008278:	68e3      	ldr	r3, [r4, #12]
 800827a:	9903      	ldr	r1, [sp, #12]
 800827c:	1a5b      	subs	r3, r3, r1
 800827e:	42ab      	cmp	r3, r5
 8008280:	dcf2      	bgt.n	8008268 <_printf_i+0x210>
 8008282:	e7eb      	b.n	800825c <_printf_i+0x204>
 8008284:	2500      	movs	r5, #0
 8008286:	f104 0619 	add.w	r6, r4, #25
 800828a:	e7f5      	b.n	8008278 <_printf_i+0x220>
 800828c:	08008e3d 	.word	0x08008e3d
 8008290:	08008e4e 	.word	0x08008e4e

08008294 <__sflush_r>:
 8008294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829c:	0716      	lsls	r6, r2, #28
 800829e:	4605      	mov	r5, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	d454      	bmi.n	800834e <__sflush_r+0xba>
 80082a4:	684b      	ldr	r3, [r1, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	dc02      	bgt.n	80082b0 <__sflush_r+0x1c>
 80082aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd48      	ble.n	8008342 <__sflush_r+0xae>
 80082b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	d045      	beq.n	8008342 <__sflush_r+0xae>
 80082b6:	2300      	movs	r3, #0
 80082b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082bc:	682f      	ldr	r7, [r5, #0]
 80082be:	6a21      	ldr	r1, [r4, #32]
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	d030      	beq.n	8008326 <__sflush_r+0x92>
 80082c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	0759      	lsls	r1, r3, #29
 80082ca:	d505      	bpl.n	80082d8 <__sflush_r+0x44>
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082d2:	b10b      	cbz	r3, 80082d8 <__sflush_r+0x44>
 80082d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	2300      	movs	r3, #0
 80082da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082dc:	6a21      	ldr	r1, [r4, #32]
 80082de:	4628      	mov	r0, r5
 80082e0:	47b0      	blx	r6
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	d106      	bne.n	80082f6 <__sflush_r+0x62>
 80082e8:	6829      	ldr	r1, [r5, #0]
 80082ea:	291d      	cmp	r1, #29
 80082ec:	d82b      	bhi.n	8008346 <__sflush_r+0xb2>
 80082ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008398 <__sflush_r+0x104>)
 80082f0:	40ca      	lsrs	r2, r1
 80082f2:	07d6      	lsls	r6, r2, #31
 80082f4:	d527      	bpl.n	8008346 <__sflush_r+0xb2>
 80082f6:	2200      	movs	r2, #0
 80082f8:	6062      	str	r2, [r4, #4]
 80082fa:	04d9      	lsls	r1, r3, #19
 80082fc:	6922      	ldr	r2, [r4, #16]
 80082fe:	6022      	str	r2, [r4, #0]
 8008300:	d504      	bpl.n	800830c <__sflush_r+0x78>
 8008302:	1c42      	adds	r2, r0, #1
 8008304:	d101      	bne.n	800830a <__sflush_r+0x76>
 8008306:	682b      	ldr	r3, [r5, #0]
 8008308:	b903      	cbnz	r3, 800830c <__sflush_r+0x78>
 800830a:	6560      	str	r0, [r4, #84]	@ 0x54
 800830c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800830e:	602f      	str	r7, [r5, #0]
 8008310:	b1b9      	cbz	r1, 8008342 <__sflush_r+0xae>
 8008312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008316:	4299      	cmp	r1, r3
 8008318:	d002      	beq.n	8008320 <__sflush_r+0x8c>
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff fca2 	bl	8007c64 <_free_r>
 8008320:	2300      	movs	r3, #0
 8008322:	6363      	str	r3, [r4, #52]	@ 0x34
 8008324:	e00d      	b.n	8008342 <__sflush_r+0xae>
 8008326:	2301      	movs	r3, #1
 8008328:	4628      	mov	r0, r5
 800832a:	47b0      	blx	r6
 800832c:	4602      	mov	r2, r0
 800832e:	1c50      	adds	r0, r2, #1
 8008330:	d1c9      	bne.n	80082c6 <__sflush_r+0x32>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0c6      	beq.n	80082c6 <__sflush_r+0x32>
 8008338:	2b1d      	cmp	r3, #29
 800833a:	d001      	beq.n	8008340 <__sflush_r+0xac>
 800833c:	2b16      	cmp	r3, #22
 800833e:	d11e      	bne.n	800837e <__sflush_r+0xea>
 8008340:	602f      	str	r7, [r5, #0]
 8008342:	2000      	movs	r0, #0
 8008344:	e022      	b.n	800838c <__sflush_r+0xf8>
 8008346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800834a:	b21b      	sxth	r3, r3
 800834c:	e01b      	b.n	8008386 <__sflush_r+0xf2>
 800834e:	690f      	ldr	r7, [r1, #16]
 8008350:	2f00      	cmp	r7, #0
 8008352:	d0f6      	beq.n	8008342 <__sflush_r+0xae>
 8008354:	0793      	lsls	r3, r2, #30
 8008356:	680e      	ldr	r6, [r1, #0]
 8008358:	bf08      	it	eq
 800835a:	694b      	ldreq	r3, [r1, #20]
 800835c:	600f      	str	r7, [r1, #0]
 800835e:	bf18      	it	ne
 8008360:	2300      	movne	r3, #0
 8008362:	eba6 0807 	sub.w	r8, r6, r7
 8008366:	608b      	str	r3, [r1, #8]
 8008368:	f1b8 0f00 	cmp.w	r8, #0
 800836c:	dde9      	ble.n	8008342 <__sflush_r+0xae>
 800836e:	6a21      	ldr	r1, [r4, #32]
 8008370:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008372:	4643      	mov	r3, r8
 8008374:	463a      	mov	r2, r7
 8008376:	4628      	mov	r0, r5
 8008378:	47b0      	blx	r6
 800837a:	2800      	cmp	r0, #0
 800837c:	dc08      	bgt.n	8008390 <__sflush_r+0xfc>
 800837e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008390:	4407      	add	r7, r0
 8008392:	eba8 0800 	sub.w	r8, r8, r0
 8008396:	e7e7      	b.n	8008368 <__sflush_r+0xd4>
 8008398:	20400001 	.word	0x20400001

0800839c <_fflush_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	690b      	ldr	r3, [r1, #16]
 80083a0:	4605      	mov	r5, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	b913      	cbnz	r3, 80083ac <_fflush_r+0x10>
 80083a6:	2500      	movs	r5, #0
 80083a8:	4628      	mov	r0, r5
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	b118      	cbz	r0, 80083b6 <_fflush_r+0x1a>
 80083ae:	6a03      	ldr	r3, [r0, #32]
 80083b0:	b90b      	cbnz	r3, 80083b6 <_fflush_r+0x1a>
 80083b2:	f7ff fa3f 	bl	8007834 <__sinit>
 80083b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f3      	beq.n	80083a6 <_fflush_r+0xa>
 80083be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083c0:	07d0      	lsls	r0, r2, #31
 80083c2:	d404      	bmi.n	80083ce <_fflush_r+0x32>
 80083c4:	0599      	lsls	r1, r3, #22
 80083c6:	d402      	bmi.n	80083ce <_fflush_r+0x32>
 80083c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083ca:	f7ff fc3a 	bl	8007c42 <__retarget_lock_acquire_recursive>
 80083ce:	4628      	mov	r0, r5
 80083d0:	4621      	mov	r1, r4
 80083d2:	f7ff ff5f 	bl	8008294 <__sflush_r>
 80083d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083d8:	07da      	lsls	r2, r3, #31
 80083da:	4605      	mov	r5, r0
 80083dc:	d4e4      	bmi.n	80083a8 <_fflush_r+0xc>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	059b      	lsls	r3, r3, #22
 80083e2:	d4e1      	bmi.n	80083a8 <_fflush_r+0xc>
 80083e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083e6:	f7ff fc2d 	bl	8007c44 <__retarget_lock_release_recursive>
 80083ea:	e7dd      	b.n	80083a8 <_fflush_r+0xc>

080083ec <__swhatbuf_r>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	2900      	cmp	r1, #0
 80083f6:	b096      	sub	sp, #88	@ 0x58
 80083f8:	4615      	mov	r5, r2
 80083fa:	461e      	mov	r6, r3
 80083fc:	da0d      	bge.n	800841a <__swhatbuf_r+0x2e>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008404:	f04f 0100 	mov.w	r1, #0
 8008408:	bf14      	ite	ne
 800840a:	2340      	movne	r3, #64	@ 0x40
 800840c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008410:	2000      	movs	r0, #0
 8008412:	6031      	str	r1, [r6, #0]
 8008414:	602b      	str	r3, [r5, #0]
 8008416:	b016      	add	sp, #88	@ 0x58
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	466a      	mov	r2, sp
 800841c:	f000 f848 	bl	80084b0 <_fstat_r>
 8008420:	2800      	cmp	r0, #0
 8008422:	dbec      	blt.n	80083fe <__swhatbuf_r+0x12>
 8008424:	9901      	ldr	r1, [sp, #4]
 8008426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800842a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800842e:	4259      	negs	r1, r3
 8008430:	4159      	adcs	r1, r3
 8008432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008436:	e7eb      	b.n	8008410 <__swhatbuf_r+0x24>

08008438 <__smakebuf_r>:
 8008438:	898b      	ldrh	r3, [r1, #12]
 800843a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843c:	079d      	lsls	r5, r3, #30
 800843e:	4606      	mov	r6, r0
 8008440:	460c      	mov	r4, r1
 8008442:	d507      	bpl.n	8008454 <__smakebuf_r+0x1c>
 8008444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	6123      	str	r3, [r4, #16]
 800844c:	2301      	movs	r3, #1
 800844e:	6163      	str	r3, [r4, #20]
 8008450:	b003      	add	sp, #12
 8008452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008454:	ab01      	add	r3, sp, #4
 8008456:	466a      	mov	r2, sp
 8008458:	f7ff ffc8 	bl	80083ec <__swhatbuf_r>
 800845c:	9f00      	ldr	r7, [sp, #0]
 800845e:	4605      	mov	r5, r0
 8008460:	4639      	mov	r1, r7
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff f8ce 	bl	8007604 <_malloc_r>
 8008468:	b948      	cbnz	r0, 800847e <__smakebuf_r+0x46>
 800846a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846e:	059a      	lsls	r2, r3, #22
 8008470:	d4ee      	bmi.n	8008450 <__smakebuf_r+0x18>
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	f043 0302 	orr.w	r3, r3, #2
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	e7e2      	b.n	8008444 <__smakebuf_r+0xc>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	6020      	str	r0, [r4, #0]
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800848e:	b15b      	cbz	r3, 80084a8 <__smakebuf_r+0x70>
 8008490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f81d 	bl	80084d4 <_isatty_r>
 800849a:	b128      	cbz	r0, 80084a8 <__smakebuf_r+0x70>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	f043 0301 	orr.w	r3, r3, #1
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	431d      	orrs	r5, r3
 80084ac:	81a5      	strh	r5, [r4, #12]
 80084ae:	e7cf      	b.n	8008450 <__smakebuf_r+0x18>

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	@ (80084d0 <_fstat_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f8 fb5e 	bl	8000b7e <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20000674 	.word	0x20000674

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	@ (80084f0 <_isatty_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f8 fb5d 	bl	8000b9e <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000674 	.word	0x20000674

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
