
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007130  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  080072c4  080072c4  000082c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be4  08007be4  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007be4  08007be4  00008be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bec  08007bec  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bec  08007bec  00008bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007bf4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000074  08007c68  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08007c68  00009630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f00f  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003056  00000000  00000000  000180b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0001b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000959  00000000  00000000  0001bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191f1  00000000  00000000  0001c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f02f  00000000  00000000  000358c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009094e  00000000  00000000  000448f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d523f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000d5284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d8a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080072ac 	.word	0x080072ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080072ac 	.word	0x080072ac

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <close_sender>:
static USART_HandleTypeDef *husart2_handle;

static gapcom_handle_t *gapcom_handle_instance;

int close_sender(gapcom_sender_t *self)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	return 0;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <open_sender>:

int open_sender(gapcom_sender_t *self)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <send_sender>:

ssize_t send_sender(gapcom_sender_t *self, const uint8_t *buf, size_t len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_USART_Transmit_IT(husart2_handle, buf, len);
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <send_sender+0x38>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	b292      	uxth	r2, r2
 8000540:	68b9      	ldr	r1, [r7, #8]
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fb07 	bl	8001b56 <HAL_USART_Transmit_IT>
 8000548:	4603      	mov	r3, r0
 800054a:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <send_sender+0x2a>
        return (ssize_t)len;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	e001      	b.n	800055a <send_sender+0x2e>
    } else {
        return -1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000090 	.word	0x20000090

08000568 <create_gapcom_instance>:
		.open = open_sender,
		.send = send_sender
};

void create_gapcom_instance(USART_HandleTypeDef *handle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	husart2_handle = handle;
 8000570:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <create_gapcom_instance+0x2c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
	gapcom_handle_instance = gapcom_create();
 8000576:	f002 f95d 	bl	8002834 <gapcom_create>
 800057a:	4603      	mov	r3, r0
 800057c:	4a06      	ldr	r2, [pc, #24]	@ (8000598 <create_gapcom_instance+0x30>)
 800057e:	6013      	str	r3, [r2, #0]
	gapcom_set_sender_impl(gapcom_handle_instance, &gapcom_sender_t_impl);
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <create_gapcom_instance+0x30>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4905      	ldr	r1, [pc, #20]	@ (800059c <create_gapcom_instance+0x34>)
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f984 	bl	8002894 <gapcom_set_sender_impl>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000090 	.word	0x20000090
 8000598:	20000094 	.word	0x20000094
 800059c:	20000000 	.word	0x20000000

080005a0 <send_respond_ping>:
	gapcom_accept(gapcom_handle_instance, buf, size);
	gapcom_respond_ping(gapcom_handle_instance, GAPErrorCode_GAP_OK);
}

void send_respond_ping()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	gapcom_respond_ping(gapcom_handle_instance, GAPErrorCode_GAP_OK);
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <send_respond_ping+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fbe2 	bl	8002d74 <gapcom_respond_ping>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000094 	.word	0x20000094

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fa5a 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f81a 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8a4 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_Init();
 80005c8:	f000 f876 	bl	80006b8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  create_gapcom_instance(&husart2);
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <main+0x34>)
 80005ce:	f7ff ffcb 	bl	8000568 <create_gapcom_instance>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_USART_Receive(&husart2, rx_buff, 1024, 1000000) == HAL_OK) {
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <main+0x38>)
 80005d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005d8:	4906      	ldr	r1, [pc, #24]	@ (80005f4 <main+0x3c>)
 80005da:	4804      	ldr	r0, [pc, #16]	@ (80005ec <main+0x34>)
 80005dc:	f001 fa0d 	bl	80019fa <HAL_USART_Receive>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f5      	bne.n	80005d2 <main+0x1a>
		  send_respond_ping();
 80005e6:	f7ff ffdb 	bl	80005a0 <send_respond_ping>
	  if (HAL_USART_Receive(&husart2, rx_buff, 1024, 1000000) == HAL_OK) {
 80005ea:	e7f2      	b.n	80005d2 <main+0x1a>
 80005ec:	20000098 	.word	0x20000098
 80005f0:	000f4240 	.word	0x000f4240
 80005f4:	200000dc 	.word	0x200000dc

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fc3c 	bl	8006e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <SystemClock_Config+0xb8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <SystemClock_Config+0xb8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <SystemClock_Config+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <SystemClock_Config+0xbc>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <SystemClock_Config+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fd2b 	bl	80010c8 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000678:	f000 f864 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff8e 	bl	80015b8 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f84f 	bl	8000744 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_USART2_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	@ (800070c <MX_USART2_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART2_Init+0x50>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_USART2_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_USART2_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART2_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_USART2_Init+0x50>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART2_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_USART2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_USART2_Init+0x50>)
 80006f6:	f001 f93f 	bl	8001978 <HAL_USART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f820 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000098 	.word	0x20000098
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_GPIO_Init+0x30>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <MX_GPIO_Init+0x30>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_GPIO_Init+0x30>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000834 <HAL_USART_MspInit+0x94>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d133      	bne.n	800082a <HAL_USART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_USART_MspInit+0x98>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <HAL_USART_MspInit+0x98>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <HAL_USART_MspInit+0x98>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_USART_MspInit+0x98>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <HAL_USART_MspInit+0x98>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_USART_MspInit+0x98>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007fa:	231c      	movs	r3, #28
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <HAL_USART_MspInit+0x9c>)
 8000816:	f000 fad3 	bl	8000dc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2026      	movs	r0, #38	@ 0x26
 8000820:	f000 fa75 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000824:	2026      	movs	r0, #38	@ 0x26
 8000826:	f000 fa8e 	bl	8000d46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	@ 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40004400 	.word	0x40004400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <UsageFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000896:	f000 f93f 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80008a4:	4802      	ldr	r0, [pc, #8]	@ (80008b0 <USART2_IRQHandler+0x10>)
 80008a6:	f001 f99b 	bl	8001be0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000098 	.word	0x20000098

080008b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e00a      	b.n	80008dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008c6:	f3af 8000 	nop.w
 80008ca:	4601      	mov	r1, r0
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	60ba      	str	r2, [r7, #8]
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	3301      	adds	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dbf0      	blt.n	80008c6 <_read+0x12>
  }

  return len;
 80008e4:	687b      	ldr	r3, [r7, #4]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	e009      	b.n	8000914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf1      	blt.n	8000900 <_write+0x12>
  }
  return len;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_close>:

int _close(int file)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800094e:	605a      	str	r2, [r3, #4]
  return 0;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_isatty>:

int _isatty(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000998:	4a14      	ldr	r2, [pc, #80]	@ (80009ec <_sbrk+0x5c>)
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <_sbrk+0x60>)
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a4:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <_sbrk+0x64>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <_sbrk+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d207      	bcs.n	80009d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c0:	f006 fabe 	bl	8006f40 <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ce:	e009      	b.n	80009e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <_sbrk+0x64>)
 80009e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20018000 	.word	0x20018000
 80009f0:	00000400 	.word	0x00000400
 80009f4:	200004dc 	.word	0x200004dc
 80009f8:	20000630 	.word	0x20000630

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f006 fa7d 	bl	8006f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fdb1 	bl	80005b8 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a64:	08007bf4 	.word	0x08007bf4
  ldr r2, =_sbss
 8000a68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a6c:	20000630 	.word	0x20000630

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f92b 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe52 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f943 	bl	8000d62 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af4:	f000 f90b 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	20000014 	.word	0x20000014
 8000b14:	20000010 	.word	0x20000010

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000014 	.word	0x20000014
 8000b3c:	200004e0 	.word	0x200004e0

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200004e0 	.word	0x200004e0

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	@ (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d004      	beq.n	8000d98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2280      	movs	r2, #128	@ 0x80
 8000d92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e00c      	b.n	8000db2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e159      	b.n	8001090 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8148 	bne.w	800108a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d017      	beq.n	8000eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a2 	beq.w	800108a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b57      	ldr	r3, [pc, #348]	@ (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b54      	ldr	r3, [pc, #336]	@ (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f62:	4a52      	ldr	r2, [pc, #328]	@ (80010ac <HAL_GPIO_Init+0x2ec>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a49      	ldr	r2, [pc, #292]	@ (80010b0 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x202>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a48      	ldr	r2, [pc, #288]	@ (80010b4 <HAL_GPIO_Init+0x2f4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x1fe>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a47      	ldr	r2, [pc, #284]	@ (80010b8 <HAL_GPIO_Init+0x2f8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	@ (80010bc <HAL_GPIO_Init+0x2fc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x1f6>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a45      	ldr	r2, [pc, #276]	@ (80010c0 <HAL_GPIO_Init+0x300>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x1f2>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	@ (80010ac <HAL_GPIO_Init+0x2ec>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b38      	ldr	r3, [pc, #224]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a24      	ldr	r2, [pc, #144]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1a      	ldr	r2, [pc, #104]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f aea2 	bls.w	8000ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e267      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d075      	beq.n	80011d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e6:	4b88      	ldr	r3, [pc, #544]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d00c      	beq.n	800110c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4b85      	ldr	r3, [pc, #532]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d112      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4b82      	ldr	r3, [pc, #520]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800110a:	d10b      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4b7e      	ldr	r3, [pc, #504]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d05b      	beq.n	80011d0 <HAL_RCC_OscConfig+0x108>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d157      	bne.n	80011d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e242      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800112c:	d106      	bne.n	800113c <HAL_RCC_OscConfig+0x74>
 800112e:	4b76      	ldr	r3, [pc, #472]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a75      	ldr	r2, [pc, #468]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e01d      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x98>
 8001146:	4b70      	ldr	r3, [pc, #448]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6f      	ldr	r2, [pc, #444]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b6d      	ldr	r3, [pc, #436]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a6c      	ldr	r2, [pc, #432]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e00b      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 8001160:	4b69      	ldr	r3, [pc, #420]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a68      	ldr	r2, [pc, #416]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b66      	ldr	r3, [pc, #408]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a65      	ldr	r2, [pc, #404]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcde 	bl	8000b40 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcda 	bl	8000b40 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e207      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0xc0>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcca 	bl	8000b40 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcc6 	bl	8000b40 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	@ 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1f3      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b51      	ldr	r3, [pc, #324]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0xe8>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011de:	4b4a      	ldr	r3, [pc, #296]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b47      	ldr	r3, [pc, #284]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d11c      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b44      	ldr	r3, [pc, #272]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e1c7      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4937      	ldr	r1, [pc, #220]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	e03a      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001238:	4b34      	ldr	r3, [pc, #208]	@ (800130c <HAL_RCC_OscConfig+0x244>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fc7f 	bl	8000b40 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc7b 	bl	8000b40 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1a8      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4925      	ldr	r1, [pc, #148]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_RCC_OscConfig+0x244>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fc5e 	bl	8000b40 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc5a 	bl	8000b40 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e187      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d036      	beq.n	8001320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d016      	beq.n	80012e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_RCC_OscConfig+0x248>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc3e 	bl	8000b40 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc3a 	bl	8000b40 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e167      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80012dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x200>
 80012e6:	e01b      	b.n	8001320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_RCC_OscConfig+0x248>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fc27 	bl	8000b40 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e00e      	b.n	8001314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc23 	bl	8000b40 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d907      	bls.n	8001314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e150      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b88      	ldr	r3, [pc, #544]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ea      	bne.n	80012f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 8097 	beq.w	800145c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b81      	ldr	r3, [pc, #516]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b7d      	ldr	r3, [pc, #500]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a7c      	ldr	r2, [pc, #496]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b7a      	ldr	r3, [pc, #488]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b77      	ldr	r3, [pc, #476]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b74      	ldr	r3, [pc, #464]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a73      	ldr	r2, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fbe3 	bl	8000b40 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fbdf 	bl	8000b40 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e10c      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2ea>
 80013a4:	4b64      	ldr	r3, [pc, #400]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a63      	ldr	r2, [pc, #396]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b0:	e01c      	b.n	80013ec <HAL_RCC_OscConfig+0x324>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x30c>
 80013ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013be:	4a5e      	ldr	r2, [pc, #376]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0x324>
 80013d4:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d8:	4a57      	ldr	r2, [pc, #348]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e0:	4b55      	ldr	r3, [pc, #340]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e4:	4a54      	ldr	r2, [pc, #336]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f023 0304 	bic.w	r3, r3, #4
 80013ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fba4 	bl	8000b40 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fba0 	bl	8000b40 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0cb      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001412:	4b49      	ldr	r3, [pc, #292]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ee      	beq.n	80013fc <HAL_RCC_OscConfig+0x334>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fb8e 	bl	8000b40 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fb8a 	bl	8000b40 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0b5      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143e:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ee      	bne.n	8001428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001450:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a1 	beq.w	80015a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d05c      	beq.n	800152c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d141      	bne.n	80014fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <HAL_RCC_OscConfig+0x478>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fb5e 	bl	8000b40 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fb5a 	bl	8000b40 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e087      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	3b01      	subs	r3, #1
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	491b      	ldr	r1, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_RCC_OscConfig+0x478>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fb33 	bl	8000b40 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fb2f 	bl	8000b40 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e05c      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x416>
 80014fc:	e054      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_RCC_OscConfig+0x478>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb1c 	bl	8000b40 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb18 	bl	8000b40 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e045      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x444>
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e038      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000
 8001540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_RCC_OscConfig+0x4ec>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d028      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d121      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d11a      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001574:	4013      	ands	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800157a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800157c:	4293      	cmp	r3, r2
 800157e:	d111      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	3b01      	subs	r3, #1
 800158e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0cc      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b68      	ldr	r3, [pc, #416]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d90c      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b65      	ldr	r3, [pc, #404]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0b8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160c:	4b59      	ldr	r3, [pc, #356]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a58      	ldr	r2, [pc, #352]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001624:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a52      	ldr	r2, [pc, #328]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800162e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001630:	4b50      	ldr	r3, [pc, #320]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	494d      	ldr	r1, [pc, #308]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d044      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d119      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d003      	beq.n	8001676 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	2b03      	cmp	r3, #3
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e067      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4934      	ldr	r1, [pc, #208]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a8:	f7ff fa4a 	bl	8000b40 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff fa46 	bl	8000b40 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d20c      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e032      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4916      	ldr	r1, [pc, #88]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490e      	ldr	r1, [pc, #56]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f821 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8001742:	4602      	mov	r2, r0
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	490a      	ldr	r1, [pc, #40]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	4a09      	ldr	r2, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f9aa 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00
 8001774:	40023800 	.word	0x40023800
 8001778:	080077c4 	.word	0x080077c4
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000010 	.word	0x20000010

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001788:	b090      	sub	sp, #64	@ 0x40
 800178a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179c:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d00d      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x40>
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	f200 80a1 	bhi.w	80018f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x34>
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x3a>
 80017b6:	e09b      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017bc:	e09b      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017be:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017c2:	e098      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d028      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	2200      	movs	r2, #0
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017ec:	2100      	movs	r1, #0
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017f0:	fb03 f201 	mul.w	r2, r3, r1
 80017f4:	2300      	movs	r3, #0
 80017f6:	fb00 f303 	mul.w	r3, r0, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	4a43      	ldr	r2, [pc, #268]	@ (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017fe:	fba0 1202 	umull	r1, r2, r0, r2
 8001802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001804:	460a      	mov	r2, r1
 8001806:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800180a:	4413      	add	r3, r2
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001810:	2200      	movs	r2, #0
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800181a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800181e:	f7fe fcd9 	bl	80001d4 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4613      	mov	r3, r2
 8001828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800182a:	e053      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	2200      	movs	r2, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	617a      	str	r2, [r7, #20]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800183e:	f04f 0b00 	mov.w	fp, #0
 8001842:	4652      	mov	r2, sl
 8001844:	465b      	mov	r3, fp
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ebb2 080a 	subs.w	r8, r2, sl
 800185e:	eb63 090b 	sbc.w	r9, r3, fp
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800186e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001872:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001876:	ebb2 0408 	subs.w	r4, r2, r8
 800187a:	eb63 0509 	sbc.w	r5, r3, r9
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	00eb      	lsls	r3, r5, #3
 8001888:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800188c:	00e2      	lsls	r2, r4, #3
 800188e:	4614      	mov	r4, r2
 8001890:	461d      	mov	r5, r3
 8001892:	eb14 030a 	adds.w	r3, r4, sl
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	eb45 030b 	adc.w	r3, r5, fp
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018aa:	4629      	mov	r1, r5
 80018ac:	028b      	lsls	r3, r1, #10
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b4:	4621      	mov	r1, r4
 80018b6:	028a      	lsls	r2, r1, #10
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018be:	2200      	movs	r2, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	60fa      	str	r2, [r7, #12]
 80018c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c8:	f7fe fc84 	bl	80001d4 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3740      	adds	r7, #64	@ 0x40
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	017d7840 	.word	0x017d7840

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_RCC_GetHCLKFreq+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2000000c 	.word	0x2000000c

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff0 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	@ (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	080077d4 	.word	0x080077d4

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001954:	f7ff ffdc 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0b5b      	lsrs	r3, r3, #13
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	@ (8001974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	080077d4 	.word	0x080077d4

08001978 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e033      	b.n	80019f2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fefe 	bl	80007a0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fca9 	bl	8002304 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019d0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019e0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_USART_Receive>:
  * @param  Size    Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b08a      	sub	sp, #40	@ 0x28
 80019fe:	af02      	add	r7, sp, #8
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 809a 	bne.w	8001b4c <HAL_USART_Receive+0x152>
  {
    if ((pRxData == NULL) || (Size == 0))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_USART_Receive+0x2a>
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e092      	b.n	8001b4e <HAL_USART_Receive+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_USART_Receive+0x3c>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e08b      	b.n	8001b4e <HAL_USART_Receive+0x154>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_RX;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2222      	movs	r2, #34	@ 0x22
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f878 	bl	8000b40 <HAL_GetTick>
 8001a50:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	861a      	strh	r2, [r3, #48]	@ 0x30
    husart->RxXferCount = Size;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	88fa      	ldrh	r2, [r7, #6]
 8001a5c:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a66:	d108      	bne.n	8001a7a <HAL_USART_Receive+0x80>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d104      	bne.n	8001a7a <HAL_USART_Receive+0x80>
    {
      prxdata8bits  = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	e003      	b.n	8001a82 <HAL_USART_Receive+0x88>
    }
    else
    {
      prxdata8bits  = pRxData;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (husart->RxXferCount > 0U)
 8001a82:	e054      	b.n	8001b2e <HAL_USART_Receive+0x134>
    {
      /* Wait until TXE flag is set to send dummy byte in order to generate the
      * clock for the slave to send data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f9ec 	bl	8001e6c <USART_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_USART_Receive+0xa4>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e057      	b.n	8001b4e <HAL_USART_Receive+0x154>
      }
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	22ff      	movs	r2, #255	@ 0xff
 8001aa4:	605a      	str	r2, [r3, #4]

      /* Wait until RXNE flag is set to receive the byte */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f9db 	bl	8001e6c <USART_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_USART_Receive+0xc6>
      {
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e046      	b.n	8001b4e <HAL_USART_Receive+0x154>
      }

      if (prxdata8bits == NULL)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_USART_Receive+0xe6>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3302      	adds	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e01f      	b.n	8001b20 <HAL_USART_Receive+0x126>
      }
      else
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae8:	d007      	beq.n	8001afa <HAL_USART_Receive+0x100>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <HAL_USART_Receive+0x10e>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_USART_Receive+0x10e>
        {
          *prxdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x0FF);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e008      	b.n	8001b1a <HAL_USART_Receive+0x120>
        }
        else
        {
          *prxdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x07F);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	701a      	strb	r2, [r3, #0]
        }
        prxdata8bits++;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
      }
      husart->RxXferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	865a      	strh	r2, [r3, #50]	@ 0x32
    while (husart->RxXferCount > 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1a5      	bne.n	8001a84 <HAL_USART_Receive+0x8a>
    }

    husart->State = HAL_USART_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <HAL_USART_Receive+0x154>
  }
  else
  {
    return HAL_BUSY;
 8001b4c:	2302      	movs	r3, #2
  }
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_USART_Transmit_IT>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d130      	bne.n	8001bd2 <HAL_USART_Transmit_IT+0x7c>
  {
    if ((pTxData == NULL) || (Size == 0))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_USART_Transmit_IT+0x26>
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_USART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e029      	b.n	8001bd4 <HAL_USART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_USART_Transmit_IT+0x38>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e022      	b.n	8001bd4 <HAL_USART_Transmit_IT+0x7e>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->pTxBuffPtr = pTxData;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    husart->TxXferSize = Size;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2212      	movs	r2, #18
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
       configured only for transmit "USART_MODE_TX"
       The __HAL_USART_ENABLE_IT(husart, USART_IT_ERR) can be used to enable the Frame error,
       Noise error interrupt */

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the USART Transmit Data Register Empty Interrupt */
    SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bcc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_USART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d117      	bne.n	8001c46 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_USART_IRQHandler+0x66>
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b22      	cmp	r3, #34	@ 0x22
 8001c34:	d103      	bne.n	8001c3e <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa10 	bl	800205c <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8001c3c:	e0e9      	b.n	8001e12 <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fa92 	bl	8002168 <USART_TransmitReceive_IT>
      return;
 8001c44:	e0e5      	b.n	8001e12 <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80bb 	beq.w	8001dc4 <HAL_USART_IRQHandler+0x1e4>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <HAL_USART_IRQHandler+0x84>
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80b0 	beq.w	8001dc4 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_USART_IRQHandler+0xa4>
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_USART_IRQHandler+0xc4>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f043 0202 	orr.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_USART_IRQHandler+0xe4>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f043 0204 	orr.w	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00f      	beq.n	8001cee <HAL_USART_IRQHandler+0x10e>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <HAL_USART_IRQHandler+0x102>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f043 0208 	orr.w	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 808c 	beq.w	8001e10 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d011      	beq.n	8001d26 <HAL_USART_IRQHandler+0x146>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b22      	cmp	r3, #34	@ 0x22
 8001d16:	d103      	bne.n	8001d20 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f99f 	bl	800205c <USART_Receive_IT>
 8001d1e:	e002      	b.n	8001d26 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fa21 	bl	8002168 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d30:	2b40      	cmp	r3, #64	@ 0x40
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_USART_IRQHandler+0x16e>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d031      	beq.n	8001db2 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8e2 	bl	8001f18 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5e:	2b40      	cmp	r3, #64	@ 0x40
 8001d60:	d123      	bne.n	8001daa <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d70:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d013      	beq.n	8001da2 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7e:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_USART_IRQHandler+0x238>)
 8001d80:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fff7 	bl	8000d7a <HAL_DMA_Abort_IT>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001da0:	e00e      	b.n	8001dc0 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f858 	bl	8001e58 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	e00a      	b.n	8001dc0 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f854 	bl	8001e58 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001db0:	e006      	b.n	8001dc0 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f850 	bl	8001e58 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8001dbe:	e027      	b.n	8001e10 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001dc0:	bf00      	nop
    return;
 8001dc2:	e025      	b.n	8001e10 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d012      	beq.n	8001df4 <HAL_USART_IRQHandler+0x214>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d103      	bne.n	8001dec <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8c9 	bl	8001f7c <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8001dea:	e012      	b.n	8001e12 <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f9bb 	bl	8002168 <USART_TransmitReceive_IT>
    return;
 8001df2:	e00e      	b.n	8001e12 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_USART_IRQHandler+0x232>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f907 	bl	800201c <USART_EndTransmit_IT>
    return;
 8001e0e:	e000      	b.n	8001e12 <HAL_USART_IRQHandler+0x232>
    return;
 8001e10:	bf00      	nop
  }
}
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	08001f55 	.word	0x08001f55

08001e1c <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001e7c:	e038      	b.n	8001ef0 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e84:	d034      	beq.n	8001ef0 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <USART_WaitOnFlagUntilTimeout+0x30>
 8001e8c:	f7fe fe58 	bl	8000b40 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d229      	bcs.n	8001ef0 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eaa:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0220 	bic.w	r2, r2, #32
 8001eba:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eca:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e00f      	b.n	8001f10 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d0b7      	beq.n	8001e7e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8001f2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f60:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff ff72 	bl	8001e58 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d13e      	bne.n	800200e <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f98:	d114      	bne.n	8001fc4 <USART_Transmit_IT+0x48>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d110      	bne.n	8001fc4 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb6:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	1c9a      	adds	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fc2:	e008      	b.n	8001fd6 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6251      	str	r1, [r2, #36]	@ 0x24
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ff8:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002008:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002032:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fee5 	bl	8001e1c <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b22      	cmp	r3, #34	@ 0x22
 800206e:	d176      	bne.n	800215e <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002078:	d117      	bne.n	80020aa <USART_Receive_IT+0x4e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d113      	bne.n	80020aa <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002098:	b29a      	uxth	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	1c9a      	adds	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020a8:	e026      	b.n	80020f8 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020bc:	d007      	beq.n	80020ce <USART_Receive_IT+0x72>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <USART_Receive_IT+0x80>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e008      	b.n	80020ee <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d120      	bne.n	8002152 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0220 	bic.w	r2, r2, #32
 800211e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800212e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fe71 	bl	8001e30 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e006      	b.n	8002160 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	22ff      	movs	r2, #255	@ 0xff
 8002158:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 800215e:	2302      	movs	r3, #2
  }
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b32      	cmp	r3, #50	@ 0x32
 800217a:	f040 80bd 	bne.w	80022f8 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03d      	beq.n	8002204 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002192:	2b80      	cmp	r3, #128	@ 0x80
 8002194:	d136      	bne.n	8002204 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219e:	d114      	bne.n	80021ca <USART_TransmitReceive_IT+0x62>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d110      	bne.n	80021ca <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021bc:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	1c9a      	adds	r2, r3, #2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80021c8:	e008      	b.n	80021dc <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	1c59      	adds	r1, r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6251      	str	r1, [r2, #36]	@ 0x24
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002202:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d04c      	beq.n	80022a8 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d145      	bne.n	80022a8 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002224:	d115      	bne.n	8002252 <USART_TransmitReceive_IT+0xea>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d111      	bne.n	8002252 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002240:	b29a      	uxth	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	1c9a      	adds	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002250:	e023      	b.n	800229a <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225a:	d007      	beq.n	800226c <USART_TransmitReceive_IT+0x104>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <USART_TransmitReceive_IT+0x114>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e009      	b.n	8002290 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d120      	bne.n	80022f4 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0220 	bic.w	r2, r2, #32
 80022c0:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d0:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fdaa 	bl	8001e44 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e002      	b.n	80022fa <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b0c6      	sub	sp, #280	@ 0x118
 800230a:	af00      	add	r7, sp, #0
 800230c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	f021 030c 	bic.w	r3, r1, #12
 8002328:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800232a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800233a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800233e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002346:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800234c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800234e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800235c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800235e:	431a      	orrs	r2, r3
 8002360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002364:	4313      	orrs	r3, r2
 8002366:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800236a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800236e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002378:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800237a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800238a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800238e:	f023 030c 	bic.w	r3, r3, #12
 8002392:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80023ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023c4:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80023c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6959      	ldr	r1, [r3, #20]
 80023ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 80023d8:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80023da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b8b      	ldr	r3, [pc, #556]	@ (8002610 <USART_SetConfig+0x30c>)
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d006      	beq.n	80023f4 <USART_SetConfig+0xf0>
 80023e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b89      	ldr	r3, [pc, #548]	@ (8002614 <USART_SetConfig+0x310>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	f040 8114 	bne.w	800261c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023f4:	f7ff faac 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
 80023f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80023fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002400:	2200      	movs	r2, #0
 8002402:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002406:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800240a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800240e:	4622      	mov	r2, r4
 8002410:	462b      	mov	r3, r5
 8002412:	1891      	adds	r1, r2, r2
 8002414:	6739      	str	r1, [r7, #112]	@ 0x70
 8002416:	415b      	adcs	r3, r3
 8002418:	677b      	str	r3, [r7, #116]	@ 0x74
 800241a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800241e:	4621      	mov	r1, r4
 8002420:	eb12 0801 	adds.w	r8, r2, r1
 8002424:	4629      	mov	r1, r5
 8002426:	eb43 0901 	adc.w	r9, r3, r1
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800243a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800243e:	4690      	mov	r8, r2
 8002440:	4699      	mov	r9, r3
 8002442:	4623      	mov	r3, r4
 8002444:	eb18 0303 	adds.w	r3, r8, r3
 8002448:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800244c:	462b      	mov	r3, r5
 800244e:	eb49 0303 	adc.w	r3, r9, r3
 8002452:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002462:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002466:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800246a:	460b      	mov	r3, r1
 800246c:	18db      	adds	r3, r3, r3
 800246e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002470:	4613      	mov	r3, r2
 8002472:	eb42 0303 	adc.w	r3, r2, r3
 8002476:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002478:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800247c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002480:	f7fd fea8 	bl	80001d4 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4b63      	ldr	r3, [pc, #396]	@ (8002618 <USART_SetConfig+0x314>)
 800248a:	fba3 2302 	umull	r2, r3, r3, r2
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	011c      	lsls	r4, r3, #4
 8002492:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002496:	2200      	movs	r2, #0
 8002498:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800249c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80024a4:	4642      	mov	r2, r8
 80024a6:	464b      	mov	r3, r9
 80024a8:	1891      	adds	r1, r2, r2
 80024aa:	6639      	str	r1, [r7, #96]	@ 0x60
 80024ac:	415b      	adcs	r3, r3
 80024ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80024b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024b4:	4641      	mov	r1, r8
 80024b6:	1851      	adds	r1, r2, r1
 80024b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024ba:	4649      	mov	r1, r9
 80024bc:	414b      	adcs	r3, r1
 80024be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80024cc:	4659      	mov	r1, fp
 80024ce:	00cb      	lsls	r3, r1, #3
 80024d0:	4651      	mov	r1, sl
 80024d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d6:	4651      	mov	r1, sl
 80024d8:	00ca      	lsls	r2, r1, #3
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	4642      	mov	r2, r8
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024e8:	464b      	mov	r3, r9
 80024ea:	460a      	mov	r2, r1
 80024ec:	eb42 0303 	adc.w	r3, r2, r3
 80024f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002500:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002504:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002508:	460b      	mov	r3, r1
 800250a:	18db      	adds	r3, r3, r3
 800250c:	653b      	str	r3, [r7, #80]	@ 0x50
 800250e:	4613      	mov	r3, r2
 8002510:	eb42 0303 	adc.w	r3, r2, r3
 8002514:	657b      	str	r3, [r7, #84]	@ 0x54
 8002516:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800251a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800251e:	f7fd fe59 	bl	80001d4 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4611      	mov	r1, r2
 8002528:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <USART_SetConfig+0x314>)
 800252a:	fba3 2301 	umull	r2, r3, r3, r1
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2264      	movs	r2, #100	@ 0x64
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	1acb      	subs	r3, r1, r3
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800253e:	4b36      	ldr	r3, [pc, #216]	@ (8002618 <USART_SetConfig+0x314>)
 8002540:	fba3 2302 	umull	r2, r3, r3, r2
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800254c:	441c      	add	r4, r3
 800254e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800255c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002568:	415b      	adcs	r3, r3
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800256c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002570:	4641      	mov	r1, r8
 8002572:	1851      	adds	r1, r2, r1
 8002574:	6439      	str	r1, [r7, #64]	@ 0x40
 8002576:	4649      	mov	r1, r9
 8002578:	414b      	adcs	r3, r1
 800257a:	647b      	str	r3, [r7, #68]	@ 0x44
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8002588:	4659      	mov	r1, fp
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	4651      	mov	r1, sl
 800258e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002592:	4651      	mov	r1, sl
 8002594:	00ca      	lsls	r2, r1, #3
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	4603      	mov	r3, r0
 800259c:	4642      	mov	r2, r8
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025a4:	464b      	mov	r3, r9
 80025a6:	460a      	mov	r2, r1
 80025a8:	eb42 0303 	adc.w	r3, r2, r3
 80025ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025c4:	460b      	mov	r3, r1
 80025c6:	18db      	adds	r3, r3, r3
 80025c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ca:	4613      	mov	r3, r2
 80025cc:	eb42 0303 	adc.w	r3, r2, r3
 80025d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025da:	f7fd fdfb 	bl	80001d4 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <USART_SetConfig+0x314>)
 80025e4:	fba3 1302 	umull	r1, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	2164      	movs	r1, #100	@ 0x64
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3332      	adds	r3, #50	@ 0x32
 80025f6:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <USART_SetConfig+0x314>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4422      	add	r2, r4
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e109      	b.n	8002822 <USART_SetConfig+0x51e>
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400
 8002618:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800261c:	f7ff f984 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8002620:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002624:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002628:	2200      	movs	r2, #0
 800262a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800262e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002632:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002636:	4642      	mov	r2, r8
 8002638:	464b      	mov	r3, r9
 800263a:	1891      	adds	r1, r2, r2
 800263c:	6339      	str	r1, [r7, #48]	@ 0x30
 800263e:	415b      	adcs	r3, r3
 8002640:	637b      	str	r3, [r7, #52]	@ 0x34
 8002642:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002646:	4641      	mov	r1, r8
 8002648:	1854      	adds	r4, r2, r1
 800264a:	4649      	mov	r1, r9
 800264c:	eb43 0501 	adc.w	r5, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800266c:	464b      	mov	r3, r9
 800266e:	eb45 0303 	adc.w	r3, r5, r3
 8002672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002682:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002686:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800268a:	460b      	mov	r3, r1
 800268c:	18db      	adds	r3, r3, r3
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002690:	4613      	mov	r3, r2
 8002692:	eb42 0303 	adc.w	r3, r2, r3
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800269c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026a0:	f7fd fd98 	bl	80001d4 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <USART_SetConfig+0x52c>)
 80026aa:	fba3 2302 	umull	r2, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	011c      	lsls	r4, r3, #4
 80026b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026bc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026c0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	6239      	str	r1, [r7, #32]
 80026cc:	415b      	adcs	r3, r3
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026d4:	4641      	mov	r1, r8
 80026d6:	eb12 0a01 	adds.w	sl, r2, r1
 80026da:	4649      	mov	r1, r9
 80026dc:	eb43 0b01 	adc.w	fp, r3, r1
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f4:	4692      	mov	sl, r2
 80026f6:	469b      	mov	fp, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	eb1a 0303 	adds.w	r3, sl, r3
 80026fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002702:	464b      	mov	r3, r9
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800270c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002718:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800271c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002720:	460b      	mov	r3, r1
 8002722:	18db      	adds	r3, r3, r3
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	4613      	mov	r3, r2
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002732:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002736:	f7fd fd4d 	bl	80001d4 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4611      	mov	r1, r2
 8002740:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <USART_SetConfig+0x52c>)
 8002742:	fba3 2301 	umull	r2, r3, r3, r1
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2264      	movs	r2, #100	@ 0x64
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	1acb      	subs	r3, r1, r3
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002756:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <USART_SetConfig+0x52c>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002764:	441c      	add	r4, r3
 8002766:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002770:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	6139      	str	r1, [r7, #16]
 8002780:	415b      	adcs	r3, r3
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027bc:	464b      	mov	r3, r9
 80027be:	460a      	mov	r2, r1
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80027d8:	460b      	mov	r3, r1
 80027da:	18db      	adds	r3, r3, r3
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	eb42 0303 	adc.w	r3, r2, r3
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027ee:	f7fd fcf1 	bl	80001d4 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <USART_SetConfig+0x52c>)
 80027f8:	fba3 1302 	umull	r1, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	2164      	movs	r1, #100	@ 0x64
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	3332      	adds	r3, #50	@ 0x32
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <USART_SetConfig+0x52c>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	f003 0207 	and.w	r2, r3, #7
 8002816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4422      	add	r2, r4
 800281e:	609a      	str	r2, [r3, #8]
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002828:	46bd      	mov	sp, r7
 800282a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282e:	bf00      	nop
 8002830:	51eb851f 	.word	0x51eb851f

08002834 <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 800283a:	f243 3114 	movw	r1, #13076	@ 0x3314
 800283e:	2001      	movs	r0, #1
 8002840:	f004 f856 	bl	80068f0 <calloc>
 8002844:	4603      	mov	r3, r0
 8002846:	607b      	str	r3, [r7, #4]
    if (!handle)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d019      	beq.n	8002882 <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f9e4 	bl	8005c20 <TF_InitStatic>
 8002858:	4603      	mov	r3, r0
 800285a:	70fb      	strb	r3, [r7, #3]
    if (!status)
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4909      	ldr	r1, [pc, #36]	@ (8002890 <gapcom_create+0x5c>)
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fa53 	bl	8005d18 <TF_AddGenericListener>

    goto end;
 8002872:	e007      	b.n	8002884 <gapcom_create+0x50>
        goto free_handle;
 8002874:	bf00      	nop

free_handle:
    free(handle);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f004 f856 	bl	8006928 <free>
    handle = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	e000      	b.n	8002884 <gapcom_create+0x50>
        goto end;
 8002882:	bf00      	nop
end:
    return handle;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	08002909 	.word	0x08002909

08002894 <gapcom_set_sender_impl>:
        free(handle);
    }
}

void gapcom_set_sender_impl(gapcom_handle_t* handle, gapcom_sender_t* sender_impl)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    handle->sender_impl = sender_impl;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028a4:	461a      	mov	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 80028c0:	2218      	movs	r2, #24
 80028c2:	2100      	movs	r1, #0
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f004 fadd 	bl	8006e84 <memset>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <TF_WriteImpl>:
#include <pb_decode.h>
#include <stdint.h>
#include <unistd.h>

void TF_WriteImpl(TinyFrame* tf_handle, const uint8_t* buf, uint32_t len)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b088      	sub	sp, #32
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
    ssize_t bytes_sent;
    gapcom_handle_t* handle;
    gapcom_sender_t* sender;

    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	61bb      	str	r3, [r7, #24]
    sender = handle->sender_impl;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028ec:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 80028f0:	617b      	str	r3, [r7, #20]
    bytes_sent = sender->send(sender, buf, len);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	4798      	blx	r3
 80028fe:	6138      	str	r0, [r7, #16]
    if (bytes_sent < 0)
    {
        log_com("Failed to send message, returned %lld", bytes_sent);
    }
}
 8002900:	bf00      	nop
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b0a3      	sub	sp, #140	@ 0x8c
 800290c:	af00      	add	r7, sp, #0
 800290e:	6178      	str	r0, [r7, #20]
 8002910:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800291c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	88db      	ldrh	r3, [r3, #6]
 8002924:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002928:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 8002934:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 81e0 	beq.w	8002cfc <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f103 011a 	add.w	r1, r3, #26
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	8b1b      	ldrh	r3, [r3, #24]
 8002946:	461a      	mov	r2, r3
 8002948:	463b      	mov	r3, r7
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fb3a 	bl	8002fc4 <pb_istream_from_buffer>
 8002950:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002954:	463b      	mov	r3, r7
 8002956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	88db      	ldrh	r3, [r3, #6]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11a      	bne.n	800299a <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 800296a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800296e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002972:	49b9      	ldr	r1, [pc, #740]	@ (8002c58 <gapcom_tf_id_listener+0x350>)
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fc5f 	bl	8004238 <pb_decode>
 800297a:	4603      	mov	r3, r0
 800297c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002980:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 81bc 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 800298a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800298e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002990:	4611      	mov	r1, r2
 8002992:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002996:	4798      	blx	r3
 8002998:	e1b3      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	88db      	ldrh	r3, [r3, #6]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d11a      	bne.n	80029d8 <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 80029a8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80029ac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80029b0:	49aa      	ldr	r1, [pc, #680]	@ (8002c5c <gapcom_tf_id_listener+0x354>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fc40 	bl	8004238 <pb_decode>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80029be:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 819d 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 80029c8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80029cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029ce:	4611      	mov	r1, r2
 80029d0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80029d4:	4798      	blx	r3
 80029d6:	e194      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	88db      	ldrh	r3, [r3, #6]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d11a      	bne.n	8002a16 <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 80029e6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80029ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80029ee:	499c      	ldr	r1, [pc, #624]	@ (8002c60 <gapcom_tf_id_listener+0x358>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fc21 	bl	8004238 <pb_decode>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80029fc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 817e 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002a06:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002a0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002a12:	4798      	blx	r3
 8002a14:	e175      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	88db      	ldrh	r3, [r3, #6]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d11a      	bne.n	8002a54 <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8002a24:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002a28:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002a2c:	498d      	ldr	r1, [pc, #564]	@ (8002c64 <gapcom_tf_id_listener+0x35c>)
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fc02 	bl	8004238 <pb_decode>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002a3a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 815f 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002a44:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002a48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002a50:	4798      	blx	r3
 8002a52:	e156      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	88db      	ldrh	r3, [r3, #6]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11a      	bne.n	8002a92 <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 8002a62:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002a66:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002a6a:	497f      	ldr	r1, [pc, #508]	@ (8002c68 <gapcom_tf_id_listener+0x360>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fbe3 	bl	8004238 <pb_decode>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002a78:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8140 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002a82:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a88:	4611      	mov	r1, r2
 8002a8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002a8e:	4798      	blx	r3
 8002a90:	e137      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	88db      	ldrh	r3, [r3, #6]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d11a      	bne.n	8002ad0 <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 8002aa0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002aa4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002aa8:	4970      	ldr	r1, [pc, #448]	@ (8002c6c <gapcom_tf_id_listener+0x364>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fbc4 	bl	8004238 <pb_decode>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002ab6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8121 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002ac0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002ac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002acc:	4798      	blx	r3
 8002ace:	e118      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	88db      	ldrh	r3, [r3, #6]
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d11d      	bne.n	8002b14 <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 8002ad8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8002ae4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002ae8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002aec:	4960      	ldr	r1, [pc, #384]	@ (8002c70 <gapcom_tf_id_listener+0x368>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 fba2 	bl	8004238 <pb_decode>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002afa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80ff 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002b04:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b10:	4798      	blx	r3
 8002b12:	e0f6      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	88db      	ldrh	r3, [r3, #6]
 8002b18:	2b07      	cmp	r3, #7
 8002b1a:	d11a      	bne.n	8002b52 <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 8002b22:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b26:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b2a:	4952      	ldr	r1, [pc, #328]	@ (8002c74 <gapcom_tf_id_listener+0x36c>)
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 fb83 	bl	8004238 <pb_decode>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002b38:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80e0 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002b42:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b48:	4611      	mov	r1, r2
 8002b4a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b4e:	4798      	blx	r3
 8002b50:	e0d7      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	88db      	ldrh	r3, [r3, #6]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11a      	bne.n	8002b90 <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 8002b60:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002b64:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b68:	4943      	ldr	r1, [pc, #268]	@ (8002c78 <gapcom_tf_id_listener+0x370>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fb64 	bl	8004238 <pb_decode>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002b76:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80c1 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002b80:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002b84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b86:	4611      	mov	r1, r2
 8002b88:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b8c:	4798      	blx	r3
 8002b8e:	e0b8      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	88db      	ldrh	r3, [r3, #6]
 8002b94:	2b09      	cmp	r3, #9
 8002b96:	d120      	bne.n	8002bda <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002b9e:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 8002baa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002bae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002bb2:	4932      	ldr	r1, [pc, #200]	@ (8002c7c <gapcom_tf_id_listener+0x374>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fb3f 	bl	8004238 <pb_decode>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002bc0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 809c 	beq.w	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002bca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002bce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002bd6:	4798      	blx	r3
 8002bd8:	e093      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	88db      	ldrh	r3, [r3, #6]
 8002bde:	2b0a      	cmp	r3, #10
 8002be0:	d119      	bne.n	8002c16 <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 8002be8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002bec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002bf0:	4923      	ldr	r1, [pc, #140]	@ (8002c80 <gapcom_tf_id_listener+0x378>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fb20 	bl	8004238 <pb_decode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002bfe:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d07d      	beq.n	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002c06:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002c0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002c12:	4798      	blx	r3
 8002c14:	e075      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	88db      	ldrh	r3, [r3, #6]
 8002c1a:	2b0b      	cmp	r3, #11
 8002c1c:	d134      	bne.n	8002c88 <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 8002c1e:	f107 0320 	add.w	r3, r7, #32
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 8002c28:	f107 0220 	add.w	r2, r7, #32
 8002c2c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002c30:	4914      	ldr	r1, [pc, #80]	@ (8002c84 <gapcom_tf_id_listener+0x37c>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fb00 	bl	8004238 <pb_decode>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002c3e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d05d      	beq.n	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002c46:	f107 0220 	add.w	r2, r7, #32
 8002c4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002c52:	4798      	blx	r3
 8002c54:	e055      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002c56:	bf00      	nop
 8002c58:	080077e4 	.word	0x080077e4
 8002c5c:	08007808 	.word	0x08007808
 8002c60:	0800782c 	.word	0x0800782c
 8002c64:	08007850 	.word	0x08007850
 8002c68:	08007874 	.word	0x08007874
 8002c6c:	08007898 	.word	0x08007898
 8002c70:	080078c0 	.word	0x080078c0
 8002c74:	080078e4 	.word	0x080078e4
 8002c78:	08007904 	.word	0x08007904
 8002c7c:	08007930 	.word	0x08007930
 8002c80:	08007950 	.word	0x08007950
 8002c84:	08007984 	.word	0x08007984
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	88db      	ldrh	r3, [r3, #6]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d118      	bne.n	8002cc2 <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 8002c90:	2300      	movs	r3, #0
 8002c92:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 8002c94:	f107 021c 	add.w	r2, r7, #28
 8002c98:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002c9c:	491b      	ldr	r1, [pc, #108]	@ (8002d0c <gapcom_tf_id_listener+0x404>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 faca 	bl	8004238 <pb_decode>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002caa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d027      	beq.n	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002cb2:	f107 021c 	add.w	r2, r7, #28
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb8:	4611      	mov	r1, r2
 8002cba:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002cbe:	4798      	blx	r3
 8002cc0:	e01f      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	88db      	ldrh	r3, [r3, #6]
 8002cc6:	2b0d      	cmp	r3, #13
 8002cc8:	d11a      	bne.n	8002d00 <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 8002cce:	f107 0218 	add.w	r2, r7, #24
 8002cd2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cd6:	490e      	ldr	r1, [pc, #56]	@ (8002d10 <gapcom_tf_id_listener+0x408>)
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 faad 	bl	8004238 <pb_decode>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002ce4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <gapcom_tf_id_listener+0x3fa>
 8002cec:	f107 0218 	add.w	r2, r7, #24
 8002cf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002cf8:	4798      	blx	r3
 8002cfa:	e002      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
        goto end;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 8002d00:	bf00      	nop
    return TF_STAY;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	378c      	adds	r7, #140	@ 0x8c
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}
 8002d0c:	080079a8 	.word	0x080079a8
 8002d10:	080079cc 	.word	0x080079cc

08002d14 <gapcom_encapsulate_tf>:

int gapcom_encapsulate_tf(
    gapcom_handle_t* handle,
    gapcom_msg_t msg_type,
    int msg_len)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	72fb      	strb	r3, [r7, #11]
    /* Build TinyFrame frame pointing to payload */
    TF_ClearMsg(&handle->tf_msg);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8002d28:	3320      	adds	r3, #32
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fdc4 	bl	80028b8 <TF_ClearMsg>
    handle->tf_msg.type = msg_type;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d3a:	f8a3 2266 	strh.w	r2, [r3, #614]	@ 0x266
    handle->tf_msg.data = (const uint8_t*)(&handle->sendbuf);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 8002d44:	3334      	adds	r3, #52	@ 0x34
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002d4c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    handle->tf_msg.len = (TF_LEN)msg_len;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d5a:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
    /* When the payload is empty (which can happen with protobuf, for example
     * with a single numeric field with value 0 : it will get compressed and
     * interpreted as 0 upon decoding) the payload CRC is not appended by
     * TinyFrame. Otherwise, we do have a payload CRC as a footer.
     */
    if (msg_len > 0)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	dd01      	ble.n	8002d68 <gapcom_encapsulate_tf+0x54>
        return GAPCOM_TF_HEADER_SIZE_BYTES + GAPCOM_TF_FOOTER_SIZE_BYTES;
 8002d64:	230d      	movs	r3, #13
 8002d66:	e000      	b.n	8002d6a <gapcom_encapsulate_tf+0x56>
    else
        return GAPCOM_TF_HEADER_SIZE_BYTES;
 8002d68:	230b      	movs	r3, #11
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <gapcom_respond_ping>:
 ************************/

int gapcom_respond_ping(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b092      	sub	sp, #72	@ 0x48
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	61f8      	str	r0, [r7, #28]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPPingResp resp = GAPPingResp_init_zero;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPPingResp_fields, resp);
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d96:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 8002d9a:	3334      	adds	r3, #52	@ 0x34
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 8002da2:	4619      	mov	r1, r3
 8002da4:	f001 fe1a 	bl	80049dc <pb_ostream_from_buffer>
 8002da8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002dac:	463d      	mov	r5, r7
 8002dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbe:	4919      	ldr	r1, [pc, #100]	@ (8002e24 <gapcom_respond_ping+0xb0>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fa78 	bl	80052b6 <pb_encode>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002dcc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <gapcom_respond_ping+0x66>
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dd8:	e002      	b.n	8002de0 <gapcom_respond_ping+0x6c>
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8002de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002de4:	4413      	add	r3, r2
 8002de6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 8002de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dee:	d012      	beq.n	8002e16 <gapcom_respond_ping+0xa2>
    {
        log_com("Failed to encode Ping protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_PING_RESP, ret);
 8002df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002df2:	2101      	movs	r1, #1
 8002df4:	69f8      	ldr	r0, [r7, #28]
 8002df6:	f7ff ff8d 	bl	8002d14 <gapcom_encapsulate_tf>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfe:	4413      	add	r3, r2
 8002e00:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f003 fa44 	bl	800629c <TF_Respond>
 8002e14:	e000      	b.n	8002e18 <gapcom_respond_ping+0xa4>
        goto end;
 8002e16:	bf00      	nop

end:
    return ret;
 8002e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3748      	adds	r7, #72	@ 0x48
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdb0      	pop	{r4, r5, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	08007808 	.word	0x08007808

08002e28 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	441a      	add	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	68b8      	ldr	r0, [r7, #8]
 8002e52:	f004 f8a2 	bl	8006f9a <memcpy>
    }
    
    return true;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <pb_read+0x16>
        return true;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e05f      	b.n	8002f36 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d123      	bne.n	8002ec4 <pb_read+0x64>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2f      	ldr	r2, [pc, #188]	@ (8002f40 <pb_read+0xe0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01e      	beq.n	8002ec4 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8002e86:	e011      	b.n	8002eac <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4619      	mov	r1, r3
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff ffe5 	bl	8002e60 <pb_read>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <pb_read+0x46>
				return false;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e047      	b.n	8002f36 <pb_read+0xd6>
			
			count -= 16;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3b10      	subs	r3, #16
 8002eaa:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d8ea      	bhi.n	8002e88 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ffd0 	bl	8002e60 <pb_read>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	e038      	b.n	8002f36 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90b      	bls.n	8002ee6 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <pb_read+0x7c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	e000      	b.n	8002ede <pb_read+0x7e>
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <pb_read+0xe4>)
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	60d3      	str	r3, [r2, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e027      	b.n	8002f36 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	4798      	blx	r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f083 0301 	eor.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <pb_read+0xac>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	e000      	b.n	8002f0e <pb_read+0xae>
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <pb_read+0xe8>)
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	60d3      	str	r3, [r2, #12]
 8002f12:	2300      	movs	r3, #0
 8002f14:	e00f      	b.n	8002f36 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d903      	bls.n	8002f28 <pb_read+0xc8>
        stream->bytes_left = 0;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	e005      	b.n	8002f34 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]

    return true;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	08002e29 	.word	0x08002e29
 8002f44:	080072c4 	.word	0x080072c4
 8002f48:	080072d4 	.word	0x080072d4

08002f4c <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <pb_readbyte+0x20>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	e000      	b.n	8002f6e <pb_readbyte+0x22>
 8002f6c:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <pb_readbyte+0x70>)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	60d3      	str	r3, [r2, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	e01d      	b.n	8002fb2 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	f083 0301 	eor.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <pb_readbyte+0x50>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	e000      	b.n	8002f9e <pb_readbyte+0x52>
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <pb_readbyte+0x74>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	60d3      	str	r3, [r2, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e005      	b.n	8002fb2 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
    
    return true;    
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	080072c4 	.word	0x080072c4
 8002fc0:	080072d4 	.word	0x080072d4

08002fc4 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8002fc4:	b490      	push	{r4, r7}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <pb_istream_from_buffer+0x38>)
 8002fd2:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	f107 0318 	add.w	r3, r7, #24
 8002fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc90      	pop	{r4, r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	08002e29 	.word	0x08002e29

08003000 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800300c:	f107 0315 	add.w	r3, r7, #21
 8003010:	4619      	mov	r1, r3
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff9a 	bl	8002f4c <pb_readbyte>
 8003018:	4603      	mov	r3, r0
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003038:	2300      	movs	r3, #0
 800303a:	e084      	b.n	8003146 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 800303c:	7d7b      	ldrb	r3, [r7, #21]
 800303e:	b25b      	sxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	db02      	blt.n	800304a <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003044:	7d7b      	ldrb	r3, [r7, #21]
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	e079      	b.n	800313e <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800304a:	2307      	movs	r3, #7
 800304c:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800304e:	7d7b      	ldrb	r3, [r7, #21]
 8003050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003054:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8003056:	f107 0315 	add.w	r3, r7, #21
 800305a:	4619      	mov	r1, r3
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff ff75 	bl	8002f4c <pb_readbyte>
 8003062:	4603      	mov	r3, r0
 8003064:	f083 0301 	eor.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <pb_decode_varint32_eof+0x72>
                return false;
 800306e:	2300      	movs	r3, #0
 8003070:	e069      	b.n	8003146 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b1f      	cmp	r3, #31
 8003076:	d92f      	bls.n	80030d8 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b3e      	cmp	r3, #62	@ 0x3e
 800307c:	d801      	bhi.n	8003082 <pb_decode_varint32_eof+0x82>
 800307e:	23ff      	movs	r3, #255	@ 0xff
 8003080:	e000      	b.n	8003084 <pb_decode_varint32_eof+0x84>
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003086:	7d7b      	ldrb	r3, [r7, #21]
 8003088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003090:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003092:	2b00      	cmp	r3, #0
 8003094:	da05      	bge.n	80030a2 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003096:	7d7b      	ldrb	r3, [r7, #21]
 8003098:	7dfa      	ldrb	r2, [r7, #23]
 800309a:	429a      	cmp	r2, r3
 800309c:	d101      	bne.n	80030a2 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <pb_decode_varint32_eof+0xa4>
 80030a2:	2300      	movs	r3, #0
 80030a4:	75bb      	strb	r3, [r7, #22]
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80030b2:	d805      	bhi.n	80030c0 <pb_decode_varint32_eof+0xc0>
 80030b4:	7dbb      	ldrb	r3, [r7, #22]
 80030b6:	f083 0301 	eor.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d037      	beq.n	8003130 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <pb_decode_varint32_eof+0xce>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	e000      	b.n	80030d0 <pb_decode_varint32_eof+0xd0>
 80030ce:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <pb_decode_varint32_eof+0x150>)
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	60d3      	str	r3, [r2, #12]
 80030d4:	2300      	movs	r3, #0
 80030d6:	e036      	b.n	8003146 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b1c      	cmp	r3, #28
 80030dc:	d11f      	bne.n	800311e <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 80030de:	7d7b      	ldrb	r3, [r7, #21]
 80030e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <pb_decode_varint32_eof+0x10a>
 80030e8:	7d7b      	ldrb	r3, [r7, #21]
 80030ea:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80030ee:	2b78      	cmp	r3, #120	@ 0x78
 80030f0:	d00b      	beq.n	800310a <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <pb_decode_varint32_eof+0x100>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	e000      	b.n	8003102 <pb_decode_varint32_eof+0x102>
 8003100:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <pb_decode_varint32_eof+0x150>)
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	60d3      	str	r3, [r2, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	e01d      	b.n	8003146 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 800310a:	7d7b      	ldrb	r3, [r7, #21]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	4313      	orrs	r3, r2
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	e008      	b.n	8003130 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800311e:	7d7b      	ldrb	r3, [r7, #21]
 8003120:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	3307      	adds	r3, #7
 8003134:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8003136:	7d7b      	ldrb	r3, [r7, #21]
 8003138:	b25b      	sxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	db8b      	blt.n	8003056 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	601a      	str	r2, [r3, #0]
   return true;
 8003144:	2301      	movs	r3, #1
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	080072e0 	.word	0x080072e0

08003154 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800315e:	2200      	movs	r2, #0
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff4c 	bl	8003000 <pb_decode_varint32_eof>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8003174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003178:	b08a      	sub	sp, #40	@ 0x28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8003190:	f107 0317 	add.w	r3, r7, #23
 8003194:	4619      	mov	r1, r3
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff fed8 	bl	8002f4c <pb_readbyte>
 800319c:	4603      	mov	r3, r0
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <pb_decode_varint+0x38>
            return false;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e041      	b.n	8003230 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80031b0:	d910      	bls.n	80031d4 <pb_decode_varint+0x60>
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <pb_decode_varint+0x56>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	e000      	b.n	80031cc <pb_decode_varint+0x58>
 80031ca:	4b1c      	ldr	r3, [pc, #112]	@ (800323c <pb_decode_varint+0xc8>)
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	60d3      	str	r3, [r2, #12]
 80031d0:	2300      	movs	r3, #0
 80031d2:	e02d      	b.n	8003230 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 80031e4:	f04f 0900 	mov.w	r9, #0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	f1a3 0120 	sub.w	r1, r3, #32
 80031ee:	f1c3 0220 	rsb	r2, r3, #32
 80031f2:	fa09 f503 	lsl.w	r5, r9, r3
 80031f6:	fa08 f101 	lsl.w	r1, r8, r1
 80031fa:	430d      	orrs	r5, r1
 80031fc:	fa28 f202 	lsr.w	r2, r8, r2
 8003200:	4315      	orrs	r5, r2
 8003202:	fa08 f403 	lsl.w	r4, r8, r3
 8003206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320a:	ea42 0a04 	orr.w	sl, r2, r4
 800320e:	ea43 0b05 	orr.w	fp, r3, r5
 8003212:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	3307      	adds	r3, #7
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	b25b      	sxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	dbb5      	blt.n	8003190 <pb_decode_varint+0x1c>
    
    *dest = result;
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322a:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	3728      	adds	r7, #40	@ 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800323a:	bf00      	nop
 800323c:	080072e0 	.word	0x080072e0

08003240 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003248:	f107 030f 	add.w	r3, r7, #15
 800324c:	2201      	movs	r2, #1
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff fe05 	bl	8002e60 <pb_read>
 8003256:	4603      	mov	r3, r0
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <pb_skip_varint+0x26>
            return false;
 8003262:	2300      	movs	r3, #0
 8003264:	e004      	b.n	8003270 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	b25b      	sxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	dbec      	blt.n	8003248 <pb_skip_varint+0x8>
    return true;
 800326e:	2301      	movs	r3, #1
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff64 	bl	8003154 <pb_decode_varint32>
 800328c:	4603      	mov	r3, r0
 800328e:	f083 0301 	eor.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <pb_skip_string+0x24>
        return false;
 8003298:	2300      	movs	r3, #0
 800329a:	e006      	b.n	80032aa <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	2100      	movs	r1, #0
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fddc 	bl	8002e60 <pb_read>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fe90 	bl	8003000 <pb_decode_varint32_eof>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f083 0301 	eor.w	r3, r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <pb_decode_tag+0x3e>
    {
        return false;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e00b      	b.n	8003308 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	08da      	lsrs	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	701a      	strb	r2, [r3, #0]
    return true;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d826      	bhi.n	8003370 <pb_skip_field+0x60>
 8003322:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <pb_skip_field+0x18>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003341 	.word	0x08003341
 800332c:	0800334b 	.word	0x0800334b
 8003330:	08003359 	.word	0x08003359
 8003334:	08003371 	.word	0x08003371
 8003338:	08003371 	.word	0x08003371
 800333c:	08003363 	.word	0x08003363
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff7d 	bl	8003240 <pb_skip_varint>
 8003346:	4603      	mov	r3, r0
 8003348:	e01d      	b.n	8003386 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800334a:	2208      	movs	r2, #8
 800334c:	2100      	movs	r1, #0
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fd86 	bl	8002e60 <pb_read>
 8003354:	4603      	mov	r3, r0
 8003356:	e016      	b.n	8003386 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff8d 	bl	8003278 <pb_skip_string>
 800335e:	4603      	mov	r3, r0
 8003360:	e011      	b.n	8003386 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8003362:	2204      	movs	r2, #4
 8003364:	2100      	movs	r1, #0
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fd7a 	bl	8002e60 <pb_read>
 800336c:	4603      	mov	r3, r0
 800336e:	e00a      	b.n	8003386 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <pb_skip_field+0x6e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	e000      	b.n	8003380 <pb_skip_field+0x70>
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <pb_skip_field+0x80>)
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	60d3      	str	r3, [r2, #12]
 8003384:	2300      	movs	r3, #0
    }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	080072f0 	.word	0x080072f0

08003394 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d03f      	beq.n	8003430 <read_raw_value+0x9c>
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	dc47      	bgt.n	8003444 <read_raw_value+0xb0>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <read_raw_value+0x2a>
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d02f      	beq.n	800341c <read_raw_value+0x88>
 80033bc:	e042      	b.n	8003444 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d20b      	bcs.n	80033f0 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <read_raw_value+0x52>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	e000      	b.n	80033e8 <read_raw_value+0x54>
 80033e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003464 <read_raw_value+0xd0>)
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	2300      	movs	r3, #0
 80033ee:	e034      	b.n	800345a <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 80033f0:	2201      	movs	r2, #1
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff fd33 	bl	8002e60 <pb_read>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f083 0301 	eor.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <read_raw_value+0x76>
                    return false;
 8003406:	2300      	movs	r3, #0
 8003408:	e027      	b.n	800345a <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b25b      	sxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	dbd5      	blt.n	80033c4 <read_raw_value+0x30>
            return true;
 8003418:	2301      	movs	r3, #1
 800341a:	e01e      	b.n	800345a <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2208      	movs	r2, #8
 8003420:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8003422:	2208      	movs	r2, #8
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fd1a 	bl	8002e60 <pb_read>
 800342c:	4603      	mov	r3, r0
 800342e:	e014      	b.n	800345a <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2204      	movs	r2, #4
 8003434:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8003436:	2204      	movs	r2, #4
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fd10 	bl	8002e60 <pb_read>
 8003440:	4603      	mov	r3, r0
 8003442:	e00a      	b.n	800345a <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <read_raw_value+0xbe>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	e000      	b.n	8003454 <read_raw_value+0xc0>
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <read_raw_value+0xd4>)
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	60d3      	str	r3, [r2, #12]
 8003458:	2300      	movs	r3, #0
    }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	080072e0 	.word	0x080072e0
 8003468:	080072f0 	.word	0x080072f0

0800346c <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fe69 	bl	8003154 <pb_decode_varint32>
 8003482:	4603      	mov	r3, r0
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <pb_make_string_substream+0x26>
        return false;
 800348e:	2300      	movs	r3, #0
 8003490:	e020      	b.n	80034d4 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4614      	mov	r4, r2
 8003498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800349a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d20b      	bcs.n	80034c0 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <pb_make_string_substream+0x4a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	e000      	b.n	80034b8 <pb_make_string_substream+0x4c>
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <pb_make_string_substream+0x70>)
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	60d3      	str	r3, [r2, #12]
 80034bc:	2300      	movs	r3, #0
 80034be:	e009      	b.n	80034d4 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
    return true;
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	08007304 	.word	0x08007304

080034e0 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	461a      	mov	r2, r3
 80034f8:	2100      	movs	r1, #0
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f7ff fcb0 	bl	8002e60 <pb_read>
 8003500:	4603      	mov	r3, r0
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <pb_close_string_substream+0x30>
            return false;
 800350c:	2300      	movs	r3, #0
 800350e:	e008      	b.n	8003522 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	460b      	mov	r3, r1
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7d9b      	ldrb	r3, [r3, #22]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	2b0b      	cmp	r3, #11
 8003544:	f200 80d4 	bhi.w	80036f0 <decode_basic_field+0x1c4>
 8003548:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <decode_basic_field+0x24>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003581 	.word	0x08003581
 8003554:	080035b1 	.word	0x080035b1
 8003558:	080035b1 	.word	0x080035b1
 800355c:	080035b1 	.word	0x080035b1
 8003560:	080035e1 	.word	0x080035e1
 8003564:	08003615 	.word	0x08003615
 8003568:	08003649 	.word	0x08003649
 800356c:	08003673 	.word	0x08003673
 8003570:	0800369d 	.word	0x0800369d
 8003574:	0800369d 	.word	0x0800369d
 8003578:	080036f1 	.word	0x080036f1
 800357c:	080036c7 	.word	0x080036c7
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003580:	7afb      	ldrb	r3, [r7, #11]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <decode_basic_field+0x78>
 8003586:	7afb      	ldrb	r3, [r7, #11]
 8003588:	2bff      	cmp	r3, #255	@ 0xff
 800358a:	d00b      	beq.n	80035a4 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <decode_basic_field+0x6e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	e000      	b.n	800359c <decode_basic_field+0x70>
 800359a:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <decode_basic_field+0x1e4>)
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	2300      	movs	r3, #0
 80035a2:	e0b0      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fef6 	bl	8004398 <pb_dec_bool>
 80035ac:	4603      	mov	r3, r0
 80035ae:	e0aa      	b.n	8003706 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80035b0:	7afb      	ldrb	r3, [r7, #11]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <decode_basic_field+0xa8>
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	2bff      	cmp	r3, #255	@ 0xff
 80035ba:	d00b      	beq.n	80035d4 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <decode_basic_field+0x9e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	e000      	b.n	80035cc <decode_basic_field+0xa0>
 80035ca:	4b51      	ldr	r3, [pc, #324]	@ (8003710 <decode_basic_field+0x1e4>)
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	60d3      	str	r3, [r2, #12]
 80035d0:	2300      	movs	r3, #0
 80035d2:	e098      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 feee 	bl	80043b8 <pb_dec_varint>
 80035dc:	4603      	mov	r3, r0
 80035de:	e092      	b.n	8003706 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d00e      	beq.n	8003604 <decode_basic_field+0xd8>
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	2bff      	cmp	r3, #255	@ 0xff
 80035ea:	d00b      	beq.n	8003604 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <decode_basic_field+0xce>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	e000      	b.n	80035fc <decode_basic_field+0xd0>
 80035fa:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <decode_basic_field+0x1e4>)
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	60d3      	str	r3, [r2, #12]
 8003600:	2300      	movs	r3, #0
 8003602:	e080      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4619      	mov	r1, r3
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fe8a 	bl	8004324 <pb_decode_fixed32>
 8003610:	4603      	mov	r3, r0
 8003612:	e078      	b.n	8003706 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8003614:	7afb      	ldrb	r3, [r7, #11]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d00e      	beq.n	8003638 <decode_basic_field+0x10c>
 800361a:	7afb      	ldrb	r3, [r7, #11]
 800361c:	2bff      	cmp	r3, #255	@ 0xff
 800361e:	d00b      	beq.n	8003638 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <decode_basic_field+0x102>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	e000      	b.n	8003630 <decode_basic_field+0x104>
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <decode_basic_field+0x1e4>)
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	2300      	movs	r3, #0
 8003636:	e066      	b.n	8003706 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4619      	mov	r1, r3
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fe8c 	bl	800435c <pb_decode_fixed64>
 8003644:	4603      	mov	r3, r0
 8003646:	e05e      	b.n	8003706 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d00b      	beq.n	8003666 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <decode_basic_field+0x130>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	e000      	b.n	800365e <decode_basic_field+0x132>
 800365c:	4b2c      	ldr	r3, [pc, #176]	@ (8003710 <decode_basic_field+0x1e4>)
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	60d3      	str	r3, [r2, #12]
 8003662:	2300      	movs	r3, #0
 8003664:	e04f      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 ffd1 	bl	8004610 <pb_dec_bytes>
 800366e:	4603      	mov	r3, r0
 8003670:	e049      	b.n	8003706 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8003672:	7afb      	ldrb	r3, [r7, #11]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d00b      	beq.n	8003690 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <decode_basic_field+0x15a>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	e000      	b.n	8003688 <decode_basic_field+0x15c>
 8003686:	4b22      	ldr	r3, [pc, #136]	@ (8003710 <decode_basic_field+0x1e4>)
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	60d3      	str	r3, [r2, #12]
 800368c:	2300      	movs	r3, #0
 800368e:	e03a      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f001 f830 	bl	80046f8 <pb_dec_string>
 8003698:	4603      	mov	r3, r0
 800369a:	e034      	b.n	8003706 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 800369c:	7afb      	ldrb	r3, [r7, #11]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d00b      	beq.n	80036ba <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <decode_basic_field+0x184>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	e000      	b.n	80036b2 <decode_basic_field+0x186>
 80036b0:	4b17      	ldr	r3, [pc, #92]	@ (8003710 <decode_basic_field+0x1e4>)
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	60d3      	str	r3, [r2, #12]
 80036b6:	2300      	movs	r3, #0
 80036b8:	e025      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f001 f897 	bl	80047f0 <pb_dec_submessage>
 80036c2:	4603      	mov	r3, r0
 80036c4:	e01f      	b.n	8003706 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d00b      	beq.n	80036e4 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <decode_basic_field+0x1ae>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	e000      	b.n	80036dc <decode_basic_field+0x1b0>
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <decode_basic_field+0x1e4>)
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	2300      	movs	r3, #0
 80036e2:	e010      	b.n	8003706 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f001 f90c 	bl	8004904 <pb_dec_fixed_length_bytes>
 80036ec:	4603      	mov	r3, r0
 80036ee:	e00a      	b.n	8003706 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <decode_basic_field+0x1d2>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	e000      	b.n	8003700 <decode_basic_field+0x1d4>
 80036fe:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <decode_basic_field+0x1e8>)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	2300      	movs	r3, #0
    }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	0800731c 	.word	0x0800731c
 8003714:	0800732c 	.word	0x0800732c

08003718 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b096      	sub	sp, #88	@ 0x58
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	460b      	mov	r3, r1
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7d9b      	ldrb	r3, [r3, #22]
 800372a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800372e:	2b30      	cmp	r3, #48	@ 0x30
 8003730:	f000 80c2 	beq.w	80038b8 <decode_static_field+0x1a0>
 8003734:	2b30      	cmp	r3, #48	@ 0x30
 8003736:	f200 811a 	bhi.w	800396e <decode_static_field+0x256>
 800373a:	2b20      	cmp	r3, #32
 800373c:	d01f      	beq.n	800377e <decode_static_field+0x66>
 800373e:	2b20      	cmp	r3, #32
 8003740:	f200 8115 	bhi.w	800396e <decode_static_field+0x256>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <decode_static_field+0x36>
 8003748:	2b10      	cmp	r3, #16
 800374a:	d008      	beq.n	800375e <decode_static_field+0x46>
 800374c:	e10f      	b.n	800396e <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4619      	mov	r1, r3
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fee9 	bl	800352c <decode_basic_field>
 800375a:	4603      	mov	r3, r0
 800375c:	e112      	b.n	8003984 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 800376e:	7afb      	ldrb	r3, [r7, #11]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff fed9 	bl	800352c <decode_basic_field>
 800377a:	4603      	mov	r3, r0
 800377c:	e102      	b.n	8003984 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d16c      	bne.n	800385e <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7d9b      	ldrb	r3, [r3, #22]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	2b05      	cmp	r3, #5
 800378e:	d866      	bhi.n	800385e <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	8a52      	ldrh	r2, [r2, #18]
 80037a4:	4611      	mov	r1, r2
 80037a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037a8:	8812      	ldrh	r2, [r2, #0]
 80037aa:	fb01 f202 	mul.w	r2, r1, r2
 80037ae:	441a      	add	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80037b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037b8:	4619      	mov	r1, r3
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fe56 	bl	800346c <pb_make_string_substream>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01f      	beq.n	800380c <decode_static_field+0xf4>
                    return false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e0d9      	b.n	8003984 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 80037d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	21ff      	movs	r1, #255	@ 0xff
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fea7 	bl	800352c <decode_basic_field>
 80037de:	4603      	mov	r3, r0
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <decode_static_field+0xda>
                    {
                        status = false;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 80037f0:	e015      	b.n	800381e <decode_static_field+0x106>
                    }
                    (*size)++;
 80037f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fc:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	8a52      	ldrh	r2, [r2, #18]
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 800380c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <decode_static_field+0x106>
 8003812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8a9b      	ldrh	r3, [r3, #20]
 800381a:	429a      	cmp	r2, r3
 800381c:	d3d8      	bcc.n	80037d0 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 800381e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <decode_static_field+0x11a>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	e000      	b.n	8003834 <decode_static_field+0x11c>
 8003832:	4b56      	ldr	r3, [pc, #344]	@ (800398c <decode_static_field+0x274>)
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	60d3      	str	r3, [r2, #12]
 8003838:	2300      	movs	r3, #0
 800383a:	e0a3      	b.n	8003984 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 800383c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003840:	4619      	mov	r1, r3
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fe4c 	bl	80034e0 <pb_close_string_substream>
 8003848:	4603      	mov	r3, r0
 800384a:	f083 0301 	eor.w	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <decode_static_field+0x140>
                    return false;
 8003854:	2300      	movs	r3, #0
 8003856:	e095      	b.n	8003984 <decode_static_field+0x26c>

                return status;
 8003858:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800385c:	e092      	b.n	8003984 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	8a52      	ldrh	r2, [r2, #18]
 800386c:	4611      	mov	r1, r2
 800386e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	fb01 f202 	mul.w	r2, r1, r2
 8003876:	441a      	add	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 800387c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	b291      	uxth	r1, r2
 8003884:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003886:	8011      	strh	r1, [r2, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	8a92      	ldrh	r2, [r2, #20]
 800388c:	4293      	cmp	r3, r2
 800388e:	d30b      	bcc.n	80038a8 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <decode_static_field+0x186>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	e000      	b.n	80038a0 <decode_static_field+0x188>
 800389e:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <decode_static_field+0x274>)
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	60d3      	str	r3, [r2, #12]
 80038a4:	2300      	movs	r3, #0
 80038a6:	e06d      	b.n	8003984 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4619      	mov	r1, r3
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fe3c 	bl	800352c <decode_basic_field>
 80038b4:	4603      	mov	r3, r0
 80038b6:	e065      	b.n	8003984 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	7d9b      	ldrb	r3, [r3, #22]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d005      	beq.n	80038d0 <decode_static_field+0x1b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7d9b      	ldrb	r3, [r3, #22]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d141      	bne.n	8003954 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80038da:	429a      	cmp	r2, r3
 80038dc:	d03a      	beq.n	8003954 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69d8      	ldr	r0, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8a5b      	ldrh	r3, [r3, #18]
 80038e6:	461a      	mov	r2, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	f003 facb 	bl	8006e84 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d022      	beq.n	8003954 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4618      	mov	r0, r3
 800391c:	f002 fe99 	bl	8006652 <pb_field_iter_begin>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fa4d 	bl	8003dca <pb_message_set_to_defaults>
 8003930:	4603      	mov	r3, r0
 8003932:	f083 0301 	eor.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <decode_static_field+0x232>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	e000      	b.n	800394c <decode_static_field+0x234>
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <decode_static_field+0x278>)
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	60d3      	str	r3, [r2, #12]
 8003950:	2300      	movs	r3, #0
 8003952:	e017      	b.n	8003984 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	8a12      	ldrh	r2, [r2, #16]
 800395c:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fde1 	bl	800352c <decode_basic_field>
 800396a:	4603      	mov	r3, r0
 800396c:	e00a      	b.n	8003984 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <decode_static_field+0x264>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	e000      	b.n	800397e <decode_static_field+0x266>
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <decode_static_field+0x27c>)
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	2300      	movs	r3, #0
    }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3758      	adds	r7, #88	@ 0x58
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	08007340 	.word	0x08007340
 8003990:	08007350 	.word	0x08007350
 8003994:	0800732c 	.word	0x0800732c

08003998 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	460b      	mov	r3, r1
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <decode_pointer_field+0x1c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	e000      	b.n	80039b6 <decode_pointer_field+0x1e>
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <decode_pointer_field+0x30>)
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	60d3      	str	r3, [r2, #12]
 80039ba:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	08007368 	.word	0x08007368

080039cc <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b097      	sub	sp, #92	@ 0x5c
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	61f8      	str	r0, [r7, #28]
 80039d4:	460b      	mov	r3, r1
 80039d6:	617a      	str	r2, [r7, #20]
 80039d8:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 80039e4:	7efb      	ldrb	r3, [r7, #27]
 80039e6:	4619      	mov	r1, r3
 80039e8:	69f8      	ldr	r0, [r7, #28]
 80039ea:	f7ff fc91 	bl	8003310 <pb_skip_field>
 80039ee:	4603      	mov	r3, r0
 80039f0:	e070      	b.n	8003ad4 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 80039f2:	7efb      	ldrb	r3, [r7, #27]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d145      	bne.n	8003a84 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 80039f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039fc:	4619      	mov	r1, r3
 80039fe:	69f8      	ldr	r0, [r7, #28]
 8003a00:	f7ff fd34 	bl	800346c <pb_make_string_substream>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f083 0301 	eor.w	r3, r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <decode_callback_field+0x48>
            return false;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e05f      	b.n	8003ad4 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a16:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4798      	blx	r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f083 0301 	eor.w	r3, r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <decode_callback_field+0x76>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	e005      	b.n	8003a4e <decode_callback_field+0x82>
 8003a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <decode_callback_field+0x80>
 8003a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a4a:	e000      	b.n	8003a4e <decode_callback_field+0x82>
 8003a4c:	4b23      	ldr	r3, [pc, #140]	@ (8003adc <decode_callback_field+0x110>)
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	60d3      	str	r3, [r2, #12]
                return false;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e03e      	b.n	8003ad4 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8003a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <decode_callback_field+0x98>
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d8d7      	bhi.n	8003a14 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8003a64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003a68:	4619      	mov	r1, r3
 8003a6a:	69f8      	ldr	r0, [r7, #28]
 8003a6c:	f7ff fd38 	bl	80034e0 <pb_close_string_substream>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f083 0301 	eor.w	r3, r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <decode_callback_field+0xb4>
            return false;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e029      	b.n	8003ad4 <decode_callback_field+0x108>

        return true;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e027      	b.n	8003ad4 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003a84:	230a      	movs	r3, #10
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a90:	7ef9      	ldrb	r1, [r7, #27]
 8003a92:	69f8      	ldr	r0, [r7, #28]
 8003a94:	f7ff fc7e 	bl	8003394 <read_raw_value>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f083 0301 	eor.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <decode_callback_field+0xdc>
            return false;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e015      	b.n	8003ad4 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aaa:	463b      	mov	r3, r7
 8003aac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fa87 	bl	8002fc4 <pb_istream_from_buffer>
 8003ab6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003aba:	463b      	mov	r3, r7
 8003abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003abe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4798      	blx	r3
 8003ad2:	4603      	mov	r3, r0
    }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	375c      	adds	r7, #92	@ 0x5c
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd90      	pop	{r4, r7, pc}
 8003adc:	0800737c 	.word	0x0800737c

08003ae0 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7d9b      	ldrb	r3, [r3, #22]
 8003af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d00e      	beq.n	8003b18 <decode_field+0x38>
 8003afa:	2b80      	cmp	r3, #128	@ 0x80
 8003afc:	d81c      	bhi.n	8003b38 <decode_field+0x58>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <decode_field+0x28>
 8003b02:	2b40      	cmp	r3, #64	@ 0x40
 8003b04:	d010      	beq.n	8003b28 <decode_field+0x48>
 8003b06:	e017      	b.n	8003b38 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff fe02 	bl	8003718 <decode_static_field>
 8003b14:	4603      	mov	r3, r0
 8003b16:	e01a      	b.n	8003b4e <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff ff3a 	bl	8003998 <decode_pointer_field>
 8003b24:	4603      	mov	r3, r0
 8003b26:	e012      	b.n	8003b4e <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8003b28:	7afb      	ldrb	r3, [r7, #11]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff ff4c 	bl	80039cc <decode_callback_field>
 8003b34:	4603      	mov	r3, r0
 8003b36:	e00a      	b.n	8003b4e <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <decode_field+0x66>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	e000      	b.n	8003b48 <decode_field+0x68>
 8003b46:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <decode_field+0x78>)
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	60d3      	str	r3, [r2, #12]
 8003b4c:	2300      	movs	r3, #0
    }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	0800732c 	.word	0x0800732c

08003b5c <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	@ 0x38
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f002 fd87 	bl	8006684 <pb_field_iter_begin_extension>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <default_extension_decoder+0x34>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	e000      	b.n	8003b92 <default_extension_decoder+0x36>
 8003b90:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <default_extension_decoder+0x70>)
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	60d3      	str	r3, [r2, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	e014      	b.n	8003bc4 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8003b9a:	8c3b      	ldrh	r3, [r7, #32]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d102      	bne.n	8003baa <default_extension_decoder+0x4e>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <default_extension_decoder+0x52>
        return true;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00a      	b.n	8003bc4 <default_extension_decoder+0x68>

    extension->found = true;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8003bb4:	f107 0210 	add.w	r2, r7, #16
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff ff8f 	bl	8003ae0 <decode_field>
 8003bc2:	4603      	mov	r3, r0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3738      	adds	r7, #56	@ 0x38
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	0800738c 	.word	0x0800738c

08003bd0 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8003be6:	e022      	b.n	8003c2e <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681c      	ldr	r4, [r3, #0]
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	47a0      	blx	r4
 8003c02:	4603      	mov	r3, r0
 8003c04:	75fb      	strb	r3, [r7, #23]
 8003c06:	e007      	b.n	8003c18 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	6839      	ldr	r1, [r7, #0]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff ffa4 	bl	8003b5c <default_extension_decoder>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	f083 0301 	eor.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <decode_extension+0x58>
            return false;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e00b      	b.n	8003c40 <decode_extension+0x70>
        
        extension = extension->next;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <decode_extension+0x6e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d0d4      	beq.n	8003be8 <decode_extension+0x18>
    }
    
    return true;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	@ 0x38
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7d9b      	ldrb	r3, [r3, #22]
 8003c54:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8003c58:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	2b0a      	cmp	r3, #10
 8003c62:	d124      	bne.n	8003cae <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8003c6c:	e01b      	b.n	8003ca6 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c74:	4618      	mov	r0, r3
 8003c76:	f002 fd05 	bl	8006684 <pb_field_iter_begin_extension>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00f      	beq.n	8003ca0 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8003c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c82:	2200      	movs	r2, #0
 8003c84:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f89d 	bl	8003dca <pb_message_set_to_defaults>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <pb_field_set_to_default+0x58>
                    return false;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e090      	b.n	8003dc2 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e0      	bne.n	8003c6e <pb_field_set_to_default+0x26>
 8003cac:	e088      	b.n	8003dc0 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8003cae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003cb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d166      	bne.n	8003d88 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8003cc0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d108      	bne.n	8003cde <pb_field_set_to_default+0x96>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e012      	b.n	8003d04 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003cde:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003ce2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d005      	beq.n	8003cf6 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8003cea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003cee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003cf2:	2b30      	cmp	r3, #48	@ 0x30
 8003cf4:	d106      	bne.n	8003d04 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8003d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d059      	beq.n	8003dc0 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	7d9b      	ldrb	r3, [r3, #22]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d005      	beq.n	8003d24 <pb_field_set_to_default+0xdc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7d9b      	ldrb	r3, [r3, #22]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d128      	bne.n	8003d76 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d018      	beq.n	8003d76 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	4618      	mov	r0, r3
 8003d52:	f002 fc7e 	bl	8006652 <pb_field_iter_begin>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d030      	beq.n	8003dbe <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8003d5c:	f107 0308 	add.w	r3, r7, #8
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f832 	bl	8003dca <pb_message_set_to_defaults>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f083 0301 	eor.w	r3, r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d025      	beq.n	8003dbe <pb_field_set_to_default+0x176>
                        return false;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e025      	b.n	8003dc2 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69d8      	ldr	r0, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8a5b      	ldrh	r3, [r3, #18]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2100      	movs	r1, #0
 8003d82:	f003 f87f 	bl	8006e84 <memset>
 8003d86:	e01b      	b.n	8003dc0 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8003d88:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003d8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d115      	bne.n	8003dc0 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003d9c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003da0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d005      	beq.n	8003db4 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8003da8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003dac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003db0:	2b30      	cmp	r3, #48	@ 0x30
 8003db2:	d105      	bne.n	8003dc0 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e000      	b.n	8003dc0 <pb_field_set_to_default+0x178>
            {
 8003dbe:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3738      	adds	r7, #56	@ 0x38
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8003dca:	b590      	push	{r4, r7, lr}
 8003dcc:	b08d      	sub	sp, #52	@ 0x34
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8003dd2:	f107 0320 	add.w	r3, r7, #32
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8003de4:	2300      	movs	r3, #0
 8003de6:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d020      	beq.n	8003e34 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
 8003df8:	463b      	mov	r3, r7
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f8e0 	bl	8002fc4 <pb_istream_from_buffer>
 8003e04:	f107 0420 	add.w	r4, r7, #32
 8003e08:	463b      	mov	r3, r7
 8003e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8003e10:	f107 031a 	add.w	r3, r7, #26
 8003e14:	f107 021c 	add.w	r2, r7, #28
 8003e18:	f107 011b 	add.w	r1, r7, #27
 8003e1c:	f107 0020 	add.w	r0, r7, #32
 8003e20:	f7ff fa47 	bl	80032b2 <pb_decode_tag>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f083 0301 	eor.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <pb_message_set_to_defaults+0x6a>
            return false;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e043      	b.n	8003ebc <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f7ff ff07 	bl	8003c48 <pb_field_set_to_default>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <pb_message_set_to_defaults+0x80>
            return false;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e038      	b.n	8003ebc <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02e      	beq.n	8003eae <pb_message_set_to_defaults+0xe4>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	8a1b      	ldrh	r3, [r3, #16]
 8003e54:	461a      	mov	r2, r3
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d128      	bne.n	8003eae <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8003e5c:	7ef9      	ldrb	r1, [r7, #27]
 8003e5e:	f107 0320 	add.w	r3, r7, #32
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fe3b 	bl	8003ae0 <decode_field>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <pb_message_set_to_defaults+0xb0>
                return false;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e020      	b.n	8003ebc <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8003e7a:	f107 031a 	add.w	r3, r7, #26
 8003e7e:	f107 021c 	add.w	r2, r7, #28
 8003e82:	f107 011b 	add.w	r1, r7, #27
 8003e86:	f107 0020 	add.w	r0, r7, #32
 8003e8a:	f7ff fa12 	bl	80032b2 <pb_decode_tag>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <pb_message_set_to_defaults+0xd4>
                return false;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e00e      	b.n	8003ebc <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f002 fc18 	bl	80066e4 <pb_field_iter_next>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1bc      	bne.n	8003e34 <pb_message_set_to_defaults+0x6a>

    return true;
 8003eba:	2301      	movs	r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3734      	adds	r7, #52	@ 0x34
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}

08003ec4 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b09a      	sub	sp, #104	@ 0x68
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8003eda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ede:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8003eee:	2300      	movs	r3, #0
 8003ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003efa:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8003efc:	f107 0318 	add.w	r3, r7, #24
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 fba4 	bl	8006652 <pb_field_iter_begin>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8102 	beq.w	8004116 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 80fc 	bne.w	8004116 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8003f1e:	f107 0318 	add.w	r3, r7, #24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff51 	bl	8003dca <pb_message_set_to_defaults>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f083 0301 	eor.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80f0 	beq.w	8004116 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <pb_decode_inner+0x80>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	e000      	b.n	8003f46 <pb_decode_inner+0x82>
 8003f44:	4b99      	ldr	r3, [pc, #612]	@ (80041ac <pb_decode_inner+0x2e8>)
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	60d3      	str	r3, [r2, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e16d      	b.n	800422a <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8003f4e:	f107 0312 	add.w	r3, r7, #18
 8003f52:	f107 0214 	add.w	r2, r7, #20
 8003f56:	f107 0113 	add.w	r1, r7, #19
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff f9a9 	bl	80032b2 <pb_decode_tag>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f083 0301 	eor.w	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <pb_decode_inner+0xb4>
        {
            if (eof)
 8003f6c:	7cbb      	ldrb	r3, [r7, #18]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 80d7 	bne.w	8004122 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e158      	b.n	800422a <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d111      	bne.n	8003fa2 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 80ce 	bne.w	8004126 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <pb_decode_inner+0xd4>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	e000      	b.n	8003f9a <pb_decode_inner+0xd6>
 8003f98:	4b85      	ldr	r3, [pc, #532]	@ (80041b0 <pb_decode_inner+0x2ec>)
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	60d3      	str	r3, [r2, #12]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e143      	b.n	800422a <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	f107 0318 	add.w	r3, r7, #24
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 fbaf 	bl	800670e <pb_field_iter_find>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f083 0301 	eor.w	r3, r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <pb_decode_inner+0x104>
 8003fbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	2b0a      	cmp	r3, #10
 8003fc6:	d13c      	bne.n	8004042 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8003fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d112      	bne.n	8003ff4 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8003fce:	f107 0318 	add.w	r3, r7, #24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 fbf1 	bl	80067ba <pb_field_iter_find_extension>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8003fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8003fe4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fe6:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8003fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ff2:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d815      	bhi.n	8004028 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	7cfa      	ldrb	r2, [r7, #19]
 8004006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fde1 	bl	8003bd0 <decode_extension>
 800400e:	4603      	mov	r3, r0
 8004010:	f083 0301 	eor.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <pb_decode_inner+0x15a>
                    return false;
 800401a:	2300      	movs	r3, #0
 800401c:	e105      	b.n	800422a <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004024:	429a      	cmp	r2, r3
 8004026:	d173      	bne.n	8004110 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	4619      	mov	r1, r3
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff f96f 	bl	8003310 <pb_skip_field>
 8004032:	4603      	mov	r3, r0
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d06a      	beq.n	8004114 <pb_decode_inner+0x250>
                return false;
 800403e:	2300      	movs	r3, #0
 8004040:	e0f3      	b.n	800422a <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8004042:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004046:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800404a:	2b20      	cmp	r3, #32
 800404c:	d12e      	bne.n	80040ac <pb_decode_inner+0x1e8>
 800404e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004050:	f107 0318 	add.w	r3, r7, #24
 8004054:	3314      	adds	r3, #20
 8004056:	429a      	cmp	r2, r3
 8004058:	d128      	bne.n	80040ac <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 800405a:	8c3b      	ldrh	r3, [r7, #32]
 800405c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8004060:	429a      	cmp	r2, r3
 8004062:	d020      	beq.n	80040a6 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8004064:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004068:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800406c:	4293      	cmp	r3, r2
 800406e:	d011      	beq.n	8004094 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8004070:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8004074:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004078:	429a      	cmp	r2, r3
 800407a:	d00b      	beq.n	8004094 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <pb_decode_inner+0x1c6>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	e000      	b.n	800408c <pb_decode_inner+0x1c8>
 800408a:	4b4a      	ldr	r3, [pc, #296]	@ (80041b4 <pb_decode_inner+0x2f0>)
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	60d3      	str	r3, [r2, #12]
 8004090:	2300      	movs	r3, #0
 8004092:	e0ca      	b.n	800422a <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8004094:	8c3b      	ldrh	r3, [r7, #32]
 8004096:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 80040a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80040a2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 80040a6:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 80040ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d11c      	bne.n	80040f2 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80040b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80040bc:	d819      	bhi.n	80040f2 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80040be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	2201      	movs	r2, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 80040cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	3368      	adds	r3, #104	@ 0x68
 80040d6:	443b      	add	r3, r7
 80040d8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80040dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e6:	431a      	orrs	r2, r3
 80040e8:	008b      	lsls	r3, r1, #2
 80040ea:	3368      	adds	r3, #104	@ 0x68
 80040ec:	443b      	add	r3, r7
 80040ee:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	f107 0218 	add.w	r2, r7, #24
 80040f8:	4619      	mov	r1, r3
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fcf0 	bl	8003ae0 <decode_field>
 8004100:	4603      	mov	r3, r0
 8004102:	f083 0301 	eor.w	r3, r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <pb_decode_inner+0x252>
            return false;
 800410c:	2300      	movs	r3, #0
 800410e:	e08c      	b.n	800422a <pb_decode_inner+0x366>
                    continue;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <pb_decode_inner+0x252>
            continue;
 8004114:	bf00      	nop
    while (stream->bytes_left)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f47f af17 	bne.w	8003f4e <pb_decode_inner+0x8a>
 8004120:	e002      	b.n	8004128 <pb_decode_inner+0x264>
                break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <pb_decode_inner+0x264>
            break;
 8004126:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004128:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800412c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004130:	4293      	cmp	r3, r2
 8004132:	d011      	beq.n	8004158 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004138:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800413c:	429a      	cmp	r2, r3
 800413e:	d00b      	beq.n	8004158 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <pb_decode_inner+0x28a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	e000      	b.n	8004150 <pb_decode_inner+0x28c>
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <pb_decode_inner+0x2f0>)
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	60d3      	str	r3, [r2, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	e068      	b.n	800422a <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	8a5b      	ldrh	r3, [r3, #18]
 800415c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8004160:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05f      	beq.n	8004228 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004168:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d902      	bls.n	8004176 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004170:	2340      	movs	r3, #64	@ 0x40
 8004172:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8004176:	2300      	movs	r3, #0
 8004178:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800417c:	e023      	b.n	80041c6 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800417e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	3368      	adds	r3, #104	@ 0x68
 8004186:	443b      	add	r3, r7
 8004188:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800418c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800418e:	429a      	cmp	r2, r3
 8004190:	d014      	beq.n	80041bc <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <pb_decode_inner+0x2dc>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	e000      	b.n	80041a2 <pb_decode_inner+0x2de>
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <pb_decode_inner+0x2f4>)
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	60d3      	str	r3, [r2, #12]
 80041a6:	2300      	movs	r3, #0
 80041a8:	e03f      	b.n	800422a <pb_decode_inner+0x366>
 80041aa:	bf00      	nop
 80041ac:	08007350 	.word	0x08007350
 80041b0:	080073a0 	.word	0x080073a0
 80041b4:	080073ac 	.word	0x080073ac
 80041b8:	080073d0 	.word	0x080073d0
            for (i = 0; i < (req_field_count >> 5); i++)
 80041bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041c0:	3301      	adds	r3, #1
 80041c2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80041c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d3d3      	bcc.n	800417e <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 80041d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80041e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	3368      	adds	r3, #104	@ 0x68
 80041ee:	443b      	add	r3, r7
 80041f0:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 80041f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f1c3 0320 	rsb	r3, r3, #32
 8004204:	b2db      	uxtb	r3, r3
 8004206:	4619      	mov	r1, r3
 8004208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420a:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800420c:	429a      	cmp	r2, r3
 800420e:	d00b      	beq.n	8004228 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <pb_decode_inner+0x35a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	e000      	b.n	8004220 <pb_decode_inner+0x35c>
 800421e:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <pb_decode_inner+0x370>)
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004228:	2301      	movs	r3, #1
}
 800422a:	4618      	mov	r0, r3
 800422c:	3768      	adds	r7, #104	@ 0x68
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	080073d0 	.word	0x080073d0

08004238 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004244:	2300      	movs	r3, #0
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fe3a 	bl	8003ec4 <pb_decode_inner>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe ff70 	bl	8003154 <pb_decode_varint32>
 8004274:	4603      	mov	r3, r0
 8004276:	f083 0301 	eor.w	r3, r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <pb_decode_bool+0x26>
        return false;
 8004280:	2300      	movs	r3, #0
 8004282:	e008      	b.n	8004296 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2da      	uxtb	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	701a      	strb	r2, [r3, #0]
    return true;
 8004294:	2301      	movs	r3, #1
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800429e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fe ff5f 	bl	8003174 <pb_decode_varint>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f083 0301 	eor.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <pb_decode_svarint+0x28>
        return false;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e029      	b.n	800431a <pb_decode_svarint+0x7c>
    
    if (value & 1)
 80042c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ca:	f002 0401 	and.w	r4, r2, #1
 80042ce:	2500      	movs	r5, #0
 80042d0:	ea54 0305 	orrs.w	r3, r4, r5
 80042d4:	d013      	beq.n	80042fe <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 80042d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	0842      	lsrs	r2, r0, #1
 80042e4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80042e8:	084b      	lsrs	r3, r1, #1
 80042ea:	ea6f 0802 	mvn.w	r8, r2
 80042ee:	ea6f 0903 	mvn.w	r9, r3
 80042f2:	4642      	mov	r2, r8
 80042f4:	464b      	mov	r3, r9
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	e9c1 2300 	strd	r2, r3, [r1]
 80042fc:	e00c      	b.n	8004318 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 80042fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	0842      	lsrs	r2, r0, #1
 800430c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004310:	084b      	lsrs	r3, r1, #1
 8004312:	6839      	ldr	r1, [r7, #0]
 8004314:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004324 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	2204      	movs	r2, #4
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fe fd92 	bl	8002e60 <pb_read>
 800433c:	4603      	mov	r3, r0
 800433e:	f083 0301 	eor.w	r3, r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <pb_decode_fixed32+0x28>
        return false;
 8004348:	2300      	movs	r3, #0
 800434a:	e003      	b.n	8004354 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8004352:	2301      	movs	r3, #1
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8004366:	f107 0308 	add.w	r3, r7, #8
 800436a:	2208      	movs	r2, #8
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe fd76 	bl	8002e60 <pb_read>
 8004374:	4603      	mov	r3, r0
 8004376:	f083 0301 	eor.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <pb_decode_fixed64+0x28>
        return false;
 8004380:	2300      	movs	r3, #0
 8004382:	e005      	b.n	8004390 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8004384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800438e:	2301      	movs	r3, #1
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4619      	mov	r1, r3
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ff58 	bl	800425e <pb_decode_bool>
 80043ae:	4603      	mov	r3, r0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b094      	sub	sp, #80	@ 0x50
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80043c2:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	7d9b      	ldrb	r3, [r3, #22]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d179      	bne.n	80044c4 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 80043d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80043d4:	4619      	mov	r1, r3
 80043d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043d8:	f7fe fecc 	bl	8003174 <pb_decode_varint>
 80043dc:	4603      	mov	r3, r0
 80043de:	f083 0301 	eor.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <pb_dec_varint+0x34>
            return false;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e107      	b.n	80045fc <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	8a5b      	ldrh	r3, [r3, #18]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d10a      	bne.n	800440a <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	69d9      	ldr	r1, [r3, #28]
 80043f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043fc:	e9c1 2300 	strd	r2, r3, [r1]
 8004400:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004404:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8004408:	e046      	b.n	8004498 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	8a5b      	ldrh	r3, [r3, #18]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d10e      	bne.n	8004430 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8004412:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4602      	mov	r2, r0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	617a      	str	r2, [r7, #20]
 8004426:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800442a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800442e:	e033      	b.n	8004498 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	8a5b      	ldrh	r3, [r3, #18]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d10f      	bne.n	8004458 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8004438:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	b282      	uxth	r2, r0
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	2200      	movs	r2, #0
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	60fa      	str	r2, [r7, #12]
 800444e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004452:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8004456:	e01f      	b.n	8004498 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	8a5b      	ldrh	r3, [r3, #18]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10f      	bne.n	8004480 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8004460:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	b2c2      	uxtb	r2, r0
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2200      	movs	r2, #0
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	e9d7 3400 	ldrd	r3, r4, [r7]
 800447a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800447e:	e00b      	b.n	8004498 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <pb_dec_varint+0xd6>
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	e000      	b.n	8004490 <pb_dec_varint+0xd8>
 800448e:	4b5e      	ldr	r3, [pc, #376]	@ (8004608 <pb_dec_varint+0x250>)
 8004490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004492:	60d3      	str	r3, [r2, #12]
 8004494:	2300      	movs	r3, #0
 8004496:	e0b1      	b.n	80045fc <pb_dec_varint+0x244>

        if (clamped != value)
 8004498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800449c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80044a0:	4299      	cmp	r1, r3
 80044a2:	bf08      	it	eq
 80044a4:	4290      	cmpeq	r0, r2
 80044a6:	d00b      	beq.n	80044c0 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <pb_dec_varint+0xfe>
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	e000      	b.n	80044b8 <pb_dec_varint+0x100>
 80044b6:	4b55      	ldr	r3, [pc, #340]	@ (800460c <pb_dec_varint+0x254>)
 80044b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ba:	60d3      	str	r3, [r2, #12]
 80044bc:	2300      	movs	r3, #0
 80044be:	e09d      	b.n	80045fc <pb_dec_varint+0x244>

        return true;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e09b      	b.n	80045fc <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	7d9b      	ldrb	r3, [r3, #22]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d10d      	bne.n	80044ec <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80044d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044d4:	4619      	mov	r1, r3
 80044d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044d8:	f7ff fee1 	bl	800429e <pb_decode_svarint>
 80044dc:	4603      	mov	r3, r0
 80044de:	f083 0301 	eor.w	r3, r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d022      	beq.n	800452e <pb_dec_varint+0x176>
                return false;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e087      	b.n	80045fc <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 80044ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80044f0:	4619      	mov	r1, r3
 80044f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044f4:	f7fe fe3e 	bl	8003174 <pb_decode_varint>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <pb_dec_varint+0x150>
                return false;
 8004504:	2300      	movs	r3, #0
 8004506:	e079      	b.n	80045fc <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	8a5b      	ldrh	r3, [r3, #18]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d104      	bne.n	800451a <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8004510:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004514:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004518:	e009      	b.n	800452e <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800451a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800451e:	4613      	mov	r3, r2
 8004520:	17da      	asrs	r2, r3, #31
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	61fa      	str	r2, [r7, #28]
 8004526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800452a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	8a5b      	ldrh	r3, [r3, #18]
 8004532:	2b08      	cmp	r3, #8
 8004534:	d10a      	bne.n	800454c <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	69d9      	ldr	r1, [r3, #28]
 800453a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800453e:	e9c1 2300 	strd	r2, r3, [r1]
 8004542:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004546:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800454a:	e042      	b.n	80045d2 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	8a5b      	ldrh	r3, [r3, #18]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d10c      	bne.n	800456e <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8004554:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4602      	mov	r2, r0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	17da      	asrs	r2, r3, #31
 8004564:	469a      	mov	sl, r3
 8004566:	4693      	mov	fp, r2
 8004568:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 800456c:	e031      	b.n	80045d2 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	8a5b      	ldrh	r3, [r3, #18]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d10e      	bne.n	8004594 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8004576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	b202      	sxth	r2, r0
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004586:	b21b      	sxth	r3, r3
 8004588:	17da      	asrs	r2, r3, #31
 800458a:	4698      	mov	r8, r3
 800458c:	4691      	mov	r9, r2
 800458e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8004592:	e01e      	b.n	80045d2 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	8a5b      	ldrh	r3, [r3, #18]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10e      	bne.n	80045ba <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 800459c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	b242      	sxtb	r2, r0
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	f993 3000 	ldrsb.w	r3, [r3]
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	17da      	asrs	r2, r3, #31
 80045b0:	461c      	mov	r4, r3
 80045b2:	4615      	mov	r5, r2
 80045b4:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80045b8:	e00b      	b.n	80045d2 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <pb_dec_varint+0x210>
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	e000      	b.n	80045ca <pb_dec_varint+0x212>
 80045c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <pb_dec_varint+0x250>)
 80045ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045cc:	60d3      	str	r3, [r2, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	e014      	b.n	80045fc <pb_dec_varint+0x244>

        if (clamped != svalue)
 80045d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80045da:	4299      	cmp	r1, r3
 80045dc:	bf08      	it	eq
 80045de:	4290      	cmpeq	r0, r2
 80045e0:	d00b      	beq.n	80045fa <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <pb_dec_varint+0x238>
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	e000      	b.n	80045f2 <pb_dec_varint+0x23a>
 80045f0:	4b06      	ldr	r3, [pc, #24]	@ (800460c <pb_dec_varint+0x254>)
 80045f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f4:	60d3      	str	r3, [r2, #12]
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <pb_dec_varint+0x244>

        return true;
 80045fa:	2301      	movs	r3, #1
    }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3750      	adds	r7, #80	@ 0x50
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	080073e8 	.word	0x080073e8
 800460c:	080073fc 	.word	0x080073fc

08004610 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fe fd97 	bl	8003154 <pb_decode_varint32>
 8004626:	4603      	mov	r3, r0
 8004628:	f083 0301 	eor.w	r3, r3, #1
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <pb_dec_bytes+0x26>
        return false;
 8004632:	2300      	movs	r3, #0
 8004634:	e055      	b.n	80046e2 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d30b      	bcc.n	8004656 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <pb_dec_bytes+0x3c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	e000      	b.n	800464e <pb_dec_bytes+0x3e>
 800464c:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <pb_dec_bytes+0xdc>)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	60d3      	str	r3, [r2, #12]
 8004652:	2300      	movs	r3, #0
 8004654:	e045      	b.n	80046e2 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3302      	adds	r3, #2
 800465a:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	d20b      	bcs.n	800467c <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <pb_dec_bytes+0x62>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	e000      	b.n	8004674 <pb_dec_bytes+0x64>
 8004672:	4b1f      	ldr	r3, [pc, #124]	@ (80046f0 <pb_dec_bytes+0xe0>)
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	60d3      	str	r3, [r2, #12]
 8004678:	2300      	movs	r3, #0
 800467a:	e032      	b.n	80046e2 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	7d9b      	ldrb	r3, [r3, #22]
 8004680:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004684:	2b80      	cmp	r3, #128	@ 0x80
 8004686:	d10b      	bne.n	80046a0 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <pb_dec_bytes+0x86>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	e000      	b.n	8004698 <pb_dec_bytes+0x88>
 8004696:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <pb_dec_bytes+0xe4>)
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60d3      	str	r3, [r2, #12]
 800469c:	2300      	movs	r3, #0
 800469e:	e020      	b.n	80046e2 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	8a5b      	ldrh	r3, [r3, #18]
 80046a4:	461a      	mov	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d90b      	bls.n	80046c4 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <pb_dec_bytes+0xaa>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	e000      	b.n	80046bc <pb_dec_bytes+0xac>
 80046ba:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <pb_dec_bytes+0xdc>)
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	60d3      	str	r3, [r2, #12]
 80046c0:	2300      	movs	r3, #0
 80046c2:	e00e      	b.n	80046e2 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3302      	adds	r3, #2
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fe fbc0 	bl	8002e60 <pb_read>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	08007410 	.word	0x08007410
 80046f0:	08007420 	.word	0x08007420
 80046f4:	08007368 	.word	0x08007368

080046f8 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004708:	f107 030c 	add.w	r3, r7, #12
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fe fd20 	bl	8003154 <pb_decode_varint32>
 8004714:	4603      	mov	r3, r0
 8004716:	f083 0301 	eor.w	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <pb_dec_string+0x2c>
        return false;
 8004720:	2300      	movs	r3, #0
 8004722:	e05a      	b.n	80047da <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800472a:	d10b      	bne.n	8004744 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <pb_dec_string+0x42>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	e000      	b.n	800473c <pb_dec_string+0x44>
 800473a:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <pb_dec_string+0xec>)
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	60d3      	str	r3, [r2, #12]
 8004740:	2300      	movs	r3, #0
 8004742:	e04a      	b.n	80047da <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	d20b      	bcs.n	800476a <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <pb_dec_string+0x68>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	e000      	b.n	8004762 <pb_dec_string+0x6a>
 8004760:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <pb_dec_string+0xec>)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	60d3      	str	r3, [r2, #12]
 8004766:	2300      	movs	r3, #0
 8004768:	e037      	b.n	80047da <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	7d9b      	ldrb	r3, [r3, #22]
 800476e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004772:	2b80      	cmp	r3, #128	@ 0x80
 8004774:	d10b      	bne.n	800478e <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <pb_dec_string+0x8c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	e000      	b.n	8004786 <pb_dec_string+0x8e>
 8004784:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <pb_dec_string+0xf0>)
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	60d3      	str	r3, [r2, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	e025      	b.n	80047da <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	8a5b      	ldrh	r3, [r3, #18]
 8004792:	461a      	mov	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4293      	cmp	r3, r2
 8004798:	d90b      	bls.n	80047b2 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <pb_dec_string+0xb0>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	e000      	b.n	80047aa <pb_dec_string+0xb2>
 80047a8:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <pb_dec_string+0xf4>)
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	60d3      	str	r3, [r2, #12]
 80047ae:	2300      	movs	r3, #0
 80047b0:	e013      	b.n	80047da <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	461a      	mov	r2, r3
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fe fb4c 	bl	8002e60 <pb_read>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f083 0301 	eor.w	r3, r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <pb_dec_string+0xe0>
        return false;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 80047d8:	2301      	movs	r3, #1
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	08007420 	.word	0x08007420
 80047e8:	08007368 	.word	0x08007368
 80047ec:	08007430 	.word	0x08007430

080047f0 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	@ 0x28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    bool status = true;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fe fe2d 	bl	800346c <pb_make_string_substream>
 8004812:	4603      	mov	r3, r0
 8004814:	f083 0301 	eor.w	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <pb_dec_submessage+0x32>
        return false;
 800481e:	2300      	movs	r3, #0
 8004820:	e069      	b.n	80048f6 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <pb_dec_submessage+0x48>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	e000      	b.n	800483a <pb_dec_submessage+0x4a>
 8004838:	4b31      	ldr	r3, [pc, #196]	@ (8004900 <pb_dec_submessage+0x110>)
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	60d3      	str	r3, [r2, #12]
 800483e:	2300      	movs	r3, #0
 8004840:	e059      	b.n	80048f6 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7d9b      	ldrb	r3, [r3, #22]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	2b09      	cmp	r3, #9
 800484c:	d11c      	bne.n	8004888 <pb_dec_submessage+0x98>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	3b08      	subs	r3, #8
 800485c:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	3204      	adds	r2, #4
 800486e:	f107 000c 	add.w	r0, r7, #12
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	4798      	blx	r3
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800488c:	2b00      	cmp	r3, #0
 800488e:	d022      	beq.n	80048d6 <pb_dec_submessage+0xe6>
 8004890:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004894:	f083 0301 	eor.w	r3, r3, #1
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01b      	beq.n	80048d6 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	7d9b      	ldrb	r3, [r3, #22]
 80048a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	7d9b      	ldrb	r3, [r3, #22]
 80048b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d001      	beq.n	80048be <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80048ba:	2301      	movs	r3, #1
 80048bc:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	f107 000c 	add.w	r0, r7, #12
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	f7ff fafa 	bl	8003ec4 <pb_decode_inner>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fe fdff 	bl	80034e0 <pb_close_string_substream>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <pb_dec_submessage+0x102>
        return false;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e001      	b.n	80048f6 <pb_dec_submessage+0x106>

    return status;
 80048f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3728      	adds	r7, #40	@ 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	08007440 	.word	0x08007440

08004904 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fe fc1d 	bl	8003154 <pb_decode_varint32>
 800491a:	4603      	mov	r3, r0
 800491c:	f083 0301 	eor.w	r3, r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <pb_dec_fixed_length_bytes+0x26>
        return false;
 8004926:	2300      	movs	r3, #0
 8004928:	e037      	b.n	800499a <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004930:	d30b      	bcc.n	800494a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <pb_dec_fixed_length_bytes+0x3c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	e000      	b.n	8004942 <pb_dec_fixed_length_bytes+0x3e>
 8004940:	4b18      	ldr	r3, [pc, #96]	@ (80049a4 <pb_dec_fixed_length_bytes+0xa0>)
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	60d3      	str	r3, [r2, #12]
 8004946:	2300      	movs	r3, #0
 8004948:	e027      	b.n	800499a <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d109      	bne.n	8004964 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	69d8      	ldr	r0, [r3, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	8a5b      	ldrh	r3, [r3, #18]
 8004958:	461a      	mov	r2, r3
 800495a:	2100      	movs	r1, #0
 800495c:	f002 fa92 	bl	8006e84 <memset>
        return true;
 8004960:	2301      	movs	r3, #1
 8004962:	e01a      	b.n	800499a <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	8a5b      	ldrh	r3, [r3, #18]
 8004968:	461a      	mov	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d00b      	beq.n	8004988 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <pb_dec_fixed_length_bytes+0x7a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	e000      	b.n	8004980 <pb_dec_fixed_length_bytes+0x7c>
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <pb_dec_fixed_length_bytes+0xa4>)
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	60d3      	str	r3, [r2, #12]
 8004984:	2300      	movs	r3, #0
 8004986:	e008      	b.n	800499a <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	69d9      	ldr	r1, [r3, #28]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	8a5b      	ldrh	r3, [r3, #18]
 8004990:	461a      	mov	r2, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fe fa64 	bl	8002e60 <pb_read>
 8004998:	4603      	mov	r3, r0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	08007410 	.word	0x08007410
 80049a8:	0800745c 	.word	0x0800745c

080049ac <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f002 fae4 	bl	8006f9a <memcpy>
    
    return true;
 80049d2:	2301      	movs	r3, #1
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 80049dc:	b4b0      	push	{r4, r5, r7}
 80049de:	b08b      	sub	sp, #44	@ 0x2c
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <pb_ostream_from_buffer+0x3c>)
 80049ea:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	461d      	mov	r5, r3
 8004a00:	f107 0414 	add.w	r4, r7, #20
 8004a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	602b      	str	r3, [r5, #0]
}
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	372c      	adds	r7, #44	@ 0x2c
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bcb0      	pop	{r4, r5, r7}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	080049ad 	.word	0x080049ad

08004a1c <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d037      	beq.n	8004a9e <pb_write+0x82>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d033      	beq.n	8004a9e <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	441a      	add	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d307      	bcc.n	8004a56 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90b      	bls.n	8004a6e <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <pb_write+0x48>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	e000      	b.n	8004a66 <pb_write+0x4a>
 8004a64:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <pb_write+0x98>)
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	6113      	str	r3, [r2, #16]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e01e      	b.n	8004aac <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	4798      	blx	r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f083 0301 	eor.w	r3, r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <pb_write+0x78>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	e000      	b.n	8004a96 <pb_write+0x7a>
 8004a94:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <pb_write+0x9c>)
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	6113      	str	r3, [r2, #16]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e006      	b.n	8004aac <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	60da      	str	r2, [r3, #12]
    return true;
 8004aaa:	2301      	movs	r3, #1
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08007480 	.word	0x08007480
 8004ab8:	0800748c 	.word	0x0800748c

08004abc <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e00a      	b.n	8004ae4 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <safe_read_bool+0x22>
            return true;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e006      	b.n	8004aec <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f1      	beq.n	8004ace <safe_read_bool+0x12>
    }
    return false;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	b08c      	sub	sp, #48	@ 0x30
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8004b0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <encode_array+0x1c>
        return true;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e13d      	b.n	8004d90 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	7d9b      	ldrb	r3, [r3, #22]
 8004b18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b1c:	2b80      	cmp	r3, #128	@ 0x80
 8004b1e:	d010      	beq.n	8004b42 <encode_array+0x4a>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	8a9b      	ldrh	r3, [r3, #20]
 8004b24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d90b      	bls.n	8004b42 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <encode_array+0x40>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	e000      	b.n	8004b3a <encode_array+0x42>
 8004b38:	4b97      	ldr	r3, [pc, #604]	@ (8004d98 <encode_array+0x2a0>)
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6113      	str	r3, [r2, #16]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e126      	b.n	8004d90 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	7d9b      	ldrb	r3, [r3, #22]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	f200 80b3 	bhi.w	8004cb6 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	8a1b      	ldrh	r3, [r3, #16]
 8004b54:	461a      	mov	r2, r3
 8004b56:	2102      	movs	r1, #2
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fcdd 	bl	8005518 <pb_encode_tag>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f083 0301 	eor.w	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <encode_array+0x76>
            return false;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e110      	b.n	8004d90 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	7d9b      	ldrb	r3, [r3, #22]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d103      	bne.n	8004b82 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8004b7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b80:	e047      	b.n	8004c12 <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	7d9b      	ldrb	r3, [r3, #22]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d103      	bne.n	8004b96 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8004b8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b94:	e03d      	b.n	8004c12 <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8004bac:	2300      	movs	r3, #0
 8004bae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004bb0:	e026      	b.n	8004c00 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fdef 	bl	800579c <pb_enc_varint>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <encode_array+0xe0>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	e005      	b.n	8004be4 <encode_array+0xec>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <encode_array+0xea>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	e000      	b.n	8004be4 <encode_array+0xec>
 8004be2:	4b6e      	ldr	r3, [pc, #440]	@ (8004d9c <encode_array+0x2a4>)
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6113      	str	r3, [r2, #16]
 8004be8:	2300      	movs	r3, #0
 8004bea:	e0d1      	b.n	8004d90 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	8a52      	ldrh	r2, [r2, #18]
 8004bf4:	441a      	add	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8004bfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004c00:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d3d4      	bcc.n	8004bb2 <encode_array+0xba>
            }
            field->pData = pData_orig;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	2200      	movs	r2, #0
 8004c16:	461c      	mov	r4, r3
 8004c18:	4615      	mov	r5, r2
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fbf7 	bl	8005412 <pb_encode_varint>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f083 0301 	eor.w	r3, r3, #1
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <encode_array+0x13c>
            return false;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e0ad      	b.n	8004d90 <encode_array+0x298>
        
        if (stream->callback == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8004c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c3e:	2100      	movs	r1, #0
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff feeb 	bl	8004a1c <pb_write>
 8004c46:	4603      	mov	r3, r0
 8004c48:	e0a2      	b.n	8004d90 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004c4e:	e02d      	b.n	8004cac <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	7d9b      	ldrb	r3, [r3, #22]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d005      	beq.n	8004c68 <encode_array+0x170>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	7d9b      	ldrb	r3, [r3, #22]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	2b05      	cmp	r3, #5
 8004c66:	d10b      	bne.n	8004c80 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fe58 	bl	8005920 <pb_enc_fixed>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f083 0301 	eor.w	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <encode_array+0x1a0>
                    return false;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e087      	b.n	8004d90 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fd8a 	bl	800579c <pb_enc_varint>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f083 0301 	eor.w	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <encode_array+0x1a0>
                    return false;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e07b      	b.n	8004d90 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	8a52      	ldrh	r2, [r2, #18]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8004ca6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004ca8:	3301      	adds	r3, #1
 8004caa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004cac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004cae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d3cd      	bcc.n	8004c50 <encode_array+0x158>
 8004cb4:	e06b      	b.n	8004d8e <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004cba:	e064      	b.n	8004d86 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	7d9b      	ldrb	r3, [r3, #22]
 8004cc0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cc4:	2b80      	cmp	r3, #128	@ 0x80
 8004cc6:	d147      	bne.n	8004d58 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	7d9b      	ldrb	r3, [r3, #22]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8004cd0:	2b07      	cmp	r3, #7
 8004cd2:	d005      	beq.n	8004ce0 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	7d9b      	ldrb	r3, [r3, #22]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d13b      	bne.n	8004d58 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11c      	bne.n	8004d32 <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fc36 	bl	800556c <pb_encode_tag_for_field>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fb7f 	bl	8005412 <pb_encode_varint>
 8004d14:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <encode_array+0x226>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <encode_array+0x228>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004d30:	e006      	b.n	8004d40 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f951 	bl	8004fdc <encode_basic_field>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6a3a      	ldr	r2, [r7, #32]
 8004d44:	61da      	str	r2, [r3, #28]

                if (!status)
 8004d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d4a:	f083 0301 	eor.w	r3, r3, #1
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <encode_array+0x278>
                    return false;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e01b      	b.n	8004d90 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f93e 	bl	8004fdc <encode_basic_field>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f083 0301 	eor.w	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <encode_array+0x27a>
                    return false;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e00f      	b.n	8004d90 <encode_array+0x298>
            {
 8004d70:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	8a52      	ldrh	r2, [r2, #18]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8004d80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d82:	3301      	adds	r3, #1
 8004d84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d396      	bcc.n	8004cbc <encode_array+0x1c4>
        }
    }
    
    return true;
 8004d8e:	2301      	movs	r3, #1
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3730      	adds	r7, #48	@ 0x30
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bdb0      	pop	{r4, r5, r7, pc}
 8004d98:	08007498 	.word	0x08007498
 8004d9c:	080074b0 	.word	0x080074b0

08004da0 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b092      	sub	sp, #72	@ 0x48
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7d9b      	ldrb	r3, [r3, #22]
 8004dac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004db0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004db4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 80c9 	bne.w	8004f50 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8004dbe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004dc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e100      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8004dce:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004dd2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d108      	bne.n	8004dec <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e0f1      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004dec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004df0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004df4:	2b30      	cmp	r3, #48	@ 0x30
 8004df6:	d108      	bne.n	8004e0a <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e0e2      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8004e0a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004e0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d115      	bne.n	8004e42 <pb_check_proto3_default_value+0xa2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d011      	beq.n	8004e42 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fe4a 	bl	8004abc <safe_read_bool>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f083 0301 	eor.w	r3, r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e0c6      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e0bf      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8004e50:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d81c      	bhi.n	8004e96 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e68:	e00d      	b.n	8004e86 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8004e6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e70:	4413      	add	r3, r2
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e0a9      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8004e7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8a5b      	ldrh	r3, [r3, #18]
 8004e8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3eb      	bcc.n	8004e6a <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e09c      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8004e96:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d10a      	bne.n	8004eb8 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e08b      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8004eb8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2b07      	cmp	r3, #7
 8004ec2:	d108      	bne.n	8004ed6 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	e07c      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8004ed6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	2b0b      	cmp	r3, #11
 8004ee0:	d107      	bne.n	8004ef2 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8a5b      	ldrh	r3, [r3, #18]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e06e      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8004ef2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d005      	beq.n	8004f0a <pb_check_proto3_default_value+0x16a>
 8004efe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	2b09      	cmp	r3, #9
 8004f08:	d161      	bne.n	8004fce <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 fb9b 	bl	8006652 <pb_field_iter_begin>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d014      	beq.n	8004f4c <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8004f22:	f107 030c 	add.w	r3, r7, #12
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ff3a 	bl	8004da0 <pb_check_proto3_default_value>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f083 0301 	eor.w	r3, r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e049      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fbcf 	bl	80066e4 <pb_field_iter_next>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ea      	bne.n	8004f22 <pb_check_proto3_default_value+0x182>
            }
            return true;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e03f      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8004f50:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d107      	bne.n	8004f6c <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e031      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8004f6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f70:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d12a      	bne.n	8004fce <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004f78:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2b0a      	cmp	r3, #10
 8004f82:	d10a      	bne.n	8004f9a <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	e01a      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <pb_check_proto3_default_value+0x238>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d10a      	bne.n	8004fbc <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e009      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e000      	b.n	8004fd0 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3748      	adds	r7, #72	@ 0x48
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	08006887 	.word	0x08006887

08004fdc <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e061      	b.n	80050b6 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fab9 	bl	800556c <pb_encode_tag_for_field>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f083 0301 	eor.w	r3, r3, #1
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <encode_basic_field+0x2e>
        return false;
 8005006:	2300      	movs	r3, #0
 8005008:	e055      	b.n	80050b6 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	7d9b      	ldrb	r3, [r3, #22]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	2b0b      	cmp	r3, #11
 8005014:	d844      	bhi.n	80050a0 <encode_basic_field+0xc4>
 8005016:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <encode_basic_field+0x40>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800504d 	.word	0x0800504d
 8005020:	08005059 	.word	0x08005059
 8005024:	08005059 	.word	0x08005059
 8005028:	08005059 	.word	0x08005059
 800502c:	08005065 	.word	0x08005065
 8005030:	08005065 	.word	0x08005065
 8005034:	08005071 	.word	0x08005071
 8005038:	0800507d 	.word	0x0800507d
 800503c:	08005089 	.word	0x08005089
 8005040:	08005089 	.word	0x08005089
 8005044:	080050a1 	.word	0x080050a1
 8005048:	08005095 	.word	0x08005095
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fb8a 	bl	8005768 <pb_enc_bool>
 8005054:	4603      	mov	r3, r0
 8005056:	e02e      	b.n	80050b6 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fb9e 	bl	800579c <pb_enc_varint>
 8005060:	4603      	mov	r3, r0
 8005062:	e028      	b.n	80050b6 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fc5a 	bl	8005920 <pb_enc_fixed>
 800506c:	4603      	mov	r3, r0
 800506e:	e022      	b.n	80050b6 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fc82 	bl	800597c <pb_enc_bytes>
 8005078:	4603      	mov	r3, r0
 800507a:	e01c      	b.n	80050b6 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fcba 	bl	80059f8 <pb_enc_string>
 8005084:	4603      	mov	r3, r0
 8005086:	e016      	b.n	80050b6 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fd12 	bl	8005ab4 <pb_enc_submessage>
 8005090:	4603      	mov	r3, r0
 8005092:	e010      	b.n	80050b6 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fd52 	bl	8005b40 <pb_enc_fixed_length_bytes>
 800509c:	4603      	mov	r3, r0
 800509e:	e00a      	b.n	80050b6 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <encode_basic_field+0xd2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	e000      	b.n	80050b0 <encode_basic_field+0xd4>
 80050ae:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <encode_basic_field+0xe4>)
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6113      	str	r3, [r2, #16]
 80050b4:	2300      	movs	r3, #0
    }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	080074b8 	.word	0x080074b8

080050c4 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d018      	beq.n	800510a <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	2000      	movs	r0, #0
 80050e4:	4798      	blx	r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	f083 0301 	eor.w	r3, r3, #1
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <encode_callback_field+0x3c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	e000      	b.n	8005102 <encode_callback_field+0x3e>
 8005100:	4b04      	ldr	r3, [pc, #16]	@ (8005114 <encode_callback_field+0x50>)
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6113      	str	r3, [r2, #16]
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <encode_callback_field+0x48>
    }
    return true;
 800510a:	2301      	movs	r3, #1
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	080074cc 	.word	0x080074cc

08005118 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	7d9b      	ldrb	r3, [r3, #22]
 8005126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800512a:	2b30      	cmp	r3, #48	@ 0x30
 800512c:	d108      	bne.n	8005140 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	8a1b      	ldrh	r3, [r3, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d026      	beq.n	800518a <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800513c:	2301      	movs	r3, #1
 800513e:	e059      	b.n	80051f4 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	7d9b      	ldrb	r3, [r3, #22]
 8005144:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005148:	2b10      	cmp	r3, #16
 800514a:	d11e      	bne.n	800518a <encode_field+0x72>
    {
        if (field->pSize)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00c      	beq.n	800516e <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fcaf 	bl	8004abc <safe_read_bool>
 800515e:	4603      	mov	r3, r0
 8005160:	f083 0301 	eor.w	r3, r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00f      	beq.n	800518a <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800516a:	2301      	movs	r3, #1
 800516c:	e042      	b.n	80051f4 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	7d9b      	ldrb	r3, [r3, #22]
 8005172:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800517a:	6838      	ldr	r0, [r7, #0]
 800517c:	f7ff fe10 	bl	8004da0 <pb_check_proto3_default_value>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <encode_field+0x72>
                return true;
 8005186:	2301      	movs	r3, #1
 8005188:	e034      	b.n	80051f4 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d113      	bne.n	80051ba <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	7d9b      	ldrb	r3, [r3, #22]
 8005196:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <encode_field+0x94>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	e000      	b.n	80051ae <encode_field+0x96>
 80051ac:	4b13      	ldr	r3, [pc, #76]	@ (80051fc <encode_field+0xe4>)
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6113      	str	r3, [r2, #16]
 80051b2:	2300      	movs	r3, #0
 80051b4:	e01e      	b.n	80051f4 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e01c      	b.n	80051f4 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	7d9b      	ldrb	r3, [r3, #22]
 80051be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d105      	bne.n	80051d2 <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff7b 	bl	80050c4 <encode_callback_field>
 80051ce:	4603      	mov	r3, r0
 80051d0:	e010      	b.n	80051f4 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	7d9b      	ldrb	r3, [r3, #22]
 80051d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d105      	bne.n	80051ea <encode_field+0xd2>
    {
        return encode_array(stream, field);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fc89 	bl	8004af8 <encode_array>
 80051e6:	4603      	mov	r3, r0
 80051e8:	e004      	b.n	80051f4 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fef5 	bl	8004fdc <encode_basic_field>
 80051f2:	4603      	mov	r3, r0
    }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	080074dc 	.word	0x080074dc

08005200 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800520a:	f107 0308 	add.w	r3, r7, #8
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f001 fb26 	bl	8006862 <pb_field_iter_begin_extension_const>
 8005216:	4603      	mov	r3, r0
 8005218:	f083 0301 	eor.w	r3, r3, #1
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <default_extension_encoder+0x30>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	e000      	b.n	8005232 <default_extension_encoder+0x32>
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <default_extension_encoder+0x50>)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6113      	str	r3, [r2, #16]
 8005236:	2300      	movs	r3, #0
 8005238:	e006      	b.n	8005248 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800523a:	f107 0308 	add.w	r3, r7, #8
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ff69 	bl	8005118 <encode_field>
 8005246:	4603      	mov	r3, r0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3730      	adds	r7, #48	@ 0x30
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	080074f4 	.word	0x080074f4

08005254 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]

    while (extension)
 8005266:	e01e      	b.n	80052a6 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
 800527e:	4603      	mov	r3, r0
 8005280:	72fb      	strb	r3, [r7, #11]
 8005282:	e005      	b.n	8005290 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff ffba 	bl	8005200 <default_extension_encoder>
 800528c:	4603      	mov	r3, r0
 800528e:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	f083 0301 	eor.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <encode_extension_field+0x4c>
            return false;
 800529c:	2300      	movs	r3, #0
 800529e:	e006      	b.n	80052ae <encode_extension_field+0x5a>
        
        extension = extension->next;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60fb      	str	r3, [r7, #12]
    while (extension)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1dd      	bne.n	8005268 <encode_extension_field+0x14>
    }
    
    return true;
 80052ac:	2301      	movs	r3, #1
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b08e      	sub	sp, #56	@ 0x38
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 80052c2:	f107 0310 	add.w	r3, r7, #16
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 fab5 	bl	800683a <pb_field_iter_begin_const>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f083 0301 	eor.w	r3, r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <pb_encode+0x2a>
        return true; /* Empty message type */
 80052dc:	2301      	movs	r3, #1
 80052de:	e02a      	b.n	8005336 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80052e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2b0a      	cmp	r3, #10
 80052ea:	d10d      	bne.n	8005308 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 80052ec:	f107 0310 	add.w	r3, r7, #16
 80052f0:	4619      	mov	r1, r3
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff ffae 	bl	8005254 <encode_extension_field>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00f      	beq.n	8005324 <pb_encode+0x6e>
                return false;
 8005304:	2300      	movs	r3, #0
 8005306:	e016      	b.n	8005336 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005308:	f107 0310 	add.w	r3, r7, #16
 800530c:	4619      	mov	r1, r3
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff02 	bl	8005118 <encode_field>
 8005314:	4603      	mov	r3, r0
 8005316:	f083 0301 	eor.w	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <pb_encode+0x6e>
                return false;
 8005320:	2300      	movs	r3, #0
 8005322:	e008      	b.n	8005336 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005324:	f107 0310 	add.w	r3, r7, #16
 8005328:	4618      	mov	r0, r3
 800532a:	f001 f9db 	bl	80066e4 <pb_field_iter_next>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1d5      	bne.n	80052e0 <pb_encode+0x2a>
    
    return true;
 8005334:	2301      	movs	r3, #1
}
 8005336:	4618      	mov	r0, r3
 8005338:	3738      	adds	r7, #56	@ 0x38
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005356:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	09db      	lsrs	r3, r3, #7
 800535c:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800535e:	e013      	b.n	8005388 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8005360:	7efb      	ldrb	r3, [r7, #27]
 8005362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005366:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	3320      	adds	r3, #32
 8005370:	443b      	add	r3, r7
 8005372:	7efa      	ldrb	r2, [r7, #27]
 8005374:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005380:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	09db      	lsrs	r3, r3, #7
 8005386:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b03      	cmp	r3, #3
 800538c:	d805      	bhi.n	800539a <pb_encode_varint_32+0x5c>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <pb_encode_varint_32+0x22>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e2      	bne.n	8005360 <pb_encode_varint_32+0x22>
    }

    if (high)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d024      	beq.n	80053ea <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	7efb      	ldrb	r3, [r7, #27]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	08db      	lsrs	r3, r3, #3
 80053b8:	607b      	str	r3, [r7, #4]

        while (high)
 80053ba:	e013      	b.n	80053e4 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 80053bc:	7efb      	ldrb	r3, [r7, #27]
 80053be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053c2:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	3320      	adds	r3, #32
 80053cc:	443b      	add	r3, r7
 80053ce:	7efa      	ldrb	r2, [r7, #27]
 80053d0:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053dc:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	607b      	str	r3, [r7, #4]
        while (high)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e8      	bne.n	80053bc <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	61fa      	str	r2, [r7, #28]
 80053f0:	3320      	adds	r3, #32
 80053f2:	443b      	add	r3, r7
 80053f4:	7efa      	ldrb	r2, [r7, #27]
 80053f6:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	4619      	mov	r1, r3
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fb0a 	bl	8004a1c <pb_write>
 8005408:	4603      	mov	r3, r0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005412:	b590      	push	{r4, r7, lr}
 8005414:	b087      	sub	sp, #28
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800541e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005422:	2a80      	cmp	r2, #128	@ 0x80
 8005424:	f173 0300 	sbcs.w	r3, r3, #0
 8005428:	d20a      	bcs.n	8005440 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800542a:	783b      	ldrb	r3, [r7, #0]
 800542c:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800542e:	f107 0317 	add.w	r3, r7, #23
 8005432:	2201      	movs	r2, #1
 8005434:	4619      	mov	r1, r3
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff faf0 	bl	8004a1c <pb_write>
 800543c:	4603      	mov	r3, r0
 800543e:	e00f      	b.n	8005460 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8005440:	683c      	ldr	r4, [r7, #0]
 8005442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	000a      	movs	r2, r1
 8005450:	2300      	movs	r3, #0
 8005452:	4613      	mov	r3, r2
 8005454:	461a      	mov	r2, r3
 8005456:	4621      	mov	r1, r4
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff ff70 	bl	800533e <pb_encode_varint_32>
 800545e:	4603      	mov	r3, r0
#endif
    }
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}

08005468 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b08a      	sub	sp, #40	@ 0x28
 800546e:	af00      	add	r7, sp, #0
 8005470:	6178      	str	r0, [r7, #20]
 8005472:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8005476:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800547a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800547e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 8005482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da15      	bge.n	80054b6 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800548a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800548e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005492:	ea00 0402 	and.w	r4, r0, r2
 8005496:	ea01 0503 	and.w	r5, r1, r3
 800549a:	1923      	adds	r3, r4, r4
 800549c:	603b      	str	r3, [r7, #0]
 800549e:	eb45 0305 	adc.w	r3, r5, r5
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a8:	ea6f 0a02 	mvn.w	sl, r2
 80054ac:	ea6f 0b03 	mvn.w	fp, r3
 80054b0:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80054b4:	e007      	b.n	80054c6 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80054b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ba:	eb12 0802 	adds.w	r8, r2, r2
 80054be:	eb43 0903 	adc.w	r9, r3, r3
 80054c2:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80054c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ca:	6978      	ldr	r0, [r7, #20]
 80054cc:	f7ff ffa1 	bl	8005412 <pb_encode_varint>
 80054d0:	4603      	mov	r3, r0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3728      	adds	r7, #40	@ 0x28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054dc <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 80054e6:	2204      	movs	r2, #4
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff fa96 	bl	8004a1c <pb_write>
 80054f0:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8005504:	2208      	movs	r2, #8
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fa87 	bl	8004a1c <pb_write>
 800550e:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551c:	b088      	sub	sp, #32
 800551e:	af00      	add	r7, sp, #0
 8005520:	6178      	str	r0, [r7, #20]
 8005522:	460b      	mov	r3, r1
 8005524:	60fa      	str	r2, [r7, #12]
 8005526:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	469a      	mov	sl, r3
 800552e:	4693      	mov	fp, r2
 8005530:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8005534:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2200      	movs	r2, #0
 800553c:	4698      	mov	r8, r3
 800553e:	4691      	mov	r9, r2
 8005540:	ea44 0308 	orr.w	r3, r4, r8
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	ea45 0309 	orr.w	r3, r5, r9
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005550:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8005554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005558:	6978      	ldr	r0, [r7, #20]
 800555a:	f7ff ff5a 	bl	8005412 <pb_encode_varint>
 800555e:	4603      	mov	r3, r0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800556c <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	7d9b      	ldrb	r3, [r3, #22]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	2b0b      	cmp	r3, #11
 8005580:	d826      	bhi.n	80055d0 <pb_encode_tag_for_field+0x64>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <pb_encode_tag_for_field+0x1c>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055b9 	.word	0x080055b9
 800558c:	080055b9 	.word	0x080055b9
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055bf 	.word	0x080055bf
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055cb 	.word	0x080055cb
 80055a4:	080055cb 	.word	0x080055cb
 80055a8:	080055cb 	.word	0x080055cb
 80055ac:	080055cb 	.word	0x080055cb
 80055b0:	080055d1 	.word	0x080055d1
 80055b4:	080055cb 	.word	0x080055cb
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]
            break;
 80055bc:	e014      	b.n	80055e8 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80055be:	2305      	movs	r3, #5
 80055c0:	73fb      	strb	r3, [r7, #15]
            break;
 80055c2:	e011      	b.n	80055e8 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
            break;
 80055c8:	e00e      	b.n	80055e8 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80055ca:	2302      	movs	r3, #2
 80055cc:	73fb      	strb	r3, [r7, #15]
            break;
 80055ce:	e00b      	b.n	80055e8 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <pb_encode_tag_for_field+0x72>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	e000      	b.n	80055e0 <pb_encode_tag_for_field+0x74>
 80055de:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <pb_encode_tag_for_field+0x98>)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6113      	str	r3, [r2, #16]
 80055e4:	2300      	movs	r3, #0
 80055e6:	e008      	b.n	80055fa <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	8a1b      	ldrh	r3, [r3, #16]
 80055ec:	461a      	mov	r2, r3
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ff90 	bl	8005518 <pb_encode_tag>
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	080074b8 	.word	0x080074b8

08005608 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	461c      	mov	r4, r3
 800561a:	4615      	mov	r5, r2
 800561c:	4622      	mov	r2, r4
 800561e:	462b      	mov	r3, r5
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fef6 	bl	8005412 <pb_encode_varint>
 8005626:	4603      	mov	r3, r0
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <pb_encode_string+0x2e>
        return false;
 8005632:	2300      	movs	r3, #0
 8005634:	e005      	b.n	8005642 <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff f9ee 	bl	8004a1c <pb_write>
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800564c <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	b08c      	sub	sp, #48	@ 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	609a      	str	r2, [r3, #8]
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fe20 	bl	80052b6 <pb_encode>
 8005676:	4603      	mov	r3, r0
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8005682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8005688:	2300      	movs	r3, #0
 800568a:	e065      	b.n	8005758 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005692:	2200      	movs	r2, #0
 8005694:	461c      	mov	r4, r3
 8005696:	4615      	mov	r5, r2
 8005698:	4622      	mov	r2, r4
 800569a:	462b      	mov	r3, r5
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff feb8 	bl	8005412 <pb_encode_varint>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f083 0301 	eor.w	r3, r3, #1
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <pb_encode_submessage+0x66>
        return false;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e052      	b.n	8005758 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 80056ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056bc:	2100      	movs	r1, #0
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff f9ac 	bl	8004a1c <pb_write>
 80056c4:	4603      	mov	r3, r0
 80056c6:	e047      	b.n	8005758 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ce:	441a      	add	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d90b      	bls.n	80056f0 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <pb_encode_submessage+0x9a>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	e000      	b.n	80056e8 <pb_encode_submessage+0x9c>
 80056e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <pb_encode_submessage+0x114>)
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	6113      	str	r3, [r2, #16]
 80056ec:	2300      	movs	r3, #0
 80056ee:	e033      	b.n	8005758 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fe:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fdd0 	bl	80052b6 <pb_encode>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	441a      	add	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005738:	429a      	cmp	r2, r3
 800573a:	d00b      	beq.n	8005754 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <pb_encode_submessage+0xfe>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	e000      	b.n	800574c <pb_encode_submessage+0x100>
 800574a:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <pb_encode_submessage+0x118>)
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	6113      	str	r3, [r2, #16]
 8005750:	2300      	movs	r3, #0
 8005752:	e001      	b.n	8005758 <pb_encode_submessage+0x10c>
    
    return status;
 8005754:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005758:	4618      	mov	r0, r3
 800575a:	3730      	adds	r7, #48	@ 0x30
 800575c:	46bd      	mov	sp, r7
 800575e:	bdb0      	pop	{r4, r5, r7, pc}
 8005760:	08007480 	.word	0x08007480
 8005764:	08007508 	.word	0x08007508

08005768 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005768:	b5b0      	push	{r4, r5, r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff f9a0 	bl	8004abc <safe_read_bool>
 800577c:	4603      	mov	r3, r0
 800577e:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	461c      	mov	r4, r3
 8005786:	4615      	mov	r5, r2
 8005788:	4622      	mov	r2, r4
 800578a:	462b      	mov	r3, r5
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fe40 	bl	8005412 <pb_encode_varint>
 8005792:	4603      	mov	r3, r0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bdb0      	pop	{r4, r5, r7, pc}

0800579c <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800579c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a0:	b08c      	sub	sp, #48	@ 0x30
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	61f8      	str	r0, [r7, #28]
 80057a6:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	7d9b      	ldrb	r3, [r3, #22]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d152      	bne.n	800585a <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	8a5b      	ldrh	r3, [r3, #18]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d10b      	bne.n	80057e0 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2200      	movs	r2, #0
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	617a      	str	r2, [r7, #20]
 80057d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80057da:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 80057de:	e035      	b.n	800584c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	8a5b      	ldrh	r3, [r3, #18]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d10b      	bne.n	8005800 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	60fa      	str	r2, [r7, #12]
 80057f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80057fa:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 80057fe:	e025      	b.n	800584c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	8a5b      	ldrh	r3, [r3, #18]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d10a      	bne.n	800581e <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005818:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 800581c:	e016      	b.n	800584c <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	8a5b      	ldrh	r3, [r3, #18]
 8005822:	2b08      	cmp	r3, #8
 8005824:	d106      	bne.n	8005834 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005832:	e00b      	b.n	800584c <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <pb_enc_varint+0xa6>
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	e000      	b.n	8005844 <pb_enc_varint+0xa8>
 8005842:	4b36      	ldr	r3, [pc, #216]	@ (800591c <pb_enc_varint+0x180>)
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	6113      	str	r3, [r2, #16]
 8005848:	2300      	movs	r3, #0
 800584a:	e061      	b.n	8005910 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 800584c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005850:	69f8      	ldr	r0, [r7, #28]
 8005852:	f7ff fdde 	bl	8005412 <pb_encode_varint>
 8005856:	4603      	mov	r3, r0
 8005858:	e05a      	b.n	8005910 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	8a5b      	ldrh	r3, [r3, #18]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10a      	bne.n	8005884 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f993 3000 	ldrsb.w	r3, [r3]
 8005876:	b25b      	sxtb	r3, r3
 8005878:	17da      	asrs	r2, r3, #31
 800587a:	469a      	mov	sl, r3
 800587c:	4693      	mov	fp, r2
 800587e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005882:	e032      	b.n	80058ea <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	8a5b      	ldrh	r3, [r3, #18]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d10a      	bne.n	80058a2 <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005894:	b21b      	sxth	r3, r3
 8005896:	17da      	asrs	r2, r3, #31
 8005898:	4698      	mov	r8, r3
 800589a:	4691      	mov	r9, r2
 800589c:	e9c7 8908 	strd	r8, r9, [r7, #32]
 80058a0:	e023      	b.n	80058ea <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	8a5b      	ldrh	r3, [r3, #18]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d108      	bne.n	80058bc <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	17da      	asrs	r2, r3, #31
 80058b2:	461c      	mov	r4, r3
 80058b4:	4615      	mov	r5, r2
 80058b6:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80058ba:	e016      	b.n	80058ea <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	8a5b      	ldrh	r3, [r3, #18]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d106      	bne.n	80058d2 <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80058d0:	e00b      	b.n	80058ea <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <pb_enc_varint+0x144>
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	e000      	b.n	80058e2 <pb_enc_varint+0x146>
 80058e0:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <pb_enc_varint+0x180>)
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	6113      	str	r3, [r2, #16]
 80058e6:	2300      	movs	r3, #0
 80058e8:	e012      	b.n	8005910 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	7d9b      	ldrb	r3, [r3, #22]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d106      	bne.n	8005904 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	69f8      	ldr	r0, [r7, #28]
 80058fc:	f7ff fdb4 	bl	8005468 <pb_encode_svarint>
 8005900:	4603      	mov	r3, r0
 8005902:	e005      	b.n	8005910 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8005904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005908:	69f8      	ldr	r0, [r7, #28]
 800590a:	f7ff fd82 	bl	8005412 <pb_encode_varint>
 800590e:	4603      	mov	r3, r0

    }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3730      	adds	r7, #48	@ 0x30
 8005914:	46bd      	mov	sp, r7
 8005916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800591a:	bf00      	nop
 800591c:	0800751c 	.word	0x0800751c

08005920 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	8a5b      	ldrh	r3, [r3, #18]
 800592e:	2b04      	cmp	r3, #4
 8005930:	d107      	bne.n	8005942 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fdcf 	bl	80054dc <pb_encode_fixed32>
 800593e:	4603      	mov	r3, r0
 8005940:	e016      	b.n	8005970 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	8a5b      	ldrh	r3, [r3, #18]
 8005946:	2b08      	cmp	r3, #8
 8005948:	d107      	bne.n	800595a <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fdd2 	bl	80054fa <pb_encode_fixed64>
 8005956:	4603      	mov	r3, r0
 8005958:	e00a      	b.n	8005970 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <pb_enc_fixed+0x48>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	e000      	b.n	800596a <pb_enc_fixed+0x4a>
 8005968:	4b03      	ldr	r3, [pc, #12]	@ (8005978 <pb_enc_fixed+0x58>)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6113      	str	r3, [r2, #16]
 800596e:	2300      	movs	r3, #0
    }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	0800751c 	.word	0x0800751c

0800597c <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8005996:	2200      	movs	r2, #0
 8005998:	2100      	movs	r1, #0
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fe34 	bl	8005608 <pb_encode_string>
 80059a0:	4603      	mov	r3, r0
 80059a2:	e022      	b.n	80059ea <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	7d9b      	ldrb	r3, [r3, #22]
 80059a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d113      	bne.n	80059d8 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	8a5b      	ldrh	r3, [r3, #18]
 80059ba:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80059bc:	429a      	cmp	r2, r3
 80059be:	d90b      	bls.n	80059d8 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <pb_enc_bytes+0x52>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	e000      	b.n	80059d0 <pb_enc_bytes+0x54>
 80059ce:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <pb_enc_bytes+0x78>)
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6113      	str	r3, [r2, #16]
 80059d4:	2300      	movs	r3, #0
 80059d6:	e008      	b.n	80059ea <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1c99      	adds	r1, r3, #2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe10 	bl	8005608 <pb_encode_string>
 80059e8:	4603      	mov	r3, r0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08007530 	.word	0x08007530

080059f8 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	8a5b      	ldrh	r3, [r3, #18]
 8005a0a:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	7d9b      	ldrb	r3, [r3, #22]
 8005a16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a1a:	2b80      	cmp	r3, #128	@ 0x80
 8005a1c:	d103      	bne.n	8005a26 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e011      	b.n	8005a4a <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <pb_enc_string+0x42>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	e000      	b.n	8005a3c <pb_enc_string+0x44>
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005aac <pb_enc_string+0xb4>)
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6113      	str	r3, [r2, #16]
 8005a40:	2300      	movs	r3, #0
 8005a42:	e02f      	b.n	8005aa4 <pb_enc_string+0xac>

        max_size -= 1;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e020      	b.n	8005a98 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8005a5a:	e005      	b.n	8005a68 <pb_enc_string+0x70>
        {
            size++;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
            p++;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d203      	bcs.n	8005a78 <pb_enc_string+0x80>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f1      	bne.n	8005a5c <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <pb_enc_string+0x96>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	e000      	b.n	8005a90 <pb_enc_string+0x98>
 8005a8e:	4b08      	ldr	r3, [pc, #32]	@ (8005ab0 <pb_enc_string+0xb8>)
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6113      	str	r3, [r2, #16]
 8005a94:	2300      	movs	r3, #0
 8005a96:	e005      	b.n	8005aa4 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fdb3 	bl	8005608 <pb_encode_string>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	08007544 	.word	0x08007544
 8005ab0:	08007558 	.word	0x08007558

08005ab4 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <pb_enc_submessage+0x20>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	e000      	b.n	8005ad6 <pb_enc_submessage+0x22>
 8005ad4:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <pb_enc_submessage+0x88>)
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6113      	str	r3, [r2, #16]
 8005ada:	2300      	movs	r3, #0
 8005adc:	e029      	b.n	8005b32 <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	7d9b      	ldrb	r3, [r3, #22]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	2b09      	cmp	r3, #9
 8005ae8:	d11a      	bne.n	8005b20 <pb_enc_submessage+0x6c>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	3b08      	subs	r3, #8
 8005af8:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	3204      	adds	r2, #4
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
 8005b10:	4603      	mov	r3, r0
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <pb_enc_submessage+0x6c>
                return false;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e008      	b.n	8005b32 <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fd8e 	bl	800564c <pb_encode_submessage>
 8005b30:	4603      	mov	r3, r0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	0800756c 	.word	0x0800756c

08005b40 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	69d9      	ldr	r1, [r3, #28]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	8a5b      	ldrh	r3, [r3, #18]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fd57 	bl	8005608 <pb_encode_string>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005b72:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <TF_ClaimTx+0x20>
            TF_Error("TF already locked for tx!");
 8005b7a:	4808      	ldr	r0, [pc, #32]	@ (8005b9c <TF_ClaimTx+0x38>)
 8005b7c:	f001 f8a2 	bl	8006cc4 <puts>
            return false;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e006      	b.n	8005b92 <TF_ClaimTx+0x2e>
        }

        tf->soft_lock = true;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
        return true;
 8005b90:	2301      	movs	r3, #1
    }
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08007588 	.word	0x08007588

08005ba0 <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	460a      	mov	r2, r1
 8005bda:	80fb      	strh	r3, [r7, #6]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	717b      	strb	r3, [r7, #5]
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	88f9      	ldrh	r1, [r7, #6]
 8005be8:	797b      	ldrb	r3, [r7, #5]
 8005bea:	404b      	eors	r3, r1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4905      	ldr	r1, [pc, #20]	@ (8005c04 <TF_CksumAdd+0x34>)
 8005bf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005bf4:	4053      	eors	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	080079e4 	.word	0x080079e4

08005c08 <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 8005c32:	480f      	ldr	r0, [pc, #60]	@ (8005c70 <TF_InitStatic+0x50>)
 8005c34:	f001 f846 	bl	8006cc4 <puts>
        return false;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e015      	b.n	8005c68 <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 8005c48:	f242 2260 	movw	r2, #8800	@ 0x2260
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f918 	bl	8006e84 <memset>

    tf->usertag = usertag;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	721a      	strb	r2, [r3, #8]
    return true;
 8005c66:	2301      	movs	r3, #1
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	080075a8 	.word	0x080075a8

08005c74 <TF_AddIdListener>:
    }
}

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_TICKS timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	807b      	strh	r3, [r7, #2]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]
 8005c86:	e039      	b.n	8005cfc <TF_AddIdListener+0x88>
        lst = &tf->id_listeners[i];
 8005c88:	7dfa      	ldrb	r2, [r7, #23]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005c96:	3330      	adds	r3, #48	@ 0x30
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d127      	bne.n	8005cf6 <TF_AddIdListener+0x82>
            lst->fn = cb;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
            lst->id = msg->frame_id;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	601a      	str	r2, [r3, #0]
            lst->userdata = msg->userdata;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	60da      	str	r2, [r3, #12]
            lst->userdata2 = msg->userdata2;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	611a      	str	r2, [r3, #16]
            lst->timeout_max = lst->timeout = timeout;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	811a      	strh	r2, [r3, #8]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	891a      	ldrh	r2, [r3, #8]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	815a      	strh	r2, [r3, #10]
            if (i >= tf->count_id_lst) {
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005cd8:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8005cdc:	7dfa      	ldrb	r2, [r7, #23]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d307      	bcc.n	8005cf2 <TF_AddIdListener+0x7e>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005cee:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
            }
            return true;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e009      	b.n	8005d0a <TF_AddIdListener+0x96>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d9c2      	bls.n	8005c88 <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 8005d02:	4804      	ldr	r0, [pc, #16]	@ (8005d14 <TF_AddIdListener+0xa0>)
 8005d04:	f000 ffde 	bl	8006cc4 <puts>
    return false;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	080075fc 	.word	0x080075fc

08005d18 <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	e022      	b.n	8005d6e <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d114      	bne.n	8005d68 <TF_AddGenericListener+0x50>
            lst->fn = cb;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005d4a:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8005d4e:	7bfa      	ldrb	r2, [r7, #15]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d307      	bcc.n	8005d64 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	3301      	adds	r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005d60:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e009      	b.n	8005d7c <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d9d9      	bls.n	8005d28 <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 8005d74:	4803      	ldr	r0, [pc, #12]	@ (8005d84 <TF_AddGenericListener+0x6c>)
 8005d76:	f000 ffa5 	bl	8006cc4 <puts>
    return false;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08007640 	.word	0x08007640

08005d88 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t b = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	623b      	str	r3, [r7, #32]
    TF_CKSUM cksum = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	83fb      	strh	r3, [r7, #30]
    uint32_t pos = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 8005daa:	f7ff ff09 	bl	8005bc0 <TF_CksumStart>
 8005dae:	4603      	mov	r3, r0
 8005db0:	83fb      	strh	r3, [r7, #30]

    // Gen ID
    if (msg->is_response) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	791b      	ldrb	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <TF_ComposeHead+0x3a>
        id = msg->frame_id;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	623b      	str	r3, [r7, #32]
 8005dc0:	e00f      	b.n	8005de2 <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	60d1      	str	r1, [r2, #12]
 8005dcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dd0:	623b      	str	r3, [r7, #32]
        if (tf->peer_bit) {
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	7a1b      	ldrb	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005de0:	623b      	str	r3, [r7, #32]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	601a      	str	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 8005de8:	f7ff feea 	bl	8005bc0 <TF_CksumStart>
 8005dec:	4603      	mov	r3, r0
 8005dee:	83fb      	strh	r3, [r7, #30]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	61ba      	str	r2, [r7, #24]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4413      	add	r3, r2
 8005dfa:	22ab      	movs	r2, #171	@ 0xab
 8005dfc:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 8005dfe:	8bfb      	ldrh	r3, [r7, #30]
 8005e00:	21ab      	movs	r1, #171	@ 0xab
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fee4 	bl	8005bd0 <TF_CksumAdd>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	83fb      	strh	r3, [r7, #30]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e12:	e01c      	b.n	8005e4e <TF_ComposeHead+0xc6>
 8005e14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	75fb      	strb	r3, [r7, #23]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	61ba      	str	r2, [r7, #24]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	7dfa      	ldrb	r2, [r7, #23]
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	7dfa      	ldrb	r2, [r7, #23]
 8005e32:	8bfb      	ldrh	r3, [r7, #30]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff feca 	bl	8005bd0 <TF_CksumAdd>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	83fb      	strh	r3, [r7, #30]
 8005e40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dade      	bge.n	8005e14 <TF_ComposeHead+0x8c>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e5c:	e01e      	b.n	8005e9c <TF_ComposeHead+0x114>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	899b      	ldrh	r3, [r3, #12]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	fa42 f303 	asr.w	r3, r2, r3
 8005e6e:	75fb      	strb	r3, [r7, #23]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	61ba      	str	r2, [r7, #24]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	7dfa      	ldrb	r2, [r7, #23]
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	7dfa      	ldrb	r2, [r7, #23]
 8005e80:	8bfb      	ldrh	r3, [r7, #30]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fea3 	bl	8005bd0 <TF_CksumAdd>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	83fb      	strh	r3, [r7, #30]
 8005e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dadc      	bge.n	8005e5e <TF_ComposeHead+0xd6>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005eaa:	e01e      	b.n	8005eea <TF_ComposeHead+0x162>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	88db      	ldrh	r3, [r3, #6]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	fa42 f303 	asr.w	r3, r2, r3
 8005ebc:	75fb      	strb	r3, [r7, #23]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	61ba      	str	r2, [r7, #24]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	7dfa      	ldrb	r2, [r7, #23]
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	7dfa      	ldrb	r2, [r7, #23]
 8005ece:	8bfb      	ldrh	r3, [r7, #30]
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff fe7c 	bl	8005bd0 <TF_CksumAdd>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	83fb      	strh	r3, [r7, #30]
 8005edc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005eea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	dadc      	bge.n	8005eac <TF_ComposeHead+0x124>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 8005ef2:	8bfb      	ldrh	r3, [r7, #30]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fe87 	bl	8005c08 <TF_CksumEnd>
 8005efa:	4603      	mov	r3, r0
 8005efc:	83fb      	strh	r3, [r7, #30]
    WRITENUM(TF_CKSUM, cksum);
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f04:	e014      	b.n	8005f30 <TF_ComposeHead+0x1a8>
 8005f06:	8bfa      	ldrh	r2, [r7, #30]
 8005f08:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	fa42 f303 	asr.w	r3, r2, r3
 8005f12:	75fb      	strb	r3, [r7, #23]
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	61ba      	str	r2, [r7, #24]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	7dfa      	ldrb	r2, [r7, #23]
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dae6      	bge.n	8005f06 <TF_ComposeHead+0x17e>
#endif

    return pos;
 8005f38:	69bb      	ldr	r3, [r7, #24]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3728      	adds	r7, #40	@ 0x28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b088      	sub	sp, #32
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 8005f5e:	2300      	movs	r3, #0
 8005f60:	83fb      	strh	r3, [r7, #30]
 8005f62:	e019      	b.n	8005f98 <TF_ComposeBody+0x56>
        b = data[i];
 8005f64:	8bfb      	ldrh	r3, [r7, #30]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	61ba      	str	r2, [r7, #24]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	7dfa      	ldrb	r2, [r7, #23]
 8005f7a:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	7dfa      	ldrb	r2, [r7, #23]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fe23 	bl	8005bd0 <TF_CksumAdd>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 8005f92:	8bfb      	ldrh	r3, [r7, #30]
 8005f94:	3301      	adds	r3, #1
 8005f96:	83fb      	strh	r3, [r7, #30]
 8005f98:	8bfa      	ldrh	r2, [r7, #30]
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d3e1      	bcc.n	8005f64 <TF_ComposeBody+0x22>
    }

    return pos;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fe1f 	bl	8005c08 <TF_CksumEnd>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	75fb      	strb	r3, [r7, #23]
 8005fd6:	e015      	b.n	8006004 <TF_ComposeTail+0x5a>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	fa42 f303 	asr.w	r3, r2, r3
 8005fe8:	73fb      	strb	r3, [r7, #15]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	613a      	str	r2, [r7, #16]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	7bfa      	ldrb	r2, [r7, #15]
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	75fb      	strb	r3, [r7, #23]
 8006004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006008:	2b00      	cmp	r3, #0
 800600a:	dae5      	bge.n	8005fd8 <TF_ComposeTail+0x2e>
#endif
    return pos;
 800600c:	693b      	ldr	r3, [r7, #16]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <TF_SendFrame_Begin>:
 * @param listener - response listener or NULL
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_ClaimTx(tf));
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff fd9d 	bl	8005b64 <TF_ClaimTx>
 800602a:	4603      	mov	r3, r0
 800602c:	f083 0301 	eor.w	r3, r3, #1
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <TF_SendFrame_Begin+0x24>
 8006036:	2300      	movs	r3, #0
 8006038:	e031      	b.n	800609e <TF_SendFrame_Begin+0x88>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006040:	3303      	adds	r3, #3
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	4619      	mov	r1, r3
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff fe9e 	bl	8005d88 <TF_ComposeHead>
 800604c:	4602      	mov	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006054:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    tf->tx_len = msg->len;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	899b      	ldrh	r3, [r3, #12]
 800605c:	461a      	mov	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006064:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    if (listener) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <TF_SendFrame_Begin+0x74>
        TF_TRY(TF_AddIdListener(tf, msg, listener, timeout));
 800606e:	887b      	ldrh	r3, [r7, #2]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fdfd 	bl	8005c74 <TF_AddIdListener>
 800607a:	4603      	mov	r3, r0
 800607c:	f083 0301 	eor.w	r3, r3, #1
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <TF_SendFrame_Begin+0x74>
 8006086:	2300      	movs	r3, #0
 8006088:	e009      	b.n	800609e <TF_SendFrame_Begin+0x88>
    }

    CKSUM_RESET(tf->tx_cksum);
 800608a:	f7ff fd99 	bl	8005bc0 <TF_CksumStart>
 800608e:	4603      	mov	r3, r0
 8006090:	461a      	mov	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006098:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    return true;
 800609c:	2301      	movs	r3, #1
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b088      	sub	sp, #32
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]

    remain = length;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 80060ba:	e050      	b.n	800615e <TF_SendFrame_Chunk+0xb8>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060c2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80060c6:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bf28      	it	cs
 80060d0:	4613      	movcs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 80060da:	3303      	adds	r3, #3
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80060e2:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 80060e6:	1898      	adds	r0, r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	18d1      	adds	r1, r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80060f8:	332c      	adds	r3, #44	@ 0x2c
 80060fa:	f7ff ff22 	bl	8005f42 <TF_ComposeBody>
 80060fe:	4602      	mov	r2, r0
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006106:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800610a:	4413      	add	r3, r2
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006112:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        remain -= chunk;
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	4413      	add	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800612c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006130:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8006134:	d113      	bne.n	800615e <TF_SendFrame_Chunk+0xb8>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 800613c:	3303      	adds	r3, #3
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006144:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006148:	4619      	mov	r1, r3
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7fc fbc1 	bl	80028d2 <TF_WriteImpl>
            tf->tx_pos = 0;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006156:	461a      	mov	r2, r3
 8006158:	2300      	movs	r3, #0
 800615a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    while (remain > 0) {
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ab      	bne.n	80060bc <TF_SendFrame_Chunk+0x16>
        }
    }
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800617c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006180:	2b00      	cmp	r3, #0
 8006182:	d03a      	beq.n	80061fa <TF_SendFrame_End+0x8c>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800618a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800618e:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006192:	2b01      	cmp	r3, #1
 8006194:	d813      	bhi.n	80061be <TF_SendFrame_End+0x50>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 800619c:	3303      	adds	r3, #3
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80061a4:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fb91 	bl	80028d2 <TF_WriteImpl>
            tf->tx_pos = 0;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061b6:	461a      	mov	r2, r3
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 80061c4:	3303      	adds	r3, #3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80061cc:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80061d8:	332c      	adds	r3, #44	@ 0x2c
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7ff fee4 	bl	8005faa <TF_ComposeTail>
 80061e2:	4602      	mov	r2, r0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80061ee:	4413      	add	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80061f6:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006200:	3303      	adds	r3, #3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006208:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fc fb5f 	bl	80028d2 <TF_WriteImpl>
    TF_ReleaseTx(tf);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fcc3 	bl	8005ba0 <TF_ReleaseTx>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <TF_SendFrame>:
 * @param listener - ID listener, or NULL
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, timeout));
 8006230:	887b      	ldrh	r3, [r7, #2]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff feed 	bl	8006016 <TF_SendFrame_Begin>
 800623c:	4603      	mov	r3, r0
 800623e:	f083 0301 	eor.w	r3, r3, #1
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <TF_SendFrame+0x2a>
 8006248:	2300      	movs	r3, #0
 800624a:	e013      	b.n	8006274 <TF_SendFrame+0x52>
    if (msg->len == 0 || msg->data != NULL) {
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	899b      	ldrh	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <TF_SendFrame+0x3a>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <TF_SendFrame+0x50>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6899      	ldr	r1, [r3, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	899b      	ldrh	r3, [r3, #12]
 8006264:	461a      	mov	r2, r3
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7ff ff1d 	bl	80060a6 <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff ff7e 	bl	800616e <TF_SendFrame_End>
    }
    return true;
 8006272:	2301      	movs	r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, 0);
 8006286:	2300      	movs	r3, #0
 8006288:	2200      	movs	r2, #0
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff ffc8 	bl	8006222 <TF_SendFrame>
 8006292:	4603      	mov	r3, r0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <TF_Respond>:
    return TF_SendFrame(tf, msg, listener, timeout);
}

/** Like TF_Send, but with explicit frame ID (set inside the msg object), use for responses */
bool _TF_FN TF_Respond(TinyFrame *tf, TF_Msg *msg)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
    msg->is_response = true;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2201      	movs	r2, #1
 80062aa:	711a      	strb	r2, [r3, #4]
    return TF_Send(tf, msg);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff ffe4 	bl	800627c <TF_Send>
 80062b4:	4603      	mov	r3, r0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 80062be:	b480      	push	{r7}
 80062c0:	b08f      	sub	sp, #60	@ 0x3c
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	891a      	ldrh	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	8a1b      	ldrh	r3, [r3, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d301      	bcc.n	80062d8 <load_descriptor_values+0x1a>
        return false;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e156      	b.n	8006586 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 80062ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ec:	0a1b      	lsrs	r3, r3, #8
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d05a      	beq.n	80063b4 <load_descriptor_values+0xf6>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	f200 8094 	bhi.w	800642c <load_descriptor_values+0x16e>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <load_descriptor_values+0x50>
 8006308:	2b01      	cmp	r3, #1
 800630a:	d01f      	beq.n	800634c <load_descriptor_values+0x8e>
 800630c:	e08e      	b.n	800642c <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	b29b      	uxth	r3, r3
 800631a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	0e1b      	lsrs	r3, r3, #24
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	b2db      	uxtb	r3, r3
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 800633a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633c:	0f1b      	lsrs	r3, r3, #28
 800633e:	b29b      	uxth	r3, r3
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	825a      	strh	r2, [r3, #18]
            break;
 800634a:	e0b4      	b.n	80064b6 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	895b      	ldrh	r3, [r3, #10]
 8006356:	3301      	adds	r3, #1
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	b29b      	uxth	r3, r3
 8006366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	089b      	lsrs	r3, r3, #2
 8006374:	b29b      	uxth	r3, r3
 8006376:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800637a:	b29a      	uxth	r2, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	0f1b      	lsrs	r3, r3, #28
 8006380:	b29b      	uxth	r3, r3
 8006382:	019b      	lsls	r3, r3, #6
 8006384:	b29b      	uxth	r3, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	0f1b      	lsrs	r3, r3, #28
 8006392:	b25b      	sxtb	r3, r3
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	825a      	strh	r2, [r3, #18]
            break;
 80063b2:	e080      	b.n	80064b6 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	895b      	ldrh	r3, [r3, #10]
 80063be:	3301      	adds	r3, #1
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	895b      	ldrh	r3, [r3, #10]
 80063d2:	3302      	adds	r3, #2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	895b      	ldrh	r3, [r3, #10]
 80063e6:	3303      	adds	r3, #3
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 80063f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80063fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fc:	089b      	lsrs	r3, r3, #2
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006404:	b29a      	uxth	r2, r3
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	0a1b      	lsrs	r3, r3, #8
 800640a:	b29b      	uxth	r3, r3
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8006418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	825a      	strh	r2, [r3, #18]
            break;
 800642a:	e044      	b.n	80064b6 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	895b      	ldrh	r3, [r3, #10]
 8006436:	3301      	adds	r3, #1
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	895b      	ldrh	r3, [r3, #10]
 800644a:	3302      	adds	r3, #2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	895b      	ldrh	r3, [r3, #10]
 800645e:	3303      	adds	r3, #3
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	895b      	ldrh	r3, [r3, #10]
 8006472:	3304      	adds	r3, #4
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	089b      	lsrs	r3, r3, #2
 8006488:	b29b      	uxth	r3, r3
 800648a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800648e:	b29a      	uxth	r2, r3
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	b29b      	uxth	r3, r3
 8006496:	019b      	lsls	r3, r3, #6
 8006498:	b29b      	uxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b29a      	uxth	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	825a      	strh	r2, [r3, #18]
            break;
 80064b4:	bf00      	nop
        }
    }

    if (!iter->message)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	621a      	str	r2, [r3, #32]
 80064ca:	e041      	b.n	8006550 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	441a      	add	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	619a      	str	r2, [r3, #24]

        if (size_offset)
 80064d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80064e8:	425b      	negs	r3, r3
 80064ea:	441a      	add	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]
 80064f0:	e01a      	b.n	8006528 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7d9b      	ldrb	r3, [r3, #22]
 80064f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d111      	bne.n	8006522 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7d9b      	ldrb	r3, [r3, #22]
 8006502:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	7d9b      	ldrb	r3, [r3, #22]
 800650e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8006512:	2b80      	cmp	r3, #128	@ 0x80
 8006514:	d105      	bne.n	8006522 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f103 0214 	add.w	r2, r3, #20
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	621a      	str	r2, [r3, #32]
 8006520:	e002      	b.n	8006528 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	7d9b      	ldrb	r3, [r3, #22]
 800652c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006530:	2b80      	cmp	r3, #128	@ 0x80
 8006532:	d109      	bne.n	8006548 <load_descriptor_values+0x28a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	e003      	b.n	8006550 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7d9b      	ldrb	r3, [r3, #22]
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	2b08      	cmp	r3, #8
 800655a:	d005      	beq.n	8006568 <load_descriptor_values+0x2aa>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7d9b      	ldrb	r3, [r3, #22]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	2b09      	cmp	r3, #9
 8006566:	d10a      	bne.n	800657e <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	89db      	ldrh	r3, [r3, #14]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	625a      	str	r2, [r3, #36]	@ 0x24
 800657c:	e002      	b.n	8006584 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8006584:	2301      	movs	r3, #1
}
 8006586:	4618      	mov	r0, r3
 8006588:	373c      	adds	r7, #60	@ 0x3c
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
    iter->index++;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	891b      	ldrh	r3, [r3, #8]
 800659e:	3301      	adds	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	891a      	ldrh	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	8a1b      	ldrh	r3, [r3, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d30c      	bcc.n	80065ce <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 80065cc:	e03b      	b.n	8006646 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	895b      	ldrh	r3, [r3, #10]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	2201      	movs	r2, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	895a      	ldrh	r2, [r3, #10]
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	4413      	add	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	899b      	ldrh	r3, [r3, #12]
 8006606:	7afa      	ldrb	r2, [r7, #11]
 8006608:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800660c:	2a00      	cmp	r2, #0
 800660e:	bf0c      	ite	eq
 8006610:	2201      	moveq	r2, #1
 8006612:	2200      	movne	r2, #0
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	4413      	add	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	89da      	ldrh	r2, [r3, #14]
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	2b08      	cmp	r3, #8
 800662a:	d004      	beq.n	8006636 <advance_iterator+0xa4>
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	2b09      	cmp	r3, #9
 8006634:	d101      	bne.n	800663a <advance_iterator+0xa8>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <advance_iterator+0xaa>
 800663a:	2300      	movs	r3, #0
 800663c:	b29b      	uxth	r3, r3
 800663e:	4413      	add	r3, r2
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	81da      	strh	r2, [r3, #14]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800665e:	2228      	movs	r2, #40	@ 0x28
 8006660:	2100      	movs	r1, #0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fc0e 	bl	8006e84 <memset>

    iter->descriptor = desc;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff fe22 	bl	80062be <load_descriptor_values>
 800667a:	4603      	mov	r3, r0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066a6:	2b80      	cmp	r3, #128	@ 0x80
 80066a8:	d109      	bne.n	80066be <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	3304      	adds	r3, #4
 80066ae:	461a      	mov	r2, r3
 80066b0:	6939      	ldr	r1, [r7, #16]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff ffcd 	bl	8006652 <pb_field_iter_begin>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]
 80066bc:	e008      	b.n	80066d0 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6939      	ldr	r1, [r7, #16]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff ffc3 	bl	8006652 <pb_field_iter_begin>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f103 020c 	add.w	r2, r3, #12
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	621a      	str	r2, [r3, #32]
    return status;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff50 	bl	8006592 <advance_iterator>
    (void)load_descriptor_values(iter);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fde3 	bl	80062be <load_descriptor_values>
    return iter->index != 0;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	891b      	ldrh	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8a1b      	ldrh	r3, [r3, #16]
 800671c:	461a      	mov	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8006724:	2301      	movs	r3, #1
 8006726:	e044      	b.n	80067b2 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	8a9b      	ldrh	r3, [r3, #20]
 800672e:	461a      	mov	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <pb_field_iter_find+0x2c>
    {
        return false;
 8006736:	2300      	movs	r3, #0
 8006738:	e03b      	b.n	80067b2 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	891b      	ldrh	r3, [r3, #8]
 800673e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8a1b      	ldrh	r3, [r3, #16]
 8006744:	461a      	mov	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	4293      	cmp	r3, r2
 800674a:	d204      	bcs.n	8006756 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	8a1a      	ldrh	r2, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ff1b 	bl	8006592 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	895b      	ldrh	r3, [r3, #10]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	089a      	lsrs	r2, r3, #2
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	4053      	eors	r3, r2
 8006776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800677a:	2b00      	cmp	r3, #0
 800677c:	d110      	bne.n	80067a0 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fd9d 	bl	80062be <load_descriptor_values>

                if (iter->tag == tag &&
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8a1b      	ldrh	r3, [r3, #16]
 8006788:	461a      	mov	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	4293      	cmp	r3, r2
 800678e:	d107      	bne.n	80067a0 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7d9b      	ldrb	r3, [r3, #22]
 8006794:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8006798:	2b0a      	cmp	r3, #10
 800679a:	d001      	beq.n	80067a0 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 800679c:	2301      	movs	r3, #1
 800679e:	e008      	b.n	80067b2 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	891b      	ldrh	r3, [r3, #8]
 80067a4:	89fa      	ldrh	r2, [r7, #14]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d1d5      	bne.n	8006756 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fd87 	bl	80062be <load_descriptor_values>
        return false;
 80067b0:	2300      	movs	r3, #0
    }
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	7d9b      	ldrb	r3, [r3, #22]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	2b0a      	cmp	r3, #10
 80067cc:	d101      	bne.n	80067d2 <pb_field_iter_find_extension+0x18>
    {
        return true;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e022      	b.n	8006818 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	891b      	ldrh	r3, [r3, #8]
 80067d6:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff feda 	bl	8006592 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	895b      	ldrh	r3, [r3, #10]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	2b0a      	cmp	r3, #10
 80067fa:	d104      	bne.n	8006806 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fd5e 	bl	80062be <load_descriptor_values>
 8006802:	4603      	mov	r3, r0
 8006804:	e008      	b.n	8006818 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	891b      	ldrh	r3, [r3, #8]
 800680a:	89fa      	ldrh	r2, [r7, #14]
 800680c:	429a      	cmp	r2, r3
 800680e:	d1e3      	bne.n	80067d8 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fd54 	bl	80062be <load_descriptor_values>
        return false;
 8006816:	2300      	movs	r3, #0
    }
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800682c:	68fb      	ldr	r3, [r7, #12]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff ffea 	bl	8006820 <pb_const_cast>
 800684c:	4603      	mov	r3, r0
 800684e:	461a      	mov	r2, r3
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff fefd 	bl	8006652 <pb_field_iter_begin>
 8006858:	4603      	mov	r3, r0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800686c:	6838      	ldr	r0, [r7, #0]
 800686e:	f7ff ffd7 	bl	8006820 <pb_const_cast>
 8006872:	4603      	mov	r3, r0
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff ff04 	bl	8006684 <pb_field_iter_begin_extension>
 800687c:	4603      	mov	r3, r0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8a5b      	ldrh	r3, [r3, #18]
 8006896:	2b08      	cmp	r3, #8
 8006898:	d125      	bne.n	80068e6 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01f      	beq.n	80068e6 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00c      	beq.n	80068c6 <pb_default_field_callback+0x40>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	3204      	adds	r2, #4
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	e010      	b.n	80068e8 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <pb_default_field_callback+0x60>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	3204      	adds	r2, #4
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	68b8      	ldr	r0, [r7, #8]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	e000      	b.n	80068e8 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 80068e6:	2301      	movs	r3, #1

}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <calloc>:
 80068f0:	4b02      	ldr	r3, [pc, #8]	@ (80068fc <calloc+0xc>)
 80068f2:	460a      	mov	r2, r1
 80068f4:	4601      	mov	r1, r0
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f000 b802 	b.w	8006900 <_calloc_r>
 80068fc:	20000024 	.word	0x20000024

08006900 <_calloc_r>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	fba1 5402 	umull	r5, r4, r1, r2
 8006906:	b934      	cbnz	r4, 8006916 <_calloc_r+0x16>
 8006908:	4629      	mov	r1, r5
 800690a:	f000 f837 	bl	800697c <_malloc_r>
 800690e:	4606      	mov	r6, r0
 8006910:	b928      	cbnz	r0, 800691e <_calloc_r+0x1e>
 8006912:	4630      	mov	r0, r6
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	220c      	movs	r2, #12
 8006918:	6002      	str	r2, [r0, #0]
 800691a:	2600      	movs	r6, #0
 800691c:	e7f9      	b.n	8006912 <_calloc_r+0x12>
 800691e:	462a      	mov	r2, r5
 8006920:	4621      	mov	r1, r4
 8006922:	f000 faaf 	bl	8006e84 <memset>
 8006926:	e7f4      	b.n	8006912 <_calloc_r+0x12>

08006928 <free>:
 8006928:	4b02      	ldr	r3, [pc, #8]	@ (8006934 <free+0xc>)
 800692a:	4601      	mov	r1, r0
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	f000 bb43 	b.w	8006fb8 <_free_r>
 8006932:	bf00      	nop
 8006934:	20000024 	.word	0x20000024

08006938 <sbrk_aligned>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4e0f      	ldr	r6, [pc, #60]	@ (8006978 <sbrk_aligned+0x40>)
 800693c:	460c      	mov	r4, r1
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	4605      	mov	r5, r0
 8006942:	b911      	cbnz	r1, 800694a <sbrk_aligned+0x12>
 8006944:	f000 fada 	bl	8006efc <_sbrk_r>
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 fad5 	bl	8006efc <_sbrk_r>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d103      	bne.n	800695e <sbrk_aligned+0x26>
 8006956:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800695a:	4620      	mov	r0, r4
 800695c:	bd70      	pop	{r4, r5, r6, pc}
 800695e:	1cc4      	adds	r4, r0, #3
 8006960:	f024 0403 	bic.w	r4, r4, #3
 8006964:	42a0      	cmp	r0, r4
 8006966:	d0f8      	beq.n	800695a <sbrk_aligned+0x22>
 8006968:	1a21      	subs	r1, r4, r0
 800696a:	4628      	mov	r0, r5
 800696c:	f000 fac6 	bl	8006efc <_sbrk_r>
 8006970:	3001      	adds	r0, #1
 8006972:	d1f2      	bne.n	800695a <sbrk_aligned+0x22>
 8006974:	e7ef      	b.n	8006956 <sbrk_aligned+0x1e>
 8006976:	bf00      	nop
 8006978:	200004e4 	.word	0x200004e4

0800697c <_malloc_r>:
 800697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006980:	1ccd      	adds	r5, r1, #3
 8006982:	f025 0503 	bic.w	r5, r5, #3
 8006986:	3508      	adds	r5, #8
 8006988:	2d0c      	cmp	r5, #12
 800698a:	bf38      	it	cc
 800698c:	250c      	movcc	r5, #12
 800698e:	2d00      	cmp	r5, #0
 8006990:	4606      	mov	r6, r0
 8006992:	db01      	blt.n	8006998 <_malloc_r+0x1c>
 8006994:	42a9      	cmp	r1, r5
 8006996:	d904      	bls.n	80069a2 <_malloc_r+0x26>
 8006998:	230c      	movs	r3, #12
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	2000      	movs	r0, #0
 800699e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a78 <_malloc_r+0xfc>
 80069a6:	f000 f869 	bl	8006a7c <__malloc_lock>
 80069aa:	f8d8 3000 	ldr.w	r3, [r8]
 80069ae:	461c      	mov	r4, r3
 80069b0:	bb44      	cbnz	r4, 8006a04 <_malloc_r+0x88>
 80069b2:	4629      	mov	r1, r5
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff ffbf 	bl	8006938 <sbrk_aligned>
 80069ba:	1c43      	adds	r3, r0, #1
 80069bc:	4604      	mov	r4, r0
 80069be:	d158      	bne.n	8006a72 <_malloc_r+0xf6>
 80069c0:	f8d8 4000 	ldr.w	r4, [r8]
 80069c4:	4627      	mov	r7, r4
 80069c6:	2f00      	cmp	r7, #0
 80069c8:	d143      	bne.n	8006a52 <_malloc_r+0xd6>
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	d04b      	beq.n	8006a66 <_malloc_r+0xea>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	4639      	mov	r1, r7
 80069d2:	4630      	mov	r0, r6
 80069d4:	eb04 0903 	add.w	r9, r4, r3
 80069d8:	f000 fa90 	bl	8006efc <_sbrk_r>
 80069dc:	4581      	cmp	r9, r0
 80069de:	d142      	bne.n	8006a66 <_malloc_r+0xea>
 80069e0:	6821      	ldr	r1, [r4, #0]
 80069e2:	1a6d      	subs	r5, r5, r1
 80069e4:	4629      	mov	r1, r5
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7ff ffa6 	bl	8006938 <sbrk_aligned>
 80069ec:	3001      	adds	r0, #1
 80069ee:	d03a      	beq.n	8006a66 <_malloc_r+0xea>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	442b      	add	r3, r5
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	f8d8 3000 	ldr.w	r3, [r8]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	bb62      	cbnz	r2, 8006a58 <_malloc_r+0xdc>
 80069fe:	f8c8 7000 	str.w	r7, [r8]
 8006a02:	e00f      	b.n	8006a24 <_malloc_r+0xa8>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	1b52      	subs	r2, r2, r5
 8006a08:	d420      	bmi.n	8006a4c <_malloc_r+0xd0>
 8006a0a:	2a0b      	cmp	r2, #11
 8006a0c:	d917      	bls.n	8006a3e <_malloc_r+0xc2>
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	6025      	str	r5, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	6059      	strne	r1, [r3, #4]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	bf08      	it	eq
 8006a1c:	f8c8 1000 	streq.w	r1, [r8]
 8006a20:	5162      	str	r2, [r4, r5]
 8006a22:	604b      	str	r3, [r1, #4]
 8006a24:	4630      	mov	r0, r6
 8006a26:	f000 f82f 	bl	8006a88 <__malloc_unlock>
 8006a2a:	f104 000b 	add.w	r0, r4, #11
 8006a2e:	1d23      	adds	r3, r4, #4
 8006a30:	f020 0007 	bic.w	r0, r0, #7
 8006a34:	1ac2      	subs	r2, r0, r3
 8006a36:	bf1c      	itt	ne
 8006a38:	1a1b      	subne	r3, r3, r0
 8006a3a:	50a3      	strne	r3, [r4, r2]
 8006a3c:	e7af      	b.n	800699e <_malloc_r+0x22>
 8006a3e:	6862      	ldr	r2, [r4, #4]
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	bf0c      	ite	eq
 8006a44:	f8c8 2000 	streq.w	r2, [r8]
 8006a48:	605a      	strne	r2, [r3, #4]
 8006a4a:	e7eb      	b.n	8006a24 <_malloc_r+0xa8>
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	6864      	ldr	r4, [r4, #4]
 8006a50:	e7ae      	b.n	80069b0 <_malloc_r+0x34>
 8006a52:	463c      	mov	r4, r7
 8006a54:	687f      	ldr	r7, [r7, #4]
 8006a56:	e7b6      	b.n	80069c6 <_malloc_r+0x4a>
 8006a58:	461a      	mov	r2, r3
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d1fb      	bne.n	8006a58 <_malloc_r+0xdc>
 8006a60:	2300      	movs	r3, #0
 8006a62:	6053      	str	r3, [r2, #4]
 8006a64:	e7de      	b.n	8006a24 <_malloc_r+0xa8>
 8006a66:	230c      	movs	r3, #12
 8006a68:	6033      	str	r3, [r6, #0]
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f000 f80c 	bl	8006a88 <__malloc_unlock>
 8006a70:	e794      	b.n	800699c <_malloc_r+0x20>
 8006a72:	6005      	str	r5, [r0, #0]
 8006a74:	e7d6      	b.n	8006a24 <_malloc_r+0xa8>
 8006a76:	bf00      	nop
 8006a78:	200004e8 	.word	0x200004e8

08006a7c <__malloc_lock>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	@ (8006a84 <__malloc_lock+0x8>)
 8006a7e:	f000 ba8a 	b.w	8006f96 <__retarget_lock_acquire_recursive>
 8006a82:	bf00      	nop
 8006a84:	2000062c 	.word	0x2000062c

08006a88 <__malloc_unlock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	@ (8006a90 <__malloc_unlock+0x8>)
 8006a8a:	f000 ba85 	b.w	8006f98 <__retarget_lock_release_recursive>
 8006a8e:	bf00      	nop
 8006a90:	2000062c 	.word	0x2000062c

08006a94 <std>:
 8006a94:	2300      	movs	r3, #0
 8006a96:	b510      	push	{r4, lr}
 8006a98:	4604      	mov	r4, r0
 8006a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aa2:	6083      	str	r3, [r0, #8]
 8006aa4:	8181      	strh	r1, [r0, #12]
 8006aa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006aa8:	81c2      	strh	r2, [r0, #14]
 8006aaa:	6183      	str	r3, [r0, #24]
 8006aac:	4619      	mov	r1, r3
 8006aae:	2208      	movs	r2, #8
 8006ab0:	305c      	adds	r0, #92	@ 0x5c
 8006ab2:	f000 f9e7 	bl	8006e84 <memset>
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <std+0x58>)
 8006ab8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006aba:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <std+0x5c>)
 8006abc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006abe:	4b0d      	ldr	r3, [pc, #52]	@ (8006af4 <std+0x60>)
 8006ac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <std+0x64>)
 8006ac4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <std+0x68>)
 8006ac8:	6224      	str	r4, [r4, #32]
 8006aca:	429c      	cmp	r4, r3
 8006acc:	d006      	beq.n	8006adc <std+0x48>
 8006ace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ad2:	4294      	cmp	r4, r2
 8006ad4:	d002      	beq.n	8006adc <std+0x48>
 8006ad6:	33d0      	adds	r3, #208	@ 0xd0
 8006ad8:	429c      	cmp	r4, r3
 8006ada:	d105      	bne.n	8006ae8 <std+0x54>
 8006adc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae4:	f000 ba56 	b.w	8006f94 <__retarget_lock_init_recursive>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	08006cd5 	.word	0x08006cd5
 8006af0:	08006cf7 	.word	0x08006cf7
 8006af4:	08006d2f 	.word	0x08006d2f
 8006af8:	08006d53 	.word	0x08006d53
 8006afc:	200004ec 	.word	0x200004ec

08006b00 <stdio_exit_handler>:
 8006b00:	4a02      	ldr	r2, [pc, #8]	@ (8006b0c <stdio_exit_handler+0xc>)
 8006b02:	4903      	ldr	r1, [pc, #12]	@ (8006b10 <stdio_exit_handler+0x10>)
 8006b04:	4803      	ldr	r0, [pc, #12]	@ (8006b14 <stdio_exit_handler+0x14>)
 8006b06:	f000 b869 	b.w	8006bdc <_fwalk_sglue>
 8006b0a:	bf00      	nop
 8006b0c:	20000018 	.word	0x20000018
 8006b10:	08007155 	.word	0x08007155
 8006b14:	20000028 	.word	0x20000028

08006b18 <cleanup_stdio>:
 8006b18:	6841      	ldr	r1, [r0, #4]
 8006b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b4c <cleanup_stdio+0x34>)
 8006b1c:	4299      	cmp	r1, r3
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	d001      	beq.n	8006b28 <cleanup_stdio+0x10>
 8006b24:	f000 fb16 	bl	8007154 <_fflush_r>
 8006b28:	68a1      	ldr	r1, [r4, #8]
 8006b2a:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <cleanup_stdio+0x38>)
 8006b2c:	4299      	cmp	r1, r3
 8006b2e:	d002      	beq.n	8006b36 <cleanup_stdio+0x1e>
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 fb0f 	bl	8007154 <_fflush_r>
 8006b36:	68e1      	ldr	r1, [r4, #12]
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <cleanup_stdio+0x3c>)
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	d004      	beq.n	8006b48 <cleanup_stdio+0x30>
 8006b3e:	4620      	mov	r0, r4
 8006b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b44:	f000 bb06 	b.w	8007154 <_fflush_r>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200004ec 	.word	0x200004ec
 8006b50:	20000554 	.word	0x20000554
 8006b54:	200005bc 	.word	0x200005bc

08006b58 <global_stdio_init.part.0>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <global_stdio_init.part.0+0x30>)
 8006b5c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b8c <global_stdio_init.part.0+0x34>)
 8006b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b90 <global_stdio_init.part.0+0x38>)
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	4620      	mov	r0, r4
 8006b64:	2200      	movs	r2, #0
 8006b66:	2104      	movs	r1, #4
 8006b68:	f7ff ff94 	bl	8006a94 <std>
 8006b6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b70:	2201      	movs	r2, #1
 8006b72:	2109      	movs	r1, #9
 8006b74:	f7ff ff8e 	bl	8006a94 <std>
 8006b78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b82:	2112      	movs	r1, #18
 8006b84:	f7ff bf86 	b.w	8006a94 <std>
 8006b88:	20000624 	.word	0x20000624
 8006b8c:	200004ec 	.word	0x200004ec
 8006b90:	08006b01 	.word	0x08006b01

08006b94 <__sfp_lock_acquire>:
 8006b94:	4801      	ldr	r0, [pc, #4]	@ (8006b9c <__sfp_lock_acquire+0x8>)
 8006b96:	f000 b9fe 	b.w	8006f96 <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	2000062d 	.word	0x2000062d

08006ba0 <__sfp_lock_release>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__sfp_lock_release+0x8>)
 8006ba2:	f000 b9f9 	b.w	8006f98 <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	2000062d 	.word	0x2000062d

08006bac <__sinit>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	4604      	mov	r4, r0
 8006bb0:	f7ff fff0 	bl	8006b94 <__sfp_lock_acquire>
 8006bb4:	6a23      	ldr	r3, [r4, #32]
 8006bb6:	b11b      	cbz	r3, 8006bc0 <__sinit+0x14>
 8006bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bbc:	f7ff bff0 	b.w	8006ba0 <__sfp_lock_release>
 8006bc0:	4b04      	ldr	r3, [pc, #16]	@ (8006bd4 <__sinit+0x28>)
 8006bc2:	6223      	str	r3, [r4, #32]
 8006bc4:	4b04      	ldr	r3, [pc, #16]	@ (8006bd8 <__sinit+0x2c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f5      	bne.n	8006bb8 <__sinit+0xc>
 8006bcc:	f7ff ffc4 	bl	8006b58 <global_stdio_init.part.0>
 8006bd0:	e7f2      	b.n	8006bb8 <__sinit+0xc>
 8006bd2:	bf00      	nop
 8006bd4:	08006b19 	.word	0x08006b19
 8006bd8:	20000624 	.word	0x20000624

08006bdc <_fwalk_sglue>:
 8006bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be0:	4607      	mov	r7, r0
 8006be2:	4688      	mov	r8, r1
 8006be4:	4614      	mov	r4, r2
 8006be6:	2600      	movs	r6, #0
 8006be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bec:	f1b9 0901 	subs.w	r9, r9, #1
 8006bf0:	d505      	bpl.n	8006bfe <_fwalk_sglue+0x22>
 8006bf2:	6824      	ldr	r4, [r4, #0]
 8006bf4:	2c00      	cmp	r4, #0
 8006bf6:	d1f7      	bne.n	8006be8 <_fwalk_sglue+0xc>
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d907      	bls.n	8006c14 <_fwalk_sglue+0x38>
 8006c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	d003      	beq.n	8006c14 <_fwalk_sglue+0x38>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4638      	mov	r0, r7
 8006c10:	47c0      	blx	r8
 8006c12:	4306      	orrs	r6, r0
 8006c14:	3568      	adds	r5, #104	@ 0x68
 8006c16:	e7e9      	b.n	8006bec <_fwalk_sglue+0x10>

08006c18 <_puts_r>:
 8006c18:	6a03      	ldr	r3, [r0, #32]
 8006c1a:	b570      	push	{r4, r5, r6, lr}
 8006c1c:	6884      	ldr	r4, [r0, #8]
 8006c1e:	4605      	mov	r5, r0
 8006c20:	460e      	mov	r6, r1
 8006c22:	b90b      	cbnz	r3, 8006c28 <_puts_r+0x10>
 8006c24:	f7ff ffc2 	bl	8006bac <__sinit>
 8006c28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d405      	bmi.n	8006c3a <_puts_r+0x22>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	0598      	lsls	r0, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_puts_r+0x22>
 8006c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c36:	f000 f9ae 	bl	8006f96 <__retarget_lock_acquire_recursive>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	0719      	lsls	r1, r3, #28
 8006c3e:	d502      	bpl.n	8006c46 <_puts_r+0x2e>
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d135      	bne.n	8006cb2 <_puts_r+0x9a>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 f8c5 	bl	8006dd8 <__swsetup_r>
 8006c4e:	b380      	cbz	r0, 8006cb2 <_puts_r+0x9a>
 8006c50:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006c54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c56:	07da      	lsls	r2, r3, #31
 8006c58:	d405      	bmi.n	8006c66 <_puts_r+0x4e>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	059b      	lsls	r3, r3, #22
 8006c5e:	d402      	bmi.n	8006c66 <_puts_r+0x4e>
 8006c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c62:	f000 f999 	bl	8006f98 <__retarget_lock_release_recursive>
 8006c66:	4628      	mov	r0, r5
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da04      	bge.n	8006c78 <_puts_r+0x60>
 8006c6e:	69a2      	ldr	r2, [r4, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	dc17      	bgt.n	8006ca4 <_puts_r+0x8c>
 8006c74:	290a      	cmp	r1, #10
 8006c76:	d015      	beq.n	8006ca4 <_puts_r+0x8c>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	7019      	strb	r1, [r3, #0]
 8006c80:	68a3      	ldr	r3, [r4, #8]
 8006c82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c86:	3b01      	subs	r3, #1
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	d1ed      	bne.n	8006c6a <_puts_r+0x52>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da11      	bge.n	8006cb6 <_puts_r+0x9e>
 8006c92:	4622      	mov	r2, r4
 8006c94:	210a      	movs	r1, #10
 8006c96:	4628      	mov	r0, r5
 8006c98:	f000 f85f 	bl	8006d5a <__swbuf_r>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d0d7      	beq.n	8006c50 <_puts_r+0x38>
 8006ca0:	250a      	movs	r5, #10
 8006ca2:	e7d7      	b.n	8006c54 <_puts_r+0x3c>
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 f857 	bl	8006d5a <__swbuf_r>
 8006cac:	3001      	adds	r0, #1
 8006cae:	d1e7      	bne.n	8006c80 <_puts_r+0x68>
 8006cb0:	e7ce      	b.n	8006c50 <_puts_r+0x38>
 8006cb2:	3e01      	subs	r6, #1
 8006cb4:	e7e4      	b.n	8006c80 <_puts_r+0x68>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	6022      	str	r2, [r4, #0]
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	e7ee      	b.n	8006ca0 <_puts_r+0x88>
	...

08006cc4 <puts>:
 8006cc4:	4b02      	ldr	r3, [pc, #8]	@ (8006cd0 <puts+0xc>)
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	f7ff bfa5 	b.w	8006c18 <_puts_r>
 8006cce:	bf00      	nop
 8006cd0:	20000024 	.word	0x20000024

08006cd4 <__sread>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cdc:	f000 f8fc 	bl	8006ed8 <_read_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfab      	itete	ge
 8006ce4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce8:	181b      	addge	r3, r3, r0
 8006cea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cee:	bfac      	ite	ge
 8006cf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cf2:	81a3      	strhlt	r3, [r4, #12]
 8006cf4:	bd10      	pop	{r4, pc}

08006cf6 <__swrite>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	05db      	lsls	r3, r3, #23
 8006d00:	4605      	mov	r5, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	4616      	mov	r6, r2
 8006d06:	d505      	bpl.n	8006d14 <__swrite+0x1e>
 8006d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f000 f8d0 	bl	8006eb4 <_lseek_r>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	4632      	mov	r2, r6
 8006d22:	463b      	mov	r3, r7
 8006d24:	4628      	mov	r0, r5
 8006d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	f000 b8f7 	b.w	8006f1c <_write_r>

08006d2e <__sseek>:
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 f8bd 	bl	8006eb4 <_lseek_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	bf15      	itete	ne
 8006d40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d4a:	81a3      	strheq	r3, [r4, #12]
 8006d4c:	bf18      	it	ne
 8006d4e:	81a3      	strhne	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__sclose>:
 8006d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d56:	f000 b89d 	b.w	8006e94 <_close_r>

08006d5a <__swbuf_r>:
 8006d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	4614      	mov	r4, r2
 8006d60:	4605      	mov	r5, r0
 8006d62:	b118      	cbz	r0, 8006d6c <__swbuf_r+0x12>
 8006d64:	6a03      	ldr	r3, [r0, #32]
 8006d66:	b90b      	cbnz	r3, 8006d6c <__swbuf_r+0x12>
 8006d68:	f7ff ff20 	bl	8006bac <__sinit>
 8006d6c:	69a3      	ldr	r3, [r4, #24]
 8006d6e:	60a3      	str	r3, [r4, #8]
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	071a      	lsls	r2, r3, #28
 8006d74:	d501      	bpl.n	8006d7a <__swbuf_r+0x20>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	b943      	cbnz	r3, 8006d8c <__swbuf_r+0x32>
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 f82b 	bl	8006dd8 <__swsetup_r>
 8006d82:	b118      	cbz	r0, 8006d8c <__swbuf_r+0x32>
 8006d84:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d88:	4638      	mov	r0, r7
 8006d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	1a98      	subs	r0, r3, r2
 8006d92:	6963      	ldr	r3, [r4, #20]
 8006d94:	b2f6      	uxtb	r6, r6
 8006d96:	4283      	cmp	r3, r0
 8006d98:	4637      	mov	r7, r6
 8006d9a:	dc05      	bgt.n	8006da8 <__swbuf_r+0x4e>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 f9d8 	bl	8007154 <_fflush_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1ed      	bne.n	8006d84 <__swbuf_r+0x2a>
 8006da8:	68a3      	ldr	r3, [r4, #8]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	6022      	str	r2, [r4, #0]
 8006db4:	701e      	strb	r6, [r3, #0]
 8006db6:	6962      	ldr	r2, [r4, #20]
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d004      	beq.n	8006dc8 <__swbuf_r+0x6e>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	07db      	lsls	r3, r3, #31
 8006dc2:	d5e1      	bpl.n	8006d88 <__swbuf_r+0x2e>
 8006dc4:	2e0a      	cmp	r6, #10
 8006dc6:	d1df      	bne.n	8006d88 <__swbuf_r+0x2e>
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 f9c2 	bl	8007154 <_fflush_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d0d9      	beq.n	8006d88 <__swbuf_r+0x2e>
 8006dd4:	e7d6      	b.n	8006d84 <__swbuf_r+0x2a>
	...

08006dd8 <__swsetup_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4b29      	ldr	r3, [pc, #164]	@ (8006e80 <__swsetup_r+0xa8>)
 8006ddc:	4605      	mov	r5, r0
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	460c      	mov	r4, r1
 8006de2:	b118      	cbz	r0, 8006dec <__swsetup_r+0x14>
 8006de4:	6a03      	ldr	r3, [r0, #32]
 8006de6:	b90b      	cbnz	r3, 8006dec <__swsetup_r+0x14>
 8006de8:	f7ff fee0 	bl	8006bac <__sinit>
 8006dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df0:	0719      	lsls	r1, r3, #28
 8006df2:	d422      	bmi.n	8006e3a <__swsetup_r+0x62>
 8006df4:	06da      	lsls	r2, r3, #27
 8006df6:	d407      	bmi.n	8006e08 <__swsetup_r+0x30>
 8006df8:	2209      	movs	r2, #9
 8006dfa:	602a      	str	r2, [r5, #0]
 8006dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e06:	e033      	b.n	8006e70 <__swsetup_r+0x98>
 8006e08:	0758      	lsls	r0, r3, #29
 8006e0a:	d512      	bpl.n	8006e32 <__swsetup_r+0x5a>
 8006e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e0e:	b141      	cbz	r1, 8006e22 <__swsetup_r+0x4a>
 8006e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e14:	4299      	cmp	r1, r3
 8006e16:	d002      	beq.n	8006e1e <__swsetup_r+0x46>
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f8cd 	bl	8006fb8 <_free_r>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	6063      	str	r3, [r4, #4]
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f043 0308 	orr.w	r3, r3, #8
 8006e38:	81a3      	strh	r3, [r4, #12]
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	b94b      	cbnz	r3, 8006e52 <__swsetup_r+0x7a>
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e48:	d003      	beq.n	8006e52 <__swsetup_r+0x7a>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f000 f9cf 	bl	80071f0 <__smakebuf_r>
 8006e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e56:	f013 0201 	ands.w	r2, r3, #1
 8006e5a:	d00a      	beq.n	8006e72 <__swsetup_r+0x9a>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	60a2      	str	r2, [r4, #8]
 8006e60:	6962      	ldr	r2, [r4, #20]
 8006e62:	4252      	negs	r2, r2
 8006e64:	61a2      	str	r2, [r4, #24]
 8006e66:	6922      	ldr	r2, [r4, #16]
 8006e68:	b942      	cbnz	r2, 8006e7c <__swsetup_r+0xa4>
 8006e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e6e:	d1c5      	bne.n	8006dfc <__swsetup_r+0x24>
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	0799      	lsls	r1, r3, #30
 8006e74:	bf58      	it	pl
 8006e76:	6962      	ldrpl	r2, [r4, #20]
 8006e78:	60a2      	str	r2, [r4, #8]
 8006e7a:	e7f4      	b.n	8006e66 <__swsetup_r+0x8e>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e7f7      	b.n	8006e70 <__swsetup_r+0x98>
 8006e80:	20000024 	.word	0x20000024

08006e84 <memset>:
 8006e84:	4402      	add	r2, r0
 8006e86:	4603      	mov	r3, r0
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d100      	bne.n	8006e8e <memset+0xa>
 8006e8c:	4770      	bx	lr
 8006e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e92:	e7f9      	b.n	8006e88 <memset+0x4>

08006e94 <_close_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	@ (8006eb0 <_close_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7f9 fd41 	bl	8000926 <_close>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_close_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_close_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000628 	.word	0x20000628

08006eb4 <_lseek_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	@ (8006ed4 <_lseek_r+0x20>)
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7f9 fd56 	bl	8000974 <_lseek>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_lseek_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_lseek_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20000628 	.word	0x20000628

08006ed8 <_read_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	@ (8006ef8 <_read_r+0x20>)
 8006edc:	4604      	mov	r4, r0
 8006ede:	4608      	mov	r0, r1
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	602a      	str	r2, [r5, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f7f9 fce4 	bl	80008b4 <_read>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_read_r+0x1e>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_read_r+0x1e>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20000628 	.word	0x20000628

08006efc <_sbrk_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	@ (8006f18 <_sbrk_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7f9 fd42 	bl	8000990 <_sbrk>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_sbrk_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_sbrk_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000628 	.word	0x20000628

08006f1c <_write_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	@ (8006f3c <_write_r+0x20>)
 8006f20:	4604      	mov	r4, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	602a      	str	r2, [r5, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f7f9 fcdf 	bl	80008ee <_write>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_write_r+0x1e>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_write_r+0x1e>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20000628 	.word	0x20000628

08006f40 <__errno>:
 8006f40:	4b01      	ldr	r3, [pc, #4]	@ (8006f48 <__errno+0x8>)
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000024 	.word	0x20000024

08006f4c <__libc_init_array>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f84 <__libc_init_array+0x38>)
 8006f50:	4c0d      	ldr	r4, [pc, #52]	@ (8006f88 <__libc_init_array+0x3c>)
 8006f52:	1b64      	subs	r4, r4, r5
 8006f54:	10a4      	asrs	r4, r4, #2
 8006f56:	2600      	movs	r6, #0
 8006f58:	42a6      	cmp	r6, r4
 8006f5a:	d109      	bne.n	8006f70 <__libc_init_array+0x24>
 8006f5c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f8c <__libc_init_array+0x40>)
 8006f5e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f90 <__libc_init_array+0x44>)
 8006f60:	f000 f9a4 	bl	80072ac <_init>
 8006f64:	1b64      	subs	r4, r4, r5
 8006f66:	10a4      	asrs	r4, r4, #2
 8006f68:	2600      	movs	r6, #0
 8006f6a:	42a6      	cmp	r6, r4
 8006f6c:	d105      	bne.n	8006f7a <__libc_init_array+0x2e>
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f74:	4798      	blx	r3
 8006f76:	3601      	adds	r6, #1
 8006f78:	e7ee      	b.n	8006f58 <__libc_init_array+0xc>
 8006f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7e:	4798      	blx	r3
 8006f80:	3601      	adds	r6, #1
 8006f82:	e7f2      	b.n	8006f6a <__libc_init_array+0x1e>
 8006f84:	08007bec 	.word	0x08007bec
 8006f88:	08007bec 	.word	0x08007bec
 8006f8c:	08007bec 	.word	0x08007bec
 8006f90:	08007bf0 	.word	0x08007bf0

08006f94 <__retarget_lock_init_recursive>:
 8006f94:	4770      	bx	lr

08006f96 <__retarget_lock_acquire_recursive>:
 8006f96:	4770      	bx	lr

08006f98 <__retarget_lock_release_recursive>:
 8006f98:	4770      	bx	lr

08006f9a <memcpy>:
 8006f9a:	440a      	add	r2, r1
 8006f9c:	4291      	cmp	r1, r2
 8006f9e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006fa2:	d100      	bne.n	8006fa6 <memcpy+0xc>
 8006fa4:	4770      	bx	lr
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb0:	4291      	cmp	r1, r2
 8006fb2:	d1f9      	bne.n	8006fa8 <memcpy+0xe>
 8006fb4:	bd10      	pop	{r4, pc}
	...

08006fb8 <_free_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4605      	mov	r5, r0
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	d041      	beq.n	8007044 <_free_r+0x8c>
 8006fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc4:	1f0c      	subs	r4, r1, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfb8      	it	lt
 8006fca:	18e4      	addlt	r4, r4, r3
 8006fcc:	f7ff fd56 	bl	8006a7c <__malloc_lock>
 8006fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8007048 <_free_r+0x90>)
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	b933      	cbnz	r3, 8006fe4 <_free_r+0x2c>
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	6014      	str	r4, [r2, #0]
 8006fda:	4628      	mov	r0, r5
 8006fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fe0:	f7ff bd52 	b.w	8006a88 <__malloc_unlock>
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d908      	bls.n	8006ffa <_free_r+0x42>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	1821      	adds	r1, r4, r0
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf01      	itttt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	1809      	addeq	r1, r1, r0
 8006ff6:	6021      	streq	r1, [r4, #0]
 8006ff8:	e7ed      	b.n	8006fd6 <_free_r+0x1e>
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b10b      	cbz	r3, 8007004 <_free_r+0x4c>
 8007000:	42a3      	cmp	r3, r4
 8007002:	d9fa      	bls.n	8006ffa <_free_r+0x42>
 8007004:	6811      	ldr	r1, [r2, #0]
 8007006:	1850      	adds	r0, r2, r1
 8007008:	42a0      	cmp	r0, r4
 800700a:	d10b      	bne.n	8007024 <_free_r+0x6c>
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	4401      	add	r1, r0
 8007010:	1850      	adds	r0, r2, r1
 8007012:	4283      	cmp	r3, r0
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	d1e0      	bne.n	8006fda <_free_r+0x22>
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	6053      	str	r3, [r2, #4]
 800701e:	4408      	add	r0, r1
 8007020:	6010      	str	r0, [r2, #0]
 8007022:	e7da      	b.n	8006fda <_free_r+0x22>
 8007024:	d902      	bls.n	800702c <_free_r+0x74>
 8007026:	230c      	movs	r3, #12
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	e7d6      	b.n	8006fda <_free_r+0x22>
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	1821      	adds	r1, r4, r0
 8007030:	428b      	cmp	r3, r1
 8007032:	bf04      	itt	eq
 8007034:	6819      	ldreq	r1, [r3, #0]
 8007036:	685b      	ldreq	r3, [r3, #4]
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	bf04      	itt	eq
 800703c:	1809      	addeq	r1, r1, r0
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	6054      	str	r4, [r2, #4]
 8007042:	e7ca      	b.n	8006fda <_free_r+0x22>
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	200004e8 	.word	0x200004e8

0800704c <__sflush_r>:
 800704c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007054:	0716      	lsls	r6, r2, #28
 8007056:	4605      	mov	r5, r0
 8007058:	460c      	mov	r4, r1
 800705a:	d454      	bmi.n	8007106 <__sflush_r+0xba>
 800705c:	684b      	ldr	r3, [r1, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	dc02      	bgt.n	8007068 <__sflush_r+0x1c>
 8007062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	dd48      	ble.n	80070fa <__sflush_r+0xae>
 8007068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800706a:	2e00      	cmp	r6, #0
 800706c:	d045      	beq.n	80070fa <__sflush_r+0xae>
 800706e:	2300      	movs	r3, #0
 8007070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007074:	682f      	ldr	r7, [r5, #0]
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	d030      	beq.n	80070de <__sflush_r+0x92>
 800707c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	0759      	lsls	r1, r3, #29
 8007082:	d505      	bpl.n	8007090 <__sflush_r+0x44>
 8007084:	6863      	ldr	r3, [r4, #4]
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800708a:	b10b      	cbz	r3, 8007090 <__sflush_r+0x44>
 800708c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	2300      	movs	r3, #0
 8007092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007094:	6a21      	ldr	r1, [r4, #32]
 8007096:	4628      	mov	r0, r5
 8007098:	47b0      	blx	r6
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	d106      	bne.n	80070ae <__sflush_r+0x62>
 80070a0:	6829      	ldr	r1, [r5, #0]
 80070a2:	291d      	cmp	r1, #29
 80070a4:	d82b      	bhi.n	80070fe <__sflush_r+0xb2>
 80070a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007150 <__sflush_r+0x104>)
 80070a8:	40ca      	lsrs	r2, r1
 80070aa:	07d6      	lsls	r6, r2, #31
 80070ac:	d527      	bpl.n	80070fe <__sflush_r+0xb2>
 80070ae:	2200      	movs	r2, #0
 80070b0:	6062      	str	r2, [r4, #4]
 80070b2:	04d9      	lsls	r1, r3, #19
 80070b4:	6922      	ldr	r2, [r4, #16]
 80070b6:	6022      	str	r2, [r4, #0]
 80070b8:	d504      	bpl.n	80070c4 <__sflush_r+0x78>
 80070ba:	1c42      	adds	r2, r0, #1
 80070bc:	d101      	bne.n	80070c2 <__sflush_r+0x76>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	b903      	cbnz	r3, 80070c4 <__sflush_r+0x78>
 80070c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80070c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070c6:	602f      	str	r7, [r5, #0]
 80070c8:	b1b9      	cbz	r1, 80070fa <__sflush_r+0xae>
 80070ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ce:	4299      	cmp	r1, r3
 80070d0:	d002      	beq.n	80070d8 <__sflush_r+0x8c>
 80070d2:	4628      	mov	r0, r5
 80070d4:	f7ff ff70 	bl	8006fb8 <_free_r>
 80070d8:	2300      	movs	r3, #0
 80070da:	6363      	str	r3, [r4, #52]	@ 0x34
 80070dc:	e00d      	b.n	80070fa <__sflush_r+0xae>
 80070de:	2301      	movs	r3, #1
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b0      	blx	r6
 80070e4:	4602      	mov	r2, r0
 80070e6:	1c50      	adds	r0, r2, #1
 80070e8:	d1c9      	bne.n	800707e <__sflush_r+0x32>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0c6      	beq.n	800707e <__sflush_r+0x32>
 80070f0:	2b1d      	cmp	r3, #29
 80070f2:	d001      	beq.n	80070f8 <__sflush_r+0xac>
 80070f4:	2b16      	cmp	r3, #22
 80070f6:	d11e      	bne.n	8007136 <__sflush_r+0xea>
 80070f8:	602f      	str	r7, [r5, #0]
 80070fa:	2000      	movs	r0, #0
 80070fc:	e022      	b.n	8007144 <__sflush_r+0xf8>
 80070fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007102:	b21b      	sxth	r3, r3
 8007104:	e01b      	b.n	800713e <__sflush_r+0xf2>
 8007106:	690f      	ldr	r7, [r1, #16]
 8007108:	2f00      	cmp	r7, #0
 800710a:	d0f6      	beq.n	80070fa <__sflush_r+0xae>
 800710c:	0793      	lsls	r3, r2, #30
 800710e:	680e      	ldr	r6, [r1, #0]
 8007110:	bf08      	it	eq
 8007112:	694b      	ldreq	r3, [r1, #20]
 8007114:	600f      	str	r7, [r1, #0]
 8007116:	bf18      	it	ne
 8007118:	2300      	movne	r3, #0
 800711a:	eba6 0807 	sub.w	r8, r6, r7
 800711e:	608b      	str	r3, [r1, #8]
 8007120:	f1b8 0f00 	cmp.w	r8, #0
 8007124:	dde9      	ble.n	80070fa <__sflush_r+0xae>
 8007126:	6a21      	ldr	r1, [r4, #32]
 8007128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800712a:	4643      	mov	r3, r8
 800712c:	463a      	mov	r2, r7
 800712e:	4628      	mov	r0, r5
 8007130:	47b0      	blx	r6
 8007132:	2800      	cmp	r0, #0
 8007134:	dc08      	bgt.n	8007148 <__sflush_r+0xfc>
 8007136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007148:	4407      	add	r7, r0
 800714a:	eba8 0800 	sub.w	r8, r8, r0
 800714e:	e7e7      	b.n	8007120 <__sflush_r+0xd4>
 8007150:	20400001 	.word	0x20400001

08007154 <_fflush_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	690b      	ldr	r3, [r1, #16]
 8007158:	4605      	mov	r5, r0
 800715a:	460c      	mov	r4, r1
 800715c:	b913      	cbnz	r3, 8007164 <_fflush_r+0x10>
 800715e:	2500      	movs	r5, #0
 8007160:	4628      	mov	r0, r5
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	b118      	cbz	r0, 800716e <_fflush_r+0x1a>
 8007166:	6a03      	ldr	r3, [r0, #32]
 8007168:	b90b      	cbnz	r3, 800716e <_fflush_r+0x1a>
 800716a:	f7ff fd1f 	bl	8006bac <__sinit>
 800716e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f3      	beq.n	800715e <_fflush_r+0xa>
 8007176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007178:	07d0      	lsls	r0, r2, #31
 800717a:	d404      	bmi.n	8007186 <_fflush_r+0x32>
 800717c:	0599      	lsls	r1, r3, #22
 800717e:	d402      	bmi.n	8007186 <_fflush_r+0x32>
 8007180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007182:	f7ff ff08 	bl	8006f96 <__retarget_lock_acquire_recursive>
 8007186:	4628      	mov	r0, r5
 8007188:	4621      	mov	r1, r4
 800718a:	f7ff ff5f 	bl	800704c <__sflush_r>
 800718e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007190:	07da      	lsls	r2, r3, #31
 8007192:	4605      	mov	r5, r0
 8007194:	d4e4      	bmi.n	8007160 <_fflush_r+0xc>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	059b      	lsls	r3, r3, #22
 800719a:	d4e1      	bmi.n	8007160 <_fflush_r+0xc>
 800719c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800719e:	f7ff fefb 	bl	8006f98 <__retarget_lock_release_recursive>
 80071a2:	e7dd      	b.n	8007160 <_fflush_r+0xc>

080071a4 <__swhatbuf_r>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	460c      	mov	r4, r1
 80071a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ac:	2900      	cmp	r1, #0
 80071ae:	b096      	sub	sp, #88	@ 0x58
 80071b0:	4615      	mov	r5, r2
 80071b2:	461e      	mov	r6, r3
 80071b4:	da0d      	bge.n	80071d2 <__swhatbuf_r+0x2e>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2340      	movne	r3, #64	@ 0x40
 80071c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071c8:	2000      	movs	r0, #0
 80071ca:	6031      	str	r1, [r6, #0]
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	b016      	add	sp, #88	@ 0x58
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
 80071d2:	466a      	mov	r2, sp
 80071d4:	f000 f848 	bl	8007268 <_fstat_r>
 80071d8:	2800      	cmp	r0, #0
 80071da:	dbec      	blt.n	80071b6 <__swhatbuf_r+0x12>
 80071dc:	9901      	ldr	r1, [sp, #4]
 80071de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071e6:	4259      	negs	r1, r3
 80071e8:	4159      	adcs	r1, r3
 80071ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ee:	e7eb      	b.n	80071c8 <__swhatbuf_r+0x24>

080071f0 <__smakebuf_r>:
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071f4:	079d      	lsls	r5, r3, #30
 80071f6:	4606      	mov	r6, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	d507      	bpl.n	800720c <__smakebuf_r+0x1c>
 80071fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	2301      	movs	r3, #1
 8007206:	6163      	str	r3, [r4, #20]
 8007208:	b003      	add	sp, #12
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720c:	ab01      	add	r3, sp, #4
 800720e:	466a      	mov	r2, sp
 8007210:	f7ff ffc8 	bl	80071a4 <__swhatbuf_r>
 8007214:	9f00      	ldr	r7, [sp, #0]
 8007216:	4605      	mov	r5, r0
 8007218:	4639      	mov	r1, r7
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff fbae 	bl	800697c <_malloc_r>
 8007220:	b948      	cbnz	r0, 8007236 <__smakebuf_r+0x46>
 8007222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007226:	059a      	lsls	r2, r3, #22
 8007228:	d4ee      	bmi.n	8007208 <__smakebuf_r+0x18>
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	f043 0302 	orr.w	r3, r3, #2
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	e7e2      	b.n	80071fc <__smakebuf_r+0xc>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	6020      	str	r0, [r4, #0]
 800723a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007246:	b15b      	cbz	r3, 8007260 <__smakebuf_r+0x70>
 8007248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724c:	4630      	mov	r0, r6
 800724e:	f000 f81d 	bl	800728c <_isatty_r>
 8007252:	b128      	cbz	r0, 8007260 <__smakebuf_r+0x70>
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	f043 0301 	orr.w	r3, r3, #1
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	431d      	orrs	r5, r3
 8007264:	81a5      	strh	r5, [r4, #12]
 8007266:	e7cf      	b.n	8007208 <__smakebuf_r+0x18>

08007268 <_fstat_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	@ (8007288 <_fstat_r+0x20>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	602b      	str	r3, [r5, #0]
 8007276:	f7f9 fb62 	bl	800093e <_fstat>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d102      	bne.n	8007284 <_fstat_r+0x1c>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	b103      	cbz	r3, 8007284 <_fstat_r+0x1c>
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	20000628 	.word	0x20000628

0800728c <_isatty_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	@ (80072a8 <_isatty_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7f9 fb61 	bl	800095e <_isatty>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_isatty_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_isatty_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	20000628 	.word	0x20000628

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
