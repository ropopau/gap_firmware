
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a1c  08009a1c  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a1c  08009a1c  0000aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a24  08009a24  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a24  08009a24  0000aa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a28  08009a28  0000aa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009a2c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  20000074  08009aa0  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  08009aa0  0000bef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156cb  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e2  00000000  00000000  0002076f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a62a  00000000  00000000  00025e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cf7  00000000  00000000  00040456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b51  00000000  00000000  0005614d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9c9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  000e9ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ee8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009070 	.word	0x08009070

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009070 	.word	0x08009070

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <cmd_ping_callback>:

#include "gapcli_cmd_callback.h"


void cmd_ping_callback(gapcom_handle_t *handle, const void *proto_msg)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	gapcom_respond_ping(handle, GAPErrorCode_GAP_OK);
 80005c6:	2100      	movs	r1, #0
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f003 f98d 	bl	80038e8 <gapcom_respond_ping>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <cmd_setverbosity_callback>:

void cmd_setverbosity_callback(gapcom_handle_t *handle, const void *proto_msg)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
	send_log(VERBOSITY_INFO, (char*)proto_msg);
 80005e0:	6839      	ldr	r1, [r7, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f900 	bl	80007e8 <send_log>
	gapcom_respond_set_log_verbosity(handle, GAPErrorCode_GAP_OK);
 80005e8:	2100      	movs	r1, #0
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f003 f9d6 	bl	800399c <gapcom_respond_set_log_verbosity>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <gapcom_uart_fsm_init>:
static char header_buf[11];
static char payload_buf[1024];
static int expected_payload_size = 0;

void gapcom_uart_fsm_init(UART_HandleTypeDef *huart, gapcom_handle_t *gapcom_handle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	 gapcom_handle_instance = gapcom_handle;
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <gapcom_uart_fsm_init+0x34>)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	6013      	str	r3, [r2, #0]
	 gapcom_uart = huart;
 8000608:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <gapcom_uart_fsm_init+0x38>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
	 fsm_state = FSM_HEADER;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <gapcom_uart_fsm_init+0x3c>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <gapcom_uart_fsm_init+0x38>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2209      	movs	r2, #9
 800061a:	4907      	ldr	r1, [pc, #28]	@ (8000638 <gapcom_uart_fsm_init+0x40>)
 800061c:	4618      	mov	r0, r3
 800061e:	f001 ff28 	bl	8002472 <HAL_UART_Receive_IT>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000094 	.word	0x20000094
 8000630:	20000090 	.word	0x20000090
 8000634:	20000098 	.word	0x20000098
 8000638:	2000009c 	.word	0x2000009c

0800063c <gapcom_uart_fsm_rx_callback>:

void gapcom_uart_fsm_rx_callback()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	if (fsm_state == FSM_HEADER)
 8000642:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <gapcom_uart_fsm_rx_callback+0x88>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11f      	bne.n	800068a <gapcom_uart_fsm_rx_callback+0x4e>
	{
		 uint16_t len = (header_buf[5] << 8) | header_buf[6];
 800064a:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <gapcom_uart_fsm_rx_callback+0x8c>)
 800064c:	795b      	ldrb	r3, [r3, #5]
 800064e:	b21b      	sxth	r3, r3
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <gapcom_uart_fsm_rx_callback+0x8c>)
 8000656:	799b      	ldrb	r3, [r3, #6]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	80fb      	strh	r3, [r7, #6]
		 expected_payload_size = len + GAPCOM_CRC_SIZE;
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	3302      	adds	r3, #2
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <gapcom_uart_fsm_rx_callback+0x90>)
 8000666:	6013      	str	r3, [r2, #0]
		 fsm_state = FSM_PAYLOAD;
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <gapcom_uart_fsm_rx_callback+0x88>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)payload_buf, expected_payload_size);
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <gapcom_uart_fsm_rx_callback+0x94>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a16      	ldr	r2, [pc, #88]	@ (80006cc <gapcom_uart_fsm_rx_callback+0x90>)
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	b292      	uxth	r2, r2
 8000678:	4916      	ldr	r1, [pc, #88]	@ (80006d4 <gapcom_uart_fsm_rx_callback+0x98>)
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fef9 	bl	8002472 <HAL_UART_Receive_IT>
		 send_log(VERBOSITY_INFO, payload_buf);
 8000680:	4914      	ldr	r1, [pc, #80]	@ (80006d4 <gapcom_uart_fsm_rx_callback+0x98>)
 8000682:	2001      	movs	r0, #1
 8000684:	f000 f8b0 	bl	80007e8 <send_log>
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)payload_buf, expected_payload_size);
		 fsm_state = FSM_HEADER;
		 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
	}
}
 8000688:	e018      	b.n	80006bc <gapcom_uart_fsm_rx_callback+0x80>
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <gapcom_uart_fsm_rx_callback+0x9c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2209      	movs	r2, #9
 8000690:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <gapcom_uart_fsm_rx_callback+0x8c>)
 8000692:	4618      	mov	r0, r3
 8000694:	f002 feb9 	bl	800340a <gapcom_accept>
		 gapcom_accept(gapcom_handle_instance, (uint8_t*)payload_buf, expected_payload_size);
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <gapcom_uart_fsm_rx_callback+0x9c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <gapcom_uart_fsm_rx_callback+0x90>)
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	490c      	ldr	r1, [pc, #48]	@ (80006d4 <gapcom_uart_fsm_rx_callback+0x98>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 feb1 	bl	800340a <gapcom_accept>
		 fsm_state = FSM_HEADER;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <gapcom_uart_fsm_rx_callback+0x88>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(gapcom_uart, (uint8_t*)header_buf, GAPCOM_HEADER_SIZE);
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <gapcom_uart_fsm_rx_callback+0x94>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2209      	movs	r2, #9
 80006b4:	4904      	ldr	r1, [pc, #16]	@ (80006c8 <gapcom_uart_fsm_rx_callback+0x8c>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fedb 	bl	8002472 <HAL_UART_Receive_IT>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000098 	.word	0x20000098
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	200004a8 	.word	0x200004a8
 80006d0:	20000090 	.word	0x20000090
 80006d4:	200000a8 	.word	0x200000a8
 80006d8:	20000094 	.word	0x20000094

080006dc <close_sender>:
static UART_HandleTypeDef *huart2_handle;

static gapcom_handle_t *gapcom_handle_instance;

int close_sender(gapcom_sender_t *self)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <open_sender>:

int open_sender(gapcom_sender_t *self)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <send_sender>:

ssize_t send_sender(gapcom_sender_t *self, const uint8_t *buf, size_t len)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit_IT(huart2_handle, buf, len);
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <send_sender+0x38>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	b292      	uxth	r2, r2
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe71 	bl	8002406 <HAL_UART_Transmit_IT>
 8000724:	4603      	mov	r3, r0
 8000726:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <send_sender+0x2a>
        return (ssize_t)len;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	e001      	b.n	8000736 <send_sender+0x2e>
    } else {
        return -1;
 8000732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200004ac 	.word	0x200004ac

08000744 <create_gapcom_instance>:
		.open = open_sender,
		.send = send_sender
};

void create_gapcom_instance(UART_HandleTypeDef *handle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	huart2_handle = handle;
 800074c:	4a13      	ldr	r2, [pc, #76]	@ (800079c <create_gapcom_instance+0x58>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
	gapcom_handle_instance = gapcom_create();
 8000752:	f002 fdff 	bl	8003354 <gapcom_create>
 8000756:	4603      	mov	r3, r0
 8000758:	4a11      	ldr	r2, [pc, #68]	@ (80007a0 <create_gapcom_instance+0x5c>)
 800075a:	6013      	str	r3, [r2, #0]
	gapcom_set_sender_impl(gapcom_handle_instance, &gapcom_sender_t_impl);
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <create_gapcom_instance+0x5c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4910      	ldr	r1, [pc, #64]	@ (80007a4 <create_gapcom_instance+0x60>)
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fe26 	bl	80033b4 <gapcom_set_sender_impl>
	gapcom_install_callback(gapcom_handle_instance, cmd_ping_callback, GAPCOM_MSG_MIN);
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <create_gapcom_instance+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	490e      	ldr	r1, [pc, #56]	@ (80007a8 <create_gapcom_instance+0x64>)
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fe31 	bl	80033d8 <gapcom_install_callback>
	gapcom_install_callback(gapcom_handle_instance, cmd_setverbosity_callback, GAPCOM_MSG_SET_LOG_VERBOSITY_REQ);
 8000776:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <create_gapcom_instance+0x5c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2202      	movs	r2, #2
 800077c:	490b      	ldr	r1, [pc, #44]	@ (80007ac <create_gapcom_instance+0x68>)
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fe2a 	bl	80033d8 <gapcom_install_callback>
	gapcom_uart_fsm_init(huart2_handle, gapcom_handle_instance);
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <create_gapcom_instance+0x58>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <create_gapcom_instance+0x5c>)
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff32 	bl	80005f8 <gapcom_uart_fsm_init>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200004ac 	.word	0x200004ac
 80007a0:	200004b0 	.word	0x200004b0
 80007a4:	20000000 	.word	0x20000000
 80007a8:	080005bd 	.word	0x080005bd
 80007ac:	080005d7 	.word	0x080005d7

080007b0 <receive_gapcom_incoming_uart_message>:

void receive_gapcom_incoming_uart_message(uint8_t *buf, uint16_t size)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	807b      	strh	r3, [r7, #2]
    gapcom_uart_fsm_rx_callback();
 80007bc:	f7ff ff3e 	bl	800063c <gapcom_uart_fsm_rx_callback>

}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <init_log>:
UART_HandleTypeDef *huart_handler;

//static char buf[1024];

void init_log(UART_HandleTypeDef *huart)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	huart_handler = huart;
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <init_log+0x1c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	200004b4 	.word	0x200004b4

080007e8 <send_log>:
static char buf[1024];



void send_log(enum VERBOSITY_LEVEL verbosity, const char *message)
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
	char *level = "[Info]";
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <send_log+0x74>)
 80007f6:	60fb      	str	r3, [r7, #12]
	if (verbosity == VERBOSITY_DEBUG)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <send_log+0x1c>
	{
		level = "[Debug]";
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <send_log+0x78>)
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e00a      	b.n	800081a <send_log+0x32>
	}
	else if (verbosity == VERBOSITY_WARNING)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d102      	bne.n	8000810 <send_log+0x28>
	{
		level = "[Warning]";
 800080a:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <send_log+0x7c>)
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	e004      	b.n	800081a <send_log+0x32>
	}
	else if (verbosity == VERBOSITY_ERROR)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d101      	bne.n	800081a <send_log+0x32>
	{
		level = "[Error]";
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <send_log+0x80>)
 8000818:	60fb      	str	r3, [r7, #12]
	}

	sprintf(buf, "%s %s\r\n", level, message);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4913      	ldr	r1, [pc, #76]	@ (800086c <send_log+0x84>)
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <send_log+0x88>)
 8000822:	f007 fca1 	bl	8008168 <siprintf>
	HAL_UART_Transmit(huart_handler, (uint8_t*)buf, strlen(level) + strlen(message) + 3, HAL_MAX_DELAY);
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <send_log+0x8c>)
 8000828:	681d      	ldr	r5, [r3, #0]
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff fcd8 	bl	80001e0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29c      	uxth	r4, r3
 8000834:	6838      	ldr	r0, [r7, #0]
 8000836:	f7ff fcd3 	bl	80001e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29b      	uxth	r3, r3
 800083e:	4423      	add	r3, r4
 8000840:	b29b      	uxth	r3, r3
 8000842:	3303      	adds	r3, #3
 8000844:	b29a      	uxth	r2, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800084a:	4909      	ldr	r1, [pc, #36]	@ (8000870 <send_log+0x88>)
 800084c:	4628      	mov	r0, r5
 800084e:	f001 fd4f 	bl	80022f0 <HAL_UART_Transmit>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bdb0      	pop	{r4, r5, r7, pc}
 800085a:	bf00      	nop
 800085c:	08009088 	.word	0x08009088
 8000860:	08009090 	.word	0x08009090
 8000864:	08009098 	.word	0x08009098
 8000868:	080090a4 	.word	0x080090a4
 800086c:	080090ac 	.word	0x080090ac
 8000870:	200004b8 	.word	0x200004b8
 8000874:	200004b4 	.word	0x200004b4

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f000 fb98 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f81a 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 f8fc 	bl	8000a80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000888:	f000 f8a4 	bl	80009d4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800088c:	f000 f8cc 	bl	8000a28 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000890:	f000 f872 	bl	8000978 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  create_gapcom_instance(&huart6);
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <main+0x34>)
 8000896:	f7ff ff55 	bl	8000744 <create_gapcom_instance>
  init_log(&huart2);
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <main+0x38>)
 800089c:	f7ff ff94 	bl	80007c8 <init_log>
  send_log(VERBOSITY_INFO, "GAP system booted");
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <main+0x3c>)
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff ffa0 	bl	80007e8 <send_log>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <main+0x30>
 80008ac:	20000954 	.word	0x20000954
 80008b0:	2000090c 	.word	0x2000090c
 80008b4:	080090b4 	.word	0x080090b4

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	@ 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f007 fd48 	bl	800835c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <SystemClock_Config+0xb8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <SystemClock_Config+0xb8>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <SystemClock_Config+0xb8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <SystemClock_Config+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <SystemClock_Config+0xbc>)
 8000906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <SystemClock_Config+0xbc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f837 	bl	80019a0 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000938:	f000 f912 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fa9a 	bl	8001e90 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000962:	f000 f8fd 	bl	8000b60 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3750      	adds	r7, #80	@ 0x50
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_I2C1_Init+0x50>)
 800097e:	4a13      	ldr	r2, [pc, #76]	@ (80009cc <MX_I2C1_Init+0x54>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_I2C1_Init+0x50>)
 8000984:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <MX_I2C1_Init+0x58>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_I2C1_Init+0x50>)
 8000996:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800099a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_I2C1_Init+0x50>)
 80009b6:	f000 feaf 	bl	8001718 <HAL_I2C_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c0:	f000 f8ce 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200008b8 	.word	0x200008b8
 80009cc:	40005400 	.word	0x40005400
 80009d0:	000186a0 	.word	0x000186a0

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f001 fc20 	bl	8002250 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f8a3 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000090c 	.word	0x2000090c
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <MX_USART6_UART_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a40:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a64:	f001 fbf4 	bl	8002250 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f877 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000954 	.word	0x20000954
 8000a7c:	40011400 	.word	0x40011400

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_GPIO_Init+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <MX_GPIO_Init+0x9c>)
 8000af0:	f000 fdf8 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af4:	2320      	movs	r3, #32
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_GPIO_Init+0x9c>)
 8000b0c:	f000 fc66 	bl	80013dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <HAL_UART_RxCpltCallback+0x24>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d103      	bne.n	8000b3a <HAL_UART_RxCpltCallback+0x1a>
		receive_gapcom_incoming_uart_message(rx_buff, 1);
 8000b32:	2101      	movs	r1, #1
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <HAL_UART_RxCpltCallback+0x28>)
 8000b36:	f7ff fe3b 	bl	80007b0 <receive_gapcom_incoming_uart_message>
	}

}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40011400 	.word	0x40011400
 8000b48:	2000099c 	.word	0x2000099c

08000b4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <HAL_I2C_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12b      	bne.n	8000c36 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bfa:	23c0      	movs	r3, #192	@ 0xc0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <HAL_I2C_MspInit+0x8c>)
 8000c16:	f000 fbe1 	bl	80013dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a3a      	ldr	r2, [pc, #232]	@ (8000d54 <HAL_UART_MspInit+0x108>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d134      	bne.n	8000cd8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	4b39      	ldr	r3, [pc, #228]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a38      	ldr	r2, [pc, #224]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b36      	ldr	r3, [pc, #216]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <HAL_UART_MspInit+0x110>)
 8000cc2:	f000 fb8b 	bl	80013dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2026      	movs	r0, #38	@ 0x26
 8000ccc:	f000 fabd 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd0:	2026      	movs	r0, #38	@ 0x26
 8000cd2:	f000 fad6 	bl	8001282 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cd6:	e038      	b.n	8000d4a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a20      	ldr	r2, [pc, #128]	@ (8000d60 <HAL_UART_MspInit+0x114>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d133      	bne.n	8000d4a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000cec:	f043 0320 	orr.w	r3, r3, #32
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_UART_MspInit+0x10c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1a:	23c0      	movs	r3, #192	@ 0xc0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <HAL_UART_MspInit+0x118>)
 8000d36:	f000 fb51 	bl	80013dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2047      	movs	r0, #71	@ 0x47
 8000d40:	f000 fa83 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d44:	2047      	movs	r0, #71	@ 0x47
 8000d46:	f000 fa9c 	bl	8001282 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	@ 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40011400 	.word	0x40011400
 8000d64:	40020800 	.word	0x40020800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 f949 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <USART2_IRQHandler+0x10>)
 8000dce:	f001 fb75 	bl	80024bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000090c 	.word	0x2000090c

08000ddc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <USART6_IRQHandler+0x10>)
 8000de2:	f001 fb6b 	bl	80024bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000954 	.word	0x20000954

08000df0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
  }

  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e009      	b.n	8000e50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf1      	blt.n	8000e3c <_write+0x12>
  }
  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_isatty>:

int _isatty(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f007 fa8c 	bl	8008418 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20018000 	.word	0x20018000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	20000d9c 	.word	0x20000d9c
 8000f34:	20000ef0 	.word	0x20000ef0

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f007 fa4b 	bl	8008424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fc73 	bl	8000878 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fa0:	08009a2c 	.word	0x08009a2c
  ldr r2, =_sbss
 8000fa4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fa8:	20000ef0 	.word	0x20000ef0

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f92b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fdc2 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f943 	bl	800129e <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001030:	f000 f90b 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000014 	.word	0x20000014
 8001050:	20000010 	.word	0x20000010

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000014 	.word	0x20000014
 8001078:	20000da0 	.word	0x20000da0

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000da0 	.word	0x20000da0

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	@ (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	@ (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	@ (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff3e 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff31 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff feda 	bl	800107c <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d008      	beq.n	80012e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e052      	b.n	800138e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0216 	bic.w	r2, r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001306:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <HAL_DMA_Abort+0x62>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0208 	bic.w	r2, r2, #8
 8001326:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001338:	e013      	b.n	8001362 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133a:	f7ff fe9f 	bl	800107c <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b05      	cmp	r3, #5
 8001346:	d90c      	bls.n	8001362 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2220      	movs	r2, #32
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2203      	movs	r2, #3
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e015      	b.n	800138e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1e4      	bne.n	800133a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001374:	223f      	movs	r2, #63	@ 0x3f
 8001376:	409a      	lsls	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d004      	beq.n	80013b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2280      	movs	r2, #128	@ 0x80
 80013ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00c      	b.n	80013ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2205      	movs	r2, #5
 80013b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e159      	b.n	80016ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8148 	bne.w	80016a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d005      	beq.n	800142e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	2b02      	cmp	r3, #2
 800142c:	d130      	bne.n	8001490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 0201 	and.w	r2, r3, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b03      	cmp	r3, #3
 800149a:	d017      	beq.n	80014cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a2 	beq.w	80016a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b57      	ldr	r3, [pc, #348]	@ (80016c4 <HAL_GPIO_Init+0x2e8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a56      	ldr	r2, [pc, #344]	@ (80016c4 <HAL_GPIO_Init+0x2e8>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b54      	ldr	r3, [pc, #336]	@ (80016c4 <HAL_GPIO_Init+0x2e8>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a52      	ldr	r2, [pc, #328]	@ (80016c8 <HAL_GPIO_Init+0x2ec>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a49      	ldr	r2, [pc, #292]	@ (80016cc <HAL_GPIO_Init+0x2f0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x202>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a48      	ldr	r2, [pc, #288]	@ (80016d0 <HAL_GPIO_Init+0x2f4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x1fe>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a47      	ldr	r2, [pc, #284]	@ (80016d4 <HAL_GPIO_Init+0x2f8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x1fa>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a46      	ldr	r2, [pc, #280]	@ (80016d8 <HAL_GPIO_Init+0x2fc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x1f6>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a45      	ldr	r2, [pc, #276]	@ (80016dc <HAL_GPIO_Init+0x300>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x1f2>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4935      	ldr	r1, [pc, #212]	@ (80016c8 <HAL_GPIO_Init+0x2ec>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b38      	ldr	r3, [pc, #224]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a2f      	ldr	r2, [pc, #188]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a24      	ldr	r2, [pc, #144]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001676:	4a1a      	ldr	r2, [pc, #104]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a0:	4a0f      	ldr	r2, [pc, #60]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f aea2 	bls.w	80013f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40013c00 	.word	0x40013c00

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e12b      	b.n	8001982 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fa3c 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	@ 0x24
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800176a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800177a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800177c:	f000 fd40 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 8001780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4a81      	ldr	r2, [pc, #516]	@ (800198c <HAL_I2C_Init+0x274>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d807      	bhi.n	800179c <HAL_I2C_Init+0x84>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a80      	ldr	r2, [pc, #512]	@ (8001990 <HAL_I2C_Init+0x278>)
 8001790:	4293      	cmp	r3, r2
 8001792:	bf94      	ite	ls
 8001794:	2301      	movls	r3, #1
 8001796:	2300      	movhi	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e006      	b.n	80017aa <HAL_I2C_Init+0x92>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4a7d      	ldr	r2, [pc, #500]	@ (8001994 <HAL_I2C_Init+0x27c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	bf94      	ite	ls
 80017a4:	2301      	movls	r3, #1
 80017a6:	2300      	movhi	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0e7      	b.n	8001982 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a78      	ldr	r2, [pc, #480]	@ (8001998 <HAL_I2C_Init+0x280>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	@ (800198c <HAL_I2C_Init+0x274>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d802      	bhi.n	80017ec <HAL_I2C_Init+0xd4>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3301      	adds	r3, #1
 80017ea:	e009      	b.n	8001800 <HAL_I2C_Init+0xe8>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	4a69      	ldr	r2, [pc, #420]	@ (800199c <HAL_I2C_Init+0x284>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	3301      	adds	r3, #1
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	430b      	orrs	r3, r1
 8001806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001812:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	495c      	ldr	r1, [pc, #368]	@ (800198c <HAL_I2C_Init+0x274>)
 800181c:	428b      	cmp	r3, r1
 800181e:	d819      	bhi.n	8001854 <HAL_I2C_Init+0x13c>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e59      	subs	r1, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fbb1 f3f3 	udiv	r3, r1, r3
 800182e:	1c59      	adds	r1, r3, #1
 8001830:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001834:	400b      	ands	r3, r1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00a      	beq.n	8001850 <HAL_I2C_Init+0x138>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1e59      	subs	r1, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fbb1 f3f3 	udiv	r3, r1, r3
 8001848:	3301      	adds	r3, #1
 800184a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184e:	e051      	b.n	80018f4 <HAL_I2C_Init+0x1dc>
 8001850:	2304      	movs	r3, #4
 8001852:	e04f      	b.n	80018f4 <HAL_I2C_Init+0x1dc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_I2C_Init+0x168>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e012      	b.n	80018a6 <HAL_I2C_Init+0x18e>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1e58      	subs	r0, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	0099      	lsls	r1, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x196>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e022      	b.n	80018f4 <HAL_I2C_Init+0x1dc>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10e      	bne.n	80018d4 <HAL_I2C_Init+0x1bc>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e58      	subs	r0, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	440b      	add	r3, r1
 80018c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018d2:	e00f      	b.n	80018f4 <HAL_I2C_Init+0x1dc>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6809      	ldr	r1, [r1, #0]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001922:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6911      	ldr	r1, [r2, #16]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68d2      	ldr	r2, [r2, #12]
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	430b      	orrs	r3, r1
 8001936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	000186a0 	.word	0x000186a0
 8001990:	001e847f 	.word	0x001e847f
 8001994:	003d08ff 	.word	0x003d08ff
 8001998:	431bde83 	.word	0x431bde83
 800199c:	10624dd3 	.word	0x10624dd3

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e267      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d075      	beq.n	8001aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019be:	4b88      	ldr	r3, [pc, #544]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d00c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4b85      	ldr	r3, [pc, #532]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d112      	bne.n	80019fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	4b82      	ldr	r3, [pc, #520]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019e2:	d10b      	bne.n	80019fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d05b      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x108>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d157      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e242      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a04:	d106      	bne.n	8001a14 <HAL_RCC_OscConfig+0x74>
 8001a06:	4b76      	ldr	r3, [pc, #472]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xb0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b70      	ldr	r3, [pc, #448]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6f      	ldr	r2, [pc, #444]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xb0>
 8001a38:	4b69      	ldr	r3, [pc, #420]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a68      	ldr	r2, [pc, #416]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fb10 	bl	800107c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fb0c 	bl	800107c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e207      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b5b      	ldr	r3, [pc, #364]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xc0>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fafc 	bl	800107c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff faf8 	bl	800107c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	@ 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1f3      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0xe8>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b41      	ldr	r3, [pc, #260]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x152>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1c7      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4937      	ldr	r1, [pc, #220]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x244>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff fab1 	bl	800107c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff faad 	bl	800107c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1a8      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4925      	ldr	r1, [pc, #148]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x244>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fa90 	bl	800107c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff fa8c 	bl	800107c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e187      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d036      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_RCC_OscConfig+0x248>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff fa70 	bl	800107c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fa6c 	bl	800107c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e167      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x200>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_OscConfig+0x248>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fa59 	bl	800107c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	e00e      	b.n	8001bec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff fa55 	bl	800107c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d907      	bls.n	8001bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e150      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	42470000 	.word	0x42470000
 8001be8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b88      	ldr	r3, [pc, #544]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ea      	bne.n	8001bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8097 	beq.w	8001d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b81      	ldr	r3, [pc, #516]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b7a      	ldr	r3, [pc, #488]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b77      	ldr	r3, [pc, #476]	@ (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b74      	ldr	r3, [pc, #464]	@ (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a73      	ldr	r2, [pc, #460]	@ (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fa15 	bl	800107c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff fa11 	bl	800107c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e10c      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2ea>
 8001c7c:	4b64      	ldr	r3, [pc, #400]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c80:	4a63      	ldr	r2, [pc, #396]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x324>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x30c>
 8001c92:	4b5f      	ldr	r3, [pc, #380]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	4a5e      	ldr	r2, [pc, #376]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x324>
 8001cac:	4b58      	ldr	r3, [pc, #352]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb0:	4a57      	ldr	r2, [pc, #348]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb8:	4b55      	ldr	r3, [pc, #340]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbc:	4a54      	ldr	r2, [pc, #336]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d015      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9d6 	bl	800107c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9d2 	bl	800107c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0cb      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ee      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f9c0 	bl	800107c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff f9bc 	bl	800107c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0b5      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	4b3e      	ldr	r3, [pc, #248]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ee      	bne.n	8001d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b39      	ldr	r3, [pc, #228]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	4a38      	ldr	r2, [pc, #224]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a1 	beq.w	8001e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d05c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d141      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <HAL_RCC_OscConfig+0x478>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f990 	bl	800107c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff f98c 	bl	800107c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e087      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	491b      	ldr	r1, [pc, #108]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x478>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff f965 	bl	800107c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff f961 	bl	800107c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e05c      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x416>
 8001dd4:	e054      	b.n	8001e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_RCC_OscConfig+0x478>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f94e 	bl	800107c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff f94a 	bl	800107c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e045      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x444>
 8001e02:	e03d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e038      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000
 8001e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_RCC_OscConfig+0x4ec>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d028      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d121      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d11a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	3b01      	subs	r3, #1
 8001e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0cc      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b68      	ldr	r3, [pc, #416]	@ (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d90c      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b65      	ldr	r3, [pc, #404]	@ (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	@ (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a52      	ldr	r2, [pc, #328]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d044      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d119      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e067      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b37      	ldr	r3, [pc, #220]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4934      	ldr	r1, [pc, #208]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7ff f87c 	bl	800107c <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff f878 	bl	800107c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e04f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d20c      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	@ (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	@ (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ffdc 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00
 800204c:	40023800 	.word	0x40023800
 8002050:	080095c8 	.word	0x080095c8
 8002054:	2000000c 	.word	0x2000000c
 8002058:	20000010 	.word	0x20000010

0800205c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002060:	b090      	sub	sp, #64	@ 0x40
 8002062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002074:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d00d      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002080:	2b08      	cmp	r3, #8
 8002082:	f200 80a1 	bhi.w	80021c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x34>
 800208a:	2b04      	cmp	r3, #4
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x3a>
 800208e:	e09b      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002092:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002094:	e09b      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002096:	4b53      	ldr	r3, [pc, #332]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800209a:	e098      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800209c:	4b4f      	ldr	r3, [pc, #316]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x180>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a6:	4b4d      	ldr	r3, [pc, #308]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x180>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d028      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b2:	4b4a      	ldr	r3, [pc, #296]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x180>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	2200      	movs	r2, #0
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020c4:	2100      	movs	r1, #0
 80020c6:	4b47      	ldr	r3, [pc, #284]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c8:	fb03 f201 	mul.w	r2, r3, r1
 80020cc:	2300      	movs	r3, #0
 80020ce:	fb00 f303 	mul.w	r3, r0, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	4a43      	ldr	r2, [pc, #268]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020d6:	fba0 1202 	umull	r1, r2, r0, r2
 80020da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020dc:	460a      	mov	r2, r1
 80020de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020e2:	4413      	add	r3, r2
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e8:	2200      	movs	r2, #0
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	61fa      	str	r2, [r7, #28]
 80020ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020f6:	f7fe f8cb 	bl	8000290 <__aeabi_uldivmod>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4613      	mov	r3, r2
 8002100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002102:	e053      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002104:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	2200      	movs	r2, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	617a      	str	r2, [r7, #20]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002116:	f04f 0b00 	mov.w	fp, #0
 800211a:	4652      	mov	r2, sl
 800211c:	465b      	mov	r3, fp
 800211e:	f04f 0000 	mov.w	r0, #0
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	0159      	lsls	r1, r3, #5
 8002128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800212c:	0150      	lsls	r0, r2, #5
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	ebb2 080a 	subs.w	r8, r2, sl
 8002136:	eb63 090b 	sbc.w	r9, r3, fp
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800214a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800214e:	ebb2 0408 	subs.w	r4, r2, r8
 8002152:	eb63 0509 	sbc.w	r5, r3, r9
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	00eb      	lsls	r3, r5, #3
 8002160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002164:	00e2      	lsls	r2, r4, #3
 8002166:	4614      	mov	r4, r2
 8002168:	461d      	mov	r5, r3
 800216a:	eb14 030a 	adds.w	r3, r4, sl
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	eb45 030b 	adc.w	r3, r5, fp
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002182:	4629      	mov	r1, r5
 8002184:	028b      	lsls	r3, r1, #10
 8002186:	4621      	mov	r1, r4
 8002188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800218c:	4621      	mov	r1, r4
 800218e:	028a      	lsls	r2, r1, #10
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002196:	2200      	movs	r2, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	60fa      	str	r2, [r7, #12]
 800219c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021a0:	f7fe f876 	bl	8000290 <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4613      	mov	r3, r2
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x180>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	3301      	adds	r3, #1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021c6:	e002      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3740      	adds	r7, #64	@ 0x40
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	00f42400 	.word	0x00f42400
 80021e4:	017d7840 	.word	0x017d7840

080021e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000000c 	.word	0x2000000c

08002200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002204:	f7ff fff0 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0a9b      	lsrs	r3, r3, #10
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	@ (8002224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	080095d8 	.word	0x080095d8

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800222c:	f7ff ffdc 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0b5b      	lsrs	r3, r3, #13
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4903      	ldr	r1, [pc, #12]	@ (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	080095d8 	.word	0x080095d8

08002250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e042      	b.n	80022e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fce8 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	@ 0x24
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fde9 	bl	8002e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	d175      	bne.n	80023fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_UART_Transmit+0x2c>
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e06e      	b.n	80023fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2221      	movs	r2, #33	@ 0x21
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800232e:	f7fe fea5 	bl	800107c <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002348:	d108      	bne.n	800235c <HAL_UART_Transmit+0x6c>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	e003      	b.n	8002364 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002364:	e02e      	b.n	80023c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fb4b 	bl	8002a0c <UART_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e03a      	b.n	80023fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800239c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3302      	adds	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	e007      	b.n	80023b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1cb      	bne.n	8002366 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2140      	movs	r1, #64	@ 0x40
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fb17 	bl	8002a0c <UART_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e006      	b.n	80023fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	4613      	mov	r3, r2
 8002412:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b20      	cmp	r3, #32
 800241e:	d121      	bne.n	8002464 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_UART_Transmit_IT+0x26>
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e01a      	b.n	8002466 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	88fa      	ldrh	r2, [r7, #6]
 800243a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2221      	movs	r2, #33	@ 0x21
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800245e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	4613      	mov	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b20      	cmp	r3, #32
 800248a:	d112      	bne.n	80024b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_UART_Receive_IT+0x26>
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00b      	b.n	80024b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	461a      	mov	r2, r3
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fb08 	bl	8002abe <UART_Start_Receive_IT>
 80024ae:	4603      	mov	r3, r0
 80024b0:	e000      	b.n	80024b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0ba      	sub	sp, #232	@ 0xe8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_UART_IRQHandler+0x66>
 800250e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fbe8 	bl	8002cf0 <UART_Receive_IT>
      return;
 8002520:	e25b      	b.n	80029da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80de 	beq.w	80026e8 <HAL_UART_IRQHandler+0x22c>
 800252c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80d1 	beq.w	80026e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_UART_IRQHandler+0xae>
 8002552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_UART_IRQHandler+0xd2>
 8002576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f043 0202 	orr.w	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_UART_IRQHandler+0xf6>
 800259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d011      	beq.n	80025e2 <HAL_UART_IRQHandler+0x126>
 80025be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f043 0208 	orr.w	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 81f2 	beq.w	80029d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_UART_IRQHandler+0x14e>
 80025f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fb73 	bl	8002cf0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002614:	2b40      	cmp	r3, #64	@ 0x40
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_UART_IRQHandler+0x17a>
 800262e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d04f      	beq.n	80026d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa7b 	bl	8002b32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002646:	2b40      	cmp	r3, #64	@ 0x40
 8002648:	d141      	bne.n	80026ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3314      	adds	r3, #20
 8002650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002658:	e853 3f00 	ldrex	r3, [r3]
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3314      	adds	r3, #20
 8002672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002676:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800267a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800268e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1d9      	bne.n	800264a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d013      	beq.n	80026c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	4a7e      	ldr	r2, [pc, #504]	@ (800289c <HAL_UART_IRQHandler+0x3e0>)
 80026a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fe73 	bl	8001396 <HAL_DMA_Abort_IT>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026c0:	4610      	mov	r0, r2
 80026c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e00e      	b.n	80026e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f98a 	bl	80029e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e00a      	b.n	80026e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f986 	bl	80029e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e006      	b.n	80026e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f982 	bl	80029e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026e2:	e175      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	bf00      	nop
    return;
 80026e6:	e173      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 814f 	bne.w	8002990 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8148 	beq.w	8002990 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8141 	beq.w	8002990 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272e:	2b40      	cmp	r3, #64	@ 0x40
 8002730:	f040 80b6 	bne.w	80028a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8145 	beq.w	80029d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800274e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002752:	429a      	cmp	r2, r3
 8002754:	f080 813e 	bcs.w	80029d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800275e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800276a:	f000 8088 	beq.w	800287e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800278c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800279a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800279e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1d9      	bne.n	800276e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3314      	adds	r3, #20
 80027da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e1      	bne.n	80027ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800280c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3314      	adds	r3, #20
 8002816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800281a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800281c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e3      	bne.n	80027f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800284c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284e:	f023 0310 	bic.w	r3, r3, #16
 8002852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002860:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002862:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002868:	e841 2300 	strex	r3, r2, [r1]
 800286c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800286e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e3      	bne.n	800283c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fd1c 	bl	80012b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800288c:	b29b      	uxth	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	b29b      	uxth	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8ad 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800289a:	e09b      	b.n	80029d4 <HAL_UART_IRQHandler+0x518>
 800289c:	08002bf9 	.word	0x08002bf9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808e 	beq.w	80029d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8089 	beq.w	80029d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	e853 3f00 	ldrex	r3, [r3]
 80028d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80028ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e3      	bne.n	80028c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	623b      	str	r3, [r7, #32]
   return(result);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002922:	633a      	str	r2, [r7, #48]	@ 0x30
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e3      	bne.n	80028fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	60fb      	str	r3, [r7, #12]
   return(result);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0310 	bic.w	r3, r3, #16
 800295a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002968:	61fa      	str	r2, [r7, #28]
 800296a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	69b9      	ldr	r1, [r7, #24]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	617b      	str	r3, [r7, #20]
   return(result);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e3      	bne.n	8002944 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002982:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f833 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800298e:	e023      	b.n	80029d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_UART_IRQHandler+0x4f4>
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f939 	bl	8002c20 <UART_Transmit_IT>
    return;
 80029ae:	e014      	b.n	80029da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <HAL_UART_IRQHandler+0x51e>
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f979 	bl	8002cc0 <UART_EndTransmit_IT>
    return;
 80029ce:	e004      	b.n	80029da <HAL_UART_IRQHandler+0x51e>
    return;
 80029d0:	bf00      	nop
 80029d2:	e002      	b.n	80029da <HAL_UART_IRQHandler+0x51e>
      return;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <HAL_UART_IRQHandler+0x51e>
      return;
 80029d8:	bf00      	nop
  }
}
 80029da:	37e8      	adds	r7, #232	@ 0xe8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1c:	e03b      	b.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a24:	d037      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7fe fb29 	bl	800107c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e03a      	b.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d023      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b80      	cmp	r3, #128	@ 0x80
 8002a52:	d020      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b40      	cmp	r3, #64	@ 0x40
 8002a58:	d01d      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d116      	bne.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f857 	bl	8002b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2208      	movs	r2, #8
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00f      	b.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d0b4      	beq.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2222      	movs	r2, #34	@ 0x22
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b095      	sub	sp, #84	@ 0x54
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e5      	bne.n	8002b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3314      	adds	r3, #20
 8002b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e5      	bne.n	8002b6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d119      	bne.n	8002bde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f023 0310 	bic.w	r3, r3, #16
 8002bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bca:	61ba      	str	r2, [r7, #24]
 8002bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e5      	bne.n	8002baa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bec:	bf00      	nop
 8002bee:	3754      	adds	r7, #84	@ 0x54
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fee4 	bl	80029e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b21      	cmp	r3, #33	@ 0x21
 8002c32:	d13e      	bne.n	8002cb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3c:	d114      	bne.n	8002c68 <UART_Transmit_IT+0x48>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d110      	bne.n	8002c68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	621a      	str	r2, [r3, #32]
 8002c66:	e008      	b.n	8002c7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	1c59      	adds	r1, r3, #1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6211      	str	r1, [r2, #32]
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4619      	mov	r1, r3
 8002c88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7fd ff33 	bl	8000b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	@ 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b22      	cmp	r3, #34	@ 0x22
 8002d02:	f040 80ae 	bne.w	8002e62 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0e:	d117      	bne.n	8002d40 <UART_Receive_IT+0x50>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d113      	bne.n	8002d40 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d38:	1c9a      	adds	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d3e:	e026      	b.n	8002d8e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d52:	d007      	beq.n	8002d64 <UART_Receive_IT+0x74>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <UART_Receive_IT+0x82>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d106      	bne.n	8002d72 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e008      	b.n	8002d84 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d15d      	bne.n	8002e5e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0220 	bic.w	r2, r2, #32
 8002db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d135      	bne.n	8002e54 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f023 0310 	bic.w	r3, r3, #16
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0e:	623a      	str	r2, [r7, #32]
 8002e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	69f9      	ldr	r1, [r7, #28]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e5      	bne.n	8002dee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d10a      	bne.n	8002e46 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fdd1 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
 8002e52:	e002      	b.n	8002e5a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fd fe63 	bl	8000b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e002      	b.n	8002e64 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	@ 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b0c0      	sub	sp, #256	@ 0x100
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	ea40 0301 	orr.w	r3, r0, r1
 8002e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ec4:	f021 010c 	bic.w	r1, r1, #12
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	6999      	ldr	r1, [r3, #24]
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	ea40 0301 	orr.w	r3, r0, r1
 8002ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b8f      	ldr	r3, [pc, #572]	@ (8003138 <UART_SetConfig+0x2cc>)
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d005      	beq.n	8002f0c <UART_SetConfig+0xa0>
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b8d      	ldr	r3, [pc, #564]	@ (800313c <UART_SetConfig+0x2d0>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d104      	bne.n	8002f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f0c:	f7ff f98c 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8002f10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f14:	e003      	b.n	8002f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f16:	f7ff f973 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 8002f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f28:	f040 810c 	bne.w	8003144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	1891      	adds	r1, r2, r2
 8002f44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f46:	415b      	adcs	r3, r3
 8002f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f4e:	4621      	mov	r1, r4
 8002f50:	eb12 0801 	adds.w	r8, r2, r1
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb43 0901 	adc.w	r9, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f6e:	4690      	mov	r8, r2
 8002f70:	4699      	mov	r9, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb18 0303 	adds.w	r3, r8, r3
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	eb49 0303 	adc.w	r3, r9, r3
 8002f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	18db      	adds	r3, r3, r3
 8002f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	eb42 0303 	adc.w	r3, r2, r3
 8002fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fb0:	f7fd f96e 	bl	8000290 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <UART_SetConfig+0x2d4>)
 8002fba:	fba3 2302 	umull	r2, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	011c      	lsls	r4, r3, #4
 8002fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb43 0b01 	adc.w	fp, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003004:	4692      	mov	sl, r2
 8003006:	469b      	mov	fp, r3
 8003008:	4643      	mov	r3, r8
 800300a:	eb1a 0303 	adds.w	r3, sl, r3
 800300e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003012:	464b      	mov	r3, r9
 8003014:	eb4b 0303 	adc.w	r3, fp, r3
 8003018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003028:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800302c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003030:	460b      	mov	r3, r1
 8003032:	18db      	adds	r3, r3, r3
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
 8003036:	4613      	mov	r3, r2
 8003038:	eb42 0303 	adc.w	r3, r2, r3
 800303c:	647b      	str	r3, [r7, #68]	@ 0x44
 800303e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003046:	f7fd f923 	bl	8000290 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4611      	mov	r1, r2
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003052:	fba3 2301 	umull	r2, r3, r3, r1
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2264      	movs	r2, #100	@ 0x64
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	1acb      	subs	r3, r1, r3
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003066:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003068:	fba3 2302 	umull	r2, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003074:	441c      	add	r4, r3
 8003076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003080:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	1891      	adds	r1, r2, r2
 800308e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003090:	415b      	adcs	r3, r3
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003098:	4641      	mov	r1, r8
 800309a:	1851      	adds	r1, r2, r1
 800309c:	6339      	str	r1, [r7, #48]	@ 0x30
 800309e:	4649      	mov	r1, r9
 80030a0:	414b      	adcs	r3, r1
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030b0:	4659      	mov	r1, fp
 80030b2:	00cb      	lsls	r3, r1, #3
 80030b4:	4651      	mov	r1, sl
 80030b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ba:	4651      	mov	r1, sl
 80030bc:	00ca      	lsls	r2, r1, #3
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	4642      	mov	r2, r8
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030cc:	464b      	mov	r3, r9
 80030ce:	460a      	mov	r2, r1
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030ec:	460b      	mov	r3, r1
 80030ee:	18db      	adds	r3, r3, r3
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f2:	4613      	mov	r3, r2
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003102:	f7fd f8c5 	bl	8000290 <__aeabi_uldivmod>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <UART_SetConfig+0x2d4>)
 800310c:	fba3 1302 	umull	r1, r3, r3, r2
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	2164      	movs	r1, #100	@ 0x64
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	3332      	adds	r3, #50	@ 0x32
 800311e:	4a08      	ldr	r2, [pc, #32]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4422      	add	r2, r4
 8003132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003134:	e106      	b.n	8003344 <UART_SetConfig+0x4d8>
 8003136:	bf00      	nop
 8003138:	40011000 	.word	0x40011000
 800313c:	40011400 	.word	0x40011400
 8003140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800314e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003156:	4642      	mov	r2, r8
 8003158:	464b      	mov	r3, r9
 800315a:	1891      	adds	r1, r2, r2
 800315c:	6239      	str	r1, [r7, #32]
 800315e:	415b      	adcs	r3, r3
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
 8003162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003166:	4641      	mov	r1, r8
 8003168:	1854      	adds	r4, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb43 0501 	adc.w	r5, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	00eb      	lsls	r3, r5, #3
 800317a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317e:	00e2      	lsls	r2, r4, #3
 8003180:	4614      	mov	r4, r2
 8003182:	461d      	mov	r5, r3
 8003184:	4643      	mov	r3, r8
 8003186:	18e3      	adds	r3, r4, r3
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800318c:	464b      	mov	r3, r9
 800318e:	eb45 0303 	adc.w	r3, r5, r3
 8003192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031b2:	4629      	mov	r1, r5
 80031b4:	008b      	lsls	r3, r1, #2
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031bc:	4621      	mov	r1, r4
 80031be:	008a      	lsls	r2, r1, #2
 80031c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031c4:	f7fd f864 	bl	8000290 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <UART_SetConfig+0x4e4>)
 80031ce:	fba3 2302 	umull	r2, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	011c      	lsls	r4, r3, #4
 80031d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	1891      	adds	r1, r2, r2
 80031ee:	61b9      	str	r1, [r7, #24]
 80031f0:	415b      	adcs	r3, r3
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	4641      	mov	r1, r8
 80031fa:	1851      	adds	r1, r2, r1
 80031fc:	6139      	str	r1, [r7, #16]
 80031fe:	4649      	mov	r1, r9
 8003200:	414b      	adcs	r3, r1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003210:	4659      	mov	r1, fp
 8003212:	00cb      	lsls	r3, r1, #3
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321a:	4651      	mov	r1, sl
 800321c:	00ca      	lsls	r2, r1, #3
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	4603      	mov	r3, r0
 8003224:	4642      	mov	r2, r8
 8003226:	189b      	adds	r3, r3, r2
 8003228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800322c:	464b      	mov	r3, r9
 800322e:	460a      	mov	r2, r1
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003242:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003250:	4649      	mov	r1, r9
 8003252:	008b      	lsls	r3, r1, #2
 8003254:	4641      	mov	r1, r8
 8003256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325a:	4641      	mov	r1, r8
 800325c:	008a      	lsls	r2, r1, #2
 800325e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003262:	f7fd f815 	bl	8000290 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4611      	mov	r1, r2
 800326c:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <UART_SetConfig+0x4e4>)
 800326e:	fba3 2301 	umull	r2, r3, r3, r1
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2264      	movs	r2, #100	@ 0x64
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	1acb      	subs	r3, r1, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	@ 0x32
 8003280:	4a33      	ldr	r2, [pc, #204]	@ (8003350 <UART_SetConfig+0x4e4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800328c:	441c      	add	r4, r3
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	673b      	str	r3, [r7, #112]	@ 0x70
 8003296:	677a      	str	r2, [r7, #116]	@ 0x74
 8003298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	415b      	adcs	r3, r3
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ac:	4641      	mov	r1, r8
 80032ae:	1851      	adds	r1, r2, r1
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	4649      	mov	r1, r9
 80032b4:	414b      	adcs	r3, r1
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032c4:	4659      	mov	r1, fp
 80032c6:	00cb      	lsls	r3, r1, #3
 80032c8:	4651      	mov	r1, sl
 80032ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ce:	4651      	mov	r1, sl
 80032d0:	00ca      	lsls	r2, r1, #3
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	4642      	mov	r2, r8
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032de:	464b      	mov	r3, r9
 80032e0:	460a      	mov	r2, r1
 80032e2:	eb42 0303 	adc.w	r3, r2, r3
 80032e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80032f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003300:	4649      	mov	r1, r9
 8003302:	008b      	lsls	r3, r1, #2
 8003304:	4641      	mov	r1, r8
 8003306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330a:	4641      	mov	r1, r8
 800330c:	008a      	lsls	r2, r1, #2
 800330e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003312:	f7fc ffbd 	bl	8000290 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <UART_SetConfig+0x4e4>)
 800331c:	fba3 1302 	umull	r1, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	2164      	movs	r1, #100	@ 0x64
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	3332      	adds	r3, #50	@ 0x32
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <UART_SetConfig+0x4e4>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4422      	add	r2, r4
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800334a:	46bd      	mov	sp, r7
 800334c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003350:	51eb851f 	.word	0x51eb851f

08003354 <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 800335a:	f243 3114 	movw	r1, #13076	@ 0x3314
 800335e:	2001      	movs	r0, #1
 8003360:	f004 fcfe 	bl	8007d60 <calloc>
 8003364:	4603      	mov	r3, r0
 8003366:	607b      	str	r3, [r7, #4]
    if (!handle)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d019      	beq.n	80033a2 <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fa76 	bl	8006864 <TF_InitStatic>
 8003378:	4603      	mov	r3, r0
 800337a:	70fb      	strb	r3, [r7, #3]
    if (!status)
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4909      	ldr	r1, [pc, #36]	@ (80033b0 <gapcom_create+0x5c>)
 800338c:	4618      	mov	r0, r3
 800338e:	f003 fb7d 	bl	8006a8c <TF_AddGenericListener>

    goto end;
 8003392:	e007      	b.n	80033a4 <gapcom_create+0x50>
        goto free_handle;
 8003394:	bf00      	nop

free_handle:
    free(handle);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f004 fcfe 	bl	8007d98 <free>
    handle = NULL;
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e000      	b.n	80033a4 <gapcom_create+0x50>
        goto end;
 80033a2:	bf00      	nop
end:
    return handle;
 80033a4:	687b      	ldr	r3, [r7, #4]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	0800347d 	.word	0x0800347d

080033b4 <gapcom_set_sender_impl>:
        free(handle);
    }
}

void gapcom_set_sender_impl(gapcom_handle_t* handle, gapcom_sender_t* sender_impl)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
    handle->sender_impl = sender_impl;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033c4:	461a      	mov	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <gapcom_install_callback>:

void gapcom_install_callback(
    gapcom_handle_t* handle,
    gapcom_callback_t callback,
    gapcom_msg_t msg_type)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	71fb      	strb	r3, [r7, #7]
    if (msg_type < GAPCOM_MSG_MIN || msg_type > GAPCOM_MSG_MAX)
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2b0e      	cmp	r3, #14
 80033ea:	d808      	bhi.n	80033fe <gapcom_install_callback+0x26>
        log_com("Unexpected msg_type for callback: %u", msg_type);
        return;
    }
    else
    {
        handle->user_callback[msg_type] = callback;
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	e000      	b.n	8003400 <gapcom_install_callback+0x28>
        return;
 80033fe:	bf00      	nop
    }
}
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <gapcom_accept>:
{
    handle->user_callback[msg_type] = NULL;
}

void gapcom_accept(gapcom_handle_t* handle, const uint8_t* buf, size_t len)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
    log_com("Accepting message");
    /* CAUTION: TinyFrame offers no way of checking if this succeeded ! */
    TF_Accept(&handle->tf_handle, buf, len);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f003 fc6d 	bl	8006cfc <TF_Accept>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8003432:	2218      	movs	r2, #24
 8003434:	2100      	movs	r1, #0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f004 ff90 	bl	800835c <memset>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <TF_WriteImpl>:
#include <pb_decode.h>
#include <stdint.h>
#include <unistd.h>

void TF_WriteImpl(TinyFrame* tf_handle, const uint8_t* buf, uint32_t len)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
    ssize_t bytes_sent;
    gapcom_handle_t* handle;
    gapcom_sender_t* sender;

    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	61bb      	str	r3, [r7, #24]
    sender = handle->sender_impl;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800345e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8003462:	617b      	str	r3, [r7, #20]
    bytes_sent = sender->send(sender, buf, len);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	6978      	ldr	r0, [r7, #20]
 800346e:	4798      	blx	r3
 8003470:	6138      	str	r0, [r7, #16]
    if (bytes_sent < 0)
    {
        log_com("Failed to send message, returned %lld", bytes_sent);
    }
}
 8003472:	bf00      	nop
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b0a3      	sub	sp, #140	@ 0x8c
 8003480:	af00      	add	r7, sp, #0
 8003482:	6178      	str	r0, [r7, #20]
 8003484:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800348c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	88db      	ldrh	r3, [r3, #6]
 8003498:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800349c:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 80034a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 81e0 	beq.w	8003870 <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f103 011a 	add.w	r1, r3, #26
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	8b1b      	ldrh	r3, [r3, #24]
 80034ba:	461a      	mov	r2, r3
 80034bc:	463b      	mov	r3, r7
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fb94 	bl	8003bec <pb_istream_from_buffer>
 80034c4:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80034c8:	463b      	mov	r3, r7
 80034ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	88db      	ldrh	r3, [r3, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11a      	bne.n	800350e <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 80034de:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80034e2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034e6:	49b9      	ldr	r1, [pc, #740]	@ (80037cc <gapcom_tf_id_listener+0x350>)
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fcb9 	bl	8004e60 <pb_decode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80034f4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 81bc 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 80034fe:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8003502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003504:	4611      	mov	r1, r2
 8003506:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800350a:	4798      	blx	r3
 800350c:	e1b3      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	88db      	ldrh	r3, [r3, #6]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d11a      	bne.n	800354c <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 800351c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003520:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003524:	49aa      	ldr	r1, [pc, #680]	@ (80037d0 <gapcom_tf_id_listener+0x354>)
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fc9a 	bl	8004e60 <pb_decode>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003532:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 819d 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 800353c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003540:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003542:	4611      	mov	r1, r2
 8003544:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003548:	4798      	blx	r3
 800354a:	e194      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	88db      	ldrh	r3, [r3, #6]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11a      	bne.n	800358a <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 800355a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800355e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003562:	499c      	ldr	r1, [pc, #624]	@ (80037d4 <gapcom_tf_id_listener+0x358>)
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fc7b 	bl	8004e60 <pb_decode>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003570:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 817e 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 800357a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800357e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003580:	4611      	mov	r1, r2
 8003582:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003586:	4798      	blx	r3
 8003588:	e175      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	88db      	ldrh	r3, [r3, #6]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d11a      	bne.n	80035c8 <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8003598:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800359c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035a0:	498d      	ldr	r1, [pc, #564]	@ (80037d8 <gapcom_tf_id_listener+0x35c>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fc5c 	bl	8004e60 <pb_decode>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80035ae:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 815f 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 80035b8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80035bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035be:	4611      	mov	r1, r2
 80035c0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80035c4:	4798      	blx	r3
 80035c6:	e156      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	88db      	ldrh	r3, [r3, #6]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11a      	bne.n	8003606 <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 80035d6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80035da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035de:	497f      	ldr	r1, [pc, #508]	@ (80037dc <gapcom_tf_id_listener+0x360>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 fc3d 	bl	8004e60 <pb_decode>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80035ec:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8140 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 80035f6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80035fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035fc:	4611      	mov	r1, r2
 80035fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003602:	4798      	blx	r3
 8003604:	e137      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	88db      	ldrh	r3, [r3, #6]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d11a      	bne.n	8003644 <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 8003614:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003618:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800361c:	4970      	ldr	r1, [pc, #448]	@ (80037e0 <gapcom_tf_id_listener+0x364>)
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fc1e 	bl	8004e60 <pb_decode>
 8003624:	4603      	mov	r3, r0
 8003626:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800362a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8121 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 8003634:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800363a:	4611      	mov	r1, r2
 800363c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003640:	4798      	blx	r3
 8003642:	e118      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	88db      	ldrh	r3, [r3, #6]
 8003648:	2b06      	cmp	r3, #6
 800364a:	d11d      	bne.n	8003688 <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 800364c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8003658:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800365c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003660:	4960      	ldr	r1, [pc, #384]	@ (80037e4 <gapcom_tf_id_listener+0x368>)
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fbfc 	bl	8004e60 <pb_decode>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800366e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80ff 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 8003678:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800367c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800367e:	4611      	mov	r1, r2
 8003680:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003684:	4798      	blx	r3
 8003686:	e0f6      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	88db      	ldrh	r3, [r3, #6]
 800368c:	2b07      	cmp	r3, #7
 800368e:	d11a      	bne.n	80036c6 <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 8003696:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800369a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800369e:	4952      	ldr	r1, [pc, #328]	@ (80037e8 <gapcom_tf_id_listener+0x36c>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fbdd 	bl	8004e60 <pb_decode>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80036ac:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80e0 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 80036b6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80036ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036bc:	4611      	mov	r1, r2
 80036be:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80036c2:	4798      	blx	r3
 80036c4:	e0d7      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	88db      	ldrh	r3, [r3, #6]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11a      	bne.n	8003704 <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 80036d4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80036d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036dc:	4943      	ldr	r1, [pc, #268]	@ (80037ec <gapcom_tf_id_listener+0x370>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fbbe 	bl	8004e60 <pb_decode>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80036ea:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80c1 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 80036f4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80036f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036fa:	4611      	mov	r1, r2
 80036fc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003700:	4798      	blx	r3
 8003702:	e0b8      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	88db      	ldrh	r3, [r3, #6]
 8003708:	2b09      	cmp	r3, #9
 800370a:	d120      	bne.n	800374e <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 800370c:	2300      	movs	r3, #0
 800370e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8003712:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 800371e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003722:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003726:	4932      	ldr	r1, [pc, #200]	@ (80037f0 <gapcom_tf_id_listener+0x374>)
 8003728:	4618      	mov	r0, r3
 800372a:	f001 fb99 	bl	8004e60 <pb_decode>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003734:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 809c 	beq.w	8003876 <gapcom_tf_id_listener+0x3fa>
 800373e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003744:	4611      	mov	r1, r2
 8003746:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800374a:	4798      	blx	r3
 800374c:	e093      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	88db      	ldrh	r3, [r3, #6]
 8003752:	2b0a      	cmp	r3, #10
 8003754:	d119      	bne.n	800378a <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 8003756:	2300      	movs	r3, #0
 8003758:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 800375c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003760:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003764:	4923      	ldr	r1, [pc, #140]	@ (80037f4 <gapcom_tf_id_listener+0x378>)
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fb7a 	bl	8004e60 <pb_decode>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003772:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003776:	2b00      	cmp	r3, #0
 8003778:	d07d      	beq.n	8003876 <gapcom_tf_id_listener+0x3fa>
 800377a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800377e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003780:	4611      	mov	r1, r2
 8003782:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003786:	4798      	blx	r3
 8003788:	e075      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	88db      	ldrh	r3, [r3, #6]
 800378e:	2b0b      	cmp	r3, #11
 8003790:	d134      	bne.n	80037fc <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 8003792:	f107 0320 	add.w	r3, r7, #32
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 800379c:	f107 0220 	add.w	r2, r7, #32
 80037a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80037a4:	4914      	ldr	r1, [pc, #80]	@ (80037f8 <gapcom_tf_id_listener+0x37c>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fb5a 	bl	8004e60 <pb_decode>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80037b2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d05d      	beq.n	8003876 <gapcom_tf_id_listener+0x3fa>
 80037ba:	f107 0220 	add.w	r2, r7, #32
 80037be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037c0:	4611      	mov	r1, r2
 80037c2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80037c6:	4798      	blx	r3
 80037c8:	e055      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
 80037ca:	bf00      	nop
 80037cc:	080095e8 	.word	0x080095e8
 80037d0:	0800960c 	.word	0x0800960c
 80037d4:	08009630 	.word	0x08009630
 80037d8:	08009654 	.word	0x08009654
 80037dc:	08009678 	.word	0x08009678
 80037e0:	0800969c 	.word	0x0800969c
 80037e4:	080096c4 	.word	0x080096c4
 80037e8:	080096e8 	.word	0x080096e8
 80037ec:	08009708 	.word	0x08009708
 80037f0:	08009734 	.word	0x08009734
 80037f4:	08009754 	.word	0x08009754
 80037f8:	08009788 	.word	0x08009788
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	88db      	ldrh	r3, [r3, #6]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d118      	bne.n	8003836 <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 8003804:	2300      	movs	r3, #0
 8003806:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 8003808:	f107 021c 	add.w	r2, r7, #28
 800380c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003810:	491b      	ldr	r1, [pc, #108]	@ (8003880 <gapcom_tf_id_listener+0x404>)
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fb24 	bl	8004e60 <pb_decode>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800381e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003822:	2b00      	cmp	r3, #0
 8003824:	d027      	beq.n	8003876 <gapcom_tf_id_listener+0x3fa>
 8003826:	f107 021c 	add.w	r2, r7, #28
 800382a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800382c:	4611      	mov	r1, r2
 800382e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003832:	4798      	blx	r3
 8003834:	e01f      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	88db      	ldrh	r3, [r3, #6]
 800383a:	2b0d      	cmp	r3, #13
 800383c:	d11a      	bne.n	8003874 <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 800383e:	2300      	movs	r3, #0
 8003840:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 8003842:	f107 0218 	add.w	r2, r7, #24
 8003846:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800384a:	490e      	ldr	r1, [pc, #56]	@ (8003884 <gapcom_tf_id_listener+0x408>)
 800384c:	4618      	mov	r0, r3
 800384e:	f001 fb07 	bl	8004e60 <pb_decode>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003858:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <gapcom_tf_id_listener+0x3fa>
 8003860:	f107 0218 	add.w	r2, r7, #24
 8003864:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003866:	4611      	mov	r1, r2
 8003868:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800386c:	4798      	blx	r3
 800386e:	e002      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
        goto end;
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 8003874:	bf00      	nop
    return TF_STAY;
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	378c      	adds	r7, #140	@ 0x8c
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	080097ac 	.word	0x080097ac
 8003884:	080097d0 	.word	0x080097d0

08003888 <gapcom_encapsulate_tf>:

int gapcom_encapsulate_tf(
    gapcom_handle_t* handle,
    gapcom_msg_t msg_type,
    int msg_len)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	460b      	mov	r3, r1
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	72fb      	strb	r3, [r7, #11]
    /* Build TinyFrame frame pointing to payload */
    TF_ClearMsg(&handle->tf_msg);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 800389c:	3320      	adds	r3, #32
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fdc3 	bl	800342a <TF_ClearMsg>
    handle->tf_msg.type = msg_type;
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038ae:	f8a3 2266 	strh.w	r2, [r3, #614]	@ 0x266
    handle->tf_msg.data = (const uint8_t*)(&handle->sendbuf);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 80038b8:	3334      	adds	r3, #52	@ 0x34
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80038c0:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    handle->tf_msg.len = (TF_LEN)msg_len;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038ce:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
    /* When the payload is empty (which can happen with protobuf, for example
     * with a single numeric field with value 0 : it will get compressed and
     * interpreted as 0 upon decoding) the payload CRC is not appended by
     * TinyFrame. Otherwise, we do have a payload CRC as a footer.
     */
    if (msg_len > 0)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dd01      	ble.n	80038dc <gapcom_encapsulate_tf+0x54>
        return GAPCOM_TF_HEADER_SIZE_BYTES + GAPCOM_TF_FOOTER_SIZE_BYTES;
 80038d8:	230d      	movs	r3, #13
 80038da:	e000      	b.n	80038de <gapcom_encapsulate_tf+0x56>
    else
        return GAPCOM_TF_HEADER_SIZE_BYTES;
 80038dc:	230b      	movs	r3, #11
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <gapcom_respond_ping>:
 ************************/

int gapcom_respond_ping(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	b092      	sub	sp, #72	@ 0x48
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	61f8      	str	r0, [r7, #28]
 80038f0:	460b      	mov	r3, r1
 80038f2:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPPingResp resp = GAPPingResp_init_zero;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 80038fe:	7efb      	ldrb	r3, [r7, #27]
 8003900:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPPingResp_fields, resp);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390a:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 800390e:	3334      	adds	r3, #52	@ 0x34
 8003910:	4638      	mov	r0, r7
 8003912:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 8003916:	4619      	mov	r1, r3
 8003918:	f001 fe74 	bl	8005604 <pb_ostream_from_buffer>
 800391c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003920:	463d      	mov	r5, r7
 8003922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800392e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003932:	4919      	ldr	r1, [pc, #100]	@ (8003998 <gapcom_respond_ping+0xb0>)
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fad2 	bl	8005ede <pb_encode>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003940:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <gapcom_respond_ping+0x66>
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	643b      	str	r3, [r7, #64]	@ 0x40
 800394c:	e002      	b.n	8003954 <gapcom_respond_ping+0x6c>
 800394e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003952:	643b      	str	r3, [r7, #64]	@ 0x40
 8003954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003958:	4413      	add	r3, r2
 800395a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 800395c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003962:	d012      	beq.n	800398a <gapcom_respond_ping+0xa2>
    {
        log_com("Failed to encode Ping protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_PING_RESP, ret);
 8003964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003966:	2101      	movs	r1, #1
 8003968:	69f8      	ldr	r0, [r7, #28]
 800396a:	f7ff ff8d 	bl	8003888 <gapcom_encapsulate_tf>
 800396e:	4602      	mov	r2, r0
 8003970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003972:	4413      	add	r3, r2
 8003974:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 800397e:	3320      	adds	r3, #32
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f003 fec2 	bl	800770c <TF_Respond>
 8003988:	e000      	b.n	800398c <gapcom_respond_ping+0xa4>
        goto end;
 800398a:	bf00      	nop

end:
    return ret;
 800398c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800398e:	4618      	mov	r0, r3
 8003990:	3748      	adds	r7, #72	@ 0x48
 8003992:	46bd      	mov	sp, r7
 8003994:	bdb0      	pop	{r4, r5, r7, pc}
 8003996:	bf00      	nop
 8003998:	0800960c 	.word	0x0800960c

0800399c <gapcom_respond_set_log_verbosity>:

int gapcom_respond_set_log_verbosity(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b092      	sub	sp, #72	@ 0x48
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	61f8      	str	r0, [r7, #28]
 80039a4:	460b      	mov	r3, r1
 80039a6:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 80039b2:	7efb      	ldrb	r3, [r7, #27]
 80039b4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPSetLogVerbosityResp_fields, resp);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039be:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 80039c2:	3334      	adds	r3, #52	@ 0x34
 80039c4:	4638      	mov	r0, r7
 80039c6:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 80039ca:	4619      	mov	r1, r3
 80039cc:	f001 fe1a 	bl	8005604 <pb_ostream_from_buffer>
 80039d0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80039d4:	463d      	mov	r5, r7
 80039d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039da:	682b      	ldr	r3, [r5, #0]
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e6:	4919      	ldr	r1, [pc, #100]	@ (8003a4c <gapcom_respond_set_log_verbosity+0xb0>)
 80039e8:	4618      	mov	r0, r3
 80039ea:	f002 fa78 	bl	8005ede <pb_encode>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80039f4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <gapcom_respond_set_log_verbosity+0x66>
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a00:	e002      	b.n	8003a08 <gapcom_respond_set_log_verbosity+0x6c>
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a0c:	4413      	add	r3, r2
 8003a0e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 8003a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a16:	d012      	beq.n	8003a3e <gapcom_respond_set_log_verbosity+0xa2>
    {
        log_com("Failed to encode Set Log Verbosity protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_SET_LOG_VERBOSITY_RESP, ret);
 8003a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	69f8      	ldr	r0, [r7, #28]
 8003a1e:	f7ff ff33 	bl	8003888 <gapcom_encapsulate_tf>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a26:	4413      	add	r3, r2
 8003a28:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8003a32:	3320      	adds	r3, #32
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f003 fe68 	bl	800770c <TF_Respond>
 8003a3c:	e000      	b.n	8003a40 <gapcom_respond_set_log_verbosity+0xa4>
        goto end;
 8003a3e:	bf00      	nop

end:
    return ret;
 8003a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3748      	adds	r7, #72	@ 0x48
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08009654 	.word	0x08009654

08003a50 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	68b8      	ldr	r0, [r7, #8]
 8003a7a:	f004 fcfa 	bl	8008472 <memcpy>
    }
    
    return true;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <pb_read+0x16>
        return true;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e05f      	b.n	8003b5e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d123      	bne.n	8003aec <pb_read+0x64>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <pb_read+0xe0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01e      	beq.n	8003aec <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8003aae:	e011      	b.n	8003ad4 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff ffe5 	bl	8003a88 <pb_read>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <pb_read+0x46>
				return false;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e047      	b.n	8003b5e <pb_read+0xd6>
			
			count -= 16;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3b10      	subs	r3, #16
 8003ad2:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d8ea      	bhi.n	8003ab0 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8003ada:	f107 0310 	add.w	r3, r7, #16
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff ffd0 	bl	8003a88 <pb_read>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	e038      	b.n	8003b5e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d90b      	bls.n	8003b0e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <pb_read+0x7c>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	e000      	b.n	8003b06 <pb_read+0x7e>
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <pb_read+0xe4>)
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	60d3      	str	r3, [r2, #12]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e027      	b.n	8003b5e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	4798      	blx	r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f083 0301 	eor.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <pb_read+0xac>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	e000      	b.n	8003b36 <pb_read+0xae>
 8003b34:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <pb_read+0xe8>)
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	60d3      	str	r3, [r2, #12]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e00f      	b.n	8003b5e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d903      	bls.n	8003b50 <pb_read+0xc8>
        stream->bytes_left = 0;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	e005      	b.n	8003b5c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	1ad2      	subs	r2, r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]

    return true;
 8003b5c:	2301      	movs	r3, #1
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	08003a51 	.word	0x08003a51
 8003b6c:	080090c8 	.word	0x080090c8
 8003b70:	080090d8 	.word	0x080090d8

08003b74 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <pb_readbyte+0x20>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	e000      	b.n	8003b96 <pb_readbyte+0x22>
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <pb_readbyte+0x70>)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	60d3      	str	r3, [r2, #12]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e01d      	b.n	8003bda <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <pb_readbyte+0x50>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	e000      	b.n	8003bc6 <pb_readbyte+0x52>
 8003bc4:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <pb_readbyte+0x74>)
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	60d3      	str	r3, [r2, #12]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e005      	b.n	8003bda <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	1e5a      	subs	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
    
    return true;    
 8003bd8:	2301      	movs	r3, #1
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	080090c8 	.word	0x080090c8
 8003be8:	080090d8 	.word	0x080090d8

08003bec <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8003bec:	b490      	push	{r4, r7}
 8003bee:	b08a      	sub	sp, #40	@ 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <pb_istream_from_buffer+0x38>)
 8003bfa:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	461c      	mov	r4, r3
 8003c10:	f107 0318 	add.w	r3, r7, #24
 8003c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	3728      	adds	r7, #40	@ 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc90      	pop	{r4, r7}
 8003c22:	4770      	bx	lr
 8003c24:	08003a51 	.word	0x08003a51

08003c28 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8003c34:	f107 0315 	add.w	r3, r7, #21
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff9a 	bl	8003b74 <pb_readbyte>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e084      	b.n	8003d6e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003c64:	7d7b      	ldrb	r3, [r7, #21]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db02      	blt.n	8003c72 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003c6c:	7d7b      	ldrb	r3, [r7, #21]
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e079      	b.n	8003d66 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8003c72:	2307      	movs	r3, #7
 8003c74:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8003c76:	7d7b      	ldrb	r3, [r7, #21]
 8003c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c7c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8003c7e:	f107 0315 	add.w	r3, r7, #21
 8003c82:	4619      	mov	r1, r3
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff ff75 	bl	8003b74 <pb_readbyte>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f083 0301 	eor.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <pb_decode_varint32_eof+0x72>
                return false;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e069      	b.n	8003d6e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b1f      	cmp	r3, #31
 8003c9e:	d92f      	bls.n	8003d00 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ca4:	d801      	bhi.n	8003caa <pb_decode_varint32_eof+0x82>
 8003ca6:	23ff      	movs	r3, #255	@ 0xff
 8003ca8:	e000      	b.n	8003cac <pb_decode_varint32_eof+0x84>
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003cae:	7d7b      	ldrb	r3, [r7, #21]
 8003cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da05      	bge.n	8003cca <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003cbe:	7d7b      	ldrb	r3, [r7, #21]
 8003cc0:	7dfa      	ldrb	r2, [r7, #23]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d101      	bne.n	8003cca <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <pb_decode_varint32_eof+0xa4>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75bb      	strb	r3, [r7, #22]
 8003cce:	7dbb      	ldrb	r3, [r7, #22]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cda:	d805      	bhi.n	8003ce8 <pb_decode_varint32_eof+0xc0>
 8003cdc:	7dbb      	ldrb	r3, [r7, #22]
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d037      	beq.n	8003d58 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <pb_decode_varint32_eof+0xce>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	e000      	b.n	8003cf8 <pb_decode_varint32_eof+0xd0>
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <pb_decode_varint32_eof+0x150>)
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	60d3      	str	r3, [r2, #12]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e036      	b.n	8003d6e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b1c      	cmp	r3, #28
 8003d04:	d11f      	bne.n	8003d46 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8003d06:	7d7b      	ldrb	r3, [r7, #21]
 8003d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <pb_decode_varint32_eof+0x10a>
 8003d10:	7d7b      	ldrb	r3, [r7, #21]
 8003d12:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8003d16:	2b78      	cmp	r3, #120	@ 0x78
 8003d18:	d00b      	beq.n	8003d32 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <pb_decode_varint32_eof+0x100>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	e000      	b.n	8003d2a <pb_decode_varint32_eof+0x102>
 8003d28:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <pb_decode_varint32_eof+0x150>)
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	60d3      	str	r3, [r2, #12]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e01d      	b.n	8003d6e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8003d32:	7d7b      	ldrb	r3, [r7, #21]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e008      	b.n	8003d58 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8003d46:	7d7b      	ldrb	r3, [r7, #21]
 8003d48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	3307      	adds	r3, #7
 8003d5c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8003d5e:	7d7b      	ldrb	r3, [r7, #21]
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db8b      	blt.n	8003c7e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	601a      	str	r2, [r3, #0]
   return true;
 8003d6c:	2301      	movs	r3, #1
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	080090e4 	.word	0x080090e4

08003d7c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8003d86:	2200      	movs	r2, #0
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ff4c 	bl	8003c28 <pb_decode_varint32_eof>
 8003d90:	4603      	mov	r3, r0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8003d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da0:	b08a      	sub	sp, #40	@ 0x28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8003db8:	f107 0317 	add.w	r3, r7, #23
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fed8 	bl	8003b74 <pb_readbyte>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f083 0301 	eor.w	r3, r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <pb_decode_varint+0x38>
            return false;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e041      	b.n	8003e58 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dd8:	d910      	bls.n	8003dfc <pb_decode_varint+0x60>
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <pb_decode_varint+0x56>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	e000      	b.n	8003df4 <pb_decode_varint+0x58>
 8003df2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e64 <pb_decode_varint+0xc8>)
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e02d      	b.n	8003e58 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2200      	movs	r2, #0
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8003e0c:	f04f 0900 	mov.w	r9, #0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	f1a3 0120 	sub.w	r1, r3, #32
 8003e16:	f1c3 0220 	rsb	r2, r3, #32
 8003e1a:	fa09 f503 	lsl.w	r5, r9, r3
 8003e1e:	fa08 f101 	lsl.w	r1, r8, r1
 8003e22:	430d      	orrs	r5, r1
 8003e24:	fa28 f202 	lsr.w	r2, r8, r2
 8003e28:	4315      	orrs	r5, r2
 8003e2a:	fa08 f403 	lsl.w	r4, r8, r3
 8003e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e32:	ea42 0a04 	orr.w	sl, r2, r4
 8003e36:	ea43 0b05 	orr.w	fp, r3, r5
 8003e3a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	3307      	adds	r3, #7
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	dbb5      	blt.n	8003db8 <pb_decode_varint+0x1c>
    
    *dest = result;
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e52:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3728      	adds	r7, #40	@ 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	080090e4 	.word	0x080090e4

08003e68 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003e70:	f107 030f 	add.w	r3, r7, #15
 8003e74:	2201      	movs	r2, #1
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fe05 	bl	8003a88 <pb_read>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f083 0301 	eor.w	r3, r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <pb_skip_varint+0x26>
            return false;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e004      	b.n	8003e98 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dbec      	blt.n	8003e70 <pb_skip_varint+0x8>
    return true;
 8003e96:	2301      	movs	r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ff64 	bl	8003d7c <pb_decode_varint32>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f083 0301 	eor.w	r3, r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <pb_skip_string+0x24>
        return false;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e006      	b.n	8003ed2 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2100      	movs	r1, #0
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fddc 	bl	8003a88 <pb_read>
 8003ed0:	4603      	mov	r3, r0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fe90 	bl	8003c28 <pb_decode_varint32_eof>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f083 0301 	eor.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <pb_decode_tag+0x3e>
    {
        return false;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e00b      	b.n	8003f30 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	08da      	lsrs	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	701a      	strb	r2, [r3, #0]
    return true;
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d826      	bhi.n	8003f98 <pb_skip_field+0x60>
 8003f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <pb_skip_field+0x18>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f69 	.word	0x08003f69
 8003f54:	08003f73 	.word	0x08003f73
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003f99 	.word	0x08003f99
 8003f64:	08003f8b 	.word	0x08003f8b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff7d 	bl	8003e68 <pb_skip_varint>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	e01d      	b.n	8003fae <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8003f72:	2208      	movs	r2, #8
 8003f74:	2100      	movs	r1, #0
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fd86 	bl	8003a88 <pb_read>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e016      	b.n	8003fae <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff8d 	bl	8003ea0 <pb_skip_string>
 8003f86:	4603      	mov	r3, r0
 8003f88:	e011      	b.n	8003fae <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fd7a 	bl	8003a88 <pb_read>
 8003f94:	4603      	mov	r3, r0
 8003f96:	e00a      	b.n	8003fae <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <pb_skip_field+0x6e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	e000      	b.n	8003fa8 <pb_skip_field+0x70>
 8003fa6:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <pb_skip_field+0x80>)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	60d3      	str	r3, [r2, #12]
 8003fac:	2300      	movs	r3, #0
    }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	080090f4 	.word	0x080090f4

08003fbc <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d03f      	beq.n	8004058 <read_raw_value+0x9c>
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	dc47      	bgt.n	800406c <read_raw_value+0xb0>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <read_raw_value+0x2a>
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d02f      	beq.n	8004044 <read_raw_value+0x88>
 8003fe4:	e042      	b.n	800406c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d20b      	bcs.n	8004018 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <read_raw_value+0x52>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	e000      	b.n	8004010 <read_raw_value+0x54>
 800400e:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <read_raw_value+0xd0>)
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	60d3      	str	r3, [r2, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	e034      	b.n	8004082 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8004018:	2201      	movs	r2, #1
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff fd33 	bl	8003a88 <pb_read>
 8004022:	4603      	mov	r3, r0
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <read_raw_value+0x76>
                    return false;
 800402e:	2300      	movs	r3, #0
 8004030:	e027      	b.n	8004082 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b25b      	sxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	dbd5      	blt.n	8003fec <read_raw_value+0x30>
            return true;
 8004040:	2301      	movs	r3, #1
 8004042:	e01e      	b.n	8004082 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2208      	movs	r2, #8
 8004048:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800404a:	2208      	movs	r2, #8
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff fd1a 	bl	8003a88 <pb_read>
 8004054:	4603      	mov	r3, r0
 8004056:	e014      	b.n	8004082 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2204      	movs	r2, #4
 800405c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800405e:	2204      	movs	r2, #4
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fd10 	bl	8003a88 <pb_read>
 8004068:	4603      	mov	r3, r0
 800406a:	e00a      	b.n	8004082 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <read_raw_value+0xbe>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	e000      	b.n	800407c <read_raw_value+0xc0>
 800407a:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <read_raw_value+0xd4>)
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	60d3      	str	r3, [r2, #12]
 8004080:	2300      	movs	r3, #0
    }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	080090e4 	.word	0x080090e4
 8004090:	080090f4 	.word	0x080090f4

08004094 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800409e:	f107 030c 	add.w	r3, r7, #12
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fe69 	bl	8003d7c <pb_decode_varint32>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f083 0301 	eor.w	r3, r3, #1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <pb_make_string_substream+0x26>
        return false;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e020      	b.n	80040fc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4614      	mov	r4, r2
 80040c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d20b      	bcs.n	80040e8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <pb_make_string_substream+0x4a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	e000      	b.n	80040e0 <pb_make_string_substream+0x4c>
 80040de:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <pb_make_string_substream+0x70>)
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	60d3      	str	r3, [r2, #12]
 80040e4:	2300      	movs	r3, #0
 80040e6:	e009      	b.n	80040fc <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad2      	subs	r2, r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]
    return true;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	08009108 	.word	0x08009108

08004108 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00e      	beq.n	8004138 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	461a      	mov	r2, r3
 8004120:	2100      	movs	r1, #0
 8004122:	6838      	ldr	r0, [r7, #0]
 8004124:	f7ff fcb0 	bl	8003a88 <pb_read>
 8004128:	4603      	mov	r3, r0
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <pb_close_string_substream+0x30>
            return false;
 8004134:	2300      	movs	r3, #0
 8004136:	e008      	b.n	800414a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8004148:	2301      	movs	r3, #1
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	460b      	mov	r3, r1
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7d9b      	ldrb	r3, [r3, #22]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	2b0b      	cmp	r3, #11
 800416c:	f200 80d4 	bhi.w	8004318 <decode_basic_field+0x1c4>
 8004170:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <decode_basic_field+0x24>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041d9 	.word	0x080041d9
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041d9 	.word	0x080041d9
 8004188:	08004209 	.word	0x08004209
 800418c:	0800423d 	.word	0x0800423d
 8004190:	08004271 	.word	0x08004271
 8004194:	0800429b 	.word	0x0800429b
 8004198:	080042c5 	.word	0x080042c5
 800419c:	080042c5 	.word	0x080042c5
 80041a0:	08004319 	.word	0x08004319
 80041a4:	080042ef 	.word	0x080042ef
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00e      	beq.n	80041cc <decode_basic_field+0x78>
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	2bff      	cmp	r3, #255	@ 0xff
 80041b2:	d00b      	beq.n	80041cc <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <decode_basic_field+0x6e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	e000      	b.n	80041c4 <decode_basic_field+0x70>
 80041c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004338 <decode_basic_field+0x1e4>)
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	60d3      	str	r3, [r2, #12]
 80041c8:	2300      	movs	r3, #0
 80041ca:	e0b0      	b.n	800432e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fef6 	bl	8004fc0 <pb_dec_bool>
 80041d4:	4603      	mov	r3, r0
 80041d6:	e0aa      	b.n	800432e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80041d8:	7afb      	ldrb	r3, [r7, #11]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00e      	beq.n	80041fc <decode_basic_field+0xa8>
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	2bff      	cmp	r3, #255	@ 0xff
 80041e2:	d00b      	beq.n	80041fc <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <decode_basic_field+0x9e>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	e000      	b.n	80041f4 <decode_basic_field+0xa0>
 80041f2:	4b51      	ldr	r3, [pc, #324]	@ (8004338 <decode_basic_field+0x1e4>)
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	60d3      	str	r3, [r2, #12]
 80041f8:	2300      	movs	r3, #0
 80041fa:	e098      	b.n	800432e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 feee 	bl	8004fe0 <pb_dec_varint>
 8004204:	4603      	mov	r3, r0
 8004206:	e092      	b.n	800432e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8004208:	7afb      	ldrb	r3, [r7, #11]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d00e      	beq.n	800422c <decode_basic_field+0xd8>
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	2bff      	cmp	r3, #255	@ 0xff
 8004212:	d00b      	beq.n	800422c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <decode_basic_field+0xce>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	e000      	b.n	8004224 <decode_basic_field+0xd0>
 8004222:	4b45      	ldr	r3, [pc, #276]	@ (8004338 <decode_basic_field+0x1e4>)
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	60d3      	str	r3, [r2, #12]
 8004228:	2300      	movs	r3, #0
 800422a:	e080      	b.n	800432e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4619      	mov	r1, r3
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fe8a 	bl	8004f4c <pb_decode_fixed32>
 8004238:	4603      	mov	r3, r0
 800423a:	e078      	b.n	800432e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 800423c:	7afb      	ldrb	r3, [r7, #11]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d00e      	beq.n	8004260 <decode_basic_field+0x10c>
 8004242:	7afb      	ldrb	r3, [r7, #11]
 8004244:	2bff      	cmp	r3, #255	@ 0xff
 8004246:	d00b      	beq.n	8004260 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <decode_basic_field+0x102>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	e000      	b.n	8004258 <decode_basic_field+0x104>
 8004256:	4b38      	ldr	r3, [pc, #224]	@ (8004338 <decode_basic_field+0x1e4>)
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	60d3      	str	r3, [r2, #12]
 800425c:	2300      	movs	r3, #0
 800425e:	e066      	b.n	800432e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	4619      	mov	r1, r3
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fe8c 	bl	8004f84 <pb_decode_fixed64>
 800426c:	4603      	mov	r3, r0
 800426e:	e05e      	b.n	800432e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8004270:	7afb      	ldrb	r3, [r7, #11]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d00b      	beq.n	800428e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <decode_basic_field+0x130>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	e000      	b.n	8004286 <decode_basic_field+0x132>
 8004284:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <decode_basic_field+0x1e4>)
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	60d3      	str	r3, [r2, #12]
 800428a:	2300      	movs	r3, #0
 800428c:	e04f      	b.n	800432e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 ffd1 	bl	8005238 <pb_dec_bytes>
 8004296:	4603      	mov	r3, r0
 8004298:	e049      	b.n	800432e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d00b      	beq.n	80042b8 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <decode_basic_field+0x15a>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	e000      	b.n	80042b0 <decode_basic_field+0x15c>
 80042ae:	4b22      	ldr	r3, [pc, #136]	@ (8004338 <decode_basic_field+0x1e4>)
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	60d3      	str	r3, [r2, #12]
 80042b4:	2300      	movs	r3, #0
 80042b6:	e03a      	b.n	800432e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 f830 	bl	8005320 <pb_dec_string>
 80042c0:	4603      	mov	r3, r0
 80042c2:	e034      	b.n	800432e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80042c4:	7afb      	ldrb	r3, [r7, #11]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d00b      	beq.n	80042e2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <decode_basic_field+0x184>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	e000      	b.n	80042da <decode_basic_field+0x186>
 80042d8:	4b17      	ldr	r3, [pc, #92]	@ (8004338 <decode_basic_field+0x1e4>)
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	60d3      	str	r3, [r2, #12]
 80042de:	2300      	movs	r3, #0
 80042e0:	e025      	b.n	800432e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f001 f897 	bl	8005418 <pb_dec_submessage>
 80042ea:	4603      	mov	r3, r0
 80042ec:	e01f      	b.n	800432e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d00b      	beq.n	800430c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <decode_basic_field+0x1ae>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	e000      	b.n	8004304 <decode_basic_field+0x1b0>
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <decode_basic_field+0x1e4>)
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	60d3      	str	r3, [r2, #12]
 8004308:	2300      	movs	r3, #0
 800430a:	e010      	b.n	800432e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f001 f90c 	bl	800552c <pb_dec_fixed_length_bytes>
 8004314:	4603      	mov	r3, r0
 8004316:	e00a      	b.n	800432e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <decode_basic_field+0x1d2>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	e000      	b.n	8004328 <decode_basic_field+0x1d4>
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <decode_basic_field+0x1e8>)
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	2300      	movs	r3, #0
    }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	08009120 	.word	0x08009120
 800433c:	08009130 	.word	0x08009130

08004340 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b096      	sub	sp, #88	@ 0x58
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	460b      	mov	r3, r1
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7d9b      	ldrb	r3, [r3, #22]
 8004352:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004356:	2b30      	cmp	r3, #48	@ 0x30
 8004358:	f000 80c2 	beq.w	80044e0 <decode_static_field+0x1a0>
 800435c:	2b30      	cmp	r3, #48	@ 0x30
 800435e:	f200 811a 	bhi.w	8004596 <decode_static_field+0x256>
 8004362:	2b20      	cmp	r3, #32
 8004364:	d01f      	beq.n	80043a6 <decode_static_field+0x66>
 8004366:	2b20      	cmp	r3, #32
 8004368:	f200 8115 	bhi.w	8004596 <decode_static_field+0x256>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <decode_static_field+0x36>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d008      	beq.n	8004386 <decode_static_field+0x46>
 8004374:	e10f      	b.n	8004596 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4619      	mov	r1, r3
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff fee9 	bl	8004154 <decode_basic_field>
 8004382:	4603      	mov	r3, r0
 8004384:	e112      	b.n	80045ac <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8004396:	7afb      	ldrb	r3, [r7, #11]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4619      	mov	r1, r3
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fed9 	bl	8004154 <decode_basic_field>
 80043a2:	4603      	mov	r3, r0
 80043a4:	e102      	b.n	80045ac <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80043a6:	7afb      	ldrb	r3, [r7, #11]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d16c      	bne.n	8004486 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7d9b      	ldrb	r3, [r3, #22]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d866      	bhi.n	8004486 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	8a52      	ldrh	r2, [r2, #18]
 80043cc:	4611      	mov	r1, r2
 80043ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	fb01 f202 	mul.w	r2, r1, r2
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80043dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fe56 	bl	8004094 <pb_make_string_substream>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f083 0301 	eor.w	r3, r3, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01f      	beq.n	8004434 <decode_static_field+0xf4>
                    return false;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e0d9      	b.n	80045ac <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 80043f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	21ff      	movs	r1, #255	@ 0xff
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fea7 	bl	8004154 <decode_basic_field>
 8004406:	4603      	mov	r3, r0
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <decode_static_field+0xda>
                    {
                        status = false;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8004418:	e015      	b.n	8004446 <decode_static_field+0x106>
                    }
                    (*size)++;
 800441a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004424:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	8a52      	ldrh	r2, [r2, #18]
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8004434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <decode_static_field+0x106>
 800443a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800443c:	881a      	ldrh	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8a9b      	ldrh	r3, [r3, #20]
 8004442:	429a      	cmp	r2, r3
 8004444:	d3d8      	bcc.n	80043f8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8004446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <decode_static_field+0x11a>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	e000      	b.n	800445c <decode_static_field+0x11c>
 800445a:	4b56      	ldr	r3, [pc, #344]	@ (80045b4 <decode_static_field+0x274>)
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	60d3      	str	r3, [r2, #12]
 8004460:	2300      	movs	r3, #0
 8004462:	e0a3      	b.n	80045ac <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8004464:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004468:	4619      	mov	r1, r3
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff fe4c 	bl	8004108 <pb_close_string_substream>
 8004470:	4603      	mov	r3, r0
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <decode_static_field+0x140>
                    return false;
 800447c:	2300      	movs	r3, #0
 800447e:	e095      	b.n	80045ac <decode_static_field+0x26c>

                return status;
 8004480:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004484:	e092      	b.n	80045ac <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	8a52      	ldrh	r2, [r2, #18]
 8004494:	4611      	mov	r1, r2
 8004496:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004498:	8812      	ldrh	r2, [r2, #0]
 800449a:	fb01 f202 	mul.w	r2, r1, r2
 800449e:	441a      	add	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80044a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	b291      	uxth	r1, r2
 80044ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ae:	8011      	strh	r1, [r2, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	8a92      	ldrh	r2, [r2, #20]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d30b      	bcc.n	80044d0 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <decode_static_field+0x186>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	e000      	b.n	80044c8 <decode_static_field+0x188>
 80044c6:	4b3b      	ldr	r3, [pc, #236]	@ (80045b4 <decode_static_field+0x274>)
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	60d3      	str	r3, [r2, #12]
 80044cc:	2300      	movs	r3, #0
 80044ce:	e06d      	b.n	80045ac <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80044d0:	7afb      	ldrb	r3, [r7, #11]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4619      	mov	r1, r3
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff fe3c 	bl	8004154 <decode_basic_field>
 80044dc:	4603      	mov	r3, r0
 80044de:	e065      	b.n	80045ac <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7d9b      	ldrb	r3, [r3, #22]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d005      	beq.n	80044f8 <decode_static_field+0x1b8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7d9b      	ldrb	r3, [r3, #22]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2b09      	cmp	r3, #9
 80044f6:	d141      	bne.n	800457c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004502:	429a      	cmp	r2, r3
 8004504:	d03a      	beq.n	800457c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69d8      	ldr	r0, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8a5b      	ldrh	r3, [r3, #18]
 800450e:	461a      	mov	r2, r3
 8004510:	2100      	movs	r1, #0
 8004512:	f003 ff23 	bl	800835c <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8004526:	2b00      	cmp	r3, #0
 8004528:	d105      	bne.n	8004536 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8004532:	2b00      	cmp	r3, #0
 8004534:	d022      	beq.n	800457c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	f107 0314 	add.w	r3, r7, #20
 8004542:	4618      	mov	r0, r3
 8004544:	f003 fabd 	bl	8007ac2 <pb_field_iter_begin>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fa4d 	bl	80049f2 <pb_message_set_to_defaults>
 8004558:	4603      	mov	r3, r0
 800455a:	f083 0301 	eor.w	r3, r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <decode_static_field+0x232>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	e000      	b.n	8004574 <decode_static_field+0x234>
 8004572:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <decode_static_field+0x278>)
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	60d3      	str	r3, [r2, #12]
 8004578:	2300      	movs	r3, #0
 800457a:	e017      	b.n	80045ac <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	8a12      	ldrh	r2, [r2, #16]
 8004584:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4619      	mov	r1, r3
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fde1 	bl	8004154 <decode_basic_field>
 8004592:	4603      	mov	r3, r0
 8004594:	e00a      	b.n	80045ac <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <decode_static_field+0x264>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	e000      	b.n	80045a6 <decode_static_field+0x266>
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <decode_static_field+0x27c>)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	60d3      	str	r3, [r2, #12]
 80045aa:	2300      	movs	r3, #0
    }
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3758      	adds	r7, #88	@ 0x58
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08009144 	.word	0x08009144
 80045b8:	08009154 	.word	0x08009154
 80045bc:	08009130 	.word	0x08009130

080045c0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	460b      	mov	r3, r1
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <decode_pointer_field+0x1c>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	e000      	b.n	80045de <decode_pointer_field+0x1e>
 80045dc:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <decode_pointer_field+0x30>)
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	60d3      	str	r3, [r2, #12]
 80045e2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	0800916c 	.word	0x0800916c

080045f4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b097      	sub	sp, #92	@ 0x5c
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	61f8      	str	r0, [r7, #28]
 80045fc:	460b      	mov	r3, r1
 80045fe:	617a      	str	r2, [r7, #20]
 8004600:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 800460c:	7efb      	ldrb	r3, [r7, #27]
 800460e:	4619      	mov	r1, r3
 8004610:	69f8      	ldr	r0, [r7, #28]
 8004612:	f7ff fc91 	bl	8003f38 <pb_skip_field>
 8004616:	4603      	mov	r3, r0
 8004618:	e070      	b.n	80046fc <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800461a:	7efb      	ldrb	r3, [r7, #27]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d145      	bne.n	80046ac <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8004620:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004624:	4619      	mov	r1, r3
 8004626:	69f8      	ldr	r0, [r7, #28]
 8004628:	f7ff fd34 	bl	8004094 <pb_make_string_substream>
 800462c:	4603      	mov	r3, r0
 800462e:	f083 0301 	eor.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <decode_callback_field+0x48>
            return false;
 8004638:	2300      	movs	r3, #0
 800463a:	e05f      	b.n	80046fc <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 800463c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800463e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	2100      	movs	r1, #0
 800464e:	4798      	blx	r3
 8004650:	4603      	mov	r3, r0
 8004652:	f083 0301 	eor.w	r3, r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <decode_callback_field+0x76>
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	e005      	b.n	8004676 <decode_callback_field+0x82>
 800466a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <decode_callback_field+0x80>
 8004670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004672:	e000      	b.n	8004676 <decode_callback_field+0x82>
 8004674:	4b23      	ldr	r3, [pc, #140]	@ (8004704 <decode_callback_field+0x110>)
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	60d3      	str	r3, [r2, #12]
                return false;
 800467a:	2300      	movs	r3, #0
 800467c:	e03e      	b.n	80046fc <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 800467e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <decode_callback_field+0x98>
 8004684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004686:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004688:	429a      	cmp	r2, r3
 800468a:	d8d7      	bhi.n	800463c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 800468c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004690:	4619      	mov	r1, r3
 8004692:	69f8      	ldr	r0, [r7, #28]
 8004694:	f7ff fd38 	bl	8004108 <pb_close_string_substream>
 8004698:	4603      	mov	r3, r0
 800469a:	f083 0301 	eor.w	r3, r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <decode_callback_field+0xb4>
            return false;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e029      	b.n	80046fc <decode_callback_field+0x108>

        return true;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e027      	b.n	80046fc <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80046ac:	230a      	movs	r3, #10
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80046b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80046b8:	7ef9      	ldrb	r1, [r7, #27]
 80046ba:	69f8      	ldr	r0, [r7, #28]
 80046bc:	f7ff fc7e 	bl	8003fbc <read_raw_value>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <decode_callback_field+0xdc>
            return false;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e015      	b.n	80046fc <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 80046d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d2:	463b      	mov	r3, r7
 80046d4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fa87 	bl	8003bec <pb_istream_from_buffer>
 80046de:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80046e2:	463b      	mov	r3, r7
 80046e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	2100      	movs	r1, #0
 80046f8:	4798      	blx	r3
 80046fa:	4603      	mov	r3, r0
    }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	375c      	adds	r7, #92	@ 0x5c
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	08009180 	.word	0x08009180

08004708 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	460b      	mov	r3, r1
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7d9b      	ldrb	r3, [r3, #22]
 800471a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800471e:	2b80      	cmp	r3, #128	@ 0x80
 8004720:	d00e      	beq.n	8004740 <decode_field+0x38>
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d81c      	bhi.n	8004760 <decode_field+0x58>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <decode_field+0x28>
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	d010      	beq.n	8004750 <decode_field+0x48>
 800472e:	e017      	b.n	8004760 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8004730:	7afb      	ldrb	r3, [r7, #11]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff fe02 	bl	8004340 <decode_static_field>
 800473c:	4603      	mov	r3, r0
 800473e:	e01a      	b.n	8004776 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8004740:	7afb      	ldrb	r3, [r7, #11]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4619      	mov	r1, r3
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ff3a 	bl	80045c0 <decode_pointer_field>
 800474c:	4603      	mov	r3, r0
 800474e:	e012      	b.n	8004776 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4619      	mov	r1, r3
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff ff4c 	bl	80045f4 <decode_callback_field>
 800475c:	4603      	mov	r3, r0
 800475e:	e00a      	b.n	8004776 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <decode_field+0x66>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	e000      	b.n	8004770 <decode_field+0x68>
 800476e:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <decode_field+0x78>)
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	60d3      	str	r3, [r2, #12]
 8004774:	2300      	movs	r3, #0
    }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08009130 	.word	0x08009130

08004784 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08e      	sub	sp, #56	@ 0x38
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	4618      	mov	r0, r3
 800479a:	f003 f9ab 	bl	8007af4 <pb_field_iter_begin_extension>
 800479e:	4603      	mov	r3, r0
 80047a0:	f083 0301 	eor.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <default_extension_decoder+0x34>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	e000      	b.n	80047ba <default_extension_decoder+0x36>
 80047b8:	4b0e      	ldr	r3, [pc, #56]	@ (80047f4 <default_extension_decoder+0x70>)
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	60d3      	str	r3, [r2, #12]
 80047be:	2300      	movs	r3, #0
 80047c0:	e014      	b.n	80047ec <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80047c2:	8c3b      	ldrh	r3, [r7, #32]
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d102      	bne.n	80047d2 <default_extension_decoder+0x4e>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <default_extension_decoder+0x52>
        return true;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e00a      	b.n	80047ec <default_extension_decoder+0x68>

    extension->found = true;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2201      	movs	r2, #1
 80047da:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80047dc:	f107 0210 	add.w	r2, r7, #16
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff ff8f 	bl	8004708 <decode_field>
 80047ea:	4603      	mov	r3, r0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3738      	adds	r7, #56	@ 0x38
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08009190 	.word	0x08009190

080047f8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800480e:	e022      	b.n	8004856 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681c      	ldr	r4, [r3, #0]
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	47a0      	blx	r4
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]
 800482e:	e007      	b.n	8004840 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff ffa4 	bl	8004784 <default_extension_decoder>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	f083 0301 	eor.w	r3, r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <decode_extension+0x58>
            return false;
 800484c:	2300      	movs	r3, #0
 800484e:	e00b      	b.n	8004868 <decode_extension+0x70>
        
        extension = extension->next;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <decode_extension+0x6e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d0d4      	beq.n	8004810 <decode_extension+0x18>
    }
    
    return true;
 8004866:	2301      	movs	r3, #1
}
 8004868:	4618      	mov	r0, r3
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}

08004870 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08e      	sub	sp, #56	@ 0x38
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7d9b      	ldrb	r3, [r3, #22]
 800487c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004880:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2b0a      	cmp	r3, #10
 800488a:	d124      	bne.n	80048d6 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8004894:	e01b      	b.n	80048ce <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8004896:	f107 0308 	add.w	r3, r7, #8
 800489a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800489c:	4618      	mov	r0, r3
 800489e:	f003 f929 	bl	8007af4 <pb_field_iter_begin_extension>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00f      	beq.n	80048c8 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80048a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048aa:	2200      	movs	r2, #0
 80048ac:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f89d 	bl	80049f2 <pb_message_set_to_defaults>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f083 0301 	eor.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <pb_field_set_to_default+0x58>
                    return false;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e090      	b.n	80049ea <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e0      	bne.n	8004896 <pb_field_set_to_default+0x26>
 80048d4:	e088      	b.n	80049e8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80048d6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80048da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d166      	bne.n	80049b0 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80048e8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80048ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d108      	bne.n	8004906 <pb_field_set_to_default+0x96>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	e012      	b.n	800492c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004906:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800490a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800490e:	2b20      	cmp	r3, #32
 8004910:	d005      	beq.n	800491e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004912:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004916:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800491a:	2b30      	cmp	r3, #48	@ 0x30
 800491c:	d106      	bne.n	800492c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	2200      	movs	r2, #0
 8004924:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 800492c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004930:	2b00      	cmp	r3, #0
 8004932:	d059      	beq.n	80049e8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7d9b      	ldrb	r3, [r3, #22]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	2b08      	cmp	r3, #8
 800493e:	d005      	beq.n	800494c <pb_field_set_to_default+0xdc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7d9b      	ldrb	r3, [r3, #22]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	2b09      	cmp	r3, #9
 800494a:	d128      	bne.n	800499e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	4618      	mov	r0, r3
 800497a:	f003 f8a2 	bl	8007ac2 <pb_field_iter_begin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d030      	beq.n	80049e6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8004984:	f107 0308 	add.w	r3, r7, #8
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f832 	bl	80049f2 <pb_message_set_to_defaults>
 800498e:	4603      	mov	r3, r0
 8004990:	f083 0301 	eor.w	r3, r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d025      	beq.n	80049e6 <pb_field_set_to_default+0x176>
                        return false;
 800499a:	2300      	movs	r3, #0
 800499c:	e025      	b.n	80049ea <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69d8      	ldr	r0, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8a5b      	ldrh	r3, [r3, #18]
 80049a6:	461a      	mov	r2, r3
 80049a8:	2100      	movs	r1, #0
 80049aa:	f003 fcd7 	bl	800835c <memset>
 80049ae:	e01b      	b.n	80049e8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80049b0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80049b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049b8:	2b80      	cmp	r3, #128	@ 0x80
 80049ba:	d115      	bne.n	80049e8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80049c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80049c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d005      	beq.n	80049dc <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80049d0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80049d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80049d8:	2b30      	cmp	r3, #48	@ 0x30
 80049da:	d105      	bne.n	80049e8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	2200      	movs	r2, #0
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	e000      	b.n	80049e8 <pb_field_set_to_default+0x178>
            {
 80049e6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80049e8:	2301      	movs	r3, #1
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3738      	adds	r7, #56	@ 0x38
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80049f2:	b590      	push	{r4, r7, lr}
 80049f4:	b08d      	sub	sp, #52	@ 0x34
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80049fa:	f107 0320 	add.w	r3, r7, #32
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	463b      	mov	r3, r7
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff f8e0 	bl	8003bec <pb_istream_from_buffer>
 8004a2c:	f107 0420 	add.w	r4, r7, #32
 8004a30:	463b      	mov	r3, r7
 8004a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004a38:	f107 031a 	add.w	r3, r7, #26
 8004a3c:	f107 021c 	add.w	r2, r7, #28
 8004a40:	f107 011b 	add.w	r1, r7, #27
 8004a44:	f107 0020 	add.w	r0, r7, #32
 8004a48:	f7ff fa47 	bl	8003eda <pb_decode_tag>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f083 0301 	eor.w	r3, r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <pb_message_set_to_defaults+0x6a>
            return false;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e043      	b.n	8004ae4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8004a5c:	6978      	ldr	r0, [r7, #20]
 8004a5e:	f7ff ff07 	bl	8004870 <pb_field_set_to_default>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f083 0301 	eor.w	r3, r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <pb_message_set_to_defaults+0x80>
            return false;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e038      	b.n	8004ae4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02e      	beq.n	8004ad6 <pb_message_set_to_defaults+0xe4>
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	8a1b      	ldrh	r3, [r3, #16]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d128      	bne.n	8004ad6 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8004a84:	7ef9      	ldrb	r1, [r7, #27]
 8004a86:	f107 0320 	add.w	r3, r7, #32
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fe3b 	bl	8004708 <decode_field>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f083 0301 	eor.w	r3, r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <pb_message_set_to_defaults+0xb0>
                return false;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e020      	b.n	8004ae4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004aa2:	f107 031a 	add.w	r3, r7, #26
 8004aa6:	f107 021c 	add.w	r2, r7, #28
 8004aaa:	f107 011b 	add.w	r1, r7, #27
 8004aae:	f107 0020 	add.w	r0, r7, #32
 8004ab2:	f7ff fa12 	bl	8003eda <pb_decode_tag>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f083 0301 	eor.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <pb_message_set_to_defaults+0xd4>
                return false;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e00e      	b.n	8004ae4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f003 f83c 	bl	8007b54 <pb_field_iter_next>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1bc      	bne.n	8004a5c <pb_message_set_to_defaults+0x6a>

    return true;
 8004ae2:	2301      	movs	r3, #1
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3734      	adds	r7, #52	@ 0x34
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b09a      	sub	sp, #104	@ 0x68
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8004b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b06:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8004b16:	2300      	movs	r3, #0
 8004b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b22:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8004b24:	f107 0318 	add.w	r3, r7, #24
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 ffc8 	bl	8007ac2 <pb_field_iter_begin>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8102 	beq.w	8004d3e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f040 80fc 	bne.w	8004d3e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8004b46:	f107 0318 	add.w	r3, r7, #24
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff51 	bl	80049f2 <pb_message_set_to_defaults>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f083 0301 	eor.w	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80f0 	beq.w	8004d3e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <pb_decode_inner+0x80>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	e000      	b.n	8004b6e <pb_decode_inner+0x82>
 8004b6c:	4b99      	ldr	r3, [pc, #612]	@ (8004dd4 <pb_decode_inner+0x2e8>)
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	60d3      	str	r3, [r2, #12]
 8004b72:	2300      	movs	r3, #0
 8004b74:	e16d      	b.n	8004e52 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004b76:	f107 0312 	add.w	r3, r7, #18
 8004b7a:	f107 0214 	add.w	r2, r7, #20
 8004b7e:	f107 0113 	add.w	r1, r7, #19
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff f9a9 	bl	8003eda <pb_decode_tag>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f083 0301 	eor.w	r3, r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <pb_decode_inner+0xb4>
        {
            if (eof)
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80d7 	bne.w	8004d4a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e158      	b.n	8004e52 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d111      	bne.n	8004bca <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f040 80ce 	bne.w	8004d4e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <pb_decode_inner+0xd4>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	e000      	b.n	8004bc2 <pb_decode_inner+0xd6>
 8004bc0:	4b85      	ldr	r3, [pc, #532]	@ (8004dd8 <pb_decode_inner+0x2ec>)
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	60d3      	str	r3, [r2, #12]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e143      	b.n	8004e52 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	f107 0318 	add.w	r3, r7, #24
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 ffd3 	bl	8007b7e <pb_field_iter_find>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f083 0301 	eor.w	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <pb_decode_inner+0x104>
 8004be4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2b0a      	cmp	r3, #10
 8004bee:	d13c      	bne.n	8004c6a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d112      	bne.n	8004c1c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8004bf6:	f107 0318 	add.w	r3, r7, #24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 f815 	bl	8007c2a <pb_field_iter_find_extension>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8004c0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c0e:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8004c10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c1a:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d815      	bhi.n	8004c50 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8004c2a:	6979      	ldr	r1, [r7, #20]
 8004c2c:	7cfa      	ldrb	r2, [r7, #19]
 8004c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff fde1 	bl	80047f8 <decode_extension>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f083 0301 	eor.w	r3, r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <pb_decode_inner+0x15a>
                    return false;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e105      	b.n	8004e52 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d173      	bne.n	8004d38 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	4619      	mov	r1, r3
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff f96f 	bl	8003f38 <pb_skip_field>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f083 0301 	eor.w	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06a      	beq.n	8004d3c <pb_decode_inner+0x250>
                return false;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e0f3      	b.n	8004e52 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8004c6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d12e      	bne.n	8004cd4 <pb_decode_inner+0x1e8>
 8004c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c78:	f107 0318 	add.w	r3, r7, #24
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d128      	bne.n	8004cd4 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8004c82:	8c3b      	ldrh	r3, [r7, #32]
 8004c84:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d020      	beq.n	8004cce <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8004c8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d011      	beq.n	8004cbc <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8004c98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8004c9c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d00b      	beq.n	8004cbc <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <pb_decode_inner+0x1c6>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	e000      	b.n	8004cb4 <pb_decode_inner+0x1c8>
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ddc <pb_decode_inner+0x2f0>)
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	60d3      	str	r3, [r2, #12]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e0ca      	b.n	8004e52 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8004cbc:	8c3b      	ldrh	r3, [r7, #32]
 8004cbe:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8004cc8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004cca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8004cce:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8004cd4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11c      	bne.n	8004d1a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8004ce0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ce2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ce4:	d819      	bhi.n	8004d1a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004ce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2201      	movs	r2, #1
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8004cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3368      	adds	r3, #104	@ 0x68
 8004cfe:	443b      	add	r3, r7
 8004d00:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8004d04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	008b      	lsls	r3, r1, #2
 8004d12:	3368      	adds	r3, #104	@ 0x68
 8004d14:	443b      	add	r3, r7
 8004d16:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	f107 0218 	add.w	r2, r7, #24
 8004d20:	4619      	mov	r1, r3
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff fcf0 	bl	8004708 <decode_field>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f083 0301 	eor.w	r3, r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <pb_decode_inner+0x252>
            return false;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e08c      	b.n	8004e52 <pb_decode_inner+0x366>
                    continue;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <pb_decode_inner+0x252>
            continue;
 8004d3c:	bf00      	nop
    while (stream->bytes_left)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f47f af17 	bne.w	8004b76 <pb_decode_inner+0x8a>
 8004d48:	e002      	b.n	8004d50 <pb_decode_inner+0x264>
                break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <pb_decode_inner+0x264>
            break;
 8004d4e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004d50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d011      	beq.n	8004d80 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004d60:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d00b      	beq.n	8004d80 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <pb_decode_inner+0x28a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	e000      	b.n	8004d78 <pb_decode_inner+0x28c>
 8004d76:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <pb_decode_inner+0x2f0>)
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	60d3      	str	r3, [r2, #12]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e068      	b.n	8004e52 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	8a5b      	ldrh	r3, [r3, #18]
 8004d84:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8004d88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05f      	beq.n	8004e50 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004d90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004d94:	2b40      	cmp	r3, #64	@ 0x40
 8004d96:	d902      	bls.n	8004d9e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004d98:	2340      	movs	r3, #64	@ 0x40
 8004d9a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004da4:	e023      	b.n	8004dee <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8004da6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3368      	adds	r3, #104	@ 0x68
 8004dae:	443b      	add	r3, r7
 8004db0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004db4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d014      	beq.n	8004de4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <pb_decode_inner+0x2dc>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	e000      	b.n	8004dca <pb_decode_inner+0x2de>
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <pb_decode_inner+0x2f4>)
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	60d3      	str	r3, [r2, #12]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e03f      	b.n	8004e52 <pb_decode_inner+0x366>
 8004dd2:	bf00      	nop
 8004dd4:	08009154 	.word	0x08009154
 8004dd8:	080091a4 	.word	0x080091a4
 8004ddc:	080091b0 	.word	0x080091b0
 8004de0:	080091d4 	.word	0x080091d4
            for (i = 0; i < (req_field_count >> 5); i++)
 8004de4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004de8:	3301      	adds	r3, #1
 8004dea:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004dee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3d3      	bcc.n	8004da6 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8004dfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d022      	beq.n	8004e50 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004e0a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	3368      	adds	r3, #104	@ 0x68
 8004e16:	443b      	add	r3, r7
 8004e18:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004e1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f1c3 0320 	rsb	r3, r3, #32
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e32:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d00b      	beq.n	8004e50 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <pb_decode_inner+0x35a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	e000      	b.n	8004e48 <pb_decode_inner+0x35c>
 8004e46:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <pb_decode_inner+0x370>)
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	60d3      	str	r3, [r2, #12]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004e50:	2301      	movs	r3, #1
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3768      	adds	r7, #104	@ 0x68
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	080091d4 	.word	0x080091d4

08004e60 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fe3a 	bl	8004aec <pb_decode_inner>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004e90:	f107 030c 	add.w	r3, r7, #12
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fe ff70 	bl	8003d7c <pb_decode_varint32>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f083 0301 	eor.w	r3, r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <pb_decode_bool+0x26>
        return false;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e008      	b.n	8004ebe <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bf14      	ite	ne
 8004eb2:	2301      	movne	r3, #1
 8004eb4:	2300      	moveq	r3, #0
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
    return true;
 8004ebc:	2301      	movs	r3, #1
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8004ec6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fe ff5f 	bl	8003d9c <pb_decode_varint>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f083 0301 	eor.w	r3, r3, #1
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <pb_decode_svarint+0x28>
        return false;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e029      	b.n	8004f42 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8004eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ef2:	f002 0401 	and.w	r4, r2, #1
 8004ef6:	2500      	movs	r5, #0
 8004ef8:	ea54 0305 	orrs.w	r3, r4, r5
 8004efc:	d013      	beq.n	8004f26 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8004efe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	0842      	lsrs	r2, r0, #1
 8004f0c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004f10:	084b      	lsrs	r3, r1, #1
 8004f12:	ea6f 0802 	mvn.w	r8, r2
 8004f16:	ea6f 0903 	mvn.w	r9, r3
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	e9c1 2300 	strd	r2, r3, [r1]
 8004f24:	e00c      	b.n	8004f40 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8004f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	0842      	lsrs	r2, r0, #1
 8004f34:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004f38:	084b      	lsrs	r3, r1, #1
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004f40:	2301      	movs	r3, #1
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004f4c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8004f56:	f107 030c 	add.w	r3, r7, #12
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fe fd92 	bl	8003a88 <pb_read>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f083 0301 	eor.w	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <pb_decode_fixed32+0x28>
        return false;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e003      	b.n	8004f7c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	2208      	movs	r2, #8
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fe fd76 	bl	8003a88 <pb_read>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f083 0301 	eor.w	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <pb_decode_fixed64+0x28>
        return false;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e005      	b.n	8004fb8 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8004fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8004fb6:	2301      	movs	r3, #1
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff58 	bl	8004e86 <pb_decode_bool>
 8004fd6:	4603      	mov	r3, r0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b094      	sub	sp, #80	@ 0x50
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fea:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	7d9b      	ldrb	r3, [r3, #22]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d179      	bne.n	80050ec <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8004ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005000:	f7fe fecc 	bl	8003d9c <pb_decode_varint>
 8005004:	4603      	mov	r3, r0
 8005006:	f083 0301 	eor.w	r3, r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <pb_dec_varint+0x34>
            return false;
 8005010:	2300      	movs	r3, #0
 8005012:	e107      	b.n	8005224 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	8a5b      	ldrh	r3, [r3, #18]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d10a      	bne.n	8005032 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005024:	e9c1 2300 	strd	r2, r3, [r1]
 8005028:	e9d1 2300 	ldrd	r2, r3, [r1]
 800502c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8005030:	e046      	b.n	80050c0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	8a5b      	ldrh	r3, [r3, #18]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d10e      	bne.n	8005058 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800503a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4602      	mov	r2, r0
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2200      	movs	r2, #0
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	617a      	str	r2, [r7, #20]
 800504e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005052:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8005056:	e033      	b.n	80050c0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	8a5b      	ldrh	r3, [r3, #18]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d10f      	bne.n	8005080 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8005060:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	b282      	uxth	r2, r0
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	2200      	movs	r2, #0
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	60fa      	str	r2, [r7, #12]
 8005076:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800507a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800507e:	e01f      	b.n	80050c0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	8a5b      	ldrh	r3, [r3, #18]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10f      	bne.n	80050a8 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8005088:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	b2c2      	uxtb	r2, r0
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2200      	movs	r2, #0
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80050a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80050a6:	e00b      	b.n	80050c0 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <pb_dec_varint+0xd6>
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	e000      	b.n	80050b8 <pb_dec_varint+0xd8>
 80050b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005230 <pb_dec_varint+0x250>)
 80050b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ba:	60d3      	str	r3, [r2, #12]
 80050bc:	2300      	movs	r3, #0
 80050be:	e0b1      	b.n	8005224 <pb_dec_varint+0x244>

        if (clamped != value)
 80050c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80050c8:	4299      	cmp	r1, r3
 80050ca:	bf08      	it	eq
 80050cc:	4290      	cmpeq	r0, r2
 80050ce:	d00b      	beq.n	80050e8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <pb_dec_varint+0xfe>
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	e000      	b.n	80050e0 <pb_dec_varint+0x100>
 80050de:	4b55      	ldr	r3, [pc, #340]	@ (8005234 <pb_dec_varint+0x254>)
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	60d3      	str	r3, [r2, #12]
 80050e4:	2300      	movs	r3, #0
 80050e6:	e09d      	b.n	8005224 <pb_dec_varint+0x244>

        return true;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09b      	b.n	8005224 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	7d9b      	ldrb	r3, [r3, #22]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d10d      	bne.n	8005114 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80050f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050fc:	4619      	mov	r1, r3
 80050fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005100:	f7ff fee1 	bl	8004ec6 <pb_decode_svarint>
 8005104:	4603      	mov	r3, r0
 8005106:	f083 0301 	eor.w	r3, r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d022      	beq.n	8005156 <pb_dec_varint+0x176>
                return false;
 8005110:	2300      	movs	r3, #0
 8005112:	e087      	b.n	8005224 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8005114:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005118:	4619      	mov	r1, r3
 800511a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800511c:	f7fe fe3e 	bl	8003d9c <pb_decode_varint>
 8005120:	4603      	mov	r3, r0
 8005122:	f083 0301 	eor.w	r3, r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <pb_dec_varint+0x150>
                return false;
 800512c:	2300      	movs	r3, #0
 800512e:	e079      	b.n	8005224 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	8a5b      	ldrh	r3, [r3, #18]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d104      	bne.n	8005142 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8005138:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800513c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005140:	e009      	b.n	8005156 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8005142:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005146:	4613      	mov	r3, r2
 8005148:	17da      	asrs	r2, r3, #31
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	61fa      	str	r2, [r7, #28]
 800514e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005152:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	8a5b      	ldrh	r3, [r3, #18]
 800515a:	2b08      	cmp	r3, #8
 800515c:	d10a      	bne.n	8005174 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	69d9      	ldr	r1, [r3, #28]
 8005162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005166:	e9c1 2300 	strd	r2, r3, [r1]
 800516a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800516e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8005172:	e042      	b.n	80051fa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	8a5b      	ldrh	r3, [r3, #18]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d10c      	bne.n	8005196 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 800517c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4602      	mov	r2, r0
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	17da      	asrs	r2, r3, #31
 800518c:	469a      	mov	sl, r3
 800518e:	4693      	mov	fp, r2
 8005190:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8005194:	e031      	b.n	80051fa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	8a5b      	ldrh	r3, [r3, #18]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d10e      	bne.n	80051bc <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800519e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	b202      	sxth	r2, r0
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ae:	b21b      	sxth	r3, r3
 80051b0:	17da      	asrs	r2, r3, #31
 80051b2:	4698      	mov	r8, r3
 80051b4:	4691      	mov	r9, r2
 80051b6:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 80051ba:	e01e      	b.n	80051fa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	8a5b      	ldrh	r3, [r3, #18]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10e      	bne.n	80051e2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80051c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	b242      	sxtb	r2, r0
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	f993 3000 	ldrsb.w	r3, [r3]
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	17da      	asrs	r2, r3, #31
 80051d8:	461c      	mov	r4, r3
 80051da:	4615      	mov	r5, r2
 80051dc:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80051e0:	e00b      	b.n	80051fa <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <pb_dec_varint+0x210>
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	e000      	b.n	80051f2 <pb_dec_varint+0x212>
 80051f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <pb_dec_varint+0x250>)
 80051f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f4:	60d3      	str	r3, [r2, #12]
 80051f6:	2300      	movs	r3, #0
 80051f8:	e014      	b.n	8005224 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80051fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005202:	4299      	cmp	r1, r3
 8005204:	bf08      	it	eq
 8005206:	4290      	cmpeq	r0, r2
 8005208:	d00b      	beq.n	8005222 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <pb_dec_varint+0x238>
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	e000      	b.n	800521a <pb_dec_varint+0x23a>
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <pb_dec_varint+0x254>)
 800521a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521c:	60d3      	str	r3, [r2, #12]
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <pb_dec_varint+0x244>

        return true;
 8005222:	2301      	movs	r3, #1
    }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3750      	adds	r7, #80	@ 0x50
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	080091ec 	.word	0x080091ec
 8005234:	08009200 	.word	0x08009200

08005238 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8005242:	f107 030c 	add.w	r3, r7, #12
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fe fd97 	bl	8003d7c <pb_decode_varint32>
 800524e:	4603      	mov	r3, r0
 8005250:	f083 0301 	eor.w	r3, r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <pb_dec_bytes+0x26>
        return false;
 800525a:	2300      	movs	r3, #0
 800525c:	e055      	b.n	800530a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005264:	d30b      	bcc.n	800527e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <pb_dec_bytes+0x3c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	e000      	b.n	8005276 <pb_dec_bytes+0x3e>
 8005274:	4b27      	ldr	r3, [pc, #156]	@ (8005314 <pb_dec_bytes+0xdc>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	60d3      	str	r3, [r2, #12]
 800527a:	2300      	movs	r3, #0
 800527c:	e045      	b.n	800530a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3302      	adds	r3, #2
 8005282:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	429a      	cmp	r2, r3
 800528a:	d20b      	bcs.n	80052a4 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <pb_dec_bytes+0x62>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	e000      	b.n	800529c <pb_dec_bytes+0x64>
 800529a:	4b1f      	ldr	r3, [pc, #124]	@ (8005318 <pb_dec_bytes+0xe0>)
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	60d3      	str	r3, [r2, #12]
 80052a0:	2300      	movs	r3, #0
 80052a2:	e032      	b.n	800530a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	7d9b      	ldrb	r3, [r3, #22]
 80052a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052ac:	2b80      	cmp	r3, #128	@ 0x80
 80052ae:	d10b      	bne.n	80052c8 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <pb_dec_bytes+0x86>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	e000      	b.n	80052c0 <pb_dec_bytes+0x88>
 80052be:	4b17      	ldr	r3, [pc, #92]	@ (800531c <pb_dec_bytes+0xe4>)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	60d3      	str	r3, [r2, #12]
 80052c4:	2300      	movs	r3, #0
 80052c6:	e020      	b.n	800530a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	8a5b      	ldrh	r3, [r3, #18]
 80052cc:	461a      	mov	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d90b      	bls.n	80052ec <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <pb_dec_bytes+0xaa>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	e000      	b.n	80052e4 <pb_dec_bytes+0xac>
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <pb_dec_bytes+0xdc>)
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	60d3      	str	r3, [r2, #12]
 80052e8:	2300      	movs	r3, #0
 80052ea:	e00e      	b.n	800530a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3302      	adds	r3, #2
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fe fbc0 	bl	8003a88 <pb_read>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	08009214 	.word	0x08009214
 8005318:	08009224 	.word	0x08009224
 800531c:	0800916c 	.word	0x0800916c

08005320 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8005330:	f107 030c 	add.w	r3, r7, #12
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fe fd20 	bl	8003d7c <pb_decode_varint32>
 800533c:	4603      	mov	r3, r0
 800533e:	f083 0301 	eor.w	r3, r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <pb_dec_string+0x2c>
        return false;
 8005348:	2300      	movs	r3, #0
 800534a:	e05a      	b.n	8005402 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005352:	d10b      	bne.n	800536c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <pb_dec_string+0x42>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	e000      	b.n	8005364 <pb_dec_string+0x44>
 8005362:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <pb_dec_string+0xec>)
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	60d3      	str	r3, [r2, #12]
 8005368:	2300      	movs	r3, #0
 800536a:	e04a      	b.n	8005402 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	429a      	cmp	r2, r3
 8005378:	d20b      	bcs.n	8005392 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <pb_dec_string+0x68>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	e000      	b.n	800538a <pb_dec_string+0x6a>
 8005388:	4b20      	ldr	r3, [pc, #128]	@ (800540c <pb_dec_string+0xec>)
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	60d3      	str	r3, [r2, #12]
 800538e:	2300      	movs	r3, #0
 8005390:	e037      	b.n	8005402 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	7d9b      	ldrb	r3, [r3, #22]
 8005396:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800539a:	2b80      	cmp	r3, #128	@ 0x80
 800539c:	d10b      	bne.n	80053b6 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <pb_dec_string+0x8c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	e000      	b.n	80053ae <pb_dec_string+0x8e>
 80053ac:	4b18      	ldr	r3, [pc, #96]	@ (8005410 <pb_dec_string+0xf0>)
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	60d3      	str	r3, [r2, #12]
 80053b2:	2300      	movs	r3, #0
 80053b4:	e025      	b.n	8005402 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	8a5b      	ldrh	r3, [r3, #18]
 80053ba:	461a      	mov	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4293      	cmp	r3, r2
 80053c0:	d90b      	bls.n	80053da <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <pb_dec_string+0xb0>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	e000      	b.n	80053d2 <pb_dec_string+0xb2>
 80053d0:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <pb_dec_string+0xf4>)
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	60d3      	str	r3, [r2, #12]
 80053d6:	2300      	movs	r3, #0
 80053d8:	e013      	b.n	8005402 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fe fb4c 	bl	8003a88 <pb_read>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <pb_dec_string+0xe0>
        return false;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e000      	b.n	8005402 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8005400:	2301      	movs	r3, #1
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	08009224 	.word	0x08009224
 8005410:	0800916c 	.word	0x0800916c
 8005414:	08009234 	.word	0x08009234

08005418 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
    bool status = true;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800542e:	f107 030c 	add.w	r3, r7, #12
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fe fe2d 	bl	8004094 <pb_make_string_substream>
 800543a:	4603      	mov	r3, r0
 800543c:	f083 0301 	eor.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <pb_dec_submessage+0x32>
        return false;
 8005446:	2300      	movs	r3, #0
 8005448:	e069      	b.n	800551e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10b      	bne.n	800546a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <pb_dec_submessage+0x48>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	e000      	b.n	8005462 <pb_dec_submessage+0x4a>
 8005460:	4b31      	ldr	r3, [pc, #196]	@ (8005528 <pb_dec_submessage+0x110>)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	60d3      	str	r3, [r2, #12]
 8005466:	2300      	movs	r3, #0
 8005468:	e059      	b.n	800551e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	7d9b      	ldrb	r3, [r3, #22]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	2b09      	cmp	r3, #9
 8005474:	d11c      	bne.n	80054b0 <pb_dec_submessage+0x98>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	3b08      	subs	r3, #8
 8005484:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	3204      	adds	r2, #4
 8005496:	f107 000c 	add.w	r0, r7, #12
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	4798      	blx	r3
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80054b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d022      	beq.n	80054fe <pb_dec_submessage+0xe6>
 80054b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054bc:	f083 0301 	eor.w	r3, r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01b      	beq.n	80054fe <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	7d9b      	ldrb	r3, [r3, #22]
 80054ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	7d9b      	ldrb	r3, [r3, #22]
 80054da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d001      	beq.n	80054e6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80054e2:	2301      	movs	r3, #1
 80054e4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	f107 000c 	add.w	r0, r7, #12
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f7ff fafa 	bl	8004aec <pb_decode_inner>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 80054fe:	f107 030c 	add.w	r3, r7, #12
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fe fdff 	bl	8004108 <pb_close_string_substream>
 800550a:	4603      	mov	r3, r0
 800550c:	f083 0301 	eor.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <pb_dec_submessage+0x102>
        return false;
 8005516:	2300      	movs	r3, #0
 8005518:	e001      	b.n	800551e <pb_dec_submessage+0x106>

    return status;
 800551a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800551e:	4618      	mov	r0, r3
 8005520:	3728      	adds	r7, #40	@ 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	08009244 	.word	0x08009244

0800552c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8005536:	f107 030c 	add.w	r3, r7, #12
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fe fc1d 	bl	8003d7c <pb_decode_varint32>
 8005542:	4603      	mov	r3, r0
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <pb_dec_fixed_length_bytes+0x26>
        return false;
 800554e:	2300      	movs	r3, #0
 8005550:	e037      	b.n	80055c2 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005558:	d30b      	bcc.n	8005572 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <pb_dec_fixed_length_bytes+0x3c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	e000      	b.n	800556a <pb_dec_fixed_length_bytes+0x3e>
 8005568:	4b18      	ldr	r3, [pc, #96]	@ (80055cc <pb_dec_fixed_length_bytes+0xa0>)
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	60d3      	str	r3, [r2, #12]
 800556e:	2300      	movs	r3, #0
 8005570:	e027      	b.n	80055c2 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	69d8      	ldr	r0, [r3, #28]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	8a5b      	ldrh	r3, [r3, #18]
 8005580:	461a      	mov	r2, r3
 8005582:	2100      	movs	r1, #0
 8005584:	f002 feea 	bl	800835c <memset>
        return true;
 8005588:	2301      	movs	r3, #1
 800558a:	e01a      	b.n	80055c2 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	8a5b      	ldrh	r3, [r3, #18]
 8005590:	461a      	mov	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	429a      	cmp	r2, r3
 8005596:	d00b      	beq.n	80055b0 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <pb_dec_fixed_length_bytes+0x7a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	e000      	b.n	80055a8 <pb_dec_fixed_length_bytes+0x7c>
 80055a6:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <pb_dec_fixed_length_bytes+0xa4>)
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	60d3      	str	r3, [r2, #12]
 80055ac:	2300      	movs	r3, #0
 80055ae:	e008      	b.n	80055c2 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	8a5b      	ldrh	r3, [r3, #18]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fe fa64 	bl	8003a88 <pb_read>
 80055c0:	4603      	mov	r3, r0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	08009214 	.word	0x08009214
 80055d0:	08009260 	.word	0x08009260

080055d4 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	441a      	add	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	f002 ff3c 	bl	8008472 <memcpy>
    
    return true;
 80055fa:	2301      	movs	r3, #1
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8005604:	b4b0      	push	{r4, r5, r7}
 8005606:	b08b      	sub	sp, #44	@ 0x2c
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <pb_ostream_from_buffer+0x3c>)
 8005612:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	461d      	mov	r5, r3
 8005628:	f107 0414 	add.w	r4, r7, #20
 800562c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800562e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	602b      	str	r3, [r5, #0]
}
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	372c      	adds	r7, #44	@ 0x2c
 8005638:	46bd      	mov	sp, r7
 800563a:	bcb0      	pop	{r4, r5, r7}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	080055d5 	.word	0x080055d5

08005644 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d037      	beq.n	80056c6 <pb_write+0x82>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d033      	beq.n	80056c6 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	441a      	add	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d307      	bcc.n	800567e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d90b      	bls.n	8005696 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <pb_write+0x48>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	e000      	b.n	800568e <pb_write+0x4a>
 800568c:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <pb_write+0x98>)
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6113      	str	r3, [r2, #16]
 8005692:	2300      	movs	r3, #0
 8005694:	e01e      	b.n	80056d4 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	f083 0301 	eor.w	r3, r3, #1
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <pb_write+0x78>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	e000      	b.n	80056be <pb_write+0x7a>
 80056bc:	4b08      	ldr	r3, [pc, #32]	@ (80056e0 <pb_write+0x9c>)
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	6113      	str	r3, [r2, #16]
 80056c2:	2300      	movs	r3, #0
 80056c4:	e006      	b.n	80056d4 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	60da      	str	r2, [r3, #12]
    return true;
 80056d2:	2301      	movs	r3, #1
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	08009284 	.word	0x08009284
 80056e0:	08009290 	.word	0x08009290

080056e4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e00a      	b.n	800570c <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <safe_read_bool+0x22>
            return true;
 8005702:	2301      	movs	r3, #1
 8005704:	e006      	b.n	8005714 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f1      	beq.n	80056f6 <safe_read_bool+0x12>
    }
    return false;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	b08c      	sub	sp, #48	@ 0x30
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8005732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <encode_array+0x1c>
        return true;
 8005738:	2301      	movs	r3, #1
 800573a:	e13d      	b.n	80059b8 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	7d9b      	ldrb	r3, [r3, #22]
 8005740:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005744:	2b80      	cmp	r3, #128	@ 0x80
 8005746:	d010      	beq.n	800576a <encode_array+0x4a>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	8a9b      	ldrh	r3, [r3, #20]
 800574c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800574e:	429a      	cmp	r2, r3
 8005750:	d90b      	bls.n	800576a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <encode_array+0x40>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	e000      	b.n	8005762 <encode_array+0x42>
 8005760:	4b97      	ldr	r3, [pc, #604]	@ (80059c0 <encode_array+0x2a0>)
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6113      	str	r3, [r2, #16]
 8005766:	2300      	movs	r3, #0
 8005768:	e126      	b.n	80059b8 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	7d9b      	ldrb	r3, [r3, #22]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2b05      	cmp	r3, #5
 8005774:	f200 80b3 	bhi.w	80058de <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	8a1b      	ldrh	r3, [r3, #16]
 800577c:	461a      	mov	r2, r3
 800577e:	2102      	movs	r1, #2
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fcdd 	bl	8006140 <pb_encode_tag>
 8005786:	4603      	mov	r3, r0
 8005788:	f083 0301 	eor.w	r3, r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <encode_array+0x76>
            return false;
 8005792:	2300      	movs	r3, #0
 8005794:	e110      	b.n	80059b8 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	7d9b      	ldrb	r3, [r3, #22]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d103      	bne.n	80057aa <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 80057a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a8:	e047      	b.n	800583a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	7d9b      	ldrb	r3, [r3, #22]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d103      	bne.n	80057be <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 80057b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057bc:	e03d      	b.n	800583a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	60da      	str	r2, [r3, #12]
 80057cc:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80057d8:	e026      	b.n	8005828 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fdef 	bl	80063c4 <pb_enc_varint>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f083 0301 	eor.w	r3, r3, #1
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <encode_array+0xe0>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	e005      	b.n	800580c <encode_array+0xec>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <encode_array+0xea>
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	e000      	b.n	800580c <encode_array+0xec>
 800580a:	4b6e      	ldr	r3, [pc, #440]	@ (80059c4 <encode_array+0x2a4>)
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6113      	str	r3, [r2, #16]
 8005810:	2300      	movs	r3, #0
 8005812:	e0d1      	b.n	80059b8 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	8a52      	ldrh	r2, [r2, #18]
 800581c:	441a      	add	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8005822:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005824:	3301      	adds	r3, #1
 8005826:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005828:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800582a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800582c:	429a      	cmp	r2, r3
 800582e:	d3d4      	bcc.n	80057da <encode_array+0xba>
            }
            field->pData = pData_orig;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	2200      	movs	r2, #0
 800583e:	461c      	mov	r4, r3
 8005840:	4615      	mov	r5, r2
 8005842:	4622      	mov	r2, r4
 8005844:	462b      	mov	r3, r5
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fbf7 	bl	800603a <pb_encode_varint>
 800584c:	4603      	mov	r3, r0
 800584e:	f083 0301 	eor.w	r3, r3, #1
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <encode_array+0x13c>
            return false;
 8005858:	2300      	movs	r3, #0
 800585a:	e0ad      	b.n	80059b8 <encode_array+0x298>
        
        if (stream->callback == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005866:	2100      	movs	r1, #0
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff feeb 	bl	8005644 <pb_write>
 800586e:	4603      	mov	r3, r0
 8005870:	e0a2      	b.n	80059b8 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005876:	e02d      	b.n	80058d4 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	7d9b      	ldrb	r3, [r3, #22]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	2b04      	cmp	r3, #4
 8005882:	d005      	beq.n	8005890 <encode_array+0x170>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	7d9b      	ldrb	r3, [r3, #22]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	2b05      	cmp	r3, #5
 800588e:	d10b      	bne.n	80058a8 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fe58 	bl	8006548 <pb_enc_fixed>
 8005898:	4603      	mov	r3, r0
 800589a:	f083 0301 	eor.w	r3, r3, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00d      	beq.n	80058c0 <encode_array+0x1a0>
                    return false;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e087      	b.n	80059b8 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fd8a 	bl	80063c4 <pb_enc_varint>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f083 0301 	eor.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <encode_array+0x1a0>
                    return false;
 80058bc:	2300      	movs	r3, #0
 80058be:	e07b      	b.n	80059b8 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	8a52      	ldrh	r2, [r2, #18]
 80058c8:	441a      	add	r2, r3
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80058ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058d0:	3301      	adds	r3, #1
 80058d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3cd      	bcc.n	8005878 <encode_array+0x158>
 80058dc:	e06b      	b.n	80059b6 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80058de:	2300      	movs	r3, #0
 80058e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058e2:	e064      	b.n	80059ae <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	7d9b      	ldrb	r3, [r3, #22]
 80058e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058ec:	2b80      	cmp	r3, #128	@ 0x80
 80058ee:	d147      	bne.n	8005980 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	7d9b      	ldrb	r3, [r3, #22]
 80058f4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d005      	beq.n	8005908 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	7d9b      	ldrb	r3, [r3, #22]
 8005900:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005904:	2b06      	cmp	r3, #6
 8005906:	d13b      	bne.n	8005980 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11c      	bne.n	800595a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fc36 	bl	8006194 <pb_encode_tag_for_field>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fb7f 	bl	800603a <pb_encode_varint>
 800593c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <encode_array+0x226>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <encode_array+0x228>
 8005946:	2300      	movs	r3, #0
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800594c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005958:	e006      	b.n	8005968 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f951 	bl	8005c04 <encode_basic_field>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	61da      	str	r2, [r3, #28]

                if (!status)
 800596e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005972:	f083 0301 	eor.w	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <encode_array+0x278>
                    return false;
 800597c:	2300      	movs	r3, #0
 800597e:	e01b      	b.n	80059b8 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f93e 	bl	8005c04 <encode_basic_field>
 8005988:	4603      	mov	r3, r0
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <encode_array+0x27a>
                    return false;
 8005994:	2300      	movs	r3, #0
 8005996:	e00f      	b.n	80059b8 <encode_array+0x298>
            {
 8005998:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	8a52      	ldrh	r2, [r2, #18]
 80059a2:	441a      	add	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80059a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80059aa:	3301      	adds	r3, #1
 80059ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80059ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80059b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d396      	bcc.n	80058e4 <encode_array+0x1c4>
        }
    }
    
    return true;
 80059b6:	2301      	movs	r3, #1
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3730      	adds	r7, #48	@ 0x30
 80059bc:	46bd      	mov	sp, r7
 80059be:	bdb0      	pop	{r4, r5, r7, pc}
 80059c0:	0800929c 	.word	0x0800929c
 80059c4:	080092b4 	.word	0x080092b4

080059c8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b092      	sub	sp, #72	@ 0x48
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7d9b      	ldrb	r3, [r3, #22]
 80059d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80059d8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80059dc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 80c9 	bne.w	8005b78 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80059e6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80059ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e100      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80059f6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80059fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d108      	bne.n	8005a14 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e0f1      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005a14:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005a18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a1c:	2b30      	cmp	r3, #48	@ 0x30
 8005a1e:	d108      	bne.n	8005a32 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf0c      	ite	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	2300      	movne	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e0e2      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8005a32:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005a36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d115      	bne.n	8005a6a <pb_check_proto3_default_value+0xa2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe4a 	bl	80056e4 <safe_read_bool>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f083 0301 	eor.w	r3, r3, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	e0c6      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e0bf      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005a78:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d81c      	bhi.n	8005abe <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005a90:	e00d      	b.n	8005aae <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8005a92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a98:	4413      	add	r3, r2
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e0a9      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8005aa4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8a5b      	ldrh	r3, [r3, #18]
 8005ab2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d3eb      	bcc.n	8005a92 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e09c      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005abe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d10a      	bne.n	8005ae0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e08b      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005ae0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	d108      	bne.n	8005afe <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	e07c      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8005afe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	2b0b      	cmp	r3, #11
 8005b08:	d107      	bne.n	8005b1a <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8a5b      	ldrh	r3, [r3, #18]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	e06e      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8005b1a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d005      	beq.n	8005b32 <pb_check_proto3_default_value+0x16a>
 8005b26:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d161      	bne.n	8005bf6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 ffbf 	bl	8007ac2 <pb_field_iter_begin>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d014      	beq.n	8005b74 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff ff3a 	bl	80059c8 <pb_check_proto3_default_value>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f083 0301 	eor.w	r3, r3, #1
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e049      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fff3 	bl	8007b54 <pb_field_iter_next>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1ea      	bne.n	8005b4a <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e03f      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005b78:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b7c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b80:	2b80      	cmp	r3, #128	@ 0x80
 8005b82:	d107      	bne.n	8005b94 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e031      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8005b94:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005b98:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b9c:	2b40      	cmp	r3, #64	@ 0x40
 8005b9e:	d12a      	bne.n	8005bf6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005ba0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	2b0a      	cmp	r3, #10
 8005baa:	d10a      	bne.n	8005bc2 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e01a      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005c00 <pb_check_proto3_default_value+0x238>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10a      	bne.n	8005be4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e009      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	e000      	b.n	8005bf8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3748      	adds	r7, #72	@ 0x48
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	08007cf7 	.word	0x08007cf7

08005c04 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e061      	b.n	8005cde <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fab9 	bl	8006194 <pb_encode_tag_for_field>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f083 0301 	eor.w	r3, r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <encode_basic_field+0x2e>
        return false;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e055      	b.n	8005cde <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	7d9b      	ldrb	r3, [r3, #22]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	2b0b      	cmp	r3, #11
 8005c3c:	d844      	bhi.n	8005cc8 <encode_basic_field+0xc4>
 8005c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <encode_basic_field+0x40>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c75 	.word	0x08005c75
 8005c48:	08005c81 	.word	0x08005c81
 8005c4c:	08005c81 	.word	0x08005c81
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005c8d 	.word	0x08005c8d
 8005c58:	08005c8d 	.word	0x08005c8d
 8005c5c:	08005c99 	.word	0x08005c99
 8005c60:	08005ca5 	.word	0x08005ca5
 8005c64:	08005cb1 	.word	0x08005cb1
 8005c68:	08005cb1 	.word	0x08005cb1
 8005c6c:	08005cc9 	.word	0x08005cc9
 8005c70:	08005cbd 	.word	0x08005cbd
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fb8a 	bl	8006390 <pb_enc_bool>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	e02e      	b.n	8005cde <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fb9e 	bl	80063c4 <pb_enc_varint>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	e028      	b.n	8005cde <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fc5a 	bl	8006548 <pb_enc_fixed>
 8005c94:	4603      	mov	r3, r0
 8005c96:	e022      	b.n	8005cde <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fc82 	bl	80065a4 <pb_enc_bytes>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	e01c      	b.n	8005cde <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fcba 	bl	8006620 <pb_enc_string>
 8005cac:	4603      	mov	r3, r0
 8005cae:	e016      	b.n	8005cde <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fd12 	bl	80066dc <pb_enc_submessage>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	e010      	b.n	8005cde <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fd52 	bl	8006768 <pb_enc_fixed_length_bytes>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	e00a      	b.n	8005cde <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <encode_basic_field+0xd2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	e000      	b.n	8005cd8 <encode_basic_field+0xd4>
 8005cd6:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <encode_basic_field+0xe4>)
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6113      	str	r3, [r2, #16]
 8005cdc:	2300      	movs	r3, #0
    }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	080092bc 	.word	0x080092bc

08005cec <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d018      	beq.n	8005d32 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	4798      	blx	r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f083 0301 	eor.w	r3, r3, #1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <encode_callback_field+0x3c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	e000      	b.n	8005d2a <encode_callback_field+0x3e>
 8005d28:	4b04      	ldr	r3, [pc, #16]	@ (8005d3c <encode_callback_field+0x50>)
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6113      	str	r3, [r2, #16]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e000      	b.n	8005d34 <encode_callback_field+0x48>
    }
    return true;
 8005d32:	2301      	movs	r3, #1
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	080092d0 	.word	0x080092d0

08005d40 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	7d9b      	ldrb	r3, [r3, #22]
 8005d4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d52:	2b30      	cmp	r3, #48	@ 0x30
 8005d54:	d108      	bne.n	8005d68 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	8a1b      	ldrh	r3, [r3, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d026      	beq.n	8005db2 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e059      	b.n	8005e1c <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	7d9b      	ldrb	r3, [r3, #22]
 8005d6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d11e      	bne.n	8005db2 <encode_field+0x72>
    {
        if (field->pSize)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fcaf 	bl	80056e4 <safe_read_bool>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f083 0301 	eor.w	r3, r3, #1
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00f      	beq.n	8005db2 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e042      	b.n	8005e1c <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	7d9b      	ldrb	r3, [r3, #22]
 8005d9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d107      	bne.n	8005db2 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8005da2:	6838      	ldr	r0, [r7, #0]
 8005da4:	f7ff fe10 	bl	80059c8 <pb_check_proto3_default_value>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <encode_field+0x72>
                return true;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e034      	b.n	8005e1c <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	7d9b      	ldrb	r3, [r3, #22]
 8005dbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <encode_field+0x94>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	e000      	b.n	8005dd6 <encode_field+0x96>
 8005dd4:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <encode_field+0xe4>)
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6113      	str	r3, [r2, #16]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e01e      	b.n	8005e1c <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e01c      	b.n	8005e1c <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	7d9b      	ldrb	r3, [r3, #22]
 8005de6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d105      	bne.n	8005dfa <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff7b 	bl	8005cec <encode_callback_field>
 8005df6:	4603      	mov	r3, r0
 8005df8:	e010      	b.n	8005e1c <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	7d9b      	ldrb	r3, [r3, #22]
 8005dfe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d105      	bne.n	8005e12 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fc89 	bl	8005720 <encode_array>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	e004      	b.n	8005e1c <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fef5 	bl	8005c04 <encode_basic_field>
 8005e1a:	4603      	mov	r3, r0
    }
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	080092e0 	.word	0x080092e0

08005e28 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08c      	sub	sp, #48	@ 0x30
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 ff4a 	bl	8007cd2 <pb_field_iter_begin_extension_const>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f083 0301 	eor.w	r3, r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <default_extension_encoder+0x30>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	e000      	b.n	8005e5a <default_extension_encoder+0x32>
 8005e58:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <default_extension_encoder+0x50>)
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6113      	str	r3, [r2, #16]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e006      	b.n	8005e70 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8005e62:	f107 0308 	add.w	r3, r7, #8
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff69 	bl	8005d40 <encode_field>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3730      	adds	r7, #48	@ 0x30
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	080092f8 	.word	0x080092f8

08005e7c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]

    while (extension)
 8005e8e:	e01e      	b.n	8005ece <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68f9      	ldr	r1, [r7, #12]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	72fb      	strb	r3, [r7, #11]
 8005eaa:	e005      	b.n	8005eb8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff ffba 	bl	8005e28 <default_extension_encoder>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
 8005eba:	f083 0301 	eor.w	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <encode_extension_field+0x4c>
            return false;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e006      	b.n	8005ed6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
    while (extension)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1dd      	bne.n	8005e90 <encode_extension_field+0x14>
    }
    
    return true;
 8005ed4:	2301      	movs	r3, #1
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b08e      	sub	sp, #56	@ 0x38
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8005eea:	f107 0310 	add.w	r3, r7, #16
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fed9 	bl	8007caa <pb_field_iter_begin_const>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f083 0301 	eor.w	r3, r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <pb_encode+0x2a>
        return true; /* Empty message type */
 8005f04:	2301      	movs	r3, #1
 8005f06:	e02a      	b.n	8005f5e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8005f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	2b0a      	cmp	r3, #10
 8005f12:	d10d      	bne.n	8005f30 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8005f14:	f107 0310 	add.w	r3, r7, #16
 8005f18:	4619      	mov	r1, r3
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff ffae 	bl	8005e7c <encode_extension_field>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <pb_encode+0x6e>
                return false;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e016      	b.n	8005f5e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	4619      	mov	r1, r3
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff ff02 	bl	8005d40 <encode_field>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f083 0301 	eor.w	r3, r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <pb_encode+0x6e>
                return false;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e008      	b.n	8005f5e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fdff 	bl	8007b54 <pb_field_iter_next>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1d5      	bne.n	8005f08 <pb_encode+0x2a>
    
    return true;
 8005f5c:	2301      	movs	r3, #1
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3738      	adds	r7, #56	@ 0x38
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8005f86:	e013      	b.n	8005fb0 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8005f88:	7efb      	ldrb	r3, [r7, #27]
 8005f8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f8e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	61fa      	str	r2, [r7, #28]
 8005f96:	3320      	adds	r3, #32
 8005f98:	443b      	add	r3, r7
 8005f9a:	7efa      	ldrb	r2, [r7, #27]
 8005f9c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa8:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	09db      	lsrs	r3, r3, #7
 8005fae:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d805      	bhi.n	8005fc2 <pb_encode_varint_32+0x5c>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e5      	bne.n	8005f88 <pb_encode_varint_32+0x22>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e2      	bne.n	8005f88 <pb_encode_varint_32+0x22>
    }

    if (high)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d024      	beq.n	8006012 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	7efb      	ldrb	r3, [r7, #27]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	08db      	lsrs	r3, r3, #3
 8005fe0:	607b      	str	r3, [r7, #4]

        while (high)
 8005fe2:	e013      	b.n	800600c <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8005fe4:	7efb      	ldrb	r3, [r7, #27]
 8005fe6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fea:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	3320      	adds	r3, #32
 8005ff4:	443b      	add	r3, r7
 8005ff6:	7efa      	ldrb	r2, [r7, #27]
 8005ff8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006004:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	09db      	lsrs	r3, r3, #7
 800600a:	607b      	str	r3, [r7, #4]
        while (high)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e8      	bne.n	8005fe4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	61fa      	str	r2, [r7, #28]
 8006018:	3320      	adds	r3, #32
 800601a:	443b      	add	r3, r7
 800601c:	7efa      	ldrb	r2, [r7, #27]
 800601e:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 8006022:	f107 0310 	add.w	r3, r7, #16
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	4619      	mov	r1, r3
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fb0a 	bl	8005644 <pb_write>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800603a:	b590      	push	{r4, r7, lr}
 800603c:	b087      	sub	sp, #28
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8006046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604a:	2a80      	cmp	r2, #128	@ 0x80
 800604c:	f173 0300 	sbcs.w	r3, r3, #0
 8006050:	d20a      	bcs.n	8006068 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8006052:	783b      	ldrb	r3, [r7, #0]
 8006054:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8006056:	f107 0317 	add.w	r3, r7, #23
 800605a:	2201      	movs	r2, #1
 800605c:	4619      	mov	r1, r3
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff faf0 	bl	8005644 <pb_write>
 8006064:	4603      	mov	r3, r0
 8006066:	e00f      	b.n	8006088 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8006068:	683c      	ldr	r4, [r7, #0]
 800606a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	000a      	movs	r2, r1
 8006078:	2300      	movs	r3, #0
 800607a:	4613      	mov	r3, r2
 800607c:	461a      	mov	r2, r3
 800607e:	4621      	mov	r1, r4
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ff70 	bl	8005f66 <pb_encode_varint_32>
 8006086:	4603      	mov	r3, r0
#endif
    }
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd90      	pop	{r4, r7, pc}

08006090 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8006090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006094:	b08a      	sub	sp, #40	@ 0x28
 8006096:	af00      	add	r7, sp, #0
 8006098:	6178      	str	r0, [r7, #20]
 800609a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800609e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80060a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 80060aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da15      	bge.n	80060de <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80060b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ba:	ea00 0402 	and.w	r4, r0, r2
 80060be:	ea01 0503 	and.w	r5, r1, r3
 80060c2:	1923      	adds	r3, r4, r4
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	eb45 0305 	adc.w	r3, r5, r5
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d0:	ea6f 0a02 	mvn.w	sl, r2
 80060d4:	ea6f 0b03 	mvn.w	fp, r3
 80060d8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80060dc:	e007      	b.n	80060ee <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80060de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060e2:	eb12 0802 	adds.w	r8, r2, r2
 80060e6:	eb43 0903 	adc.w	r9, r3, r3
 80060ea:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80060ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060f2:	6978      	ldr	r0, [r7, #20]
 80060f4:	f7ff ffa1 	bl	800603a <pb_encode_varint>
 80060f8:	4603      	mov	r3, r0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3728      	adds	r7, #40	@ 0x28
 80060fe:	46bd      	mov	sp, r7
 8006100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006104 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800610e:	2204      	movs	r2, #4
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fa96 	bl	8005644 <pb_write>
 8006118:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800612c:	2208      	movs	r2, #8
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fa87 	bl	8005644 <pb_write>
 8006136:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8006140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006144:	b088      	sub	sp, #32
 8006146:	af00      	add	r7, sp, #0
 8006148:	6178      	str	r0, [r7, #20]
 800614a:	460b      	mov	r3, r1
 800614c:	60fa      	str	r2, [r7, #12]
 800614e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	469a      	mov	sl, r3
 8006156:	4693      	mov	fp, r2
 8006158:	ea4f 755a 	mov.w	r5, sl, lsr #29
 800615c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8006160:	7cfb      	ldrb	r3, [r7, #19]
 8006162:	2200      	movs	r2, #0
 8006164:	4698      	mov	r8, r3
 8006166:	4691      	mov	r9, r2
 8006168:	ea44 0308 	orr.w	r3, r4, r8
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	ea45 0309 	orr.w	r3, r5, r9
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006178:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 800617c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006180:	6978      	ldr	r0, [r7, #20]
 8006182:	f7ff ff5a 	bl	800603a <pb_encode_varint>
 8006186:	4603      	mov	r3, r0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006194 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	7d9b      	ldrb	r3, [r3, #22]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	2b0b      	cmp	r3, #11
 80061a8:	d826      	bhi.n	80061f8 <pb_encode_tag_for_field+0x64>
 80061aa:	a201      	add	r2, pc, #4	@ (adr r2, 80061b0 <pb_encode_tag_for_field+0x1c>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061e1 	.word	0x080061e1
 80061b4:	080061e1 	.word	0x080061e1
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e7 	.word	0x080061e7
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f3 	.word	0x080061f3
 80061cc:	080061f3 	.word	0x080061f3
 80061d0:	080061f3 	.word	0x080061f3
 80061d4:	080061f3 	.word	0x080061f3
 80061d8:	080061f9 	.word	0x080061f9
 80061dc:	080061f3 	.word	0x080061f3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73fb      	strb	r3, [r7, #15]
            break;
 80061e4:	e014      	b.n	8006210 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80061e6:	2305      	movs	r3, #5
 80061e8:	73fb      	strb	r3, [r7, #15]
            break;
 80061ea:	e011      	b.n	8006210 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
            break;
 80061f0:	e00e      	b.n	8006210 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80061f2:	2302      	movs	r3, #2
 80061f4:	73fb      	strb	r3, [r7, #15]
            break;
 80061f6:	e00b      	b.n	8006210 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <pb_encode_tag_for_field+0x72>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	e000      	b.n	8006208 <pb_encode_tag_for_field+0x74>
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <pb_encode_tag_for_field+0x98>)
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6113      	str	r3, [r2, #16]
 800620c:	2300      	movs	r3, #0
 800620e:	e008      	b.n	8006222 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	8a1b      	ldrh	r3, [r3, #16]
 8006214:	461a      	mov	r2, r3
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff ff90 	bl	8006140 <pb_encode_tag>
 8006220:	4603      	mov	r3, r0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	080092bc 	.word	0x080092bc

08006230 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8006230:	b5b0      	push	{r4, r5, r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	461c      	mov	r4, r3
 8006242:	4615      	mov	r5, r2
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fef6 	bl	800603a <pb_encode_varint>
 800624e:	4603      	mov	r3, r0
 8006250:	f083 0301 	eor.w	r3, r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <pb_encode_string+0x2e>
        return false;
 800625a:	2300      	movs	r3, #0
 800625c:	e005      	b.n	800626a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff f9ee 	bl	8005644 <pb_write>
 8006268:	4603      	mov	r3, r0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006274 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8006274:	b5b0      	push	{r4, r5, r7, lr}
 8006276:	b08c      	sub	sp, #48	@ 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fe20 	bl	8005ede <pb_encode>
 800629e:	4603      	mov	r3, r0
 80062a0:	f083 0301 	eor.w	r3, r3, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 80062aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	611a      	str	r2, [r3, #16]
#endif
        return false;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e065      	b.n	8006380 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	2200      	movs	r2, #0
 80062bc:	461c      	mov	r4, r3
 80062be:	4615      	mov	r5, r2
 80062c0:	4622      	mov	r2, r4
 80062c2:	462b      	mov	r3, r5
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff feb8 	bl	800603a <pb_encode_varint>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f083 0301 	eor.w	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <pb_encode_submessage+0x66>
        return false;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e052      	b.n	8006380 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 80062e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062e4:	2100      	movs	r1, #0
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff f9ac 	bl	8005644 <pb_write>
 80062ec:	4603      	mov	r3, r0
 80062ee:	e047      	b.n	8006380 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f6:	441a      	add	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d90b      	bls.n	8006318 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <pb_encode_submessage+0x9a>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	e000      	b.n	8006310 <pb_encode_submessage+0x9c>
 800630e:	4b1e      	ldr	r3, [pc, #120]	@ (8006388 <pb_encode_submessage+0x114>)
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	6113      	str	r3, [r2, #16]
 8006314:	2300      	movs	r3, #0
 8006316:	e033      	b.n	8006380 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fdd0 	bl	8005ede <pb_encode>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	441a      	add	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8006356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006360:	429a      	cmp	r2, r3
 8006362:	d00b      	beq.n	800637c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <pb_encode_submessage+0xfe>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	e000      	b.n	8006374 <pb_encode_submessage+0x100>
 8006372:	4b06      	ldr	r3, [pc, #24]	@ (800638c <pb_encode_submessage+0x118>)
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6113      	str	r3, [r2, #16]
 8006378:	2300      	movs	r3, #0
 800637a:	e001      	b.n	8006380 <pb_encode_submessage+0x10c>
    
    return status;
 800637c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006380:	4618      	mov	r0, r3
 8006382:	3730      	adds	r7, #48	@ 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bdb0      	pop	{r4, r5, r7, pc}
 8006388:	08009284 	.word	0x08009284
 800638c:	0800930c 	.word	0x0800930c

08006390 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006390:	b5b0      	push	{r4, r5, r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f9a0 	bl	80056e4 <safe_read_bool>
 80063a4:	4603      	mov	r3, r0
 80063a6:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	461c      	mov	r4, r3
 80063ae:	4615      	mov	r5, r2
 80063b0:	4622      	mov	r2, r4
 80063b2:	462b      	mov	r3, r5
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fe40 	bl	800603a <pb_encode_varint>
 80063ba:	4603      	mov	r3, r0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bdb0      	pop	{r4, r5, r7, pc}

080063c4 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b08c      	sub	sp, #48	@ 0x30
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	61f8      	str	r0, [r7, #28]
 80063ce:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	7d9b      	ldrb	r3, [r3, #22]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d152      	bne.n	8006482 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	8a5b      	ldrh	r3, [r3, #18]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d10b      	bne.n	8006408 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	617a      	str	r2, [r7, #20]
 80063fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006402:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8006406:	e035      	b.n	8006474 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	8a5b      	ldrh	r3, [r3, #18]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d10b      	bne.n	8006428 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	2200      	movs	r2, #0
 800641a:	60bb      	str	r3, [r7, #8]
 800641c:	60fa      	str	r2, [r7, #12]
 800641e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006422:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8006426:	e025      	b.n	8006474 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	8a5b      	ldrh	r3, [r3, #18]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d10a      	bne.n	8006446 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006440:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8006444:	e016      	b.n	8006474 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	8a5b      	ldrh	r3, [r3, #18]
 800644a:	2b08      	cmp	r3, #8
 800644c:	d106      	bne.n	800645c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800645a:	e00b      	b.n	8006474 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <pb_enc_varint+0xa6>
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	e000      	b.n	800646c <pb_enc_varint+0xa8>
 800646a:	4b36      	ldr	r3, [pc, #216]	@ (8006544 <pb_enc_varint+0x180>)
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	6113      	str	r3, [r2, #16]
 8006470:	2300      	movs	r3, #0
 8006472:	e061      	b.n	8006538 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8006474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006478:	69f8      	ldr	r0, [r7, #28]
 800647a:	f7ff fdde 	bl	800603a <pb_encode_varint>
 800647e:	4603      	mov	r3, r0
 8006480:	e05a      	b.n	8006538 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	8a5b      	ldrh	r3, [r3, #18]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10a      	bne.n	80064ac <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f993 3000 	ldrsb.w	r3, [r3]
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	17da      	asrs	r2, r3, #31
 80064a2:	469a      	mov	sl, r3
 80064a4:	4693      	mov	fp, r2
 80064a6:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80064aa:	e032      	b.n	8006512 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	8a5b      	ldrh	r3, [r3, #18]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d10a      	bne.n	80064ca <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064bc:	b21b      	sxth	r3, r3
 80064be:	17da      	asrs	r2, r3, #31
 80064c0:	4698      	mov	r8, r3
 80064c2:	4691      	mov	r9, r2
 80064c4:	e9c7 8908 	strd	r8, r9, [r7, #32]
 80064c8:	e023      	b.n	8006512 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	8a5b      	ldrh	r3, [r3, #18]
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d108      	bne.n	80064e4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	17da      	asrs	r2, r3, #31
 80064da:	461c      	mov	r4, r3
 80064dc:	4615      	mov	r5, r2
 80064de:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80064e2:	e016      	b.n	8006512 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	8a5b      	ldrh	r3, [r3, #18]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d106      	bne.n	80064fa <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80064f8:	e00b      	b.n	8006512 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <pb_enc_varint+0x144>
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	e000      	b.n	800650a <pb_enc_varint+0x146>
 8006508:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <pb_enc_varint+0x180>)
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	6113      	str	r3, [r2, #16]
 800650e:	2300      	movs	r3, #0
 8006510:	e012      	b.n	8006538 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	7d9b      	ldrb	r3, [r3, #22]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	2b03      	cmp	r3, #3
 800651c:	d106      	bne.n	800652c <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 800651e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006522:	69f8      	ldr	r0, [r7, #28]
 8006524:	f7ff fdb4 	bl	8006090 <pb_encode_svarint>
 8006528:	4603      	mov	r3, r0
 800652a:	e005      	b.n	8006538 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800652c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006530:	69f8      	ldr	r0, [r7, #28]
 8006532:	f7ff fd82 	bl	800603a <pb_encode_varint>
 8006536:	4603      	mov	r3, r0

    }
}
 8006538:	4618      	mov	r0, r3
 800653a:	3730      	adds	r7, #48	@ 0x30
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006542:	bf00      	nop
 8006544:	08009320 	.word	0x08009320

08006548 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	8a5b      	ldrh	r3, [r3, #18]
 8006556:	2b04      	cmp	r3, #4
 8006558:	d107      	bne.n	800656a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff fdcf 	bl	8006104 <pb_encode_fixed32>
 8006566:	4603      	mov	r3, r0
 8006568:	e016      	b.n	8006598 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	8a5b      	ldrh	r3, [r3, #18]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d107      	bne.n	8006582 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fdd2 	bl	8006122 <pb_encode_fixed64>
 800657e:	4603      	mov	r3, r0
 8006580:	e00a      	b.n	8006598 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <pb_enc_fixed+0x48>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	e000      	b.n	8006592 <pb_enc_fixed+0x4a>
 8006590:	4b03      	ldr	r3, [pc, #12]	@ (80065a0 <pb_enc_fixed+0x58>)
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6113      	str	r3, [r2, #16]
 8006596:	2300      	movs	r3, #0
    }
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	08009320 	.word	0x08009320

080065a4 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 80065be:	2200      	movs	r2, #0
 80065c0:	2100      	movs	r1, #0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fe34 	bl	8006230 <pb_encode_string>
 80065c8:	4603      	mov	r3, r0
 80065ca:	e022      	b.n	8006612 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	7d9b      	ldrb	r3, [r3, #22]
 80065d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d113      	bne.n	8006600 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	8a5b      	ldrh	r3, [r3, #18]
 80065e2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d90b      	bls.n	8006600 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <pb_enc_bytes+0x52>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	e000      	b.n	80065f8 <pb_enc_bytes+0x54>
 80065f6:	4b09      	ldr	r3, [pc, #36]	@ (800661c <pb_enc_bytes+0x78>)
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6113      	str	r3, [r2, #16]
 80065fc:	2300      	movs	r3, #0
 80065fe:	e008      	b.n	8006612 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1c99      	adds	r1, r3, #2
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fe10 	bl	8006230 <pb_encode_string>
 8006610:	4603      	mov	r3, r0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	08009334 	.word	0x08009334

08006620 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	8a5b      	ldrh	r3, [r3, #18]
 8006632:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	7d9b      	ldrb	r3, [r3, #22]
 800663e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	d103      	bne.n	800664e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8006646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	e011      	b.n	8006672 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <pb_enc_string+0x42>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	e000      	b.n	8006664 <pb_enc_string+0x44>
 8006662:	4b1c      	ldr	r3, [pc, #112]	@ (80066d4 <pb_enc_string+0xb4>)
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6113      	str	r3, [r2, #16]
 8006668:	2300      	movs	r3, #0
 800666a:	e02f      	b.n	80066cc <pb_enc_string+0xac>

        max_size -= 1;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3b01      	subs	r3, #1
 8006670:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e020      	b.n	80066c0 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8006682:	e005      	b.n	8006690 <pb_enc_string+0x70>
        {
            size++;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
            p++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d203      	bcs.n	80066a0 <pb_enc_string+0x80>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f1      	bne.n	8006684 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <pb_enc_string+0x96>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	e000      	b.n	80066b8 <pb_enc_string+0x98>
 80066b6:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <pb_enc_string+0xb8>)
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6113      	str	r3, [r2, #16]
 80066bc:	2300      	movs	r3, #0
 80066be:	e005      	b.n	80066cc <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fdb3 	bl	8006230 <pb_encode_string>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	08009348 	.word	0x08009348
 80066d8:	0800935c 	.word	0x0800935c

080066dc <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <pb_enc_submessage+0x20>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	e000      	b.n	80066fe <pb_enc_submessage+0x22>
 80066fc:	4b19      	ldr	r3, [pc, #100]	@ (8006764 <pb_enc_submessage+0x88>)
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6113      	str	r3, [r2, #16]
 8006702:	2300      	movs	r3, #0
 8006704:	e029      	b.n	800675a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	7d9b      	ldrb	r3, [r3, #22]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	2b09      	cmp	r3, #9
 8006710:	d11a      	bne.n	8006748 <pb_enc_submessage+0x6c>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	3b08      	subs	r3, #8
 8006720:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	3204      	adds	r2, #4
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
 8006738:	4603      	mov	r3, r0
 800673a:	f083 0301 	eor.w	r3, r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <pb_enc_submessage+0x6c>
                return false;
 8006744:	2300      	movs	r3, #0
 8006746:	e008      	b.n	800675a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	461a      	mov	r2, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fd8e 	bl	8006274 <pb_encode_submessage>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	08009370 	.word	0x08009370

08006768 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	69d9      	ldr	r1, [r3, #28]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	8a5b      	ldrh	r3, [r3, #18]
 800677a:	461a      	mov	r2, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff fd57 	bl	8006230 <pb_encode_string>
 8006782:	4603      	mov	r3, r0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <TF_ClearMsg>:
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8006794:	2218      	movs	r2, #24
 8006796:	2100      	movs	r1, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fddf 	bl	800835c <memset>
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80067b6:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <TF_ClaimTx+0x20>
            TF_Error("TF already locked for tx!");
 80067be:	4808      	ldr	r0, [pc, #32]	@ (80067e0 <TF_ClaimTx+0x38>)
 80067c0:	f001 fcca 	bl	8008158 <puts>
            return false;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e006      	b.n	80067d6 <TF_ClaimTx+0x2e>
        }

        tf->soft_lock = true;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
        return true;
 80067d4:	2301      	movs	r3, #1
    }
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	0800938c 	.word	0x0800938c

080067e4 <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
 8006808:	2300      	movs	r3, #0
 800680a:	4618      	mov	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	460a      	mov	r2, r1
 800681e:	80fb      	strh	r3, [r7, #6]
 8006820:	4613      	mov	r3, r2
 8006822:	717b      	strb	r3, [r7, #5]
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	b29a      	uxth	r2, r3
 800682a:	88f9      	ldrh	r1, [r7, #6]
 800682c:	797b      	ldrb	r3, [r7, #5]
 800682e:	404b      	eors	r3, r1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	4905      	ldr	r1, [pc, #20]	@ (8006848 <TF_CksumAdd+0x34>)
 8006834:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006838:	4053      	eors	r3, r2
 800683a:	b29b      	uxth	r3, r3
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	080097e8 	.word	0x080097e8

0800684c <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	80fb      	strh	r3, [r7, #6]
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 8006876:	480f      	ldr	r0, [pc, #60]	@ (80068b4 <TF_InitStatic+0x50>)
 8006878:	f001 fc6e 	bl	8008158 <puts>
        return false;
 800687c:	2300      	movs	r3, #0
 800687e:	e015      	b.n	80068ac <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 800688c:	f242 2260 	movw	r2, #8800	@ 0x2260
 8006890:	2100      	movs	r1, #0
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fd62 	bl	800835c <memset>

    tf->usertag = usertag;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	721a      	strb	r2, [r3, #8]
    return true;
 80068aa:	2301      	movs	r3, #1
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	080093ac 	.word	0x080093ac

080068b8 <renew_id_listener>:

//region Listeners

/** Reset ID listener's timeout to the original value */
static inline void _TF_FN renew_id_listener(struct TF_IdListener_ *lst)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
    lst->timeout = lst->timeout_max;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	895a      	ldrh	r2, [r3, #10]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	811a      	strh	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <cleanup_id_listener>:

/** Notify callback about ID listener's demise & let it free any resources in userdata */
static void _TF_FN cleanup_id_listener(TinyFrame *tf, TF_COUNT i, struct TF_IdListener_ *lst)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	@ 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	460b      	mov	r3, r1
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	72fb      	strb	r3, [r7, #11]
    TF_Msg msg;
    if (lst->fn == NULL) return;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02f      	beq.n	800694a <cleanup_id_listener+0x76>

    // Make user clean up their data - only if not NULL
    if (lst->userdata != NULL || lst->userdata2 != NULL) {
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <cleanup_id_listener+0x26>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <cleanup_id_listener+0x44>
        msg.userdata = lst->userdata;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	623b      	str	r3, [r7, #32]
        msg.userdata2 = lst->userdata2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
        msg.data = NULL; // this is a signal that the listener should clean up
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
        lst->fn(tf, &msg); // return value is ignored here - use TF_STAY or TF_CLOSE
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f107 0210 	add.w	r2, r7, #16
 8006912:	4611      	mov	r1, r2
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	4798      	blx	r3
    }

    lst->fn = NULL; // Discard listener
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	605a      	str	r2, [r3, #4]

    if (i == tf->count_id_lst - 1) {
 800691e:	7afa      	ldrb	r2, [r7, #11]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006926:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800692a:	3b01      	subs	r3, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	d10d      	bne.n	800694c <cleanup_id_listener+0x78>
        tf->count_id_lst--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006936:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800693a:	3b01      	subs	r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006944:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 8006948:	e000      	b.n	800694c <cleanup_id_listener+0x78>
    if (lst->fn == NULL) return;
 800694a:	bf00      	nop
    }
}
 800694c:	3728      	adds	r7, #40	@ 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <cleanup_type_listener>:

/** Clean up Type listener */
static inline void _TF_FN cleanup_type_listener(TinyFrame *tf, TF_COUNT i, struct TF_TypeListener_ *lst)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	460b      	mov	r3, r1
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	605a      	str	r2, [r3, #4]
    if (i == tf->count_type_lst - 1) {
 8006966:	7afa      	ldrb	r2, [r7, #11]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800696e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006972:	3b01      	subs	r3, #1
 8006974:	429a      	cmp	r2, r3
 8006976:	d10b      	bne.n	8006990 <cleanup_type_listener+0x3e>
        tf->count_type_lst--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800697e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006982:	3b01      	subs	r3, #1
 8006984:	b2da      	uxtb	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800698c:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    }
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <cleanup_generic_listener>:

/** Clean up Generic listener */
static inline void _TF_FN cleanup_generic_listener(TinyFrame *tf, TF_COUNT i, struct TF_GenericListener_ *lst)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	460b      	mov	r3, r1
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
    if (i == tf->count_generic_lst - 1) {
 80069b0:	7afa      	ldrb	r2, [r7, #11]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80069b8:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80069bc:	3b01      	subs	r3, #1
 80069be:	429a      	cmp	r2, r3
 80069c0:	d10b      	bne.n	80069da <cleanup_generic_listener+0x3e>
        tf->count_generic_lst--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80069c8:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80069d6:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    }
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <TF_AddIdListener>:

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_TICKS timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	807b      	strh	r3, [r7, #2]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]
 80069fa:	e039      	b.n	8006a70 <TF_AddIdListener+0x88>
        lst = &tf->id_listeners[i];
 80069fc:	7dfa      	ldrb	r2, [r7, #23]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006a0a:	3330      	adds	r3, #48	@ 0x30
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d127      	bne.n	8006a6a <TF_AddIdListener+0x82>
            lst->fn = cb;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	605a      	str	r2, [r3, #4]
            lst->id = msg->frame_id;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	601a      	str	r2, [r3, #0]
            lst->userdata = msg->userdata;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	60da      	str	r2, [r3, #12]
            lst->userdata2 = msg->userdata2;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	695a      	ldr	r2, [r3, #20]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	611a      	str	r2, [r3, #16]
            lst->timeout_max = lst->timeout = timeout;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	811a      	strh	r2, [r3, #8]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	891a      	ldrh	r2, [r3, #8]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	815a      	strh	r2, [r3, #10]
            if (i >= tf->count_id_lst) {
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006a4c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006a50:	7dfa      	ldrb	r2, [r7, #23]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d307      	bcc.n	8006a66 <TF_AddIdListener+0x7e>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006a62:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
            }
            return true;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e009      	b.n	8006a7e <TF_AddIdListener+0x96>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b09      	cmp	r3, #9
 8006a74:	d9c2      	bls.n	80069fc <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 8006a76:	4804      	ldr	r0, [pc, #16]	@ (8006a88 <TF_AddIdListener+0xa0>)
 8006a78:	f001 fb6e 	bl	8008158 <puts>
    return false;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	08009400 	.word	0x08009400

08006a8c <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
 8006a9a:	e022      	b.n	8006ae2 <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d114      	bne.n	8006adc <TF_AddGenericListener+0x50>
            lst->fn = cb;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006abe:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8006ac2:	7bfa      	ldrb	r2, [r7, #15]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d307      	bcc.n	8006ad8 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	3301      	adds	r3, #1
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006ad4:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e009      	b.n	8006af0 <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	73fb      	strb	r3, [r7, #15]
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d9d9      	bls.n	8006a9c <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 8006ae8:	4803      	ldr	r0, [pc, #12]	@ (8006af8 <TF_AddGenericListener+0x6c>)
 8006aea:	f001 fb35 	bl	8008158 <puts>
    return false;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08009444 	.word	0x08009444

08006afc <TF_HandleReceivedMessage>:
    return false;
}

/** Handle a message that was just collected & verified by the parser */
static void _TF_FN TF_HandleReceivedMessage(TinyFrame *tf)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	@ 0x38
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
    struct TF_GenericListener_ *glst;
    TF_Result res;

    // Prepare message object
    TF_Msg msg;
    TF_ClearMsg(&msg);
 8006b04:	f107 030c 	add.w	r3, r7, #12
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fe3f 	bl	800678c <TF_ClearMsg>
    msg.frame_id = tf->id;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	60fb      	str	r3, [r7, #12]
    msg.is_response = false;
 8006b14:	2300      	movs	r3, #0
 8006b16:	743b      	strb	r3, [r7, #16]
    msg.type = tf->type;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b1e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006b22:	827b      	strh	r3, [r7, #18]
    msg.data = tf->data;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	331a      	adds	r3, #26
 8006b28:	617b      	str	r3, [r7, #20]
    msg.len = tf->len;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8b1b      	ldrh	r3, [r3, #24]
 8006b2e:	833b      	strh	r3, [r7, #24]

    // The loop upper bounds are the highest currently used slot index
    // (or close to it, depending on the order of listener removals).

    // ID listeners first
    for (i = 0; i < tf->count_id_lst; i++) {
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006b36:	e04e      	b.n	8006bd6 <TF_HandleReceivedMessage+0xda>
        ilst = &tf->id_listeners[i];
 8006b38:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006b48:	3330      	adds	r3, #48	@ 0x30
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24

        if (ilst->fn && ilst->id == msg.frame_id) {
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d039      	beq.n	8006bcc <TF_HandleReceivedMessage+0xd0>
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d134      	bne.n	8006bcc <TF_HandleReceivedMessage+0xd0>
            msg.userdata = ilst->userdata; // pass userdata pointer to the callback
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	61fb      	str	r3, [r7, #28]
            msg.userdata2 = ilst->userdata2;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	623b      	str	r3, [r7, #32]
            res = ilst->fn(tf, &msg);
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f107 020c 	add.w	r2, r7, #12
 8006b76:	4611      	mov	r1, r2
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            ilst->userdata = msg.userdata; // put it back (may have changed the pointer or set to NULL)
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	60da      	str	r2, [r3, #12]
            ilst->userdata2 = msg.userdata2; // put it back (may have changed the pointer or set to NULL)
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	611a      	str	r2, [r3, #16]

            if (res != TF_NEXT) {
 8006b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01a      	beq.n	8006bcc <TF_HandleReceivedMessage+0xd0>
                // if it's TF_CLOSE, we assume user already cleaned up userdata
                if (res == TF_RENEW) {
 8006b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d103      	bne.n	8006ba6 <TF_HandleReceivedMessage+0xaa>
                    renew_id_listener(ilst);
 8006b9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ba0:	f7ff fe8a 	bl	80068b8 <renew_id_listener>
                    // Set userdata to NULL to avoid calling user for cleanup
                    ilst->userdata = NULL;
                    ilst->userdata2 = NULL;
                    cleanup_id_listener(tf, i, ilst);
                }
                return;
 8006ba4:	e09f      	b.n	8006ce6 <TF_HandleReceivedMessage+0x1ea>
                else if (res == TF_CLOSE) {
 8006ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	f040 809b 	bne.w	8006ce6 <TF_HandleReceivedMessage+0x1ea>
                    ilst->userdata = NULL;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	60da      	str	r2, [r3, #12]
                    ilst->userdata2 = NULL;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	2200      	movs	r2, #0
 8006bba:	611a      	str	r2, [r3, #16]
                    cleanup_id_listener(tf, i, ilst);
 8006bbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff fe85 	bl	80068d4 <cleanup_id_listener>
                return;
 8006bca:	e08c      	b.n	8006ce6 <TF_HandleReceivedMessage+0x1ea>
    for (i = 0; i < tf->count_id_lst; i++) {
 8006bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006bdc:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006be0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d3a7      	bcc.n	8006b38 <TF_HandleReceivedMessage+0x3c>
            }
        }
    }
    // clean up for the following listeners that don't use userdata (this avoids data from
    // an ID listener that returned TF_NEXT from leaking into Type and Generic listeners)
    msg.userdata = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
    msg.userdata2 = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	623b      	str	r3, [r7, #32]

    // Type listeners
    for (i = 0; i < tf->count_type_lst; i++) {
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006bf6:	e02f      	b.n	8006c58 <TF_HandleReceivedMessage+0x15c>
        tlst = &tf->type_listeners[i];
 8006bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bfc:	f203 433f 	addw	r3, r3, #1087	@ 0x43f
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4413      	add	r3, r2
 8006c06:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (tlst->fn && tlst->type == msg.type) {
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01e      	beq.n	8006c4e <TF_HandleReceivedMessage+0x152>
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	881a      	ldrh	r2, [r3, #0]
 8006c14:	8a7b      	ldrh	r3, [r7, #18]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d119      	bne.n	8006c4e <TF_HandleReceivedMessage+0x152>
            res = tlst->fn(tf, &msg);
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f107 020c 	add.w	r2, r7, #12
 8006c22:	4611      	mov	r1, r2
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 8006c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <TF_HandleReceivedMessage+0x152>
                // type listeners don't have userdata.
                // TF_RENEW doesn't make sense here because type listeners don't expire = same as TF_STAY

                if (res == TF_CLOSE) {
 8006c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d155      	bne.n	8006cea <TF_HandleReceivedMessage+0x1ee>
                    cleanup_type_listener(tf, i, tlst);
 8006c3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fe83 	bl	8006952 <cleanup_type_listener>
                }
                return;
 8006c4c:	e04d      	b.n	8006cea <TF_HandleReceivedMessage+0x1ee>
    for (i = 0; i < tf->count_type_lst; i++) {
 8006c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c52:	3301      	adds	r3, #1
 8006c54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006c5e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006c62:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d3c6      	bcc.n	8006bf8 <TF_HandleReceivedMessage+0xfc>
            }
        }
    }

    // Generic listeners
    for (i = 0; i < tf->count_generic_lst; i++) {
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006c70:	e02a      	b.n	8006cc8 <TF_HandleReceivedMessage+0x1cc>
        glst = &tf->generic_listeners[i];
 8006c72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c76:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (glst->fn) {
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <TF_HandleReceivedMessage+0x1c2>
            res = glst->fn(tf, &msg);
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f107 020c 	add.w	r2, r7, #12
 8006c92:	4611      	mov	r1, r2
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 8006c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <TF_HandleReceivedMessage+0x1c2>

                // note: It's not expected that user will have multiple generic listeners, or
                // ever actually remove them. They're most useful as default callbacks if no other listener
                // handled the message.

                if (res == TF_CLOSE) {
 8006ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d11f      	bne.n	8006cee <TF_HandleReceivedMessage+0x1f2>
                    cleanup_generic_listener(tf, i, glst);
 8006cae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fe70 	bl	800699c <cleanup_generic_listener>
                }
                return;
 8006cbc:	e017      	b.n	8006cee <TF_HandleReceivedMessage+0x1f2>
    for (i = 0; i < tf->count_generic_lst; i++) {
 8006cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cce:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8006cd2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d3cb      	bcc.n	8006c72 <TF_HandleReceivedMessage+0x176>
            }
        }
    }

    TF_Error("Unhandled message, type %d", (int)msg.type);
 8006cda:	8a7b      	ldrh	r3, [r7, #18]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4806      	ldr	r0, [pc, #24]	@ (8006cf8 <TF_HandleReceivedMessage+0x1fc>)
 8006ce0:	f001 f9d2 	bl	8008088 <iprintf>
 8006ce4:	e004      	b.n	8006cf0 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <TF_HandleReceivedMessage+0x1f4>
                return;
 8006cee:	bf00      	nop
}
 8006cf0:	3738      	adds	r7, #56	@ 0x38
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	080094ec 	.word	0x080094ec

08006cfc <TF_Accept>:

//region Parser

/** Handle a received byte buffer */
void _TF_FN TF_Accept(TinyFrame *tf, const uint8_t *buffer, uint32_t count)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < count; i++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e00a      	b.n	8006d24 <TF_Accept+0x28>
        TF_AcceptChar(tf, buffer[i]);
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4413      	add	r3, r2
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f849 	bl	8006db0 <TF_AcceptChar>
    for (i = 0; i < count; i++) {
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	3301      	adds	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d3f0      	bcc.n	8006d0e <TF_Accept+0x12>
    }
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <TF_ResetParser>:

/** Reset the parser's internal state. */
void _TF_FN TF_ResetParser(TinyFrame *tf)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
    tf->state = TFState_SOF;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	741a      	strb	r2, [r3, #16]
    // more init will be done by the parser when the first byte is received
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <pars_begin_frame>:

/** SOF was received - prepare for the frame */
static void _TF_FN pars_begin_frame(TinyFrame *tf) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
    // Reset state vars
    CKSUM_RESET(tf->cksum);
 8006d58:	f7ff fd54 	bl	8006804 <TF_CksumStart>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d66:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#if TF_USE_SOF_BYTE
    CKSUM_ADD(tf->cksum, TF_SOF_BYTE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d70:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006d74:	21ab      	movs	r1, #171	@ 0xab
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fd4c 	bl	8006814 <TF_CksumAdd>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d86:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#endif

    tf->discard_data = false;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

    // Enter ID state
    tf->state = TFState_ID;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2203      	movs	r2, #3
 8006d9a:	741a      	strb	r2, [r3, #16]
    tf->rxi = 0;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <TF_AcceptChar>:

/** Handle a received char - here's the main state machine */
void _TF_FN TF_AcceptChar(TinyFrame *tf, unsigned char c)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
    // Parser timeout - clear
    if (tf->parser_timeout_ticks >= TF_PARSER_TIMEOUT_TICKS) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8a5b      	ldrh	r3, [r3, #18]
 8006dc0:	2b09      	cmp	r3, #9
 8006dc2:	d909      	bls.n	8006dd8 <TF_AcceptChar+0x28>
        if (tf->state != TFState_SOF) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7c1b      	ldrb	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <TF_AcceptChar+0x28>
            TF_ResetParser(tf);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ffb2 	bl	8006d36 <TF_ResetParser>
            TF_Error("Parser timeout");
 8006dd2:	48b4      	ldr	r0, [pc, #720]	@ (80070a4 <TF_AcceptChar+0x2f4>)
 8006dd4:	f001 f9c0 	bl	8008158 <puts>
        }
    }
    tf->parser_timeout_ticks = 0;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	825a      	strh	r2, [r3, #18]
        pars_begin_frame(tf);
    }
#endif

    //@formatter:off
    switch (tf->state) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7c1b      	ldrb	r3, [r3, #16]
 8006de2:	2b06      	cmp	r3, #6
 8006de4:	f200 8201 	bhi.w	80071ea <TF_AcceptChar+0x43a>
 8006de8:	a201      	add	r2, pc, #4	@ (adr r2, 8006df0 <TF_AcceptChar+0x40>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	08006e89 	.word	0x08006e89
 8006df8:	08006f8d 	.word	0x08006f8d
 8006dfc:	08006e1d 	.word	0x08006e1d
 8006e00:	08006eff 	.word	0x08006eff
 8006e04:	0800707d 	.word	0x0800707d
 8006e08:	08007127 	.word	0x08007127
        case TFState_SOF:
            if (c == TF_SOF_BYTE) {
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	2bab      	cmp	r3, #171	@ 0xab
 8006e10:	f040 81de 	bne.w	80071d0 <TF_AcceptChar+0x420>
                pars_begin_frame(tf);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ff9b 	bl	8006d50 <pars_begin_frame>
            }
            break;
 8006e1a:	e1d9      	b.n	80071d0 <TF_AcceptChar+0x420>

        case TFState_ID:
            CKSUM_ADD(tf->cksum, c);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e22:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fcf2 	bl	8006814 <TF_CksumAdd>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->id, TF_ID) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	021a      	lsls	r2, r3, #8
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	615a      	str	r2, [r3, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e52:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006e56:	3301      	adds	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e60:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	f040 81b0 	bne.w	80071d4 <TF_AcceptChar+0x424>
                // Enter LEN state
                tf->state = TFState_LEN;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006e86:	e1a5      	b.n	80071d4 <TF_AcceptChar+0x424>

        case TFState_LEN:
            CKSUM_ADD(tf->cksum, c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e8e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fcbc 	bl	8006814 <TF_CksumAdd>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->len, TF_LEN) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8b1b      	ldrh	r3, [r3, #24]
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	b21a      	sxth	r2, r3
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	b21b      	sxth	r3, r3
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	831a      	strh	r2, [r3, #24]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	f040 8177 	bne.w	80071d8 <TF_AcceptChar+0x428>
                // Enter TYPE state
                tf->state = TFState_TYPE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006efc:	e16c      	b.n	80071d8 <TF_AcceptChar+0x428>

        case TFState_TYPE:
            CKSUM_ADD(tf->cksum, c);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f04:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fc81 	bl	8006814 <TF_CksumAdd>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f1c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->type, TF_TYPE) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f26:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	b21a      	sxth	r2, r3
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	b21b      	sxth	r3, r3
 8006f34:	4313      	orrs	r3, r2
 8006f36:	b21b      	sxth	r3, r3
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f40:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f4a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006f4e:	3301      	adds	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f58:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f62:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	f040 8138 	bne.w	80071dc <TF_AcceptChar+0x42c>
                #if TF_CKSUM_TYPE == TF_CKSUM_NONE
                    tf->state = TFState_DATA;
                    tf->rxi = 0;
                #else
                    // enter HEAD_CKSUM state
                    tf->state = TFState_HEAD_CKSUM;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 8006f8a:	e127      	b.n	80071dc <TF_AcceptChar+0x42c>

        case TFState_HEAD_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f92:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	b21a      	sxth	r2, r3
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	b21b      	sxth	r3, r3
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fac:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006fba:	3301      	adds	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fc4:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fce:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	f040 8104 	bne.w	80071e0 <TF_AcceptChar+0x430>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fde:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fc32 	bl	800684c <TF_CksumEnd>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ff2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->cksum != tf->ref_cksum) {
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ffc:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007006:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 800700a:	429a      	cmp	r2, r3
 800700c:	d006      	beq.n	800701c <TF_AcceptChar+0x26c>
                    TF_Error("Rx head cksum mismatch");
 800700e:	4826      	ldr	r0, [pc, #152]	@ (80070a8 <TF_AcceptChar+0x2f8>)
 8007010:	f001 f8a2 	bl	8008158 <puts>
                    TF_ResetParser(tf);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fe8e 	bl	8006d36 <TF_ResetParser>
                    break;
 800701a:	e0e6      	b.n	80071ea <TF_AcceptChar+0x43a>
                }

                if (tf->len == 0) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8b1b      	ldrh	r3, [r3, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d106      	bne.n	8007032 <TF_AcceptChar+0x282>
                    // if the message has no body, we're done.
                    TF_HandleReceivedMessage(tf);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fd69 	bl	8006afc <TF_HandleReceivedMessage>
                    TF_ResetParser(tf);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fe83 	bl	8006d36 <TF_ResetParser>
                    break;
 8007030:	e0db      	b.n	80071ea <TF_AcceptChar+0x43a>
                }

                // Enter DATA state
                tf->state = TFState_DATA;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2205      	movs	r2, #5
 8007036:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703e:	2200      	movs	r2, #0
 8007040:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a

                CKSUM_RESET(tf->cksum); // Start collecting the payload
 8007044:	f7ff fbde 	bl	8006804 <TF_CksumStart>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007052:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->len > TF_MAX_PAYLOAD_RX) {
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8b1b      	ldrh	r3, [r3, #24]
 800705a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800705e:	f240 80bf 	bls.w	80071e0 <TF_AcceptChar+0x430>
                    TF_Error("Rx payload too long: %d", (int)tf->len);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	8b1b      	ldrh	r3, [r3, #24]
 8007066:	4619      	mov	r1, r3
 8007068:	4810      	ldr	r0, [pc, #64]	@ (80070ac <TF_AcceptChar+0x2fc>)
 800706a:	f001 f80d 	bl	8008088 <iprintf>
                    // ERROR - frame too long. Consume, but do not store.
                    tf->discard_data = true;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007074:	2201      	movs	r2, #1
 8007076:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                }
            }
            break;
 800707a:	e0b1      	b.n	80071e0 <TF_AcceptChar+0x430>

        case TFState_DATA:
            if (tf->discard_data) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007082:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d012      	beq.n	80070b0 <TF_AcceptChar+0x300>
                tf->rxi++;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007090:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8007094:	3301      	adds	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800709e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 80070a2:	e027      	b.n	80070f4 <TF_AcceptChar+0x344>
 80070a4:	08009538 	.word	0x08009538
 80070a8:	0800954c 	.word	0x0800954c
 80070ac:	08009568 	.word	0x08009568
            } else {
                CKSUM_ADD(tf->cksum, c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070b6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fba8 	bl	8006814 <TF_CksumAdd>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ce:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                tf->data[tf->rxi++] = c;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	b291      	uxth	r1, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070e6:	f8a2 109a 	strh.w	r1, [r2, #154]	@ 0x9a
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4413      	add	r3, r2
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	769a      	strb	r2, [r3, #26]
            }

            if (tf->rxi == tf->len) {
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fa:	f8b3 209a 	ldrh.w	r2, [r3, #154]	@ 0x9a
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8b1b      	ldrh	r3, [r3, #24]
 8007102:	429a      	cmp	r2, r3
 8007104:	d16e      	bne.n	80071e4 <TF_AcceptChar+0x434>
                    // All done
                    TF_HandleReceivedMessage(tf);
                    TF_ResetParser(tf);
                #else
                    // Enter DATA_CKSUM state
                    tf->state = TFState_DATA_CKSUM;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2206      	movs	r2, #6
 800710a:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007112:	2200      	movs	r2, #0
 8007114:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800711e:	2200      	movs	r2, #0
 8007120:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 8007124:	e05e      	b.n	80071e4 <TF_AcceptChar+0x434>

        case TFState_DATA_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8007130:	b21b      	sxth	r3, r3
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	b21a      	sxth	r2, r3
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	b21b      	sxth	r3, r3
 800713a:	4313      	orrs	r3, r2
 800713c:	b21b      	sxth	r3, r3
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007146:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007150:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8007154:	3301      	adds	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007168:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800716c:	2b02      	cmp	r3, #2
 800716e:	d13b      	bne.n	80071e8 <TF_AcceptChar+0x438>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007176:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fb66 	bl	800684c <TF_CksumEnd>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800718a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                if (!tf->discard_data) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007194:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8007198:	f083 0301 	eor.w	r3, r3, #1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <TF_AcceptChar+0x418>
                    if (tf->cksum == tf->ref_cksum) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071a8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d103      	bne.n	80071c2 <TF_AcceptChar+0x412>
                        TF_HandleReceivedMessage(tf);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fc9e 	bl	8006afc <TF_HandleReceivedMessage>
 80071c0:	e002      	b.n	80071c8 <TF_AcceptChar+0x418>
                    } else {
                        TF_Error("Body cksum mismatch");
 80071c2:	480c      	ldr	r0, [pc, #48]	@ (80071f4 <TF_AcceptChar+0x444>)
 80071c4:	f000 ffc8 	bl	8008158 <puts>
                    }
                }

                TF_ResetParser(tf);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fdb4 	bl	8006d36 <TF_ResetParser>
            }
            break;
 80071ce:	e00b      	b.n	80071e8 <TF_AcceptChar+0x438>
            break;
 80071d0:	bf00      	nop
 80071d2:	e00a      	b.n	80071ea <TF_AcceptChar+0x43a>
            break;
 80071d4:	bf00      	nop
 80071d6:	e008      	b.n	80071ea <TF_AcceptChar+0x43a>
            break;
 80071d8:	bf00      	nop
 80071da:	e006      	b.n	80071ea <TF_AcceptChar+0x43a>
            break;
 80071dc:	bf00      	nop
 80071de:	e004      	b.n	80071ea <TF_AcceptChar+0x43a>
            break;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <TF_AcceptChar+0x43a>
            break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <TF_AcceptChar+0x43a>
            break;
 80071e8:	bf00      	nop
    }
    //@formatter:on
}
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	08009588 	.word	0x08009588

080071f8 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	@ 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t b = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	623b      	str	r3, [r7, #32]
    TF_CKSUM cksum = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	83fb      	strh	r3, [r7, #30]
    uint32_t pos = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 800721a:	f7ff faf3 	bl	8006804 <TF_CksumStart>
 800721e:	4603      	mov	r3, r0
 8007220:	83fb      	strh	r3, [r7, #30]

    // Gen ID
    if (msg->is_response) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <TF_ComposeHead+0x3a>
        id = msg->frame_id;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	e00f      	b.n	8007252 <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	60d1      	str	r1, [r2, #12]
 800723c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007240:	623b      	str	r3, [r7, #32]
        if (tf->peer_bit) {
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	7a1b      	ldrb	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007250:	623b      	str	r3, [r7, #32]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a3a      	ldr	r2, [r7, #32]
 8007256:	601a      	str	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 8007258:	f7ff fad4 	bl	8006804 <TF_CksumStart>
 800725c:	4603      	mov	r3, r0
 800725e:	83fb      	strh	r3, [r7, #30]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	61ba      	str	r2, [r7, #24]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	22ab      	movs	r2, #171	@ 0xab
 800726c:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 800726e:	8bfb      	ldrh	r3, [r7, #30]
 8007270:	21ab      	movs	r1, #171	@ 0xab
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff face 	bl	8006814 <TF_CksumAdd>
 8007278:	4603      	mov	r3, r0
 800727a:	83fb      	strh	r3, [r7, #30]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 800727c:	2303      	movs	r3, #3
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007282:	e01c      	b.n	80072be <TF_ComposeHead+0xc6>
 8007284:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
 8007290:	75fb      	strb	r3, [r7, #23]
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	61ba      	str	r2, [r7, #24]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4413      	add	r3, r2
 800729c:	7dfa      	ldrb	r2, [r7, #23]
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	7dfa      	ldrb	r2, [r7, #23]
 80072a2:	8bfb      	ldrh	r3, [r7, #30]
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fab4 	bl	8006814 <TF_CksumAdd>
 80072ac:	4603      	mov	r3, r0
 80072ae:	83fb      	strh	r3, [r7, #30]
 80072b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dade      	bge.n	8007284 <TF_ComposeHead+0x8c>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072cc:	e01e      	b.n	800730c <TF_ComposeHead+0x114>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	899b      	ldrh	r3, [r3, #12]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	fa42 f303 	asr.w	r3, r2, r3
 80072de:	75fb      	strb	r3, [r7, #23]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	61ba      	str	r2, [r7, #24]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4413      	add	r3, r2
 80072ea:	7dfa      	ldrb	r2, [r7, #23]
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	7dfa      	ldrb	r2, [r7, #23]
 80072f0:	8bfb      	ldrh	r3, [r7, #30]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fa8d 	bl	8006814 <TF_CksumAdd>
 80072fa:	4603      	mov	r3, r0
 80072fc:	83fb      	strh	r3, [r7, #30]
 80072fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007302:	b2db      	uxtb	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800730c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007310:	2b00      	cmp	r3, #0
 8007312:	dadc      	bge.n	80072ce <TF_ComposeHead+0xd6>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800731a:	e01e      	b.n	800735a <TF_ComposeHead+0x162>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	88db      	ldrh	r3, [r3, #6]
 8007320:	461a      	mov	r2, r3
 8007322:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	fa42 f303 	asr.w	r3, r2, r3
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	61ba      	str	r2, [r7, #24]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	4413      	add	r3, r2
 8007338:	7dfa      	ldrb	r2, [r7, #23]
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	7dfa      	ldrb	r2, [r7, #23]
 800733e:	8bfb      	ldrh	r3, [r7, #30]
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fa66 	bl	8006814 <TF_CksumAdd>
 8007348:	4603      	mov	r3, r0
 800734a:	83fb      	strh	r3, [r7, #30]
 800734c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800735a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800735e:	2b00      	cmp	r3, #0
 8007360:	dadc      	bge.n	800731c <TF_ComposeHead+0x124>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 8007362:	8bfb      	ldrh	r3, [r7, #30]
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fa71 	bl	800684c <TF_CksumEnd>
 800736a:	4603      	mov	r3, r0
 800736c:	83fb      	strh	r3, [r7, #30]
    WRITENUM(TF_CKSUM, cksum);
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007374:	e014      	b.n	80073a0 <TF_ComposeHead+0x1a8>
 8007376:	8bfa      	ldrh	r2, [r7, #30]
 8007378:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	fa42 f303 	asr.w	r3, r2, r3
 8007382:	75fb      	strb	r3, [r7, #23]
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	61ba      	str	r2, [r7, #24]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	7dfa      	ldrb	r2, [r7, #23]
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007396:	b2db      	uxtb	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80073a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dae6      	bge.n	8007376 <TF_ComposeHead+0x17e>
#endif

    return pos;
 80073a8:	69bb      	ldr	r3, [r7, #24]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3728      	adds	r7, #40	@ 0x28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b088      	sub	sp, #32
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 80073ce:	2300      	movs	r3, #0
 80073d0:	83fb      	strh	r3, [r7, #30]
 80073d2:	e019      	b.n	8007408 <TF_ComposeBody+0x56>
        b = data[i];
 80073d4:	8bfb      	ldrh	r3, [r7, #30]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	61ba      	str	r2, [r7, #24]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	7dfa      	ldrb	r2, [r7, #23]
 80073ea:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	7dfa      	ldrb	r2, [r7, #23]
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fa0d 	bl	8006814 <TF_CksumAdd>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 8007402:	8bfb      	ldrh	r3, [r7, #30]
 8007404:	3301      	adds	r3, #1
 8007406:	83fb      	strh	r3, [r7, #30]
 8007408:	8bfa      	ldrh	r2, [r7, #30]
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3e1      	bcc.n	80073d4 <TF_ComposeBody+0x22>
    }

    return pos;
 8007410:	69bb      	ldr	r3, [r7, #24]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 8007424:	2300      	movs	r3, #0
 8007426:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff fa09 	bl	800684c <TF_CksumEnd>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
 8007446:	e015      	b.n	8007474 <TF_ComposeTail+0x5a>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	fa42 f303 	asr.w	r3, r2, r3
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	613a      	str	r2, [r7, #16]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	7bfa      	ldrb	r2, [r7, #15]
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	75fb      	strb	r3, [r7, #23]
 8007474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007478:	2b00      	cmp	r3, #0
 800747a:	dae5      	bge.n	8007448 <TF_ComposeTail+0x2e>
#endif
    return pos;
 800747c:	693b      	ldr	r3, [r7, #16]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <TF_SendFrame_Begin>:
 * @param listener - response listener or NULL
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_ClaimTx(tf));
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff f987 	bl	80067a8 <TF_ClaimTx>
 800749a:	4603      	mov	r3, r0
 800749c:	f083 0301 	eor.w	r3, r3, #1
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <TF_SendFrame_Begin+0x24>
 80074a6:	2300      	movs	r3, #0
 80074a8:	e031      	b.n	800750e <TF_SendFrame_Begin+0x88>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 80074b0:	3303      	adds	r3, #3
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	4619      	mov	r1, r3
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff fe9e 	bl	80071f8 <TF_ComposeHead>
 80074bc:	4602      	mov	r2, r0
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80074c4:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    tf->tx_len = msg->len;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	899b      	ldrh	r3, [r3, #12]
 80074cc:	461a      	mov	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80074d4:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    if (listener) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00d      	beq.n	80074fa <TF_SendFrame_Begin+0x74>
        TF_TRY(TF_AddIdListener(tf, msg, listener, timeout));
 80074de:	887b      	ldrh	r3, [r7, #2]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7ff fa7f 	bl	80069e8 <TF_AddIdListener>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f083 0301 	eor.w	r3, r3, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <TF_SendFrame_Begin+0x74>
 80074f6:	2300      	movs	r3, #0
 80074f8:	e009      	b.n	800750e <TF_SendFrame_Begin+0x88>
    }

    CKSUM_RESET(tf->tx_cksum);
 80074fa:	f7ff f983 	bl	8006804 <TF_CksumStart>
 80074fe:	4603      	mov	r3, r0
 8007500:	461a      	mov	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007508:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    return true;
 800750c:	2301      	movs	r3, #1
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b088      	sub	sp, #32
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]

    remain = length;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 800752a:	e050      	b.n	80075ce <TF_SendFrame_Chunk+0xb8>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007532:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007536:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	4293      	cmp	r3, r2
 800753e:	bf28      	it	cs
 8007540:	4613      	movcs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 800754a:	3303      	adds	r3, #3
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007552:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8007556:	1898      	adds	r0, r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	18d1      	adds	r1, r2, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8007568:	332c      	adds	r3, #44	@ 0x2c
 800756a:	f7ff ff22 	bl	80073b2 <TF_ComposeBody>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007576:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800757a:	4413      	add	r3, r2
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007582:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        remain -= chunk;
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	4413      	add	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800759c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80075a0:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80075a4:	d113      	bne.n	80075ce <TF_SendFrame_Chunk+0xb8>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 80075ac:	3303      	adds	r3, #3
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80075b4:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 80075b8:	4619      	mov	r1, r3
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7fb ff42 	bl	8003444 <TF_WriteImpl>
            tf->tx_pos = 0;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80075c6:	461a      	mov	r2, r3
 80075c8:	2300      	movs	r3, #0
 80075ca:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    while (remain > 0) {
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1ab      	bne.n	800752c <TF_SendFrame_Chunk+0x16>
        }
    }
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80075ec:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d03a      	beq.n	800766a <TF_SendFrame_End+0x8c>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80075fa:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80075fe:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8007602:	2b01      	cmp	r3, #1
 8007604:	d813      	bhi.n	800762e <TF_SendFrame_End+0x50>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 800760c:	3303      	adds	r3, #3
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007614:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fb ff12 	bl	8003444 <TF_WriteImpl>
            tf->tx_pos = 0;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007626:	461a      	mov	r2, r3
 8007628:	2300      	movs	r3, #0
 800762a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8007634:	3303      	adds	r3, #3
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800763c:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8007648:	332c      	adds	r3, #44	@ 0x2c
 800764a:	4619      	mov	r1, r3
 800764c:	4610      	mov	r0, r2
 800764e:	f7ff fee4 	bl	800741a <TF_ComposeTail>
 8007652:	4602      	mov	r2, r0
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800765a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800765e:	4413      	add	r3, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007666:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8007670:	3303      	adds	r3, #3
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8007678:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fb fee0 	bl	8003444 <TF_WriteImpl>
    TF_ReleaseTx(tf);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff f8ad 	bl	80067e4 <TF_ReleaseTx>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <TF_SendFrame>:
 * @param listener - ID listener, or NULL
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
 800769e:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, timeout));
 80076a0:	887b      	ldrh	r3, [r7, #2]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff feed 	bl	8007486 <TF_SendFrame_Begin>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f083 0301 	eor.w	r3, r3, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <TF_SendFrame+0x2a>
 80076b8:	2300      	movs	r3, #0
 80076ba:	e013      	b.n	80076e4 <TF_SendFrame+0x52>
    if (msg->len == 0 || msg->data != NULL) {
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	899b      	ldrh	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <TF_SendFrame+0x3a>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <TF_SendFrame+0x50>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	899b      	ldrh	r3, [r3, #12]
 80076d4:	461a      	mov	r2, r3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff ff1d 	bl	8007516 <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff ff7e 	bl	80075de <TF_SendFrame_End>
    }
    return true;
 80076e2:	2301      	movs	r3, #1
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, 0);
 80076f6:	2300      	movs	r3, #0
 80076f8:	2200      	movs	r2, #0
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ffc8 	bl	8007692 <TF_SendFrame>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <TF_Respond>:
    return TF_SendFrame(tf, msg, listener, timeout);
}

/** Like TF_Send, but with explicit frame ID (set inside the msg object), use for responses */
bool _TF_FN TF_Respond(TinyFrame *tf, TF_Msg *msg)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
    msg->is_response = true;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	711a      	strb	r2, [r3, #4]
    return TF_Send(tf, msg);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ffe4 	bl	80076ec <TF_Send>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800772e:	b480      	push	{r7}
 8007730:	b08f      	sub	sp, #60	@ 0x3c
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	891a      	ldrh	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	8a1b      	ldrh	r3, [r3, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d301      	bcc.n	8007748 <load_descriptor_values+0x1a>
        return false;
 8007744:	2300      	movs	r3, #0
 8007746:	e156      	b.n	80079f6 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	895b      	ldrh	r3, [r3, #10]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	0a1b      	lsrs	r3, r3, #8
 800775e:	b2da      	uxtb	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d05a      	beq.n	8007824 <load_descriptor_values+0xf6>
 800776e:	2b02      	cmp	r3, #2
 8007770:	f200 8094 	bhi.w	800789c <load_descriptor_values+0x16e>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <load_descriptor_values+0x50>
 8007778:	2b01      	cmp	r3, #1
 800777a:	d01f      	beq.n	80077bc <load_descriptor_values+0x8e>
 800777c:	e08e      	b.n	800789c <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8007784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007786:	089b      	lsrs	r3, r3, #2
 8007788:	b29b      	uxth	r3, r3
 800778a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	0e1b      	lsrs	r3, r3, #24
 8007798:	b25b      	sxtb	r3, r3
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80077a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a4:	0c1b      	lsrs	r3, r3, #16
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80077aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ac:	0f1b      	lsrs	r3, r3, #28
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	825a      	strh	r2, [r3, #18]
            break;
 80077ba:	e0b4      	b.n	8007926 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	895b      	ldrh	r3, [r3, #10]
 80077c6:	3301      	adds	r3, #1
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80077d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077da:	b29a      	uxth	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80077e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	0f1b      	lsrs	r3, r3, #28
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	019b      	lsls	r3, r3, #6
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4313      	orrs	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	0f1b      	lsrs	r3, r3, #28
 8007802:	b25b      	sxtb	r3, r3
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	b29b      	uxth	r3, r3
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	0c1b      	lsrs	r3, r3, #16
 8007816:	b29b      	uxth	r3, r3
 8007818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	825a      	strh	r2, [r3, #18]
            break;
 8007822:	e080      	b.n	8007926 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	895b      	ldrh	r3, [r3, #10]
 800782e:	3301      	adds	r3, #1
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	895b      	ldrh	r3, [r3, #10]
 8007842:	3302      	adds	r3, #2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	895b      	ldrh	r3, [r3, #10]
 8007856:	3303      	adds	r3, #3
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	089b      	lsrs	r3, r3, #2
 800786e:	b29b      	uxth	r3, r3
 8007870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007874:	b29a      	uxth	r2, r3
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	0a1b      	lsrs	r3, r3, #8
 800787a:	b29b      	uxth	r3, r3
 800787c:	019b      	lsls	r3, r3, #6
 800787e:	b29b      	uxth	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	825a      	strh	r2, [r3, #18]
            break;
 800789a:	e044      	b.n	8007926 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	895b      	ldrh	r3, [r3, #10]
 80078a6:	3301      	adds	r3, #1
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	895b      	ldrh	r3, [r3, #10]
 80078ba:	3302      	adds	r3, #2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	895b      	ldrh	r3, [r3, #10]
 80078ce:	3303      	adds	r3, #3
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	895b      	ldrh	r3, [r3, #10]
 80078e2:	3304      	adds	r3, #4
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	089b      	lsrs	r3, r3, #2
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078fe:	b29a      	uxth	r2, r3
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	b29b      	uxth	r3, r3
 8007906:	019b      	lsls	r3, r3, #6
 8007908:	b29b      	uxth	r3, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	825a      	strh	r2, [r3, #18]
            break;
 8007924:	bf00      	nop
        }
    }

    if (!iter->message)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	621a      	str	r2, [r3, #32]
 800793a:	e041      	b.n	80079c0 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007942:	441a      	add	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8007948:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800794c:	2b00      	cmp	r3, #0
 800794e:	d008      	beq.n	8007962 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007958:	425b      	negs	r3, r3
 800795a:	441a      	add	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	621a      	str	r2, [r3, #32]
 8007960:	e01a      	b.n	8007998 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7d9b      	ldrb	r3, [r3, #22]
 8007966:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800796a:	2b20      	cmp	r3, #32
 800796c:	d111      	bne.n	8007992 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7d9b      	ldrb	r3, [r3, #22]
 8007972:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7d9b      	ldrb	r3, [r3, #22]
 800797e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8007982:	2b80      	cmp	r3, #128	@ 0x80
 8007984:	d105      	bne.n	8007992 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f103 0214 	add.w	r2, r3, #20
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	621a      	str	r2, [r3, #32]
 8007990:	e002      	b.n	8007998 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7d9b      	ldrb	r3, [r3, #22]
 800799c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079a0:	2b80      	cmp	r3, #128	@ 0x80
 80079a2:	d109      	bne.n	80079b8 <load_descriptor_values+0x28a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	61da      	str	r2, [r3, #28]
 80079b6:	e003      	b.n	80079c0 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7d9b      	ldrb	r3, [r3, #22]
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d005      	beq.n	80079d8 <load_descriptor_values+0x2aa>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7d9b      	ldrb	r3, [r3, #22]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	2b09      	cmp	r3, #9
 80079d6:	d10a      	bne.n	80079ee <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	89db      	ldrh	r3, [r3, #14]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80079ec:	e002      	b.n	80079f4 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 80079f4:	2301      	movs	r3, #1
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	373c      	adds	r7, #60	@ 0x3c
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
    iter->index++;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	891b      	ldrh	r3, [r3, #8]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	891a      	ldrh	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	8a1b      	ldrh	r3, [r3, #16]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d30c      	bcc.n	8007a3e <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8007a3c:	e03b      	b.n	8007ab6 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	895b      	ldrh	r3, [r3, #10]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	895a      	ldrh	r2, [r3, #10]
 8007a68:	893b      	ldrh	r3, [r7, #8]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	899b      	ldrh	r3, [r3, #12]
 8007a76:	7afa      	ldrb	r2, [r7, #11]
 8007a78:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	bf0c      	ite	eq
 8007a80:	2201      	moveq	r2, #1
 8007a82:	2200      	movne	r2, #0
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	4413      	add	r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	89da      	ldrh	r2, [r3, #14]
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d004      	beq.n	8007aa6 <advance_iterator+0xa4>
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	2b09      	cmp	r3, #9
 8007aa4:	d101      	bne.n	8007aaa <advance_iterator+0xa8>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <advance_iterator+0xaa>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4413      	add	r3, r2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	81da      	strh	r2, [r3, #14]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8007ace:	2228      	movs	r2, #40	@ 0x28
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fc42 	bl	800835c <memset>

    iter->descriptor = desc;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fe22 	bl	800772e <load_descriptor_values>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	d109      	bne.n	8007b2e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6939      	ldr	r1, [r7, #16]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff ffcd 	bl	8007ac2 <pb_field_iter_begin>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]
 8007b2c:	e008      	b.n	8007b40 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6939      	ldr	r1, [r7, #16]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff ffc3 	bl	8007ac2 <pb_field_iter_begin>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f103 020c 	add.w	r2, r3, #12
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]
    return status;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff ff50 	bl	8007a02 <advance_iterator>
    (void)load_descriptor_values(iter);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fde3 	bl	800772e <load_descriptor_values>
    return iter->index != 0;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	891b      	ldrh	r3, [r3, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bf14      	ite	ne
 8007b70:	2301      	movne	r3, #1
 8007b72:	2300      	moveq	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8a1b      	ldrh	r3, [r3, #16]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8007b94:	2301      	movs	r3, #1
 8007b96:	e044      	b.n	8007c22 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	8a9b      	ldrh	r3, [r3, #20]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d901      	bls.n	8007baa <pb_field_iter_find+0x2c>
    {
        return false;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e03b      	b.n	8007c22 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	891b      	ldrh	r3, [r3, #8]
 8007bae:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8a1b      	ldrh	r3, [r3, #16]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d204      	bcs.n	8007bc6 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	8a1a      	ldrh	r2, [r3, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ff1b 	bl	8007a02 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	895b      	ldrh	r3, [r3, #10]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	089a      	lsrs	r2, r3, #2
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	4053      	eors	r3, r2
 8007be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d110      	bne.n	8007c10 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fd9d 	bl	800772e <load_descriptor_values>

                if (iter->tag == tag &&
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8a1b      	ldrh	r3, [r3, #16]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d107      	bne.n	8007c10 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7d9b      	ldrb	r3, [r3, #22]
 8007c04:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8007c08:	2b0a      	cmp	r3, #10
 8007c0a:	d001      	beq.n	8007c10 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e008      	b.n	8007c22 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	891b      	ldrh	r3, [r3, #8]
 8007c14:	89fa      	ldrh	r2, [r7, #14]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d1d5      	bne.n	8007bc6 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fd87 	bl	800772e <load_descriptor_values>
        return false;
 8007c20:	2300      	movs	r3, #0
    }
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7d9b      	ldrb	r3, [r3, #22]
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	2b0a      	cmp	r3, #10
 8007c3c:	d101      	bne.n	8007c42 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e022      	b.n	8007c88 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	891b      	ldrh	r3, [r3, #8]
 8007c46:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff feda 	bl	8007a02 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	895b      	ldrh	r3, [r3, #10]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	2b0a      	cmp	r3, #10
 8007c6a:	d104      	bne.n	8007c76 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff fd5e 	bl	800772e <load_descriptor_values>
 8007c72:	4603      	mov	r3, r0
 8007c74:	e008      	b.n	8007c88 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	891b      	ldrh	r3, [r3, #8]
 8007c7a:	89fa      	ldrh	r2, [r7, #14]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d1e3      	bne.n	8007c48 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fd54 	bl	800772e <load_descriptor_values>
        return false;
 8007c86:	2300      	movs	r3, #0
    }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ffea 	bl	8007c90 <pb_const_cast>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff fefd 	bl	8007ac2 <pb_field_iter_begin>
 8007cc8:	4603      	mov	r3, r0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8007cdc:	6838      	ldr	r0, [r7, #0]
 8007cde:	f7ff ffd7 	bl	8007c90 <pb_const_cast>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ff04 	bl	8007af4 <pb_field_iter_begin_extension>
 8007cec:	4603      	mov	r3, r0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8a5b      	ldrh	r3, [r3, #18]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d125      	bne.n	8007d56 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01f      	beq.n	8007d56 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00c      	beq.n	8007d36 <pb_default_field_callback+0x40>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	3204      	adds	r2, #4
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	4798      	blx	r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	e010      	b.n	8007d58 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00c      	beq.n	8007d56 <pb_default_field_callback+0x60>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	3204      	adds	r2, #4
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	68b8      	ldr	r0, [r7, #8]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	e000      	b.n	8007d58 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8007d56:	2301      	movs	r3, #1

}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <calloc>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	@ (8007d6c <calloc+0xc>)
 8007d62:	460a      	mov	r2, r1
 8007d64:	4601      	mov	r1, r0
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	f000 b802 	b.w	8007d70 <_calloc_r>
 8007d6c:	20000024 	.word	0x20000024

08007d70 <_calloc_r>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	fba1 5402 	umull	r5, r4, r1, r2
 8007d76:	b934      	cbnz	r4, 8007d86 <_calloc_r+0x16>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f000 f837 	bl	8007dec <_malloc_r>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	b928      	cbnz	r0, 8007d8e <_calloc_r+0x1e>
 8007d82:	4630      	mov	r0, r6
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	220c      	movs	r2, #12
 8007d88:	6002      	str	r2, [r0, #0]
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	e7f9      	b.n	8007d82 <_calloc_r+0x12>
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4621      	mov	r1, r4
 8007d92:	f000 fae3 	bl	800835c <memset>
 8007d96:	e7f4      	b.n	8007d82 <_calloc_r+0x12>

08007d98 <free>:
 8007d98:	4b02      	ldr	r3, [pc, #8]	@ (8007da4 <free+0xc>)
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	f000 bb77 	b.w	8008490 <_free_r>
 8007da2:	bf00      	nop
 8007da4:	20000024 	.word	0x20000024

08007da8 <sbrk_aligned>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4e0f      	ldr	r6, [pc, #60]	@ (8007de8 <sbrk_aligned+0x40>)
 8007dac:	460c      	mov	r4, r1
 8007dae:	6831      	ldr	r1, [r6, #0]
 8007db0:	4605      	mov	r5, r0
 8007db2:	b911      	cbnz	r1, 8007dba <sbrk_aligned+0x12>
 8007db4:	f000 fb0e 	bl	80083d4 <_sbrk_r>
 8007db8:	6030      	str	r0, [r6, #0]
 8007dba:	4621      	mov	r1, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 fb09 	bl	80083d4 <_sbrk_r>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d103      	bne.n	8007dce <sbrk_aligned+0x26>
 8007dc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007dca:	4620      	mov	r0, r4
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
 8007dce:	1cc4      	adds	r4, r0, #3
 8007dd0:	f024 0403 	bic.w	r4, r4, #3
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d0f8      	beq.n	8007dca <sbrk_aligned+0x22>
 8007dd8:	1a21      	subs	r1, r4, r0
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 fafa 	bl	80083d4 <_sbrk_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1f2      	bne.n	8007dca <sbrk_aligned+0x22>
 8007de4:	e7ef      	b.n	8007dc6 <sbrk_aligned+0x1e>
 8007de6:	bf00      	nop
 8007de8:	20000da4 	.word	0x20000da4

08007dec <_malloc_r>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	1ccd      	adds	r5, r1, #3
 8007df2:	f025 0503 	bic.w	r5, r5, #3
 8007df6:	3508      	adds	r5, #8
 8007df8:	2d0c      	cmp	r5, #12
 8007dfa:	bf38      	it	cc
 8007dfc:	250c      	movcc	r5, #12
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	4606      	mov	r6, r0
 8007e02:	db01      	blt.n	8007e08 <_malloc_r+0x1c>
 8007e04:	42a9      	cmp	r1, r5
 8007e06:	d904      	bls.n	8007e12 <_malloc_r+0x26>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee8 <_malloc_r+0xfc>
 8007e16:	f000 f869 	bl	8007eec <__malloc_lock>
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	461c      	mov	r4, r3
 8007e20:	bb44      	cbnz	r4, 8007e74 <_malloc_r+0x88>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff ffbf 	bl	8007da8 <sbrk_aligned>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	d158      	bne.n	8007ee2 <_malloc_r+0xf6>
 8007e30:	f8d8 4000 	ldr.w	r4, [r8]
 8007e34:	4627      	mov	r7, r4
 8007e36:	2f00      	cmp	r7, #0
 8007e38:	d143      	bne.n	8007ec2 <_malloc_r+0xd6>
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d04b      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	4639      	mov	r1, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	eb04 0903 	add.w	r9, r4, r3
 8007e48:	f000 fac4 	bl	80083d4 <_sbrk_r>
 8007e4c:	4581      	cmp	r9, r0
 8007e4e:	d142      	bne.n	8007ed6 <_malloc_r+0xea>
 8007e50:	6821      	ldr	r1, [r4, #0]
 8007e52:	1a6d      	subs	r5, r5, r1
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f7ff ffa6 	bl	8007da8 <sbrk_aligned>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d03a      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	442b      	add	r3, r5
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	bb62      	cbnz	r2, 8007ec8 <_malloc_r+0xdc>
 8007e6e:	f8c8 7000 	str.w	r7, [r8]
 8007e72:	e00f      	b.n	8007e94 <_malloc_r+0xa8>
 8007e74:	6822      	ldr	r2, [r4, #0]
 8007e76:	1b52      	subs	r2, r2, r5
 8007e78:	d420      	bmi.n	8007ebc <_malloc_r+0xd0>
 8007e7a:	2a0b      	cmp	r2, #11
 8007e7c:	d917      	bls.n	8007eae <_malloc_r+0xc2>
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	6025      	str	r5, [r4, #0]
 8007e84:	bf18      	it	ne
 8007e86:	6059      	strne	r1, [r3, #4]
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	bf08      	it	eq
 8007e8c:	f8c8 1000 	streq.w	r1, [r8]
 8007e90:	5162      	str	r2, [r4, r5]
 8007e92:	604b      	str	r3, [r1, #4]
 8007e94:	4630      	mov	r0, r6
 8007e96:	f000 f82f 	bl	8007ef8 <__malloc_unlock>
 8007e9a:	f104 000b 	add.w	r0, r4, #11
 8007e9e:	1d23      	adds	r3, r4, #4
 8007ea0:	f020 0007 	bic.w	r0, r0, #7
 8007ea4:	1ac2      	subs	r2, r0, r3
 8007ea6:	bf1c      	itt	ne
 8007ea8:	1a1b      	subne	r3, r3, r0
 8007eaa:	50a3      	strne	r3, [r4, r2]
 8007eac:	e7af      	b.n	8007e0e <_malloc_r+0x22>
 8007eae:	6862      	ldr	r2, [r4, #4]
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	bf0c      	ite	eq
 8007eb4:	f8c8 2000 	streq.w	r2, [r8]
 8007eb8:	605a      	strne	r2, [r3, #4]
 8007eba:	e7eb      	b.n	8007e94 <_malloc_r+0xa8>
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	6864      	ldr	r4, [r4, #4]
 8007ec0:	e7ae      	b.n	8007e20 <_malloc_r+0x34>
 8007ec2:	463c      	mov	r4, r7
 8007ec4:	687f      	ldr	r7, [r7, #4]
 8007ec6:	e7b6      	b.n	8007e36 <_malloc_r+0x4a>
 8007ec8:	461a      	mov	r2, r3
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d1fb      	bne.n	8007ec8 <_malloc_r+0xdc>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6053      	str	r3, [r2, #4]
 8007ed4:	e7de      	b.n	8007e94 <_malloc_r+0xa8>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	4630      	mov	r0, r6
 8007edc:	f000 f80c 	bl	8007ef8 <__malloc_unlock>
 8007ee0:	e794      	b.n	8007e0c <_malloc_r+0x20>
 8007ee2:	6005      	str	r5, [r0, #0]
 8007ee4:	e7d6      	b.n	8007e94 <_malloc_r+0xa8>
 8007ee6:	bf00      	nop
 8007ee8:	20000da8 	.word	0x20000da8

08007eec <__malloc_lock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	@ (8007ef4 <__malloc_lock+0x8>)
 8007eee:	f000 babe 	b.w	800846e <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	20000eec 	.word	0x20000eec

08007ef8 <__malloc_unlock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	@ (8007f00 <__malloc_unlock+0x8>)
 8007efa:	f000 bab9 	b.w	8008470 <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	20000eec 	.word	0x20000eec

08007f04 <std>:
 8007f04:	2300      	movs	r3, #0
 8007f06:	b510      	push	{r4, lr}
 8007f08:	4604      	mov	r4, r0
 8007f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f12:	6083      	str	r3, [r0, #8]
 8007f14:	8181      	strh	r1, [r0, #12]
 8007f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f18:	81c2      	strh	r2, [r0, #14]
 8007f1a:	6183      	str	r3, [r0, #24]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	2208      	movs	r2, #8
 8007f20:	305c      	adds	r0, #92	@ 0x5c
 8007f22:	f000 fa1b 	bl	800835c <memset>
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <std+0x58>)
 8007f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <std+0x5c>)
 8007f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x60>)
 8007f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <std+0x64>)
 8007f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <std+0x68>)
 8007f38:	6224      	str	r4, [r4, #32]
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d006      	beq.n	8007f4c <std+0x48>
 8007f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f42:	4294      	cmp	r4, r2
 8007f44:	d002      	beq.n	8007f4c <std+0x48>
 8007f46:	33d0      	adds	r3, #208	@ 0xd0
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	d105      	bne.n	8007f58 <std+0x54>
 8007f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f54:	f000 ba8a 	b.w	800846c <__retarget_lock_init_recursive>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	080081ad 	.word	0x080081ad
 8007f60:	080081cf 	.word	0x080081cf
 8007f64:	08008207 	.word	0x08008207
 8007f68:	0800822b 	.word	0x0800822b
 8007f6c:	20000dac 	.word	0x20000dac

08007f70 <stdio_exit_handler>:
 8007f70:	4a02      	ldr	r2, [pc, #8]	@ (8007f7c <stdio_exit_handler+0xc>)
 8007f72:	4903      	ldr	r1, [pc, #12]	@ (8007f80 <stdio_exit_handler+0x10>)
 8007f74:	4803      	ldr	r0, [pc, #12]	@ (8007f84 <stdio_exit_handler+0x14>)
 8007f76:	f000 b869 	b.w	800804c <_fwalk_sglue>
 8007f7a:	bf00      	nop
 8007f7c:	20000018 	.word	0x20000018
 8007f80:	08008e79 	.word	0x08008e79
 8007f84:	20000028 	.word	0x20000028

08007f88 <cleanup_stdio>:
 8007f88:	6841      	ldr	r1, [r0, #4]
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fbc <cleanup_stdio+0x34>)
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	d001      	beq.n	8007f98 <cleanup_stdio+0x10>
 8007f94:	f000 ff70 	bl	8008e78 <_fflush_r>
 8007f98:	68a1      	ldr	r1, [r4, #8]
 8007f9a:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <cleanup_stdio+0x38>)
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d002      	beq.n	8007fa6 <cleanup_stdio+0x1e>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 ff69 	bl	8008e78 <_fflush_r>
 8007fa6:	68e1      	ldr	r1, [r4, #12]
 8007fa8:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <cleanup_stdio+0x3c>)
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d004      	beq.n	8007fb8 <cleanup_stdio+0x30>
 8007fae:	4620      	mov	r0, r4
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f000 bf60 	b.w	8008e78 <_fflush_r>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000dac 	.word	0x20000dac
 8007fc0:	20000e14 	.word	0x20000e14
 8007fc4:	20000e7c 	.word	0x20000e7c

08007fc8 <global_stdio_init.part.0>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff8 <global_stdio_init.part.0+0x30>)
 8007fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8007ffc <global_stdio_init.part.0+0x34>)
 8007fce:	4a0c      	ldr	r2, [pc, #48]	@ (8008000 <global_stdio_init.part.0+0x38>)
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2104      	movs	r1, #4
 8007fd8:	f7ff ff94 	bl	8007f04 <std>
 8007fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	2109      	movs	r1, #9
 8007fe4:	f7ff ff8e 	bl	8007f04 <std>
 8007fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fec:	2202      	movs	r2, #2
 8007fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff2:	2112      	movs	r1, #18
 8007ff4:	f7ff bf86 	b.w	8007f04 <std>
 8007ff8:	20000ee4 	.word	0x20000ee4
 8007ffc:	20000dac 	.word	0x20000dac
 8008000:	08007f71 	.word	0x08007f71

08008004 <__sfp_lock_acquire>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__sfp_lock_acquire+0x8>)
 8008006:	f000 ba32 	b.w	800846e <__retarget_lock_acquire_recursive>
 800800a:	bf00      	nop
 800800c:	20000eed 	.word	0x20000eed

08008010 <__sfp_lock_release>:
 8008010:	4801      	ldr	r0, [pc, #4]	@ (8008018 <__sfp_lock_release+0x8>)
 8008012:	f000 ba2d 	b.w	8008470 <__retarget_lock_release_recursive>
 8008016:	bf00      	nop
 8008018:	20000eed 	.word	0x20000eed

0800801c <__sinit>:
 800801c:	b510      	push	{r4, lr}
 800801e:	4604      	mov	r4, r0
 8008020:	f7ff fff0 	bl	8008004 <__sfp_lock_acquire>
 8008024:	6a23      	ldr	r3, [r4, #32]
 8008026:	b11b      	cbz	r3, 8008030 <__sinit+0x14>
 8008028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800802c:	f7ff bff0 	b.w	8008010 <__sfp_lock_release>
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <__sinit+0x28>)
 8008032:	6223      	str	r3, [r4, #32]
 8008034:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <__sinit+0x2c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f5      	bne.n	8008028 <__sinit+0xc>
 800803c:	f7ff ffc4 	bl	8007fc8 <global_stdio_init.part.0>
 8008040:	e7f2      	b.n	8008028 <__sinit+0xc>
 8008042:	bf00      	nop
 8008044:	08007f89 	.word	0x08007f89
 8008048:	20000ee4 	.word	0x20000ee4

0800804c <_fwalk_sglue>:
 800804c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008050:	4607      	mov	r7, r0
 8008052:	4688      	mov	r8, r1
 8008054:	4614      	mov	r4, r2
 8008056:	2600      	movs	r6, #0
 8008058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800805c:	f1b9 0901 	subs.w	r9, r9, #1
 8008060:	d505      	bpl.n	800806e <_fwalk_sglue+0x22>
 8008062:	6824      	ldr	r4, [r4, #0]
 8008064:	2c00      	cmp	r4, #0
 8008066:	d1f7      	bne.n	8008058 <_fwalk_sglue+0xc>
 8008068:	4630      	mov	r0, r6
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d907      	bls.n	8008084 <_fwalk_sglue+0x38>
 8008074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008078:	3301      	adds	r3, #1
 800807a:	d003      	beq.n	8008084 <_fwalk_sglue+0x38>
 800807c:	4629      	mov	r1, r5
 800807e:	4638      	mov	r0, r7
 8008080:	47c0      	blx	r8
 8008082:	4306      	orrs	r6, r0
 8008084:	3568      	adds	r5, #104	@ 0x68
 8008086:	e7e9      	b.n	800805c <_fwalk_sglue+0x10>

08008088 <iprintf>:
 8008088:	b40f      	push	{r0, r1, r2, r3}
 800808a:	b507      	push	{r0, r1, r2, lr}
 800808c:	4906      	ldr	r1, [pc, #24]	@ (80080a8 <iprintf+0x20>)
 800808e:	ab04      	add	r3, sp, #16
 8008090:	6808      	ldr	r0, [r1, #0]
 8008092:	f853 2b04 	ldr.w	r2, [r3], #4
 8008096:	6881      	ldr	r1, [r0, #8]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	f000 fbc5 	bl	8008828 <_vfiprintf_r>
 800809e:	b003      	add	sp, #12
 80080a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a4:	b004      	add	sp, #16
 80080a6:	4770      	bx	lr
 80080a8:	20000024 	.word	0x20000024

080080ac <_puts_r>:
 80080ac:	6a03      	ldr	r3, [r0, #32]
 80080ae:	b570      	push	{r4, r5, r6, lr}
 80080b0:	6884      	ldr	r4, [r0, #8]
 80080b2:	4605      	mov	r5, r0
 80080b4:	460e      	mov	r6, r1
 80080b6:	b90b      	cbnz	r3, 80080bc <_puts_r+0x10>
 80080b8:	f7ff ffb0 	bl	800801c <__sinit>
 80080bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_puts_r+0x22>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	0598      	lsls	r0, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_puts_r+0x22>
 80080c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ca:	f000 f9d0 	bl	800846e <__retarget_lock_acquire_recursive>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	0719      	lsls	r1, r3, #28
 80080d2:	d502      	bpl.n	80080da <_puts_r+0x2e>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d135      	bne.n	8008146 <_puts_r+0x9a>
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f8e7 	bl	80082b0 <__swsetup_r>
 80080e2:	b380      	cbz	r0, 8008146 <_puts_r+0x9a>
 80080e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80080e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ea:	07da      	lsls	r2, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_puts_r+0x4e>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	059b      	lsls	r3, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_puts_r+0x4e>
 80080f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f6:	f000 f9bb 	bl	8008470 <__retarget_lock_release_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da04      	bge.n	800810c <_puts_r+0x60>
 8008102:	69a2      	ldr	r2, [r4, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	dc17      	bgt.n	8008138 <_puts_r+0x8c>
 8008108:	290a      	cmp	r1, #10
 800810a:	d015      	beq.n	8008138 <_puts_r+0x8c>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	7019      	strb	r1, [r3, #0]
 8008114:	68a3      	ldr	r3, [r4, #8]
 8008116:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800811a:	3b01      	subs	r3, #1
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	2900      	cmp	r1, #0
 8008120:	d1ed      	bne.n	80080fe <_puts_r+0x52>
 8008122:	2b00      	cmp	r3, #0
 8008124:	da11      	bge.n	800814a <_puts_r+0x9e>
 8008126:	4622      	mov	r2, r4
 8008128:	210a      	movs	r1, #10
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f881 	bl	8008232 <__swbuf_r>
 8008130:	3001      	adds	r0, #1
 8008132:	d0d7      	beq.n	80080e4 <_puts_r+0x38>
 8008134:	250a      	movs	r5, #10
 8008136:	e7d7      	b.n	80080e8 <_puts_r+0x3c>
 8008138:	4622      	mov	r2, r4
 800813a:	4628      	mov	r0, r5
 800813c:	f000 f879 	bl	8008232 <__swbuf_r>
 8008140:	3001      	adds	r0, #1
 8008142:	d1e7      	bne.n	8008114 <_puts_r+0x68>
 8008144:	e7ce      	b.n	80080e4 <_puts_r+0x38>
 8008146:	3e01      	subs	r6, #1
 8008148:	e7e4      	b.n	8008114 <_puts_r+0x68>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	220a      	movs	r2, #10
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e7ee      	b.n	8008134 <_puts_r+0x88>
	...

08008158 <puts>:
 8008158:	4b02      	ldr	r3, [pc, #8]	@ (8008164 <puts+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f7ff bfa5 	b.w	80080ac <_puts_r>
 8008162:	bf00      	nop
 8008164:	20000024 	.word	0x20000024

08008168 <siprintf>:
 8008168:	b40e      	push	{r1, r2, r3}
 800816a:	b510      	push	{r4, lr}
 800816c:	b09d      	sub	sp, #116	@ 0x74
 800816e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008170:	9002      	str	r0, [sp, #8]
 8008172:	9006      	str	r0, [sp, #24]
 8008174:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008178:	480a      	ldr	r0, [pc, #40]	@ (80081a4 <siprintf+0x3c>)
 800817a:	9107      	str	r1, [sp, #28]
 800817c:	9104      	str	r1, [sp, #16]
 800817e:	490a      	ldr	r1, [pc, #40]	@ (80081a8 <siprintf+0x40>)
 8008180:	f853 2b04 	ldr.w	r2, [r3], #4
 8008184:	9105      	str	r1, [sp, #20]
 8008186:	2400      	movs	r4, #0
 8008188:	a902      	add	r1, sp, #8
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008190:	f000 fa24 	bl	80085dc <_svfiprintf_r>
 8008194:	9b02      	ldr	r3, [sp, #8]
 8008196:	701c      	strb	r4, [r3, #0]
 8008198:	b01d      	add	sp, #116	@ 0x74
 800819a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800819e:	b003      	add	sp, #12
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000024 	.word	0x20000024
 80081a8:	ffff0208 	.word	0xffff0208

080081ac <__sread>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	460c      	mov	r4, r1
 80081b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b4:	f000 f8fc 	bl	80083b0 <_read_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	bfab      	itete	ge
 80081bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081be:	89a3      	ldrhlt	r3, [r4, #12]
 80081c0:	181b      	addge	r3, r3, r0
 80081c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081c6:	bfac      	ite	ge
 80081c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081ca:	81a3      	strhlt	r3, [r4, #12]
 80081cc:	bd10      	pop	{r4, pc}

080081ce <__swrite>:
 80081ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d2:	461f      	mov	r7, r3
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	05db      	lsls	r3, r3, #23
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	4616      	mov	r6, r2
 80081de:	d505      	bpl.n	80081ec <__swrite+0x1e>
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	2302      	movs	r3, #2
 80081e6:	2200      	movs	r2, #0
 80081e8:	f000 f8d0 	bl	800838c <_lseek_r>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	4632      	mov	r2, r6
 80081fa:	463b      	mov	r3, r7
 80081fc:	4628      	mov	r0, r5
 80081fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	f000 b8f7 	b.w	80083f4 <_write_r>

08008206 <__sseek>:
 8008206:	b510      	push	{r4, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820e:	f000 f8bd 	bl	800838c <_lseek_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	bf15      	itete	ne
 8008218:	6560      	strne	r0, [r4, #84]	@ 0x54
 800821a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800821e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008222:	81a3      	strheq	r3, [r4, #12]
 8008224:	bf18      	it	ne
 8008226:	81a3      	strhne	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__sclose>:
 800822a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822e:	f000 b89d 	b.w	800836c <_close_r>

08008232 <__swbuf_r>:
 8008232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008234:	460e      	mov	r6, r1
 8008236:	4614      	mov	r4, r2
 8008238:	4605      	mov	r5, r0
 800823a:	b118      	cbz	r0, 8008244 <__swbuf_r+0x12>
 800823c:	6a03      	ldr	r3, [r0, #32]
 800823e:	b90b      	cbnz	r3, 8008244 <__swbuf_r+0x12>
 8008240:	f7ff feec 	bl	800801c <__sinit>
 8008244:	69a3      	ldr	r3, [r4, #24]
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	071a      	lsls	r2, r3, #28
 800824c:	d501      	bpl.n	8008252 <__swbuf_r+0x20>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	b943      	cbnz	r3, 8008264 <__swbuf_r+0x32>
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f000 f82b 	bl	80082b0 <__swsetup_r>
 800825a:	b118      	cbz	r0, 8008264 <__swbuf_r+0x32>
 800825c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008260:	4638      	mov	r0, r7
 8008262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	1a98      	subs	r0, r3, r2
 800826a:	6963      	ldr	r3, [r4, #20]
 800826c:	b2f6      	uxtb	r6, r6
 800826e:	4283      	cmp	r3, r0
 8008270:	4637      	mov	r7, r6
 8008272:	dc05      	bgt.n	8008280 <__swbuf_r+0x4e>
 8008274:	4621      	mov	r1, r4
 8008276:	4628      	mov	r0, r5
 8008278:	f000 fdfe 	bl	8008e78 <_fflush_r>
 800827c:	2800      	cmp	r0, #0
 800827e:	d1ed      	bne.n	800825c <__swbuf_r+0x2a>
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	3b01      	subs	r3, #1
 8008284:	60a3      	str	r3, [r4, #8]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	6022      	str	r2, [r4, #0]
 800828c:	701e      	strb	r6, [r3, #0]
 800828e:	6962      	ldr	r2, [r4, #20]
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	429a      	cmp	r2, r3
 8008294:	d004      	beq.n	80082a0 <__swbuf_r+0x6e>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	07db      	lsls	r3, r3, #31
 800829a:	d5e1      	bpl.n	8008260 <__swbuf_r+0x2e>
 800829c:	2e0a      	cmp	r6, #10
 800829e:	d1df      	bne.n	8008260 <__swbuf_r+0x2e>
 80082a0:	4621      	mov	r1, r4
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 fde8 	bl	8008e78 <_fflush_r>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d0d9      	beq.n	8008260 <__swbuf_r+0x2e>
 80082ac:	e7d6      	b.n	800825c <__swbuf_r+0x2a>
	...

080082b0 <__swsetup_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4b29      	ldr	r3, [pc, #164]	@ (8008358 <__swsetup_r+0xa8>)
 80082b4:	4605      	mov	r5, r0
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	460c      	mov	r4, r1
 80082ba:	b118      	cbz	r0, 80082c4 <__swsetup_r+0x14>
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	b90b      	cbnz	r3, 80082c4 <__swsetup_r+0x14>
 80082c0:	f7ff feac 	bl	800801c <__sinit>
 80082c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c8:	0719      	lsls	r1, r3, #28
 80082ca:	d422      	bmi.n	8008312 <__swsetup_r+0x62>
 80082cc:	06da      	lsls	r2, r3, #27
 80082ce:	d407      	bmi.n	80082e0 <__swsetup_r+0x30>
 80082d0:	2209      	movs	r2, #9
 80082d2:	602a      	str	r2, [r5, #0]
 80082d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082de:	e033      	b.n	8008348 <__swsetup_r+0x98>
 80082e0:	0758      	lsls	r0, r3, #29
 80082e2:	d512      	bpl.n	800830a <__swsetup_r+0x5a>
 80082e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082e6:	b141      	cbz	r1, 80082fa <__swsetup_r+0x4a>
 80082e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ec:	4299      	cmp	r1, r3
 80082ee:	d002      	beq.n	80082f6 <__swsetup_r+0x46>
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f8cd 	bl	8008490 <_free_r>
 80082f6:	2300      	movs	r3, #0
 80082f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	2300      	movs	r3, #0
 8008304:	6063      	str	r3, [r4, #4]
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f043 0308 	orr.w	r3, r3, #8
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	b94b      	cbnz	r3, 800832a <__swsetup_r+0x7a>
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800831c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008320:	d003      	beq.n	800832a <__swsetup_r+0x7a>
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 fdf5 	bl	8008f14 <__smakebuf_r>
 800832a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832e:	f013 0201 	ands.w	r2, r3, #1
 8008332:	d00a      	beq.n	800834a <__swsetup_r+0x9a>
 8008334:	2200      	movs	r2, #0
 8008336:	60a2      	str	r2, [r4, #8]
 8008338:	6962      	ldr	r2, [r4, #20]
 800833a:	4252      	negs	r2, r2
 800833c:	61a2      	str	r2, [r4, #24]
 800833e:	6922      	ldr	r2, [r4, #16]
 8008340:	b942      	cbnz	r2, 8008354 <__swsetup_r+0xa4>
 8008342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008346:	d1c5      	bne.n	80082d4 <__swsetup_r+0x24>
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	0799      	lsls	r1, r3, #30
 800834c:	bf58      	it	pl
 800834e:	6962      	ldrpl	r2, [r4, #20]
 8008350:	60a2      	str	r2, [r4, #8]
 8008352:	e7f4      	b.n	800833e <__swsetup_r+0x8e>
 8008354:	2000      	movs	r0, #0
 8008356:	e7f7      	b.n	8008348 <__swsetup_r+0x98>
 8008358:	20000024 	.word	0x20000024

0800835c <memset>:
 800835c:	4402      	add	r2, r0
 800835e:	4603      	mov	r3, r0
 8008360:	4293      	cmp	r3, r2
 8008362:	d100      	bne.n	8008366 <memset+0xa>
 8008364:	4770      	bx	lr
 8008366:	f803 1b01 	strb.w	r1, [r3], #1
 800836a:	e7f9      	b.n	8008360 <memset+0x4>

0800836c <_close_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d06      	ldr	r5, [pc, #24]	@ (8008388 <_close_r+0x1c>)
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	f7f8 fd73 	bl	8000e62 <_close>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_close_r+0x1a>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_close_r+0x1a>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	20000ee8 	.word	0x20000ee8

0800838c <_lseek_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d07      	ldr	r5, [pc, #28]	@ (80083ac <_lseek_r+0x20>)
 8008390:	4604      	mov	r4, r0
 8008392:	4608      	mov	r0, r1
 8008394:	4611      	mov	r1, r2
 8008396:	2200      	movs	r2, #0
 8008398:	602a      	str	r2, [r5, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f7f8 fd88 	bl	8000eb0 <_lseek>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_lseek_r+0x1e>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_lseek_r+0x1e>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	20000ee8 	.word	0x20000ee8

080083b0 <_read_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d07      	ldr	r5, [pc, #28]	@ (80083d0 <_read_r+0x20>)
 80083b4:	4604      	mov	r4, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7f8 fd16 	bl	8000df0 <_read>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_read_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_read_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20000ee8 	.word	0x20000ee8

080083d4 <_sbrk_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d06      	ldr	r5, [pc, #24]	@ (80083f0 <_sbrk_r+0x1c>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7f8 fd74 	bl	8000ecc <_sbrk>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_sbrk_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_sbrk_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20000ee8 	.word	0x20000ee8

080083f4 <_write_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d07      	ldr	r5, [pc, #28]	@ (8008414 <_write_r+0x20>)
 80083f8:	4604      	mov	r4, r0
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7f8 fd11 	bl	8000e2a <_write>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_write_r+0x1e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_write_r+0x1e>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000ee8 	.word	0x20000ee8

08008418 <__errno>:
 8008418:	4b01      	ldr	r3, [pc, #4]	@ (8008420 <__errno+0x8>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000024 	.word	0x20000024

08008424 <__libc_init_array>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4d0d      	ldr	r5, [pc, #52]	@ (800845c <__libc_init_array+0x38>)
 8008428:	4c0d      	ldr	r4, [pc, #52]	@ (8008460 <__libc_init_array+0x3c>)
 800842a:	1b64      	subs	r4, r4, r5
 800842c:	10a4      	asrs	r4, r4, #2
 800842e:	2600      	movs	r6, #0
 8008430:	42a6      	cmp	r6, r4
 8008432:	d109      	bne.n	8008448 <__libc_init_array+0x24>
 8008434:	4d0b      	ldr	r5, [pc, #44]	@ (8008464 <__libc_init_array+0x40>)
 8008436:	4c0c      	ldr	r4, [pc, #48]	@ (8008468 <__libc_init_array+0x44>)
 8008438:	f000 fe1a 	bl	8009070 <_init>
 800843c:	1b64      	subs	r4, r4, r5
 800843e:	10a4      	asrs	r4, r4, #2
 8008440:	2600      	movs	r6, #0
 8008442:	42a6      	cmp	r6, r4
 8008444:	d105      	bne.n	8008452 <__libc_init_array+0x2e>
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	f855 3b04 	ldr.w	r3, [r5], #4
 800844c:	4798      	blx	r3
 800844e:	3601      	adds	r6, #1
 8008450:	e7ee      	b.n	8008430 <__libc_init_array+0xc>
 8008452:	f855 3b04 	ldr.w	r3, [r5], #4
 8008456:	4798      	blx	r3
 8008458:	3601      	adds	r6, #1
 800845a:	e7f2      	b.n	8008442 <__libc_init_array+0x1e>
 800845c:	08009a24 	.word	0x08009a24
 8008460:	08009a24 	.word	0x08009a24
 8008464:	08009a24 	.word	0x08009a24
 8008468:	08009a28 	.word	0x08009a28

0800846c <__retarget_lock_init_recursive>:
 800846c:	4770      	bx	lr

0800846e <__retarget_lock_acquire_recursive>:
 800846e:	4770      	bx	lr

08008470 <__retarget_lock_release_recursive>:
 8008470:	4770      	bx	lr

08008472 <memcpy>:
 8008472:	440a      	add	r2, r1
 8008474:	4291      	cmp	r1, r2
 8008476:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800847a:	d100      	bne.n	800847e <memcpy+0xc>
 800847c:	4770      	bx	lr
 800847e:	b510      	push	{r4, lr}
 8008480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008488:	4291      	cmp	r1, r2
 800848a:	d1f9      	bne.n	8008480 <memcpy+0xe>
 800848c:	bd10      	pop	{r4, pc}
	...

08008490 <_free_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4605      	mov	r5, r0
 8008494:	2900      	cmp	r1, #0
 8008496:	d041      	beq.n	800851c <_free_r+0x8c>
 8008498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849c:	1f0c      	subs	r4, r1, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfb8      	it	lt
 80084a2:	18e4      	addlt	r4, r4, r3
 80084a4:	f7ff fd22 	bl	8007eec <__malloc_lock>
 80084a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008520 <_free_r+0x90>)
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	b933      	cbnz	r3, 80084bc <_free_r+0x2c>
 80084ae:	6063      	str	r3, [r4, #4]
 80084b0:	6014      	str	r4, [r2, #0]
 80084b2:	4628      	mov	r0, r5
 80084b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b8:	f7ff bd1e 	b.w	8007ef8 <__malloc_unlock>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d908      	bls.n	80084d2 <_free_r+0x42>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	1821      	adds	r1, r4, r0
 80084c4:	428b      	cmp	r3, r1
 80084c6:	bf01      	itttt	eq
 80084c8:	6819      	ldreq	r1, [r3, #0]
 80084ca:	685b      	ldreq	r3, [r3, #4]
 80084cc:	1809      	addeq	r1, r1, r0
 80084ce:	6021      	streq	r1, [r4, #0]
 80084d0:	e7ed      	b.n	80084ae <_free_r+0x1e>
 80084d2:	461a      	mov	r2, r3
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b10b      	cbz	r3, 80084dc <_free_r+0x4c>
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d9fa      	bls.n	80084d2 <_free_r+0x42>
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	1850      	adds	r0, r2, r1
 80084e0:	42a0      	cmp	r0, r4
 80084e2:	d10b      	bne.n	80084fc <_free_r+0x6c>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	4401      	add	r1, r0
 80084e8:	1850      	adds	r0, r2, r1
 80084ea:	4283      	cmp	r3, r0
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	d1e0      	bne.n	80084b2 <_free_r+0x22>
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	6053      	str	r3, [r2, #4]
 80084f6:	4408      	add	r0, r1
 80084f8:	6010      	str	r0, [r2, #0]
 80084fa:	e7da      	b.n	80084b2 <_free_r+0x22>
 80084fc:	d902      	bls.n	8008504 <_free_r+0x74>
 80084fe:	230c      	movs	r3, #12
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	e7d6      	b.n	80084b2 <_free_r+0x22>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	1821      	adds	r1, r4, r0
 8008508:	428b      	cmp	r3, r1
 800850a:	bf04      	itt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	6063      	str	r3, [r4, #4]
 8008512:	bf04      	itt	eq
 8008514:	1809      	addeq	r1, r1, r0
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	6054      	str	r4, [r2, #4]
 800851a:	e7ca      	b.n	80084b2 <_free_r+0x22>
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	bf00      	nop
 8008520:	20000da8 	.word	0x20000da8

08008524 <__ssputs_r>:
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	688e      	ldr	r6, [r1, #8]
 800852a:	461f      	mov	r7, r3
 800852c:	42be      	cmp	r6, r7
 800852e:	680b      	ldr	r3, [r1, #0]
 8008530:	4682      	mov	sl, r0
 8008532:	460c      	mov	r4, r1
 8008534:	4690      	mov	r8, r2
 8008536:	d82d      	bhi.n	8008594 <__ssputs_r+0x70>
 8008538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800853c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008540:	d026      	beq.n	8008590 <__ssputs_r+0x6c>
 8008542:	6965      	ldr	r5, [r4, #20]
 8008544:	6909      	ldr	r1, [r1, #16]
 8008546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800854a:	eba3 0901 	sub.w	r9, r3, r1
 800854e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008552:	1c7b      	adds	r3, r7, #1
 8008554:	444b      	add	r3, r9
 8008556:	106d      	asrs	r5, r5, #1
 8008558:	429d      	cmp	r5, r3
 800855a:	bf38      	it	cc
 800855c:	461d      	movcc	r5, r3
 800855e:	0553      	lsls	r3, r2, #21
 8008560:	d527      	bpl.n	80085b2 <__ssputs_r+0x8e>
 8008562:	4629      	mov	r1, r5
 8008564:	f7ff fc42 	bl	8007dec <_malloc_r>
 8008568:	4606      	mov	r6, r0
 800856a:	b360      	cbz	r0, 80085c6 <__ssputs_r+0xa2>
 800856c:	6921      	ldr	r1, [r4, #16]
 800856e:	464a      	mov	r2, r9
 8008570:	f7ff ff7f 	bl	8008472 <memcpy>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800857a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	6126      	str	r6, [r4, #16]
 8008582:	6165      	str	r5, [r4, #20]
 8008584:	444e      	add	r6, r9
 8008586:	eba5 0509 	sub.w	r5, r5, r9
 800858a:	6026      	str	r6, [r4, #0]
 800858c:	60a5      	str	r5, [r4, #8]
 800858e:	463e      	mov	r6, r7
 8008590:	42be      	cmp	r6, r7
 8008592:	d900      	bls.n	8008596 <__ssputs_r+0x72>
 8008594:	463e      	mov	r6, r7
 8008596:	6820      	ldr	r0, [r4, #0]
 8008598:	4632      	mov	r2, r6
 800859a:	4641      	mov	r1, r8
 800859c:	f000 fcf6 	bl	8008f8c <memmove>
 80085a0:	68a3      	ldr	r3, [r4, #8]
 80085a2:	1b9b      	subs	r3, r3, r6
 80085a4:	60a3      	str	r3, [r4, #8]
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	4433      	add	r3, r6
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	2000      	movs	r0, #0
 80085ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b2:	462a      	mov	r2, r5
 80085b4:	f000 fd26 	bl	8009004 <_realloc_r>
 80085b8:	4606      	mov	r6, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1e0      	bne.n	8008580 <__ssputs_r+0x5c>
 80085be:	6921      	ldr	r1, [r4, #16]
 80085c0:	4650      	mov	r0, sl
 80085c2:	f7ff ff65 	bl	8008490 <_free_r>
 80085c6:	230c      	movs	r3, #12
 80085c8:	f8ca 3000 	str.w	r3, [sl]
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085d8:	e7e9      	b.n	80085ae <__ssputs_r+0x8a>
	...

080085dc <_svfiprintf_r>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	4698      	mov	r8, r3
 80085e2:	898b      	ldrh	r3, [r1, #12]
 80085e4:	061b      	lsls	r3, r3, #24
 80085e6:	b09d      	sub	sp, #116	@ 0x74
 80085e8:	4607      	mov	r7, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	4614      	mov	r4, r2
 80085ee:	d510      	bpl.n	8008612 <_svfiprintf_r+0x36>
 80085f0:	690b      	ldr	r3, [r1, #16]
 80085f2:	b973      	cbnz	r3, 8008612 <_svfiprintf_r+0x36>
 80085f4:	2140      	movs	r1, #64	@ 0x40
 80085f6:	f7ff fbf9 	bl	8007dec <_malloc_r>
 80085fa:	6028      	str	r0, [r5, #0]
 80085fc:	6128      	str	r0, [r5, #16]
 80085fe:	b930      	cbnz	r0, 800860e <_svfiprintf_r+0x32>
 8008600:	230c      	movs	r3, #12
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008608:	b01d      	add	sp, #116	@ 0x74
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	2340      	movs	r3, #64	@ 0x40
 8008610:	616b      	str	r3, [r5, #20]
 8008612:	2300      	movs	r3, #0
 8008614:	9309      	str	r3, [sp, #36]	@ 0x24
 8008616:	2320      	movs	r3, #32
 8008618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800861c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008620:	2330      	movs	r3, #48	@ 0x30
 8008622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087c0 <_svfiprintf_r+0x1e4>
 8008626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800862a:	f04f 0901 	mov.w	r9, #1
 800862e:	4623      	mov	r3, r4
 8008630:	469a      	mov	sl, r3
 8008632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008636:	b10a      	cbz	r2, 800863c <_svfiprintf_r+0x60>
 8008638:	2a25      	cmp	r2, #37	@ 0x25
 800863a:	d1f9      	bne.n	8008630 <_svfiprintf_r+0x54>
 800863c:	ebba 0b04 	subs.w	fp, sl, r4
 8008640:	d00b      	beq.n	800865a <_svfiprintf_r+0x7e>
 8008642:	465b      	mov	r3, fp
 8008644:	4622      	mov	r2, r4
 8008646:	4629      	mov	r1, r5
 8008648:	4638      	mov	r0, r7
 800864a:	f7ff ff6b 	bl	8008524 <__ssputs_r>
 800864e:	3001      	adds	r0, #1
 8008650:	f000 80a7 	beq.w	80087a2 <_svfiprintf_r+0x1c6>
 8008654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008656:	445a      	add	r2, fp
 8008658:	9209      	str	r2, [sp, #36]	@ 0x24
 800865a:	f89a 3000 	ldrb.w	r3, [sl]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 809f 	beq.w	80087a2 <_svfiprintf_r+0x1c6>
 8008664:	2300      	movs	r3, #0
 8008666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800866a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800866e:	f10a 0a01 	add.w	sl, sl, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	9307      	str	r3, [sp, #28]
 8008676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800867a:	931a      	str	r3, [sp, #104]	@ 0x68
 800867c:	4654      	mov	r4, sl
 800867e:	2205      	movs	r2, #5
 8008680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008684:	484e      	ldr	r0, [pc, #312]	@ (80087c0 <_svfiprintf_r+0x1e4>)
 8008686:	f7f7 fdb3 	bl	80001f0 <memchr>
 800868a:	9a04      	ldr	r2, [sp, #16]
 800868c:	b9d8      	cbnz	r0, 80086c6 <_svfiprintf_r+0xea>
 800868e:	06d0      	lsls	r0, r2, #27
 8008690:	bf44      	itt	mi
 8008692:	2320      	movmi	r3, #32
 8008694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008698:	0711      	lsls	r1, r2, #28
 800869a:	bf44      	itt	mi
 800869c:	232b      	movmi	r3, #43	@ 0x2b
 800869e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a2:	f89a 3000 	ldrb.w	r3, [sl]
 80086a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a8:	d015      	beq.n	80086d6 <_svfiprintf_r+0xfa>
 80086aa:	9a07      	ldr	r2, [sp, #28]
 80086ac:	4654      	mov	r4, sl
 80086ae:	2000      	movs	r0, #0
 80086b0:	f04f 0c0a 	mov.w	ip, #10
 80086b4:	4621      	mov	r1, r4
 80086b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ba:	3b30      	subs	r3, #48	@ 0x30
 80086bc:	2b09      	cmp	r3, #9
 80086be:	d94b      	bls.n	8008758 <_svfiprintf_r+0x17c>
 80086c0:	b1b0      	cbz	r0, 80086f0 <_svfiprintf_r+0x114>
 80086c2:	9207      	str	r2, [sp, #28]
 80086c4:	e014      	b.n	80086f0 <_svfiprintf_r+0x114>
 80086c6:	eba0 0308 	sub.w	r3, r0, r8
 80086ca:	fa09 f303 	lsl.w	r3, r9, r3
 80086ce:	4313      	orrs	r3, r2
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	46a2      	mov	sl, r4
 80086d4:	e7d2      	b.n	800867c <_svfiprintf_r+0xa0>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	9103      	str	r1, [sp, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bfbb      	ittet	lt
 80086e2:	425b      	neglt	r3, r3
 80086e4:	f042 0202 	orrlt.w	r2, r2, #2
 80086e8:	9307      	strge	r3, [sp, #28]
 80086ea:	9307      	strlt	r3, [sp, #28]
 80086ec:	bfb8      	it	lt
 80086ee:	9204      	strlt	r2, [sp, #16]
 80086f0:	7823      	ldrb	r3, [r4, #0]
 80086f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f4:	d10a      	bne.n	800870c <_svfiprintf_r+0x130>
 80086f6:	7863      	ldrb	r3, [r4, #1]
 80086f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086fa:	d132      	bne.n	8008762 <_svfiprintf_r+0x186>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	9203      	str	r2, [sp, #12]
 8008704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008708:	3402      	adds	r4, #2
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087d0 <_svfiprintf_r+0x1f4>
 8008710:	7821      	ldrb	r1, [r4, #0]
 8008712:	2203      	movs	r2, #3
 8008714:	4650      	mov	r0, sl
 8008716:	f7f7 fd6b 	bl	80001f0 <memchr>
 800871a:	b138      	cbz	r0, 800872c <_svfiprintf_r+0x150>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	eba0 000a 	sub.w	r0, r0, sl
 8008722:	2240      	movs	r2, #64	@ 0x40
 8008724:	4082      	lsls	r2, r0
 8008726:	4313      	orrs	r3, r2
 8008728:	3401      	adds	r4, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008730:	4824      	ldr	r0, [pc, #144]	@ (80087c4 <_svfiprintf_r+0x1e8>)
 8008732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008736:	2206      	movs	r2, #6
 8008738:	f7f7 fd5a 	bl	80001f0 <memchr>
 800873c:	2800      	cmp	r0, #0
 800873e:	d036      	beq.n	80087ae <_svfiprintf_r+0x1d2>
 8008740:	4b21      	ldr	r3, [pc, #132]	@ (80087c8 <_svfiprintf_r+0x1ec>)
 8008742:	bb1b      	cbnz	r3, 800878c <_svfiprintf_r+0x1b0>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	3307      	adds	r3, #7
 8008748:	f023 0307 	bic.w	r3, r3, #7
 800874c:	3308      	adds	r3, #8
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008752:	4433      	add	r3, r6
 8008754:	9309      	str	r3, [sp, #36]	@ 0x24
 8008756:	e76a      	b.n	800862e <_svfiprintf_r+0x52>
 8008758:	fb0c 3202 	mla	r2, ip, r2, r3
 800875c:	460c      	mov	r4, r1
 800875e:	2001      	movs	r0, #1
 8008760:	e7a8      	b.n	80086b4 <_svfiprintf_r+0xd8>
 8008762:	2300      	movs	r3, #0
 8008764:	3401      	adds	r4, #1
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	4619      	mov	r1, r3
 800876a:	f04f 0c0a 	mov.w	ip, #10
 800876e:	4620      	mov	r0, r4
 8008770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008774:	3a30      	subs	r2, #48	@ 0x30
 8008776:	2a09      	cmp	r2, #9
 8008778:	d903      	bls.n	8008782 <_svfiprintf_r+0x1a6>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0c6      	beq.n	800870c <_svfiprintf_r+0x130>
 800877e:	9105      	str	r1, [sp, #20]
 8008780:	e7c4      	b.n	800870c <_svfiprintf_r+0x130>
 8008782:	fb0c 2101 	mla	r1, ip, r1, r2
 8008786:	4604      	mov	r4, r0
 8008788:	2301      	movs	r3, #1
 800878a:	e7f0      	b.n	800876e <_svfiprintf_r+0x192>
 800878c:	ab03      	add	r3, sp, #12
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	462a      	mov	r2, r5
 8008792:	4b0e      	ldr	r3, [pc, #56]	@ (80087cc <_svfiprintf_r+0x1f0>)
 8008794:	a904      	add	r1, sp, #16
 8008796:	4638      	mov	r0, r7
 8008798:	f3af 8000 	nop.w
 800879c:	1c42      	adds	r2, r0, #1
 800879e:	4606      	mov	r6, r0
 80087a0:	d1d6      	bne.n	8008750 <_svfiprintf_r+0x174>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	065b      	lsls	r3, r3, #25
 80087a6:	f53f af2d 	bmi.w	8008604 <_svfiprintf_r+0x28>
 80087aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087ac:	e72c      	b.n	8008608 <_svfiprintf_r+0x2c>
 80087ae:	ab03      	add	r3, sp, #12
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	462a      	mov	r2, r5
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <_svfiprintf_r+0x1f0>)
 80087b6:	a904      	add	r1, sp, #16
 80087b8:	4638      	mov	r0, r7
 80087ba:	f000 f9bb 	bl	8008b34 <_printf_i>
 80087be:	e7ed      	b.n	800879c <_svfiprintf_r+0x1c0>
 80087c0:	080099e8 	.word	0x080099e8
 80087c4:	080099f2 	.word	0x080099f2
 80087c8:	00000000 	.word	0x00000000
 80087cc:	08008525 	.word	0x08008525
 80087d0:	080099ee 	.word	0x080099ee

080087d4 <__sfputc_r>:
 80087d4:	6893      	ldr	r3, [r2, #8]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	b410      	push	{r4}
 80087dc:	6093      	str	r3, [r2, #8]
 80087de:	da08      	bge.n	80087f2 <__sfputc_r+0x1e>
 80087e0:	6994      	ldr	r4, [r2, #24]
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	db01      	blt.n	80087ea <__sfputc_r+0x16>
 80087e6:	290a      	cmp	r1, #10
 80087e8:	d103      	bne.n	80087f2 <__sfputc_r+0x1e>
 80087ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ee:	f7ff bd20 	b.w	8008232 <__swbuf_r>
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	1c58      	adds	r0, r3, #1
 80087f6:	6010      	str	r0, [r2, #0]
 80087f8:	7019      	strb	r1, [r3, #0]
 80087fa:	4608      	mov	r0, r1
 80087fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008800:	4770      	bx	lr

08008802 <__sfputs_r>:
 8008802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	4614      	mov	r4, r2
 800880a:	18d5      	adds	r5, r2, r3
 800880c:	42ac      	cmp	r4, r5
 800880e:	d101      	bne.n	8008814 <__sfputs_r+0x12>
 8008810:	2000      	movs	r0, #0
 8008812:	e007      	b.n	8008824 <__sfputs_r+0x22>
 8008814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008818:	463a      	mov	r2, r7
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ffda 	bl	80087d4 <__sfputc_r>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d1f3      	bne.n	800880c <__sfputs_r+0xa>
 8008824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008828 <_vfiprintf_r>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	460d      	mov	r5, r1
 800882e:	b09d      	sub	sp, #116	@ 0x74
 8008830:	4614      	mov	r4, r2
 8008832:	4698      	mov	r8, r3
 8008834:	4606      	mov	r6, r0
 8008836:	b118      	cbz	r0, 8008840 <_vfiprintf_r+0x18>
 8008838:	6a03      	ldr	r3, [r0, #32]
 800883a:	b90b      	cbnz	r3, 8008840 <_vfiprintf_r+0x18>
 800883c:	f7ff fbee 	bl	800801c <__sinit>
 8008840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008842:	07d9      	lsls	r1, r3, #31
 8008844:	d405      	bmi.n	8008852 <_vfiprintf_r+0x2a>
 8008846:	89ab      	ldrh	r3, [r5, #12]
 8008848:	059a      	lsls	r2, r3, #22
 800884a:	d402      	bmi.n	8008852 <_vfiprintf_r+0x2a>
 800884c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800884e:	f7ff fe0e 	bl	800846e <__retarget_lock_acquire_recursive>
 8008852:	89ab      	ldrh	r3, [r5, #12]
 8008854:	071b      	lsls	r3, r3, #28
 8008856:	d501      	bpl.n	800885c <_vfiprintf_r+0x34>
 8008858:	692b      	ldr	r3, [r5, #16]
 800885a:	b99b      	cbnz	r3, 8008884 <_vfiprintf_r+0x5c>
 800885c:	4629      	mov	r1, r5
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff fd26 	bl	80082b0 <__swsetup_r>
 8008864:	b170      	cbz	r0, 8008884 <_vfiprintf_r+0x5c>
 8008866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008868:	07dc      	lsls	r4, r3, #31
 800886a:	d504      	bpl.n	8008876 <_vfiprintf_r+0x4e>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008870:	b01d      	add	sp, #116	@ 0x74
 8008872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	0598      	lsls	r0, r3, #22
 800887a:	d4f7      	bmi.n	800886c <_vfiprintf_r+0x44>
 800887c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800887e:	f7ff fdf7 	bl	8008470 <__retarget_lock_release_recursive>
 8008882:	e7f3      	b.n	800886c <_vfiprintf_r+0x44>
 8008884:	2300      	movs	r3, #0
 8008886:	9309      	str	r3, [sp, #36]	@ 0x24
 8008888:	2320      	movs	r3, #32
 800888a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800888e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008892:	2330      	movs	r3, #48	@ 0x30
 8008894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a44 <_vfiprintf_r+0x21c>
 8008898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800889c:	f04f 0901 	mov.w	r9, #1
 80088a0:	4623      	mov	r3, r4
 80088a2:	469a      	mov	sl, r3
 80088a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a8:	b10a      	cbz	r2, 80088ae <_vfiprintf_r+0x86>
 80088aa:	2a25      	cmp	r2, #37	@ 0x25
 80088ac:	d1f9      	bne.n	80088a2 <_vfiprintf_r+0x7a>
 80088ae:	ebba 0b04 	subs.w	fp, sl, r4
 80088b2:	d00b      	beq.n	80088cc <_vfiprintf_r+0xa4>
 80088b4:	465b      	mov	r3, fp
 80088b6:	4622      	mov	r2, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ffa1 	bl	8008802 <__sfputs_r>
 80088c0:	3001      	adds	r0, #1
 80088c2:	f000 80a7 	beq.w	8008a14 <_vfiprintf_r+0x1ec>
 80088c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c8:	445a      	add	r2, fp
 80088ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80088cc:	f89a 3000 	ldrb.w	r3, [sl]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 809f 	beq.w	8008a14 <_vfiprintf_r+0x1ec>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e0:	f10a 0a01 	add.w	sl, sl, #1
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ee:	4654      	mov	r4, sl
 80088f0:	2205      	movs	r2, #5
 80088f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f6:	4853      	ldr	r0, [pc, #332]	@ (8008a44 <_vfiprintf_r+0x21c>)
 80088f8:	f7f7 fc7a 	bl	80001f0 <memchr>
 80088fc:	9a04      	ldr	r2, [sp, #16]
 80088fe:	b9d8      	cbnz	r0, 8008938 <_vfiprintf_r+0x110>
 8008900:	06d1      	lsls	r1, r2, #27
 8008902:	bf44      	itt	mi
 8008904:	2320      	movmi	r3, #32
 8008906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800890a:	0713      	lsls	r3, r2, #28
 800890c:	bf44      	itt	mi
 800890e:	232b      	movmi	r3, #43	@ 0x2b
 8008910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008914:	f89a 3000 	ldrb.w	r3, [sl]
 8008918:	2b2a      	cmp	r3, #42	@ 0x2a
 800891a:	d015      	beq.n	8008948 <_vfiprintf_r+0x120>
 800891c:	9a07      	ldr	r2, [sp, #28]
 800891e:	4654      	mov	r4, sl
 8008920:	2000      	movs	r0, #0
 8008922:	f04f 0c0a 	mov.w	ip, #10
 8008926:	4621      	mov	r1, r4
 8008928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800892c:	3b30      	subs	r3, #48	@ 0x30
 800892e:	2b09      	cmp	r3, #9
 8008930:	d94b      	bls.n	80089ca <_vfiprintf_r+0x1a2>
 8008932:	b1b0      	cbz	r0, 8008962 <_vfiprintf_r+0x13a>
 8008934:	9207      	str	r2, [sp, #28]
 8008936:	e014      	b.n	8008962 <_vfiprintf_r+0x13a>
 8008938:	eba0 0308 	sub.w	r3, r0, r8
 800893c:	fa09 f303 	lsl.w	r3, r9, r3
 8008940:	4313      	orrs	r3, r2
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	46a2      	mov	sl, r4
 8008946:	e7d2      	b.n	80088ee <_vfiprintf_r+0xc6>
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	1d19      	adds	r1, r3, #4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	9103      	str	r1, [sp, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	bfbb      	ittet	lt
 8008954:	425b      	neglt	r3, r3
 8008956:	f042 0202 	orrlt.w	r2, r2, #2
 800895a:	9307      	strge	r3, [sp, #28]
 800895c:	9307      	strlt	r3, [sp, #28]
 800895e:	bfb8      	it	lt
 8008960:	9204      	strlt	r2, [sp, #16]
 8008962:	7823      	ldrb	r3, [r4, #0]
 8008964:	2b2e      	cmp	r3, #46	@ 0x2e
 8008966:	d10a      	bne.n	800897e <_vfiprintf_r+0x156>
 8008968:	7863      	ldrb	r3, [r4, #1]
 800896a:	2b2a      	cmp	r3, #42	@ 0x2a
 800896c:	d132      	bne.n	80089d4 <_vfiprintf_r+0x1ac>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9203      	str	r2, [sp, #12]
 8008976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800897a:	3402      	adds	r4, #2
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a54 <_vfiprintf_r+0x22c>
 8008982:	7821      	ldrb	r1, [r4, #0]
 8008984:	2203      	movs	r2, #3
 8008986:	4650      	mov	r0, sl
 8008988:	f7f7 fc32 	bl	80001f0 <memchr>
 800898c:	b138      	cbz	r0, 800899e <_vfiprintf_r+0x176>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	eba0 000a 	sub.w	r0, r0, sl
 8008994:	2240      	movs	r2, #64	@ 0x40
 8008996:	4082      	lsls	r2, r0
 8008998:	4313      	orrs	r3, r2
 800899a:	3401      	adds	r4, #1
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a2:	4829      	ldr	r0, [pc, #164]	@ (8008a48 <_vfiprintf_r+0x220>)
 80089a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089a8:	2206      	movs	r2, #6
 80089aa:	f7f7 fc21 	bl	80001f0 <memchr>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d03f      	beq.n	8008a32 <_vfiprintf_r+0x20a>
 80089b2:	4b26      	ldr	r3, [pc, #152]	@ (8008a4c <_vfiprintf_r+0x224>)
 80089b4:	bb1b      	cbnz	r3, 80089fe <_vfiprintf_r+0x1d6>
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	3307      	adds	r3, #7
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	3308      	adds	r3, #8
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c4:	443b      	add	r3, r7
 80089c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c8:	e76a      	b.n	80088a0 <_vfiprintf_r+0x78>
 80089ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ce:	460c      	mov	r4, r1
 80089d0:	2001      	movs	r0, #1
 80089d2:	e7a8      	b.n	8008926 <_vfiprintf_r+0xfe>
 80089d4:	2300      	movs	r3, #0
 80089d6:	3401      	adds	r4, #1
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	4619      	mov	r1, r3
 80089dc:	f04f 0c0a 	mov.w	ip, #10
 80089e0:	4620      	mov	r0, r4
 80089e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e6:	3a30      	subs	r2, #48	@ 0x30
 80089e8:	2a09      	cmp	r2, #9
 80089ea:	d903      	bls.n	80089f4 <_vfiprintf_r+0x1cc>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0c6      	beq.n	800897e <_vfiprintf_r+0x156>
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	e7c4      	b.n	800897e <_vfiprintf_r+0x156>
 80089f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f8:	4604      	mov	r4, r0
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7f0      	b.n	80089e0 <_vfiprintf_r+0x1b8>
 80089fe:	ab03      	add	r3, sp, #12
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	462a      	mov	r2, r5
 8008a04:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <_vfiprintf_r+0x228>)
 8008a06:	a904      	add	r1, sp, #16
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f3af 8000 	nop.w
 8008a0e:	4607      	mov	r7, r0
 8008a10:	1c78      	adds	r0, r7, #1
 8008a12:	d1d6      	bne.n	80089c2 <_vfiprintf_r+0x19a>
 8008a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_vfiprintf_r+0x1fe>
 8008a1a:	89ab      	ldrh	r3, [r5, #12]
 8008a1c:	059a      	lsls	r2, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_vfiprintf_r+0x1fe>
 8008a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a22:	f7ff fd25 	bl	8008470 <__retarget_lock_release_recursive>
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	065b      	lsls	r3, r3, #25
 8008a2a:	f53f af1f 	bmi.w	800886c <_vfiprintf_r+0x44>
 8008a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a30:	e71e      	b.n	8008870 <_vfiprintf_r+0x48>
 8008a32:	ab03      	add	r3, sp, #12
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	462a      	mov	r2, r5
 8008a38:	4b05      	ldr	r3, [pc, #20]	@ (8008a50 <_vfiprintf_r+0x228>)
 8008a3a:	a904      	add	r1, sp, #16
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f000 f879 	bl	8008b34 <_printf_i>
 8008a42:	e7e4      	b.n	8008a0e <_vfiprintf_r+0x1e6>
 8008a44:	080099e8 	.word	0x080099e8
 8008a48:	080099f2 	.word	0x080099f2
 8008a4c:	00000000 	.word	0x00000000
 8008a50:	08008803 	.word	0x08008803
 8008a54:	080099ee 	.word	0x080099ee

08008a58 <_printf_common>:
 8008a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	4698      	mov	r8, r3
 8008a60:	688a      	ldr	r2, [r1, #8]
 8008a62:	690b      	ldr	r3, [r1, #16]
 8008a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	bfb8      	it	lt
 8008a6c:	4613      	movlt	r3, r2
 8008a6e:	6033      	str	r3, [r6, #0]
 8008a70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a74:	4607      	mov	r7, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	b10a      	cbz	r2, 8008a7e <_printf_common+0x26>
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	6033      	str	r3, [r6, #0]
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	0699      	lsls	r1, r3, #26
 8008a82:	bf42      	ittt	mi
 8008a84:	6833      	ldrmi	r3, [r6, #0]
 8008a86:	3302      	addmi	r3, #2
 8008a88:	6033      	strmi	r3, [r6, #0]
 8008a8a:	6825      	ldr	r5, [r4, #0]
 8008a8c:	f015 0506 	ands.w	r5, r5, #6
 8008a90:	d106      	bne.n	8008aa0 <_printf_common+0x48>
 8008a92:	f104 0a19 	add.w	sl, r4, #25
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	6832      	ldr	r2, [r6, #0]
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	dc26      	bgt.n	8008aee <_printf_common+0x96>
 8008aa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	3b00      	subs	r3, #0
 8008aa8:	bf18      	it	ne
 8008aaa:	2301      	movne	r3, #1
 8008aac:	0692      	lsls	r2, r2, #26
 8008aae:	d42b      	bmi.n	8008b08 <_printf_common+0xb0>
 8008ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	47c8      	blx	r9
 8008aba:	3001      	adds	r0, #1
 8008abc:	d01e      	beq.n	8008afc <_printf_common+0xa4>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	f003 0306 	and.w	r3, r3, #6
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	bf02      	ittt	eq
 8008aca:	68e5      	ldreq	r5, [r4, #12]
 8008acc:	6833      	ldreq	r3, [r6, #0]
 8008ace:	1aed      	subeq	r5, r5, r3
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	bf0c      	ite	eq
 8008ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad8:	2500      	movne	r5, #0
 8008ada:	4293      	cmp	r3, r2
 8008adc:	bfc4      	itt	gt
 8008ade:	1a9b      	subgt	r3, r3, r2
 8008ae0:	18ed      	addgt	r5, r5, r3
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	341a      	adds	r4, #26
 8008ae6:	42b5      	cmp	r5, r6
 8008ae8:	d11a      	bne.n	8008b20 <_printf_common+0xc8>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e008      	b.n	8008b00 <_printf_common+0xa8>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4652      	mov	r2, sl
 8008af2:	4641      	mov	r1, r8
 8008af4:	4638      	mov	r0, r7
 8008af6:	47c8      	blx	r9
 8008af8:	3001      	adds	r0, #1
 8008afa:	d103      	bne.n	8008b04 <_printf_common+0xac>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b04:	3501      	adds	r5, #1
 8008b06:	e7c6      	b.n	8008a96 <_printf_common+0x3e>
 8008b08:	18e1      	adds	r1, r4, r3
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	2030      	movs	r0, #48	@ 0x30
 8008b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b12:	4422      	add	r2, r4
 8008b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b1c:	3302      	adds	r3, #2
 8008b1e:	e7c7      	b.n	8008ab0 <_printf_common+0x58>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4622      	mov	r2, r4
 8008b24:	4641      	mov	r1, r8
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c8      	blx	r9
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d0e6      	beq.n	8008afc <_printf_common+0xa4>
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7d9      	b.n	8008ae6 <_printf_common+0x8e>
	...

08008b34 <_printf_i>:
 8008b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	7e0f      	ldrb	r7, [r1, #24]
 8008b3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b3c:	2f78      	cmp	r7, #120	@ 0x78
 8008b3e:	4691      	mov	r9, r2
 8008b40:	4680      	mov	r8, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	469a      	mov	sl, r3
 8008b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b4a:	d807      	bhi.n	8008b5c <_printf_i+0x28>
 8008b4c:	2f62      	cmp	r7, #98	@ 0x62
 8008b4e:	d80a      	bhi.n	8008b66 <_printf_i+0x32>
 8008b50:	2f00      	cmp	r7, #0
 8008b52:	f000 80d1 	beq.w	8008cf8 <_printf_i+0x1c4>
 8008b56:	2f58      	cmp	r7, #88	@ 0x58
 8008b58:	f000 80b8 	beq.w	8008ccc <_printf_i+0x198>
 8008b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b64:	e03a      	b.n	8008bdc <_printf_i+0xa8>
 8008b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b6a:	2b15      	cmp	r3, #21
 8008b6c:	d8f6      	bhi.n	8008b5c <_printf_i+0x28>
 8008b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b74 <_printf_i+0x40>)
 8008b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b74:	08008bcd 	.word	0x08008bcd
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008b5d 	.word	0x08008b5d
 8008b80:	08008b5d 	.word	0x08008b5d
 8008b84:	08008b5d 	.word	0x08008b5d
 8008b88:	08008b5d 	.word	0x08008b5d
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008b5d 	.word	0x08008b5d
 8008b94:	08008b5d 	.word	0x08008b5d
 8008b98:	08008b5d 	.word	0x08008b5d
 8008b9c:	08008b5d 	.word	0x08008b5d
 8008ba0:	08008cdf 	.word	0x08008cdf
 8008ba4:	08008c0b 	.word	0x08008c0b
 8008ba8:	08008c99 	.word	0x08008c99
 8008bac:	08008b5d 	.word	0x08008b5d
 8008bb0:	08008b5d 	.word	0x08008b5d
 8008bb4:	08008d01 	.word	0x08008d01
 8008bb8:	08008b5d 	.word	0x08008b5d
 8008bbc:	08008c0b 	.word	0x08008c0b
 8008bc0:	08008b5d 	.word	0x08008b5d
 8008bc4:	08008b5d 	.word	0x08008b5d
 8008bc8:	08008ca1 	.word	0x08008ca1
 8008bcc:	6833      	ldr	r3, [r6, #0]
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6032      	str	r2, [r6, #0]
 8008bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e09c      	b.n	8008d1a <_printf_i+0x1e6>
 8008be0:	6833      	ldr	r3, [r6, #0]
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	1d19      	adds	r1, r3, #4
 8008be6:	6031      	str	r1, [r6, #0]
 8008be8:	0606      	lsls	r6, r0, #24
 8008bea:	d501      	bpl.n	8008bf0 <_printf_i+0xbc>
 8008bec:	681d      	ldr	r5, [r3, #0]
 8008bee:	e003      	b.n	8008bf8 <_printf_i+0xc4>
 8008bf0:	0645      	lsls	r5, r0, #25
 8008bf2:	d5fb      	bpl.n	8008bec <_printf_i+0xb8>
 8008bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	da03      	bge.n	8008c04 <_printf_i+0xd0>
 8008bfc:	232d      	movs	r3, #45	@ 0x2d
 8008bfe:	426d      	negs	r5, r5
 8008c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c04:	4858      	ldr	r0, [pc, #352]	@ (8008d68 <_printf_i+0x234>)
 8008c06:	230a      	movs	r3, #10
 8008c08:	e011      	b.n	8008c2e <_printf_i+0xfa>
 8008c0a:	6821      	ldr	r1, [r4, #0]
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	0608      	lsls	r0, r1, #24
 8008c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c14:	d402      	bmi.n	8008c1c <_printf_i+0xe8>
 8008c16:	0649      	lsls	r1, r1, #25
 8008c18:	bf48      	it	mi
 8008c1a:	b2ad      	uxthmi	r5, r5
 8008c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c1e:	4852      	ldr	r0, [pc, #328]	@ (8008d68 <_printf_i+0x234>)
 8008c20:	6033      	str	r3, [r6, #0]
 8008c22:	bf14      	ite	ne
 8008c24:	230a      	movne	r3, #10
 8008c26:	2308      	moveq	r3, #8
 8008c28:	2100      	movs	r1, #0
 8008c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c2e:	6866      	ldr	r6, [r4, #4]
 8008c30:	60a6      	str	r6, [r4, #8]
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	db05      	blt.n	8008c42 <_printf_i+0x10e>
 8008c36:	6821      	ldr	r1, [r4, #0]
 8008c38:	432e      	orrs	r6, r5
 8008c3a:	f021 0104 	bic.w	r1, r1, #4
 8008c3e:	6021      	str	r1, [r4, #0]
 8008c40:	d04b      	beq.n	8008cda <_printf_i+0x1a6>
 8008c42:	4616      	mov	r6, r2
 8008c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c48:	fb03 5711 	mls	r7, r3, r1, r5
 8008c4c:	5dc7      	ldrb	r7, [r0, r7]
 8008c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c52:	462f      	mov	r7, r5
 8008c54:	42bb      	cmp	r3, r7
 8008c56:	460d      	mov	r5, r1
 8008c58:	d9f4      	bls.n	8008c44 <_printf_i+0x110>
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d10b      	bne.n	8008c76 <_printf_i+0x142>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	07df      	lsls	r7, r3, #31
 8008c62:	d508      	bpl.n	8008c76 <_printf_i+0x142>
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	6861      	ldr	r1, [r4, #4]
 8008c68:	4299      	cmp	r1, r3
 8008c6a:	bfde      	ittt	le
 8008c6c:	2330      	movle	r3, #48	@ 0x30
 8008c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008c76:	1b92      	subs	r2, r2, r6
 8008c78:	6122      	str	r2, [r4, #16]
 8008c7a:	f8cd a000 	str.w	sl, [sp]
 8008c7e:	464b      	mov	r3, r9
 8008c80:	aa03      	add	r2, sp, #12
 8008c82:	4621      	mov	r1, r4
 8008c84:	4640      	mov	r0, r8
 8008c86:	f7ff fee7 	bl	8008a58 <_printf_common>
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d14a      	bne.n	8008d24 <_printf_i+0x1f0>
 8008c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c92:	b004      	add	sp, #16
 8008c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	f043 0320 	orr.w	r3, r3, #32
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	4832      	ldr	r0, [pc, #200]	@ (8008d6c <_printf_i+0x238>)
 8008ca2:	2778      	movs	r7, #120	@ 0x78
 8008ca4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	6831      	ldr	r1, [r6, #0]
 8008cac:	061f      	lsls	r7, r3, #24
 8008cae:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cb2:	d402      	bmi.n	8008cba <_printf_i+0x186>
 8008cb4:	065f      	lsls	r7, r3, #25
 8008cb6:	bf48      	it	mi
 8008cb8:	b2ad      	uxthmi	r5, r5
 8008cba:	6031      	str	r1, [r6, #0]
 8008cbc:	07d9      	lsls	r1, r3, #31
 8008cbe:	bf44      	itt	mi
 8008cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8008cc4:	6023      	strmi	r3, [r4, #0]
 8008cc6:	b11d      	cbz	r5, 8008cd0 <_printf_i+0x19c>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	e7ad      	b.n	8008c28 <_printf_i+0xf4>
 8008ccc:	4826      	ldr	r0, [pc, #152]	@ (8008d68 <_printf_i+0x234>)
 8008cce:	e7e9      	b.n	8008ca4 <_printf_i+0x170>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f023 0320 	bic.w	r3, r3, #32
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	e7f6      	b.n	8008cc8 <_printf_i+0x194>
 8008cda:	4616      	mov	r6, r2
 8008cdc:	e7bd      	b.n	8008c5a <_printf_i+0x126>
 8008cde:	6833      	ldr	r3, [r6, #0]
 8008ce0:	6825      	ldr	r5, [r4, #0]
 8008ce2:	6961      	ldr	r1, [r4, #20]
 8008ce4:	1d18      	adds	r0, r3, #4
 8008ce6:	6030      	str	r0, [r6, #0]
 8008ce8:	062e      	lsls	r6, r5, #24
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	d501      	bpl.n	8008cf2 <_printf_i+0x1be>
 8008cee:	6019      	str	r1, [r3, #0]
 8008cf0:	e002      	b.n	8008cf8 <_printf_i+0x1c4>
 8008cf2:	0668      	lsls	r0, r5, #25
 8008cf4:	d5fb      	bpl.n	8008cee <_printf_i+0x1ba>
 8008cf6:	8019      	strh	r1, [r3, #0]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	e7bc      	b.n	8008c7a <_printf_i+0x146>
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	6032      	str	r2, [r6, #0]
 8008d06:	681e      	ldr	r6, [r3, #0]
 8008d08:	6862      	ldr	r2, [r4, #4]
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7f7 fa6f 	bl	80001f0 <memchr>
 8008d12:	b108      	cbz	r0, 8008d18 <_printf_i+0x1e4>
 8008d14:	1b80      	subs	r0, r0, r6
 8008d16:	6060      	str	r0, [r4, #4]
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d22:	e7aa      	b.n	8008c7a <_printf_i+0x146>
 8008d24:	6923      	ldr	r3, [r4, #16]
 8008d26:	4632      	mov	r2, r6
 8008d28:	4649      	mov	r1, r9
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	47d0      	blx	sl
 8008d2e:	3001      	adds	r0, #1
 8008d30:	d0ad      	beq.n	8008c8e <_printf_i+0x15a>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	079b      	lsls	r3, r3, #30
 8008d36:	d413      	bmi.n	8008d60 <_printf_i+0x22c>
 8008d38:	68e0      	ldr	r0, [r4, #12]
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	4298      	cmp	r0, r3
 8008d3e:	bfb8      	it	lt
 8008d40:	4618      	movlt	r0, r3
 8008d42:	e7a6      	b.n	8008c92 <_printf_i+0x15e>
 8008d44:	2301      	movs	r3, #1
 8008d46:	4632      	mov	r2, r6
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	47d0      	blx	sl
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d09d      	beq.n	8008c8e <_printf_i+0x15a>
 8008d52:	3501      	adds	r5, #1
 8008d54:	68e3      	ldr	r3, [r4, #12]
 8008d56:	9903      	ldr	r1, [sp, #12]
 8008d58:	1a5b      	subs	r3, r3, r1
 8008d5a:	42ab      	cmp	r3, r5
 8008d5c:	dcf2      	bgt.n	8008d44 <_printf_i+0x210>
 8008d5e:	e7eb      	b.n	8008d38 <_printf_i+0x204>
 8008d60:	2500      	movs	r5, #0
 8008d62:	f104 0619 	add.w	r6, r4, #25
 8008d66:	e7f5      	b.n	8008d54 <_printf_i+0x220>
 8008d68:	080099f9 	.word	0x080099f9
 8008d6c:	08009a0a 	.word	0x08009a0a

08008d70 <__sflush_r>:
 8008d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	0716      	lsls	r6, r2, #28
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	d454      	bmi.n	8008e2a <__sflush_r+0xba>
 8008d80:	684b      	ldr	r3, [r1, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dc02      	bgt.n	8008d8c <__sflush_r+0x1c>
 8008d86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dd48      	ble.n	8008e1e <__sflush_r+0xae>
 8008d8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d045      	beq.n	8008e1e <__sflush_r+0xae>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d98:	682f      	ldr	r7, [r5, #0]
 8008d9a:	6a21      	ldr	r1, [r4, #32]
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	d030      	beq.n	8008e02 <__sflush_r+0x92>
 8008da0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	0759      	lsls	r1, r3, #29
 8008da6:	d505      	bpl.n	8008db4 <__sflush_r+0x44>
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dae:	b10b      	cbz	r3, 8008db4 <__sflush_r+0x44>
 8008db0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008db2:	1ad2      	subs	r2, r2, r3
 8008db4:	2300      	movs	r3, #0
 8008db6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008db8:	6a21      	ldr	r1, [r4, #32]
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b0      	blx	r6
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	d106      	bne.n	8008dd2 <__sflush_r+0x62>
 8008dc4:	6829      	ldr	r1, [r5, #0]
 8008dc6:	291d      	cmp	r1, #29
 8008dc8:	d82b      	bhi.n	8008e22 <__sflush_r+0xb2>
 8008dca:	4a2a      	ldr	r2, [pc, #168]	@ (8008e74 <__sflush_r+0x104>)
 8008dcc:	40ca      	lsrs	r2, r1
 8008dce:	07d6      	lsls	r6, r2, #31
 8008dd0:	d527      	bpl.n	8008e22 <__sflush_r+0xb2>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	6062      	str	r2, [r4, #4]
 8008dd6:	04d9      	lsls	r1, r3, #19
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	d504      	bpl.n	8008de8 <__sflush_r+0x78>
 8008dde:	1c42      	adds	r2, r0, #1
 8008de0:	d101      	bne.n	8008de6 <__sflush_r+0x76>
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	b903      	cbnz	r3, 8008de8 <__sflush_r+0x78>
 8008de6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dea:	602f      	str	r7, [r5, #0]
 8008dec:	b1b9      	cbz	r1, 8008e1e <__sflush_r+0xae>
 8008dee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008df2:	4299      	cmp	r1, r3
 8008df4:	d002      	beq.n	8008dfc <__sflush_r+0x8c>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7ff fb4a 	bl	8008490 <_free_r>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e00:	e00d      	b.n	8008e1e <__sflush_r+0xae>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b0      	blx	r6
 8008e08:	4602      	mov	r2, r0
 8008e0a:	1c50      	adds	r0, r2, #1
 8008e0c:	d1c9      	bne.n	8008da2 <__sflush_r+0x32>
 8008e0e:	682b      	ldr	r3, [r5, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0c6      	beq.n	8008da2 <__sflush_r+0x32>
 8008e14:	2b1d      	cmp	r3, #29
 8008e16:	d001      	beq.n	8008e1c <__sflush_r+0xac>
 8008e18:	2b16      	cmp	r3, #22
 8008e1a:	d11e      	bne.n	8008e5a <__sflush_r+0xea>
 8008e1c:	602f      	str	r7, [r5, #0]
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e022      	b.n	8008e68 <__sflush_r+0xf8>
 8008e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e26:	b21b      	sxth	r3, r3
 8008e28:	e01b      	b.n	8008e62 <__sflush_r+0xf2>
 8008e2a:	690f      	ldr	r7, [r1, #16]
 8008e2c:	2f00      	cmp	r7, #0
 8008e2e:	d0f6      	beq.n	8008e1e <__sflush_r+0xae>
 8008e30:	0793      	lsls	r3, r2, #30
 8008e32:	680e      	ldr	r6, [r1, #0]
 8008e34:	bf08      	it	eq
 8008e36:	694b      	ldreq	r3, [r1, #20]
 8008e38:	600f      	str	r7, [r1, #0]
 8008e3a:	bf18      	it	ne
 8008e3c:	2300      	movne	r3, #0
 8008e3e:	eba6 0807 	sub.w	r8, r6, r7
 8008e42:	608b      	str	r3, [r1, #8]
 8008e44:	f1b8 0f00 	cmp.w	r8, #0
 8008e48:	dde9      	ble.n	8008e1e <__sflush_r+0xae>
 8008e4a:	6a21      	ldr	r1, [r4, #32]
 8008e4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e4e:	4643      	mov	r3, r8
 8008e50:	463a      	mov	r2, r7
 8008e52:	4628      	mov	r0, r5
 8008e54:	47b0      	blx	r6
 8008e56:	2800      	cmp	r0, #0
 8008e58:	dc08      	bgt.n	8008e6c <__sflush_r+0xfc>
 8008e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6c:	4407      	add	r7, r0
 8008e6e:	eba8 0800 	sub.w	r8, r8, r0
 8008e72:	e7e7      	b.n	8008e44 <__sflush_r+0xd4>
 8008e74:	20400001 	.word	0x20400001

08008e78 <_fflush_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	690b      	ldr	r3, [r1, #16]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b913      	cbnz	r3, 8008e88 <_fflush_r+0x10>
 8008e82:	2500      	movs	r5, #0
 8008e84:	4628      	mov	r0, r5
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	b118      	cbz	r0, 8008e92 <_fflush_r+0x1a>
 8008e8a:	6a03      	ldr	r3, [r0, #32]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <_fflush_r+0x1a>
 8008e8e:	f7ff f8c5 	bl	800801c <__sinit>
 8008e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f3      	beq.n	8008e82 <_fflush_r+0xa>
 8008e9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e9c:	07d0      	lsls	r0, r2, #31
 8008e9e:	d404      	bmi.n	8008eaa <_fflush_r+0x32>
 8008ea0:	0599      	lsls	r1, r3, #22
 8008ea2:	d402      	bmi.n	8008eaa <_fflush_r+0x32>
 8008ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ea6:	f7ff fae2 	bl	800846e <__retarget_lock_acquire_recursive>
 8008eaa:	4628      	mov	r0, r5
 8008eac:	4621      	mov	r1, r4
 8008eae:	f7ff ff5f 	bl	8008d70 <__sflush_r>
 8008eb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eb4:	07da      	lsls	r2, r3, #31
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	d4e4      	bmi.n	8008e84 <_fflush_r+0xc>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	059b      	lsls	r3, r3, #22
 8008ebe:	d4e1      	bmi.n	8008e84 <_fflush_r+0xc>
 8008ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ec2:	f7ff fad5 	bl	8008470 <__retarget_lock_release_recursive>
 8008ec6:	e7dd      	b.n	8008e84 <_fflush_r+0xc>

08008ec8 <__swhatbuf_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	460c      	mov	r4, r1
 8008ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	b096      	sub	sp, #88	@ 0x58
 8008ed4:	4615      	mov	r5, r2
 8008ed6:	461e      	mov	r6, r3
 8008ed8:	da0d      	bge.n	8008ef6 <__swhatbuf_r+0x2e>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ee0:	f04f 0100 	mov.w	r1, #0
 8008ee4:	bf14      	ite	ne
 8008ee6:	2340      	movne	r3, #64	@ 0x40
 8008ee8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008eec:	2000      	movs	r0, #0
 8008eee:	6031      	str	r1, [r6, #0]
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	b016      	add	sp, #88	@ 0x58
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
 8008ef6:	466a      	mov	r2, sp
 8008ef8:	f000 f862 	bl	8008fc0 <_fstat_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	dbec      	blt.n	8008eda <__swhatbuf_r+0x12>
 8008f00:	9901      	ldr	r1, [sp, #4]
 8008f02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f0a:	4259      	negs	r1, r3
 8008f0c:	4159      	adcs	r1, r3
 8008f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f12:	e7eb      	b.n	8008eec <__swhatbuf_r+0x24>

08008f14 <__smakebuf_r>:
 8008f14:	898b      	ldrh	r3, [r1, #12]
 8008f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f18:	079d      	lsls	r5, r3, #30
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	d507      	bpl.n	8008f30 <__smakebuf_r+0x1c>
 8008f20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f30:	ab01      	add	r3, sp, #4
 8008f32:	466a      	mov	r2, sp
 8008f34:	f7ff ffc8 	bl	8008ec8 <__swhatbuf_r>
 8008f38:	9f00      	ldr	r7, [sp, #0]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7fe ff54 	bl	8007dec <_malloc_r>
 8008f44:	b948      	cbnz	r0, 8008f5a <__smakebuf_r+0x46>
 8008f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f4a:	059a      	lsls	r2, r3, #22
 8008f4c:	d4ee      	bmi.n	8008f2c <__smakebuf_r+0x18>
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	f043 0302 	orr.w	r3, r3, #2
 8008f56:	81a3      	strh	r3, [r4, #12]
 8008f58:	e7e2      	b.n	8008f20 <__smakebuf_r+0xc>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	6020      	str	r0, [r4, #0]
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f6a:	b15b      	cbz	r3, 8008f84 <__smakebuf_r+0x70>
 8008f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 f837 	bl	8008fe4 <_isatty_r>
 8008f76:	b128      	cbz	r0, 8008f84 <__smakebuf_r+0x70>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f023 0303 	bic.w	r3, r3, #3
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	431d      	orrs	r5, r3
 8008f88:	81a5      	strh	r5, [r4, #12]
 8008f8a:	e7cf      	b.n	8008f2c <__smakebuf_r+0x18>

08008f8c <memmove>:
 8008f8c:	4288      	cmp	r0, r1
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	eb01 0402 	add.w	r4, r1, r2
 8008f94:	d902      	bls.n	8008f9c <memmove+0x10>
 8008f96:	4284      	cmp	r4, r0
 8008f98:	4623      	mov	r3, r4
 8008f9a:	d807      	bhi.n	8008fac <memmove+0x20>
 8008f9c:	1e43      	subs	r3, r0, #1
 8008f9e:	42a1      	cmp	r1, r4
 8008fa0:	d008      	beq.n	8008fb4 <memmove+0x28>
 8008fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008faa:	e7f8      	b.n	8008f9e <memmove+0x12>
 8008fac:	4402      	add	r2, r0
 8008fae:	4601      	mov	r1, r0
 8008fb0:	428a      	cmp	r2, r1
 8008fb2:	d100      	bne.n	8008fb6 <memmove+0x2a>
 8008fb4:	bd10      	pop	{r4, pc}
 8008fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fbe:	e7f7      	b.n	8008fb0 <memmove+0x24>

08008fc0 <_fstat_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	@ (8008fe0 <_fstat_r+0x20>)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	4611      	mov	r1, r2
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	f7f7 ff54 	bl	8000e7a <_fstat>
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	d102      	bne.n	8008fdc <_fstat_r+0x1c>
 8008fd6:	682b      	ldr	r3, [r5, #0]
 8008fd8:	b103      	cbz	r3, 8008fdc <_fstat_r+0x1c>
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	bd38      	pop	{r3, r4, r5, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000ee8 	.word	0x20000ee8

08008fe4 <_isatty_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	@ (8009000 <_isatty_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f7 ff53 	bl	8000e9a <_isatty>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_isatty_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_isatty_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	20000ee8 	.word	0x20000ee8

08009004 <_realloc_r>:
 8009004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	4607      	mov	r7, r0
 800900a:	4614      	mov	r4, r2
 800900c:	460d      	mov	r5, r1
 800900e:	b921      	cbnz	r1, 800901a <_realloc_r+0x16>
 8009010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	4611      	mov	r1, r2
 8009016:	f7fe bee9 	b.w	8007dec <_malloc_r>
 800901a:	b92a      	cbnz	r2, 8009028 <_realloc_r+0x24>
 800901c:	f7ff fa38 	bl	8008490 <_free_r>
 8009020:	4625      	mov	r5, r4
 8009022:	4628      	mov	r0, r5
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009028:	f000 f81a 	bl	8009060 <_malloc_usable_size_r>
 800902c:	4284      	cmp	r4, r0
 800902e:	4606      	mov	r6, r0
 8009030:	d802      	bhi.n	8009038 <_realloc_r+0x34>
 8009032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009036:	d8f4      	bhi.n	8009022 <_realloc_r+0x1e>
 8009038:	4621      	mov	r1, r4
 800903a:	4638      	mov	r0, r7
 800903c:	f7fe fed6 	bl	8007dec <_malloc_r>
 8009040:	4680      	mov	r8, r0
 8009042:	b908      	cbnz	r0, 8009048 <_realloc_r+0x44>
 8009044:	4645      	mov	r5, r8
 8009046:	e7ec      	b.n	8009022 <_realloc_r+0x1e>
 8009048:	42b4      	cmp	r4, r6
 800904a:	4622      	mov	r2, r4
 800904c:	4629      	mov	r1, r5
 800904e:	bf28      	it	cs
 8009050:	4632      	movcs	r2, r6
 8009052:	f7ff fa0e 	bl	8008472 <memcpy>
 8009056:	4629      	mov	r1, r5
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff fa19 	bl	8008490 <_free_r>
 800905e:	e7f1      	b.n	8009044 <_realloc_r+0x40>

08009060 <_malloc_usable_size_r>:
 8009060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009064:	1f18      	subs	r0, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfbc      	itt	lt
 800906a:	580b      	ldrlt	r3, [r1, r0]
 800906c:	18c0      	addlt	r0, r0, r3
 800906e:	4770      	bx	lr

08009070 <_init>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	bf00      	nop
 8009074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009076:	bc08      	pop	{r3}
 8009078:	469e      	mov	lr, r3
 800907a:	4770      	bx	lr

0800907c <_fini>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr
