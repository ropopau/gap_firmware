
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008314  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e08  08008e08  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e08  08008e08  00009e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e10  08008e10  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e10  08008e10  00009e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008e18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000074  08008e8c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08008e8c  0000a67c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e2  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b0  00000000  00000000  0001b186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0001e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f8  00000000  00000000  0001ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019276  00000000  00000000  0001f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fef3  00000000  00000000  00038bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912ba  00000000  00000000  00048aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9d5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  000d9da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dd9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800849c 	.word	0x0800849c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800849c 	.word	0x0800849c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <close_sender>:
static UART_HandleTypeDef *huart2_handle;

static gapcom_handle_t *gapcom_handle_instance;

int close_sender(gapcom_sender_t *self)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	return 0;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <open_sender>:

int open_sender(gapcom_sender_t *self)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <send_sender>:

ssize_t send_sender(gapcom_sender_t *self, const uint8_t *buf, size_t len)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit_IT(huart2_handle, buf, len);
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <send_sender+0x38>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	b292      	uxth	r2, r2
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fbaa 	bl	8001d48 <HAL_UART_Transmit_IT>
 80005f4:	4603      	mov	r3, r0
 80005f6:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <send_sender+0x2a>
        return (ssize_t)len;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	e001      	b.n	8000606 <send_sender+0x2e>
    } else {
        return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000090 	.word	0x20000090

08000614 <create_gapcom_instance>:
		.open = open_sender,
		.send = send_sender
};

void create_gapcom_instance(UART_HandleTypeDef *handle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	huart2_handle = handle;
 800061c:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <create_gapcom_instance+0x2c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
	gapcom_handle_instance = gapcom_create();
 8000622:	f002 faeb 	bl	8002bfc <gapcom_create>
 8000626:	4603      	mov	r3, r0
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <create_gapcom_instance+0x30>)
 800062a:	6013      	str	r3, [r2, #0]
	gapcom_set_sender_impl(gapcom_handle_instance, &gapcom_sender_t_impl);
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <create_gapcom_instance+0x30>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4905      	ldr	r1, [pc, #20]	@ (8000648 <create_gapcom_instance+0x34>)
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fb12 	bl	8002c5c <gapcom_set_sender_impl>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000090 	.word	0x20000090
 8000644:	20000094 	.word	0x20000094
 8000648:	20000000 	.word	0x20000000

0800064c <receive_gapcom_incoming_uart_message>:

void receive_gapcom_incoming_uart_message(uint8_t *buf, uint16_t size)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	gapcom_accept(gapcom_handle_instance, buf, size);
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <receive_gapcom_incoming_uart_message+0x30>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	887a      	ldrh	r2, [r7, #2]
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fb0d 	bl	8002c80 <gapcom_accept>
	gapcom_respond_ping(gapcom_handle_instance, GAPErrorCode_GAP_OK);
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <receive_gapcom_incoming_uart_message+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fd75 	bl	800315c <gapcom_respond_ping>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000094 	.word	0x20000094

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fb04 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f814 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f8c8 	bl	8000820 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000690:	f000 f870 	bl	8000774 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000694:	f000 f89a 	bl	80007cc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  create_gapcom_instance(&huart2);
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <main+0x2c>)
 800069a:	f7ff ffbb 	bl	8000614 <create_gapcom_instance>
  HAL_UART_Receive_IT(&huart2, rx_buff, 6);
 800069e:	2206      	movs	r2, #6
 80006a0:	4903      	ldr	r1, [pc, #12]	@ (80006b0 <main+0x30>)
 80006a2:	4802      	ldr	r0, [pc, #8]	@ (80006ac <main+0x2c>)
 80006a4:	f001 fb86 	bl	8001db4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <main+0x28>
 80006ac:	20000098 	.word	0x20000098
 80006b0:	20000128 	.word	0x20000128

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 fa08 	bl	8007ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b23      	ldr	r3, [pc, #140]	@ (800076c <SystemClock_Config+0xb8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a22      	ldr	r2, [pc, #136]	@ (800076c <SystemClock_Config+0xb8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <SystemClock_Config+0xb8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <SystemClock_Config+0xbc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <SystemClock_Config+0xbc>)
 8000702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <SystemClock_Config+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe65 	bl	80013f8 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000734:	f000 f8cc 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f8c8 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800075e:	f000 f8b7 	bl	80008d0 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_USART2_UART_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 8000780:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 8000788:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800078c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 8000796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 80007b0:	f001 fa7a 	bl	8001ca8 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f000 f889 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000098 	.word	0x20000098
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_USART6_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 8000804:	f001 fa50 	bl	8001ca8 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f85f 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000e0 	.word	0x200000e0
 800081c:	40011400 	.word	0x40011400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_GPIO_Init+0x7c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a17      	ldr	r2, [pc, #92]	@ (800089c <MX_GPIO_Init+0x7c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_GPIO_Init+0x7c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_GPIO_Init+0x7c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <MX_GPIO_Init+0x7c>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_GPIO_Init+0x7c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <MX_GPIO_Init+0x80>)
 8000874:	f000 fda6 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000878:	2320      	movs	r3, #32
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_GPIO_Init+0x80>)
 8000890:	f000 fc14 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rx_buff, 6);
 80008ac:	2206      	movs	r2, #6
 80008ae:	4906      	ldr	r1, [pc, #24]	@ (80008c8 <HAL_UART_RxCpltCallback+0x24>)
 80008b0:	4806      	ldr	r0, [pc, #24]	@ (80008cc <HAL_UART_RxCpltCallback+0x28>)
 80008b2:	f001 fa7f 	bl	8001db4 <HAL_UART_Receive_IT>
	receive_gapcom_incoming_uart_message(rx_buff, 6);
 80008b6:	2106      	movs	r1, #6
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <HAL_UART_RxCpltCallback+0x24>)
 80008ba:	f7ff fec7 	bl	800064c <receive_gapcom_incoming_uart_message>


}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000128 	.word	0x20000128
 80008cc:	20000098 	.word	0x20000098

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a3a      	ldr	r2, [pc, #232]	@ (8000a34 <HAL_UART_MspInit+0x108>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d134      	bne.n	80009b8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a38      	ldr	r2, [pc, #224]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a31      	ldr	r2, [pc, #196]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000986:	230c      	movs	r3, #12
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000996:	2307      	movs	r3, #7
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4826      	ldr	r0, [pc, #152]	@ (8000a3c <HAL_UART_MspInit+0x110>)
 80009a2:	f000 fb8b 	bl	80010bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2026      	movs	r0, #38	@ 0x26
 80009ac:	f000 fabd 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b0:	2026      	movs	r0, #38	@ 0x26
 80009b2:	f000 fad6 	bl	8000f62 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80009b6:	e038      	b.n	8000a2a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a20      	ldr	r2, [pc, #128]	@ (8000a40 <HAL_UART_MspInit+0x114>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d133      	bne.n	8000a2a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 80009cc:	f043 0320 	orr.w	r3, r3, #32
 80009d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a14      	ldr	r2, [pc, #80]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_UART_MspInit+0x10c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fa:	23c0      	movs	r3, #192	@ 0xc0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <HAL_UART_MspInit+0x118>)
 8000a16:	f000 fb51 	bl	80010bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2047      	movs	r0, #71	@ 0x47
 8000a20:	f000 fa83 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a24:	2047      	movs	r0, #71	@ 0x47
 8000a26:	f000 fa9c 	bl	8000f62 <HAL_NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40011400 	.word	0x40011400
 8000a44:	40020800 	.word	0x40020800

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f949 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <USART2_IRQHandler+0x10>)
 8000aae:	f001 f9a7 	bl	8001e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000098 	.word	0x20000098

08000abc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <USART6_IRQHandler+0x10>)
 8000ac2:	f001 f99d 	bl	8001e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000e0 	.word	0x200000e0

08000ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
  }
  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f006 ffda 	bl	8007b94 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20018000 	.word	0x20018000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000528 	.word	0x20000528
 8000c14:	20000680 	.word	0x20000680

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f006 ff99 	bl	8007ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fd07 	bl	8000680 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c80:	08008e18 	.word	0x08008e18
  ldr r2, =_sbss
 8000c84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c88:	2000067c 	.word	0x2000067c

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f92b 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fe0a 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f943 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d10:	f000 f90b 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	20000014 	.word	0x20000014
 8000d30:	20000010 	.word	0x20000010

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000014 	.word	0x20000014
 8000d58:	2000052c 	.word	0x2000052c

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000052c 	.word	0x2000052c

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff feda 	bl	8000d5c <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d008      	beq.n	8000fc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e052      	b.n	800106e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0216 	bic.w	r2, r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fe6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <HAL_DMA_Abort+0x62>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0208 	bic.w	r2, r2, #8
 8001006:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001018:	e013      	b.n	8001042 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101a:	f7ff fe9f 	bl	8000d5c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b05      	cmp	r3, #5
 8001026:	d90c      	bls.n	8001042 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e015      	b.n	800106e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e4      	bne.n	800101a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001054:	223f      	movs	r2, #63	@ 0x3f
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d004      	beq.n	8001094 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e00c      	b.n	80010ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2205      	movs	r2, #5
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e159      	b.n	800138c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8148 	bne.w	8001386 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a2 	beq.w	8001386 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a56      	ldr	r2, [pc, #344]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_GPIO_Init+0x2ec>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a49      	ldr	r2, [pc, #292]	@ (80013ac <HAL_GPIO_Init+0x2f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x202>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <HAL_GPIO_Init+0x2f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1fe>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a47      	ldr	r2, [pc, #284]	@ (80013b4 <HAL_GPIO_Init+0x2f8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1fa>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a46      	ldr	r2, [pc, #280]	@ (80013b8 <HAL_GPIO_Init+0x2fc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1f6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a45      	ldr	r2, [pc, #276]	@ (80013bc <HAL_GPIO_Init+0x300>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1f2>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x2ec>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f aea2 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e267      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800142a:	2b08      	cmp	r3, #8
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b7e      	ldr	r3, [pc, #504]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05b      	beq.n	8001500 <HAL_RCC_OscConfig+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d157      	bne.n	8001500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e242      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x74>
 800145e:	4b76      	ldr	r3, [pc, #472]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a75      	ldr	r2, [pc, #468]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b70      	ldr	r3, [pc, #448]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6f      	ldr	r2, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b6d      	ldr	r3, [pc, #436]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6c      	ldr	r2, [pc, #432]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 8001490:	4b69      	ldr	r3, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a68      	ldr	r2, [pc, #416]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc54 	bl	8000d5c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc50 	bl	8000d5c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e207      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xc0>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc40 	bl	8000d5c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fc3c 	bl	8000d5c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1f3      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0xe8>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800150e:	4b4a      	ldr	r3, [pc, #296]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c7      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4937      	ldr	r1, [pc, #220]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b34      	ldr	r3, [pc, #208]	@ (800163c <HAL_RCC_OscConfig+0x244>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fbf5 	bl	8000d5c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fbf1 	bl	8000d5c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a8      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4925      	ldr	r1, [pc, #148]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_RCC_OscConfig+0x244>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbd4 	bl	8000d5c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbd0 	bl	8000d5c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e187      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d036      	beq.n	8001650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d016      	beq.n	8001618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_RCC_OscConfig+0x248>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fbb4 	bl	8000d5c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fbb0 	bl	8000d5c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e167      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x200>
 8001616:	e01b      	b.n	8001650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_OscConfig+0x248>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fb9d 	bl	8000d5c <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	e00e      	b.n	8001644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb99 	bl	8000d5c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d907      	bls.n	8001644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e150      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001638:	40023800 	.word	0x40023800
 800163c:	42470000 	.word	0x42470000
 8001640:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b88      	ldr	r3, [pc, #544]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ea      	bne.n	8001626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8097 	beq.w	800178c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b81      	ldr	r3, [pc, #516]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b7d      	ldr	r3, [pc, #500]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a7c      	ldr	r2, [pc, #496]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b7a      	ldr	r3, [pc, #488]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b77      	ldr	r3, [pc, #476]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b74      	ldr	r3, [pc, #464]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a73      	ldr	r2, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fb59 	bl	8000d5c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fb55 	bl	8000d5c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e10c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	4b6a      	ldr	r3, [pc, #424]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2ea>
 80016d4:	4b64      	ldr	r3, [pc, #400]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d8:	4a63      	ldr	r2, [pc, #396]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x30c>
 80016ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	@ 0x70
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 8001704:	4b58      	ldr	r3, [pc, #352]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a57      	ldr	r2, [pc, #348]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	4b55      	ldr	r3, [pc, #340]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a54      	ldr	r2, [pc, #336]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fb1a 	bl	8000d5c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fb16 	bl	8000d5c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0cb      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ee      	beq.n	800172c <HAL_RCC_OscConfig+0x334>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fb04 	bl	8000d5c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb00 	bl	8000d5c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0b5      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176e:	4b3e      	ldr	r3, [pc, #248]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ee      	bne.n	8001758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a1 	beq.w	80018d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001796:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d05c      	beq.n	800185c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d141      	bne.n	800182e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fad4 	bl	8000d5c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fad0 	bl	8000d5c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e087      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	491b      	ldr	r1, [pc, #108]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff faa9 	bl	8000d5c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff faa5 	bl	8000d5c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e05c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x416>
 800182c:	e054      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fa92 	bl	8000d5c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff fa8e 	bl	8000d5c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e045      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x444>
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e038      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000
 8001870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d028      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d121      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3b01      	subs	r3, #1
 80018be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff f9c0 	bl	8000d5c <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff f9bc 	bl	8000d5c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f920 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080089b4 	.word	0x080089b4
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000010 	.word	0x20000010

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab8:	b090      	sub	sp, #64	@ 0x40
 8001aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4b59      	ldr	r3, [pc, #356]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d00d      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	f200 80a1 	bhi.w	8001c20 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae6:	e09b      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aec:	e09b      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aee:	4b53      	ldr	r3, [pc, #332]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001af0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001af2:	e098      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001afc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afe:	4b4d      	ldr	r3, [pc, #308]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d028      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	2200      	movs	r2, #0
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4b47      	ldr	r3, [pc, #284]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b20:	fb03 f201 	mul.w	r2, r3, r1
 8001b24:	2300      	movs	r3, #0
 8001b26:	fb00 f303 	mul.w	r3, r0, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a43      	ldr	r2, [pc, #268]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b2e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b34:	460a      	mov	r2, r1
 8001b36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b3a:	4413      	add	r3, r2
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b40:	2200      	movs	r2, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	61fa      	str	r2, [r7, #28]
 8001b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b4e:	f7fe fb97 	bl	8000280 <__aeabi_uldivmod>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4613      	mov	r3, r2
 8001b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b5a:	e053      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5c:	4b35      	ldr	r3, [pc, #212]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	2200      	movs	r2, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	617a      	str	r2, [r7, #20]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b6e:	f04f 0b00 	mov.w	fp, #0
 8001b72:	4652      	mov	r2, sl
 8001b74:	465b      	mov	r3, fp
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	0159      	lsls	r1, r3, #5
 8001b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b84:	0150      	lsls	r0, r2, #5
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b8e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ba2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ba6:	ebb2 0408 	subs.w	r4, r2, r8
 8001baa:	eb63 0509 	sbc.w	r5, r3, r9
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	00eb      	lsls	r3, r5, #3
 8001bb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bbc:	00e2      	lsls	r2, r4, #3
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	eb14 030a 	adds.w	r3, r4, sl
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	eb45 030b 	adc.w	r3, r5, fp
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	028b      	lsls	r3, r1, #10
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be4:	4621      	mov	r1, r4
 8001be6:	028a      	lsls	r2, r1, #10
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	60fa      	str	r2, [r7, #12]
 8001bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf8:	f7fe fb42 	bl	8000280 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c1e:	e002      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3740      	adds	r7, #64	@ 0x40
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	017d7840 	.word	0x017d7840

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b03      	ldr	r3, [pc, #12]	@ (8001c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000000c 	.word	0x2000000c

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff0 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0a9b      	lsrs	r3, r3, #10
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	@ (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	080089c4 	.word	0x080089c4

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c84:	f7ff ffdc 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0b5b      	lsrs	r3, r3, #13
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4903      	ldr	r1, [pc, #12]	@ (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	080089c4 	.word	0x080089c4

08001ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e042      	b.n	8001d40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fe2c 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	@ 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fd11 	bl	8002714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d121      	bne.n	8001da6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_UART_Transmit_IT+0x26>
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01a      	b.n	8001da8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	88fa      	ldrh	r2, [r7, #6]
 8001d7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001da0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d112      	bne.n	8001df4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_UART_Receive_IT+0x26>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00b      	b.n	8001df6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 faba 	bl	8002364 <UART_Start_Receive_IT>
 8001df0:	4603      	mov	r3, r0
 8001df2:	e000      	b.n	8001df6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0ba      	sub	sp, #232	@ 0xe8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_UART_IRQHandler+0x66>
 8001e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fb99 	bl	8002596 <UART_Receive_IT>
      return;
 8001e64:	e25b      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80de 	beq.w	800202c <HAL_UART_IRQHandler+0x22c>
 8001e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80d1 	beq.w	800202c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_UART_IRQHandler+0xae>
 8001e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xd2>
 8001eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_UART_IRQHandler+0xf6>
 8001ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d011      	beq.n	8001f26 <HAL_UART_IRQHandler+0x126>
 8001f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f043 0208 	orr.w	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 81f2 	beq.w	8002314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_UART_IRQHandler+0x14e>
 8001f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fb24 	bl	8002596 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b40      	cmp	r3, #64	@ 0x40
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <HAL_UART_IRQHandler+0x17a>
 8001f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04f      	beq.n	800201a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa2c 	bl	80023d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b40      	cmp	r3, #64	@ 0x40
 8001f8c:	d141      	bne.n	8002012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3314      	adds	r3, #20
 8001f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3314      	adds	r3, #20
 8001fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fca:	e841 2300 	strex	r3, r2, [r1]
 8001fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1d9      	bne.n	8001f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d013      	beq.n	800200a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80021e0 <HAL_UART_IRQHandler+0x3e0>)
 8001fe8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f841 	bl	8001076 <HAL_DMA_Abort_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002004:	4610      	mov	r0, r2
 8002006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002008:	e00e      	b.n	8002028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f994 	bl	8002338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002010:	e00a      	b.n	8002028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f990 	bl	8002338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	e006      	b.n	8002028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f98c 	bl	8002338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002026:	e175      	b.n	8002314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	bf00      	nop
    return;
 800202a:	e173      	b.n	8002314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 814f 	bne.w	80022d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8148 	beq.w	80022d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8141 	beq.w	80022d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b40      	cmp	r3, #64	@ 0x40
 8002074:	f040 80b6 	bne.w	80021e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8145 	beq.w	8002318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002096:	429a      	cmp	r2, r3
 8002098:	f080 813e 	bcs.w	8002318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ae:	f000 8088 	beq.w	80021c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020c0:	e853 3f00 	ldrex	r3, [r3]
 80020c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80020de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80020ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020ee:	e841 2300 	strex	r3, r2, [r1]
 80020f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1d9      	bne.n	80020b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3314      	adds	r3, #20
 8002104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002108:	e853 3f00 	ldrex	r3, [r3]
 800210c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800210e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3314      	adds	r3, #20
 800211e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800212a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e1      	bne.n	80020fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3314      	adds	r3, #20
 8002140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002144:	e853 3f00 	ldrex	r3, [r3]
 8002148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800214a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800214c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3314      	adds	r3, #20
 800215a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800215e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002166:	e841 2300 	strex	r3, r2, [r1]
 800216a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800216c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1e3      	bne.n	800213a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800218a:	e853 3f00 	ldrex	r3, [r3]
 800218e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	330c      	adds	r3, #12
 80021a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80021a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021ac:	e841 2300 	strex	r3, r2, [r1]
 80021b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80021b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e3      	bne.n	8002180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe feea 	bl	8000f96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f8b7 	bl	800234c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021de:	e09b      	b.n	8002318 <HAL_UART_IRQHandler+0x518>
 80021e0:	0800249f 	.word	0x0800249f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 808e 	beq.w	800231c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8089 	beq.w	800231c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	330c      	adds	r3, #12
 8002210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002214:	e853 3f00 	ldrex	r3, [r3]
 8002218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800221a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800221c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	330c      	adds	r3, #12
 800222a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800222e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800223c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e3      	bne.n	800220a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3314      	adds	r3, #20
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	623b      	str	r3, [r7, #32]
   return(result);
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3314      	adds	r3, #20
 8002262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002266:	633a      	str	r2, [r7, #48]	@ 0x30
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800226c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800226e:	e841 2300 	strex	r3, r2, [r1]
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e3      	bne.n	8002242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	330c      	adds	r3, #12
 800228e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	e853 3f00 	ldrex	r3, [r3]
 8002296:	60fb      	str	r3, [r7, #12]
   return(result);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0310 	bic.w	r3, r3, #16
 800229e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80022ac:	61fa      	str	r2, [r7, #28]
 80022ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	e841 2300 	strex	r3, r2, [r1]
 80022b8:	617b      	str	r3, [r7, #20]
   return(result);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e3      	bne.n	8002288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f83d 	bl	800234c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022d2:	e023      	b.n	800231c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_UART_IRQHandler+0x4f4>
 80022e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f8ea 	bl	80024c6 <UART_Transmit_IT>
    return;
 80022f2:	e014      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_UART_IRQHandler+0x51e>
 8002300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f92a 	bl	8002566 <UART_EndTransmit_IT>
    return;
 8002312:	e004      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
    return;
 8002314:	bf00      	nop
 8002316:	e002      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
      return;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_UART_IRQHandler+0x51e>
      return;
 800231c:	bf00      	nop
  }
}
 800231e:	37e8      	adds	r7, #232	@ 0xe8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2222      	movs	r2, #34	@ 0x22
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0220 	orr.w	r2, r2, #32
 80023c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023d8:	b480      	push	{r7}
 80023da:	b095      	sub	sp, #84	@ 0x54
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ea:	e853 3f00 	ldrex	r3, [r3]
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002400:	643a      	str	r2, [r7, #64]	@ 0x40
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002408:	e841 2300 	strex	r3, r2, [r1]
 800240c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800240e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3314      	adds	r3, #20
 800241a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	61fb      	str	r3, [r7, #28]
   return(result);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3314      	adds	r3, #20
 8002432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002434:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800243a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243c:	e841 2300 	strex	r3, r2, [r1]
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e5      	bne.n	8002414 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b01      	cmp	r3, #1
 800244e:	d119      	bne.n	8002484 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	e853 3f00 	ldrex	r3, [r3]
 800245e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f023 0310 	bic.w	r3, r3, #16
 8002466:	647b      	str	r3, [r7, #68]	@ 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002470:	61ba      	str	r2, [r7, #24]
 8002472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002474:	6979      	ldr	r1, [r7, #20]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	e841 2300 	strex	r3, r2, [r1]
 800247c:	613b      	str	r3, [r7, #16]
   return(result);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e5      	bne.n	8002450 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002492:	bf00      	nop
 8002494:	3754      	adds	r7, #84	@ 0x54
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff ff3d 	bl	8002338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b21      	cmp	r3, #33	@ 0x21
 80024d8:	d13e      	bne.n	8002558 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e2:	d114      	bne.n	800250e <UART_Transmit_IT+0x48>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d110      	bne.n	800250e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002500:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	1c9a      	adds	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	621a      	str	r2, [r3, #32]
 800250c:	e008      	b.n	8002520 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	1c59      	adds	r1, r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6211      	str	r1, [r2, #32]
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29b      	uxth	r3, r3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4619      	mov	r1, r3
 800252e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10f      	bne.n	8002554 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002542:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002552:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800257c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fecc 	bl	8002324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b08c      	sub	sp, #48	@ 0x30
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b22      	cmp	r3, #34	@ 0x22
 80025a8:	f040 80ae 	bne.w	8002708 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b4:	d117      	bne.n	80025e6 <UART_Receive_IT+0x50>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	1c9a      	adds	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80025e4:	e026      	b.n	8002634 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f8:	d007      	beq.n	800260a <UART_Receive_IT+0x74>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <UART_Receive_IT+0x82>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e008      	b.n	800262a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002624:	b2da      	uxtb	r2, r3
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002644:	2b00      	cmp	r3, #0
 8002646:	d15d      	bne.n	8002704 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0220 	bic.w	r2, r2, #32
 8002656:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	2b01      	cmp	r3, #1
 800268c:	d135      	bne.n	80026fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	e853 3f00 	ldrex	r3, [r3]
 80026a2:	613b      	str	r3, [r7, #16]
   return(result);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f023 0310 	bic.w	r3, r3, #16
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b4:	623a      	str	r2, [r7, #32]
 80026b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b8:	69f9      	ldr	r1, [r7, #28]
 80026ba:	6a3a      	ldr	r2, [r7, #32]
 80026bc:	e841 2300 	strex	r3, r2, [r1]
 80026c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e5      	bne.n	8002694 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d10a      	bne.n	80026ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fe2a 	bl	800234c <HAL_UARTEx_RxEventCallback>
 80026f8:	e002      	b.n	8002700 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe f8d2 	bl	80008a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e002      	b.n	800270a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3730      	adds	r7, #48	@ 0x30
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002718:	b0c0      	sub	sp, #256	@ 0x100
 800271a:	af00      	add	r7, sp, #0
 800271c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002730:	68d9      	ldr	r1, [r3, #12]
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	ea40 0301 	orr.w	r3, r0, r1
 800273c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	431a      	orrs	r2, r3
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800276c:	f021 010c 	bic.w	r1, r1, #12
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278e:	6999      	ldr	r1, [r3, #24]
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	ea40 0301 	orr.w	r3, r0, r1
 800279a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b8f      	ldr	r3, [pc, #572]	@ (80029e0 <UART_SetConfig+0x2cc>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d005      	beq.n	80027b4 <UART_SetConfig+0xa0>
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b8d      	ldr	r3, [pc, #564]	@ (80029e4 <UART_SetConfig+0x2d0>)
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d104      	bne.n	80027be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b4:	f7ff fa64 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 80027b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027bc:	e003      	b.n	80027c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027be:	f7ff fa4b 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80027c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d0:	f040 810c 	bne.w	80029ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027ee:	415b      	adcs	r3, r3
 80027f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027f6:	4621      	mov	r1, r4
 80027f8:	eb12 0801 	adds.w	r8, r2, r1
 80027fc:	4629      	mov	r1, r5
 80027fe:	eb43 0901 	adc.w	r9, r3, r1
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002816:	4690      	mov	r8, r2
 8002818:	4699      	mov	r9, r3
 800281a:	4623      	mov	r3, r4
 800281c:	eb18 0303 	adds.w	r3, r8, r3
 8002820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002824:	462b      	mov	r3, r5
 8002826:	eb49 0303 	adc.w	r3, r9, r3
 800282a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800282e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800283a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800283e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002842:	460b      	mov	r3, r1
 8002844:	18db      	adds	r3, r3, r3
 8002846:	653b      	str	r3, [r7, #80]	@ 0x50
 8002848:	4613      	mov	r3, r2
 800284a:	eb42 0303 	adc.w	r3, r2, r3
 800284e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002854:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002858:	f7fd fd12 	bl	8000280 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4b61      	ldr	r3, [pc, #388]	@ (80029e8 <UART_SetConfig+0x2d4>)
 8002862:	fba3 2302 	umull	r2, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	011c      	lsls	r4, r3, #4
 800286a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002874:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002878:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800287c:	4642      	mov	r2, r8
 800287e:	464b      	mov	r3, r9
 8002880:	1891      	adds	r1, r2, r2
 8002882:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002884:	415b      	adcs	r3, r3
 8002886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002888:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800288c:	4641      	mov	r1, r8
 800288e:	eb12 0a01 	adds.w	sl, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb43 0b01 	adc.w	fp, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ac:	4692      	mov	sl, r2
 80028ae:	469b      	mov	fp, r3
 80028b0:	4643      	mov	r3, r8
 80028b2:	eb1a 0303 	adds.w	r3, sl, r3
 80028b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028ba:	464b      	mov	r3, r9
 80028bc:	eb4b 0303 	adc.w	r3, fp, r3
 80028c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028d8:	460b      	mov	r3, r1
 80028da:	18db      	adds	r3, r3, r3
 80028dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80028de:	4613      	mov	r3, r2
 80028e0:	eb42 0303 	adc.w	r3, r2, r3
 80028e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028ee:	f7fd fcc7 	bl	8000280 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <UART_SetConfig+0x2d4>)
 80028fa:	fba3 2301 	umull	r2, r3, r3, r1
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2264      	movs	r2, #100	@ 0x64
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	1acb      	subs	r3, r1, r3
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800290e:	4b36      	ldr	r3, [pc, #216]	@ (80029e8 <UART_SetConfig+0x2d4>)
 8002910:	fba3 2302 	umull	r2, r3, r3, r2
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800291c:	441c      	add	r4, r3
 800291e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002922:	2200      	movs	r2, #0
 8002924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002928:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800292c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002930:	4642      	mov	r2, r8
 8002932:	464b      	mov	r3, r9
 8002934:	1891      	adds	r1, r2, r2
 8002936:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002938:	415b      	adcs	r3, r3
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800293c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002940:	4641      	mov	r1, r8
 8002942:	1851      	adds	r1, r2, r1
 8002944:	6339      	str	r1, [r7, #48]	@ 0x30
 8002946:	4649      	mov	r1, r9
 8002948:	414b      	adcs	r3, r1
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002958:	4659      	mov	r1, fp
 800295a:	00cb      	lsls	r3, r1, #3
 800295c:	4651      	mov	r1, sl
 800295e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002962:	4651      	mov	r1, sl
 8002964:	00ca      	lsls	r2, r1, #3
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	4603      	mov	r3, r0
 800296c:	4642      	mov	r2, r8
 800296e:	189b      	adds	r3, r3, r2
 8002970:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002974:	464b      	mov	r3, r9
 8002976:	460a      	mov	r2, r1
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800298c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002990:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002994:	460b      	mov	r3, r1
 8002996:	18db      	adds	r3, r3, r3
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800299a:	4613      	mov	r3, r2
 800299c:	eb42 0303 	adc.w	r3, r2, r3
 80029a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029aa:	f7fd fc69 	bl	8000280 <__aeabi_uldivmod>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <UART_SetConfig+0x2d4>)
 80029b4:	fba3 1302 	umull	r1, r3, r3, r2
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	2164      	movs	r1, #100	@ 0x64
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	3332      	adds	r3, #50	@ 0x32
 80029c6:	4a08      	ldr	r2, [pc, #32]	@ (80029e8 <UART_SetConfig+0x2d4>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	f003 0207 	and.w	r2, r3, #7
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4422      	add	r2, r4
 80029da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029dc:	e106      	b.n	8002bec <UART_SetConfig+0x4d8>
 80029de:	bf00      	nop
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029fe:	4642      	mov	r2, r8
 8002a00:	464b      	mov	r3, r9
 8002a02:	1891      	adds	r1, r2, r2
 8002a04:	6239      	str	r1, [r7, #32]
 8002a06:	415b      	adcs	r3, r3
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a0e:	4641      	mov	r1, r8
 8002a10:	1854      	adds	r4, r2, r1
 8002a12:	4649      	mov	r1, r9
 8002a14:	eb43 0501 	adc.w	r5, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	00eb      	lsls	r3, r5, #3
 8002a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a26:	00e2      	lsls	r2, r4, #3
 8002a28:	4614      	mov	r4, r2
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	4643      	mov	r3, r8
 8002a2e:	18e3      	adds	r3, r4, r3
 8002a30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a34:	464b      	mov	r3, r9
 8002a36:	eb45 0303 	adc.w	r3, r5, r3
 8002a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	008b      	lsls	r3, r1, #2
 8002a5e:	4621      	mov	r1, r4
 8002a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a64:	4621      	mov	r1, r4
 8002a66:	008a      	lsls	r2, r1, #2
 8002a68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a6c:	f7fd fc08 	bl	8000280 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4b60      	ldr	r3, [pc, #384]	@ (8002bf8 <UART_SetConfig+0x4e4>)
 8002a76:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	011c      	lsls	r4, r3, #4
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	1891      	adds	r1, r2, r2
 8002a96:	61b9      	str	r1, [r7, #24]
 8002a98:	415b      	adcs	r3, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	1851      	adds	r1, r2, r1
 8002aa4:	6139      	str	r1, [r7, #16]
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	414b      	adcs	r3, r1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab8:	4659      	mov	r1, fp
 8002aba:	00cb      	lsls	r3, r1, #3
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	00ca      	lsls	r2, r1, #3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	4642      	mov	r2, r8
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	eb42 0303 	adc.w	r3, r2, r3
 8002adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002af8:	4649      	mov	r1, r9
 8002afa:	008b      	lsls	r3, r1, #2
 8002afc:	4641      	mov	r1, r8
 8002afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b02:	4641      	mov	r1, r8
 8002b04:	008a      	lsls	r2, r1, #2
 8002b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b0a:	f7fd fbb9 	bl	8000280 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <UART_SetConfig+0x4e4>)
 8002b16:	fba3 2301 	umull	r2, r3, r3, r1
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2264      	movs	r2, #100	@ 0x64
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	1acb      	subs	r3, r1, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	3332      	adds	r3, #50	@ 0x32
 8002b28:	4a33      	ldr	r2, [pc, #204]	@ (8002bf8 <UART_SetConfig+0x4e4>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b34:	441c      	add	r4, r3
 8002b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b44:	4642      	mov	r2, r8
 8002b46:	464b      	mov	r3, r9
 8002b48:	1891      	adds	r1, r2, r2
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b54:	4641      	mov	r1, r8
 8002b56:	1851      	adds	r1, r2, r1
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	414b      	adcs	r3, r1
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	00cb      	lsls	r3, r1, #3
 8002b70:	4651      	mov	r1, sl
 8002b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b76:	4651      	mov	r1, sl
 8002b78:	00ca      	lsls	r2, r1, #3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4642      	mov	r2, r8
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b86:	464b      	mov	r3, r9
 8002b88:	460a      	mov	r2, r1
 8002b8a:	eb42 0303 	adc.w	r3, r2, r3
 8002b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ba8:	4649      	mov	r1, r9
 8002baa:	008b      	lsls	r3, r1, #2
 8002bac:	4641      	mov	r1, r8
 8002bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	008a      	lsls	r2, r1, #2
 8002bb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bba:	f7fd fb61 	bl	8000280 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <UART_SetConfig+0x4e4>)
 8002bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	2164      	movs	r1, #100	@ 0x64
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	3332      	adds	r3, #50	@ 0x32
 8002bd6:	4a08      	ldr	r2, [pc, #32]	@ (8002bf8 <UART_SetConfig+0x4e4>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4422      	add	r2, r4
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf8:	51eb851f 	.word	0x51eb851f

08002bfc <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 8002c02:	f243 3114 	movw	r1, #13076	@ 0x3314
 8002c06:	2001      	movs	r0, #1
 8002c08:	f004 fc8a 	bl	8007520 <calloc>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	607b      	str	r3, [r7, #4]
    if (!handle)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d019      	beq.n	8002c4a <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fa02 	bl	8006024 <TF_InitStatic>
 8002c20:	4603      	mov	r3, r0
 8002c22:	70fb      	strb	r3, [r7, #3]
    if (!status)
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4909      	ldr	r1, [pc, #36]	@ (8002c58 <gapcom_create+0x5c>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fb09 	bl	800624c <TF_AddGenericListener>

    goto end;
 8002c3a:	e007      	b.n	8002c4c <gapcom_create+0x50>
        goto free_handle;
 8002c3c:	bf00      	nop

free_handle:
    free(handle);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f004 fc8a 	bl	8007558 <free>
    handle = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	e000      	b.n	8002c4c <gapcom_create+0x50>
        goto end;
 8002c4a:	bf00      	nop
end:
    return handle;
 8002c4c:	687b      	ldr	r3, [r7, #4]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	08002cf1 	.word	0x08002cf1

08002c5c <gapcom_set_sender_impl>:
        free(handle);
    }
}

void gapcom_set_sender_impl(gapcom_handle_t* handle, gapcom_sender_t* sender_impl)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
    handle->sender_impl = sender_impl;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <gapcom_accept>:
{
    handle->user_callback[msg_type] = NULL;
}

void gapcom_accept(gapcom_handle_t* handle, const uint8_t* buf, size_t len)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
    log_com("Accepting message");
    /* CAUTION: TinyFrame offers no way of checking if this succeeded ! */
    TF_Accept(&handle->tf_handle, buf, len);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 fc12 	bl	80064bc <TF_Accept>
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8002ca8:	2218      	movs	r2, #24
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f004 ff13 	bl	8007ad8 <memset>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <TF_WriteImpl>:
#include <pb_decode.h>
#include <stdint.h>
#include <unistd.h>

void TF_WriteImpl(TinyFrame* tf_handle, const uint8_t* buf, uint32_t len)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b088      	sub	sp, #32
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
    ssize_t bytes_sent;
    gapcom_handle_t* handle;
    gapcom_sender_t* sender;

    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	61bb      	str	r3, [r7, #24]
    sender = handle->sender_impl;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002cd4:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8002cd8:	617b      	str	r3, [r7, #20]
    bytes_sent = sender->send(sender, buf, len);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	4798      	blx	r3
 8002ce6:	6138      	str	r0, [r7, #16]
    if (bytes_sent < 0)
    {
        log_com("Failed to send message, returned %lld", bytes_sent);
    }
}
 8002ce8:	bf00      	nop
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b0a3      	sub	sp, #140	@ 0x8c
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6178      	str	r0, [r7, #20]
 8002cf8:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	88db      	ldrh	r3, [r3, #6]
 8002d0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d10:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 8002d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 81e0 	beq.w	80030e4 <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f103 011a 	add.w	r1, r3, #26
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	8b1b      	ldrh	r3, [r3, #24]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	463b      	mov	r3, r7
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fb3a 	bl	80033ac <pb_istream_from_buffer>
 8002d38:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	88db      	ldrh	r3, [r3, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11a      	bne.n	8002d82 <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 8002d52:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002d56:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d5a:	49b9      	ldr	r1, [pc, #740]	@ (8003040 <gapcom_tf_id_listener+0x350>)
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fc5f 	bl	8004620 <pb_decode>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002d68:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 81bc 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002d72:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002d76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d78:	4611      	mov	r1, r2
 8002d7a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002d7e:	4798      	blx	r3
 8002d80:	e1b3      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	88db      	ldrh	r3, [r3, #6]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d11a      	bne.n	8002dc0 <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 8002d90:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002d94:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d98:	49aa      	ldr	r1, [pc, #680]	@ (8003044 <gapcom_tf_id_listener+0x354>)
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 fc40 	bl	8004620 <pb_decode>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002da6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 819d 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002db0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002db4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002db6:	4611      	mov	r1, r2
 8002db8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002dbc:	4798      	blx	r3
 8002dbe:	e194      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	88db      	ldrh	r3, [r3, #6]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d11a      	bne.n	8002dfe <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 8002dce:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002dd2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002dd6:	499c      	ldr	r1, [pc, #624]	@ (8003048 <gapcom_tf_id_listener+0x358>)
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fc21 	bl	8004620 <pb_decode>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002de4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 817e 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002dee:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002df2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002df4:	4611      	mov	r1, r2
 8002df6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002dfa:	4798      	blx	r3
 8002dfc:	e175      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	88db      	ldrh	r3, [r3, #6]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d11a      	bne.n	8002e3c <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8002e0c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002e10:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e14:	498d      	ldr	r1, [pc, #564]	@ (800304c <gapcom_tf_id_listener+0x35c>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fc02 	bl	8004620 <pb_decode>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002e22:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 815f 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002e2c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002e30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e32:	4611      	mov	r1, r2
 8002e34:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e38:	4798      	blx	r3
 8002e3a:	e156      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	88db      	ldrh	r3, [r3, #6]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d11a      	bne.n	8002e7a <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 8002e4a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002e4e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e52:	497f      	ldr	r1, [pc, #508]	@ (8003050 <gapcom_tf_id_listener+0x360>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fbe3 	bl	8004620 <pb_decode>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002e60:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8140 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002e6a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e70:	4611      	mov	r1, r2
 8002e72:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e76:	4798      	blx	r3
 8002e78:	e137      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	88db      	ldrh	r3, [r3, #6]
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d11a      	bne.n	8002eb8 <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 8002e88:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002e8c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e90:	4970      	ldr	r1, [pc, #448]	@ (8003054 <gapcom_tf_id_listener+0x364>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 fbc4 	bl	8004620 <pb_decode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002e9e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8121 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002ea8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eae:	4611      	mov	r1, r2
 8002eb0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002eb4:	4798      	blx	r3
 8002eb6:	e118      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	88db      	ldrh	r3, [r3, #6]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d11d      	bne.n	8002efc <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 8002ec0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8002ecc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002ed0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ed4:	4960      	ldr	r1, [pc, #384]	@ (8003058 <gapcom_tf_id_listener+0x368>)
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fba2 	bl	8004620 <pb_decode>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002ee2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80ff 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002eec:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002ef0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002ef8:	4798      	blx	r3
 8002efa:	e0f6      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	88db      	ldrh	r3, [r3, #6]
 8002f00:	2b07      	cmp	r3, #7
 8002f02:	d11a      	bne.n	8002f3a <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 8002f0a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f12:	4952      	ldr	r1, [pc, #328]	@ (800305c <gapcom_tf_id_listener+0x36c>)
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 fb83 	bl	8004620 <pb_decode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f20:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80e0 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002f2a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f30:	4611      	mov	r1, r2
 8002f32:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f36:	4798      	blx	r3
 8002f38:	e0d7      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	88db      	ldrh	r3, [r3, #6]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11a      	bne.n	8002f78 <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 8002f48:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002f4c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f50:	4943      	ldr	r1, [pc, #268]	@ (8003060 <gapcom_tf_id_listener+0x370>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 fb64 	bl	8004620 <pb_decode>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002f5e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80c1 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002f68:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002f6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f6e:	4611      	mov	r1, r2
 8002f70:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002f74:	4798      	blx	r3
 8002f76:	e0b8      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	88db      	ldrh	r3, [r3, #6]
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d120      	bne.n	8002fc2 <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002f86:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 8002f92:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002f96:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f9a:	4932      	ldr	r1, [pc, #200]	@ (8003064 <gapcom_tf_id_listener+0x374>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fb3f 	bl	8004620 <pb_decode>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002fa8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 809c 	beq.w	80030ea <gapcom_tf_id_listener+0x3fa>
 8002fb2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002fb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fb8:	4611      	mov	r1, r2
 8002fba:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002fbe:	4798      	blx	r3
 8002fc0:	e093      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	88db      	ldrh	r3, [r3, #6]
 8002fc6:	2b0a      	cmp	r3, #10
 8002fc8:	d119      	bne.n	8002ffe <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 8002fd0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002fd4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002fd8:	4923      	ldr	r1, [pc, #140]	@ (8003068 <gapcom_tf_id_listener+0x378>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fb20 	bl	8004620 <pb_decode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002fe6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d07d      	beq.n	80030ea <gapcom_tf_id_listener+0x3fa>
 8002fee:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002ff2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002ffa:	4798      	blx	r3
 8002ffc:	e075      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	88db      	ldrh	r3, [r3, #6]
 8003002:	2b0b      	cmp	r3, #11
 8003004:	d134      	bne.n	8003070 <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 8003006:	f107 0320 	add.w	r3, r7, #32
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 8003010:	f107 0220 	add.w	r2, r7, #32
 8003014:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003018:	4914      	ldr	r1, [pc, #80]	@ (800306c <gapcom_tf_id_listener+0x37c>)
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fb00 	bl	8004620 <pb_decode>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003026:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800302a:	2b00      	cmp	r3, #0
 800302c:	d05d      	beq.n	80030ea <gapcom_tf_id_listener+0x3fa>
 800302e:	f107 0220 	add.w	r2, r7, #32
 8003032:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003034:	4611      	mov	r1, r2
 8003036:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800303a:	4798      	blx	r3
 800303c:	e055      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
 800303e:	bf00      	nop
 8003040:	080089d4 	.word	0x080089d4
 8003044:	080089f8 	.word	0x080089f8
 8003048:	08008a1c 	.word	0x08008a1c
 800304c:	08008a40 	.word	0x08008a40
 8003050:	08008a64 	.word	0x08008a64
 8003054:	08008a88 	.word	0x08008a88
 8003058:	08008ab0 	.word	0x08008ab0
 800305c:	08008ad4 	.word	0x08008ad4
 8003060:	08008af4 	.word	0x08008af4
 8003064:	08008b20 	.word	0x08008b20
 8003068:	08008b40 	.word	0x08008b40
 800306c:	08008b74 	.word	0x08008b74
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	88db      	ldrh	r3, [r3, #6]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d118      	bne.n	80030aa <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 8003078:	2300      	movs	r3, #0
 800307a:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 800307c:	f107 021c 	add.w	r2, r7, #28
 8003080:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003084:	491b      	ldr	r1, [pc, #108]	@ (80030f4 <gapcom_tf_id_listener+0x404>)
 8003086:	4618      	mov	r0, r3
 8003088:	f001 faca 	bl	8004620 <pb_decode>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8003092:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003096:	2b00      	cmp	r3, #0
 8003098:	d027      	beq.n	80030ea <gapcom_tf_id_listener+0x3fa>
 800309a:	f107 021c 	add.w	r2, r7, #28
 800309e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030a0:	4611      	mov	r1, r2
 80030a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030a6:	4798      	blx	r3
 80030a8:	e01f      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	88db      	ldrh	r3, [r3, #6]
 80030ae:	2b0d      	cmp	r3, #13
 80030b0:	d11a      	bne.n	80030e8 <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 80030b2:	2300      	movs	r3, #0
 80030b4:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 80030b6:	f107 0218 	add.w	r2, r7, #24
 80030ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030be:	490e      	ldr	r1, [pc, #56]	@ (80030f8 <gapcom_tf_id_listener+0x408>)
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 faad 	bl	8004620 <pb_decode>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80030cc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <gapcom_tf_id_listener+0x3fa>
 80030d4:	f107 0218 	add.w	r2, r7, #24
 80030d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030da:	4611      	mov	r1, r2
 80030dc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030e0:	4798      	blx	r3
 80030e2:	e002      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
        goto end;
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 80030e8:	bf00      	nop
    return TF_STAY;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	378c      	adds	r7, #140	@ 0x8c
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	08008b98 	.word	0x08008b98
 80030f8:	08008bbc 	.word	0x08008bbc

080030fc <gapcom_encapsulate_tf>:

int gapcom_encapsulate_tf(
    gapcom_handle_t* handle,
    gapcom_msg_t msg_type,
    int msg_len)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	460b      	mov	r3, r1
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	72fb      	strb	r3, [r7, #11]
    /* Build TinyFrame frame pointing to payload */
    TF_ClearMsg(&handle->tf_msg);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 8003110:	3320      	adds	r3, #32
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fdc4 	bl	8002ca0 <TF_ClearMsg>
    handle->tf_msg.type = msg_type;
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003122:	f8a3 2266 	strh.w	r2, [r3, #614]	@ 0x266
    handle->tf_msg.data = (const uint8_t*)(&handle->sendbuf);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 800312c:	3334      	adds	r3, #52	@ 0x34
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8003134:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    handle->tf_msg.len = (TF_LEN)msg_len;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003142:	f8a3 226c 	strh.w	r2, [r3, #620]	@ 0x26c
    /* When the payload is empty (which can happen with protobuf, for example
     * with a single numeric field with value 0 : it will get compressed and
     * interpreted as 0 upon decoding) the payload CRC is not appended by
     * TinyFrame. Otherwise, we do have a payload CRC as a footer.
     */
    if (msg_len > 0)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	dd01      	ble.n	8003150 <gapcom_encapsulate_tf+0x54>
        return GAPCOM_TF_HEADER_SIZE_BYTES + GAPCOM_TF_FOOTER_SIZE_BYTES;
 800314c:	230d      	movs	r3, #13
 800314e:	e000      	b.n	8003152 <gapcom_encapsulate_tf+0x56>
    else
        return GAPCOM_TF_HEADER_SIZE_BYTES;
 8003150:	230b      	movs	r3, #11
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <gapcom_respond_ping>:
 ************************/

int gapcom_respond_ping(
    gapcom_handle_t* handle,
    GAPErrorCode error_code)
{
 800315c:	b5b0      	push	{r4, r5, r7, lr}
 800315e:	b092      	sub	sp, #72	@ 0x48
 8003160:	af00      	add	r7, sp, #0
 8003162:	61f8      	str	r0, [r7, #28]
 8003164:	460b      	mov	r3, r1
 8003166:	76fb      	strb	r3, [r7, #27]
    int ret = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	647b      	str	r3, [r7, #68]	@ 0x44
    GAPPingResp resp = GAPPingResp_init_zero;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    resp.error_code = error_code;
 8003172:	7efb      	ldrb	r3, [r7, #27]
 8003174:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    ret += gapcom_encapsulate_protobuf(handle, GAPPingResp_fields, resp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800317c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317e:	f503 530a 	add.w	r3, r3, #8832	@ 0x2280
 8003182:	3334      	adds	r3, #52	@ 0x34
 8003184:	4638      	mov	r0, r7
 8003186:	f44f 5283 	mov.w	r2, #4192	@ 0x1060
 800318a:	4619      	mov	r1, r3
 800318c:	f001 fe1a 	bl	8004dc4 <pb_ostream_from_buffer>
 8003190:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8003194:	463d      	mov	r5, r7
 8003196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800319a:	682b      	ldr	r3, [r5, #0]
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80031a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031a6:	4919      	ldr	r1, [pc, #100]	@ (800320c <gapcom_respond_ping+0xb0>)
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 fa78 	bl	800569e <pb_encode>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80031b4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <gapcom_respond_ping+0x66>
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c0:	e002      	b.n	80031c8 <gapcom_respond_ping+0x6c>
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031cc:	4413      	add	r3, r2
 80031ce:	647b      	str	r3, [r7, #68]	@ 0x44
    if (ret == -1)
 80031d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031d6:	d012      	beq.n	80031fe <gapcom_respond_ping+0xa2>
    {
        log_com("Failed to encode Ping protobuf; not sending frame");
        goto end;
    }

    ret += gapcom_encapsulate_tf(handle, GAPCOM_MSG_PING_RESP, ret);
 80031d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031da:	2101      	movs	r1, #1
 80031dc:	69f8      	ldr	r0, [r7, #28]
 80031de:	f7ff ff8d 	bl	80030fc <gapcom_encapsulate_tf>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e6:	4413      	add	r3, r2
 80031e8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Send the frame without any callback. This function always succeed. */
    TF_Respond(&handle->tf_handle, &handle->tf_msg);
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 5309 	add.w	r3, r3, #8768	@ 0x2240
 80031f2:	3320      	adds	r3, #32
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f003 fe68 	bl	8006ecc <TF_Respond>
 80031fc:	e000      	b.n	8003200 <gapcom_respond_ping+0xa4>
        goto end;
 80031fe:	bf00      	nop

end:
    return ret;
 8003200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003202:	4618      	mov	r0, r3
 8003204:	3748      	adds	r7, #72	@ 0x48
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	bf00      	nop
 800320c:	080089f8 	.word	0x080089f8

08003210 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	441a      	add	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6979      	ldr	r1, [r7, #20]
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	f004 fcd8 	bl	8007bee <memcpy>
    }
    
    return true;
 800323e:	2301      	movs	r3, #1
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <pb_read+0x16>
        return true;
 800325a:	2301      	movs	r3, #1
 800325c:	e05f      	b.n	800331e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d123      	bne.n	80032ac <pb_read+0x64>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2f      	ldr	r2, [pc, #188]	@ (8003328 <pb_read+0xe0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01e      	beq.n	80032ac <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800326e:	e011      	b.n	8003294 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	2210      	movs	r2, #16
 8003276:	4619      	mov	r1, r3
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff ffe5 	bl	8003248 <pb_read>
 800327e:	4603      	mov	r3, r0
 8003280:	f083 0301 	eor.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <pb_read+0x46>
				return false;
 800328a:	2300      	movs	r3, #0
 800328c:	e047      	b.n	800331e <pb_read+0xd6>
			
			count -= 16;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3b10      	subs	r3, #16
 8003292:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b10      	cmp	r3, #16
 8003298:	d8ea      	bhi.n	8003270 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 800329a:	f107 0310 	add.w	r3, r7, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4619      	mov	r1, r3
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff ffd0 	bl	8003248 <pb_read>
 80032a8:	4603      	mov	r3, r0
 80032aa:	e038      	b.n	800331e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d90b      	bls.n	80032ce <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <pb_read+0x7c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	e000      	b.n	80032c6 <pb_read+0x7e>
 80032c4:	4b19      	ldr	r3, [pc, #100]	@ (800332c <pb_read+0xe4>)
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	60d3      	str	r3, [r2, #12]
 80032ca:	2300      	movs	r3, #0
 80032cc:	e027      	b.n	800331e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	4798      	blx	r3
 80032da:	4603      	mov	r3, r0
 80032dc:	f083 0301 	eor.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <pb_read+0xac>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	e000      	b.n	80032f6 <pb_read+0xae>
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <pb_read+0xe8>)
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	60d3      	str	r3, [r2, #12]
 80032fa:	2300      	movs	r3, #0
 80032fc:	e00f      	b.n	800331e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d903      	bls.n	8003310 <pb_read+0xc8>
        stream->bytes_left = 0;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	e005      	b.n	800331c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad2      	subs	r2, r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]

    return true;
 800331c:	2301      	movs	r3, #1
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	08003211 	.word	0x08003211
 800332c:	080084b4 	.word	0x080084b4
 8003330:	080084c4 	.word	0x080084c4

08003334 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <pb_readbyte+0x20>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	e000      	b.n	8003356 <pb_readbyte+0x22>
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <pb_readbyte+0x70>)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	60d3      	str	r3, [r2, #12]
 800335a:	2300      	movs	r3, #0
 800335c:	e01d      	b.n	800339a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	4603      	mov	r3, r0
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <pb_readbyte+0x50>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	e000      	b.n	8003386 <pb_readbyte+0x52>
 8003384:	4b08      	ldr	r3, [pc, #32]	@ (80033a8 <pb_readbyte+0x74>)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	60d3      	str	r3, [r2, #12]
 800338a:	2300      	movs	r3, #0
 800338c:	e005      	b.n	800339a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]
    
    return true;    
 8003398:	2301      	movs	r3, #1
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	080084b4 	.word	0x080084b4
 80033a8:	080084c4 	.word	0x080084c4

080033ac <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 80033ac:	b490      	push	{r4, r7}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 80033b8:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <pb_istream_from_buffer+0x38>)
 80033ba:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	461c      	mov	r4, r3
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	3728      	adds	r7, #40	@ 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc90      	pop	{r4, r7}
 80033e2:	4770      	bx	lr
 80033e4:	08003211 	.word	0x08003211

080033e8 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80033f4:	f107 0315 	add.w	r3, r7, #21
 80033f8:	4619      	mov	r1, r3
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff ff9a 	bl	8003334 <pb_readbyte>
 8003400:	4603      	mov	r3, r0
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003420:	2300      	movs	r3, #0
 8003422:	e084      	b.n	800352e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003424:	7d7b      	ldrb	r3, [r7, #21]
 8003426:	b25b      	sxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	db02      	blt.n	8003432 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800342c:	7d7b      	ldrb	r3, [r7, #21]
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e079      	b.n	8003526 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8003432:	2307      	movs	r3, #7
 8003434:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8003436:	7d7b      	ldrb	r3, [r7, #21]
 8003438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800343c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800343e:	f107 0315 	add.w	r3, r7, #21
 8003442:	4619      	mov	r1, r3
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff ff75 	bl	8003334 <pb_readbyte>
 800344a:	4603      	mov	r3, r0
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <pb_decode_varint32_eof+0x72>
                return false;
 8003456:	2300      	movs	r3, #0
 8003458:	e069      	b.n	800352e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b1f      	cmp	r3, #31
 800345e:	d92f      	bls.n	80034c0 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b3e      	cmp	r3, #62	@ 0x3e
 8003464:	d801      	bhi.n	800346a <pb_decode_varint32_eof+0x82>
 8003466:	23ff      	movs	r3, #255	@ 0xff
 8003468:	e000      	b.n	800346c <pb_decode_varint32_eof+0x84>
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800346e:	7d7b      	ldrb	r3, [r7, #21]
 8003470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003478:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800347a:	2b00      	cmp	r3, #0
 800347c:	da05      	bge.n	800348a <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 800347e:	7d7b      	ldrb	r3, [r7, #21]
 8003480:	7dfa      	ldrb	r2, [r7, #23]
 8003482:	429a      	cmp	r2, r3
 8003484:	d101      	bne.n	800348a <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <pb_decode_varint32_eof+0xa4>
 800348a:	2300      	movs	r3, #0
 800348c:	75bb      	strb	r3, [r7, #22]
 800348e:	7dbb      	ldrb	r3, [r7, #22]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b3f      	cmp	r3, #63	@ 0x3f
 800349a:	d805      	bhi.n	80034a8 <pb_decode_varint32_eof+0xc0>
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	f083 0301 	eor.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d037      	beq.n	8003518 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <pb_decode_varint32_eof+0xce>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	e000      	b.n	80034b8 <pb_decode_varint32_eof+0xd0>
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <pb_decode_varint32_eof+0x150>)
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	60d3      	str	r3, [r2, #12]
 80034bc:	2300      	movs	r3, #0
 80034be:	e036      	b.n	800352e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b1c      	cmp	r3, #28
 80034c4:	d11f      	bne.n	8003506 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 80034c6:	7d7b      	ldrb	r3, [r7, #21]
 80034c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <pb_decode_varint32_eof+0x10a>
 80034d0:	7d7b      	ldrb	r3, [r7, #21]
 80034d2:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80034d6:	2b78      	cmp	r3, #120	@ 0x78
 80034d8:	d00b      	beq.n	80034f2 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <pb_decode_varint32_eof+0x100>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	e000      	b.n	80034ea <pb_decode_varint32_eof+0x102>
 80034e8:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <pb_decode_varint32_eof+0x150>)
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	60d3      	str	r3, [r2, #12]
 80034ee:	2300      	movs	r3, #0
 80034f0:	e01d      	b.n	800352e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 80034f2:	7d7b      	ldrb	r3, [r7, #21]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	4313      	orrs	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e008      	b.n	8003518 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8003506:	7d7b      	ldrb	r3, [r7, #21]
 8003508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	4313      	orrs	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	3307      	adds	r3, #7
 800351c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800351e:	7d7b      	ldrb	r3, [r7, #21]
 8003520:	b25b      	sxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	db8b      	blt.n	800343e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	601a      	str	r2, [r3, #0]
   return true;
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	080084d0 	.word	0x080084d0

0800353c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8003546:	2200      	movs	r2, #0
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff4c 	bl	80033e8 <pb_decode_varint32_eof>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800355c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003560:	b08a      	sub	sp, #40	@ 0x28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8003578:	f107 0317 	add.w	r3, r7, #23
 800357c:	4619      	mov	r1, r3
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff fed8 	bl	8003334 <pb_readbyte>
 8003584:	4603      	mov	r3, r0
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <pb_decode_varint+0x38>
            return false;
 8003590:	2300      	movs	r3, #0
 8003592:	e041      	b.n	8003618 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	2b3e      	cmp	r3, #62	@ 0x3e
 8003598:	d910      	bls.n	80035bc <pb_decode_varint+0x60>
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <pb_decode_varint+0x56>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	e000      	b.n	80035b4 <pb_decode_varint+0x58>
 80035b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <pb_decode_varint+0xc8>)
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	60d3      	str	r3, [r2, #12]
 80035b8:	2300      	movs	r3, #0
 80035ba:	e02d      	b.n	8003618 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 80035cc:	f04f 0900 	mov.w	r9, #0
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	f1a3 0120 	sub.w	r1, r3, #32
 80035d6:	f1c3 0220 	rsb	r2, r3, #32
 80035da:	fa09 f503 	lsl.w	r5, r9, r3
 80035de:	fa08 f101 	lsl.w	r1, r8, r1
 80035e2:	430d      	orrs	r5, r1
 80035e4:	fa28 f202 	lsr.w	r2, r8, r2
 80035e8:	4315      	orrs	r5, r2
 80035ea:	fa08 f403 	lsl.w	r4, r8, r3
 80035ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f2:	ea42 0a04 	orr.w	sl, r2, r4
 80035f6:	ea43 0b05 	orr.w	fp, r3, r5
 80035fa:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	3307      	adds	r3, #7
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	b25b      	sxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	dbb5      	blt.n	8003578 <pb_decode_varint+0x1c>
    
    *dest = result;
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003612:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8003616:	2301      	movs	r3, #1
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	@ 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	080084d0 	.word	0x080084d0

08003628 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003630:	f107 030f 	add.w	r3, r7, #15
 8003634:	2201      	movs	r2, #1
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fe05 	bl	8003248 <pb_read>
 800363e:	4603      	mov	r3, r0
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <pb_skip_varint+0x26>
            return false;
 800364a:	2300      	movs	r3, #0
 800364c:	e004      	b.n	8003658 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	b25b      	sxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	dbec      	blt.n	8003630 <pb_skip_varint+0x8>
    return true;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ff64 	bl	800353c <pb_decode_varint32>
 8003674:	4603      	mov	r3, r0
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <pb_skip_string+0x24>
        return false;
 8003680:	2300      	movs	r3, #0
 8003682:	e006      	b.n	8003692 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	461a      	mov	r2, r3
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fddc 	bl	8003248 <pb_read>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff fe90 	bl	80033e8 <pb_decode_varint32_eof>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <pb_decode_tag+0x3e>
    {
        return false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e00b      	b.n	80036f0 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	08da      	lsrs	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	701a      	strb	r2, [r3, #0]
    return true;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d826      	bhi.n	8003758 <pb_skip_field+0x60>
 800370a:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <pb_skip_field+0x18>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003729 	.word	0x08003729
 8003714:	08003733 	.word	0x08003733
 8003718:	08003741 	.word	0x08003741
 800371c:	08003759 	.word	0x08003759
 8003720:	08003759 	.word	0x08003759
 8003724:	0800374b 	.word	0x0800374b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff7d 	bl	8003628 <pb_skip_varint>
 800372e:	4603      	mov	r3, r0
 8003730:	e01d      	b.n	800376e <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8003732:	2208      	movs	r2, #8
 8003734:	2100      	movs	r1, #0
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fd86 	bl	8003248 <pb_read>
 800373c:	4603      	mov	r3, r0
 800373e:	e016      	b.n	800376e <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff8d 	bl	8003660 <pb_skip_string>
 8003746:	4603      	mov	r3, r0
 8003748:	e011      	b.n	800376e <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800374a:	2204      	movs	r2, #4
 800374c:	2100      	movs	r1, #0
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fd7a 	bl	8003248 <pb_read>
 8003754:	4603      	mov	r3, r0
 8003756:	e00a      	b.n	800376e <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <pb_skip_field+0x6e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	e000      	b.n	8003768 <pb_skip_field+0x70>
 8003766:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <pb_skip_field+0x80>)
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	60d3      	str	r3, [r2, #12]
 800376c:	2300      	movs	r3, #0
    }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	080084e0 	.word	0x080084e0

0800377c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	460b      	mov	r3, r1
 800378a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d03f      	beq.n	8003818 <read_raw_value+0x9c>
 8003798:	2b05      	cmp	r3, #5
 800379a:	dc47      	bgt.n	800382c <read_raw_value+0xb0>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <read_raw_value+0x2a>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d02f      	beq.n	8003804 <read_raw_value+0x88>
 80037a4:	e042      	b.n	800382c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d20b      	bcs.n	80037d8 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <read_raw_value+0x52>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	e000      	b.n	80037d0 <read_raw_value+0x54>
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <read_raw_value+0xd0>)
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	2300      	movs	r3, #0
 80037d6:	e034      	b.n	8003842 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 80037d8:	2201      	movs	r2, #1
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7ff fd33 	bl	8003248 <pb_read>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <read_raw_value+0x76>
                    return false;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e027      	b.n	8003842 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dbd5      	blt.n	80037ac <read_raw_value+0x30>
            return true;
 8003800:	2301      	movs	r3, #1
 8003802:	e01e      	b.n	8003842 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800380a:	2208      	movs	r2, #8
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff fd1a 	bl	8003248 <pb_read>
 8003814:	4603      	mov	r3, r0
 8003816:	e014      	b.n	8003842 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2204      	movs	r2, #4
 800381c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800381e:	2204      	movs	r2, #4
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fd10 	bl	8003248 <pb_read>
 8003828:	4603      	mov	r3, r0
 800382a:	e00a      	b.n	8003842 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <read_raw_value+0xbe>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	e000      	b.n	800383c <read_raw_value+0xc0>
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <read_raw_value+0xd4>)
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	60d3      	str	r3, [r2, #12]
 8003840:	2300      	movs	r3, #0
    }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	080084d0 	.word	0x080084d0
 8003850:	080084e0 	.word	0x080084e0

08003854 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fe69 	bl	800353c <pb_decode_varint32>
 800386a:	4603      	mov	r3, r0
 800386c:	f083 0301 	eor.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <pb_make_string_substream+0x26>
        return false;
 8003876:	2300      	movs	r3, #0
 8003878:	e020      	b.n	80038bc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4614      	mov	r4, r2
 8003880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d20b      	bcs.n	80038a8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <pb_make_string_substream+0x4a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	e000      	b.n	80038a0 <pb_make_string_substream+0x4c>
 800389e:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <pb_make_string_substream+0x70>)
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60d3      	str	r3, [r2, #12]
 80038a4:	2300      	movs	r3, #0
 80038a6:	e009      	b.n	80038bc <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad2      	subs	r2, r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	609a      	str	r2, [r3, #8]
    return true;
 80038ba:	2301      	movs	r3, #1
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}
 80038c4:	080084f4 	.word	0x080084f4

080038c8 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	461a      	mov	r2, r3
 80038e0:	2100      	movs	r1, #0
 80038e2:	6838      	ldr	r0, [r7, #0]
 80038e4:	f7ff fcb0 	bl	8003248 <pb_read>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <pb_close_string_substream+0x30>
            return false;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e008      	b.n	800390a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	460b      	mov	r3, r1
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7d9b      	ldrb	r3, [r3, #22]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	2b0b      	cmp	r3, #11
 800392c:	f200 80d4 	bhi.w	8003ad8 <decode_basic_field+0x1c4>
 8003930:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <decode_basic_field+0x24>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003969 	.word	0x08003969
 800393c:	08003999 	.word	0x08003999
 8003940:	08003999 	.word	0x08003999
 8003944:	08003999 	.word	0x08003999
 8003948:	080039c9 	.word	0x080039c9
 800394c:	080039fd 	.word	0x080039fd
 8003950:	08003a31 	.word	0x08003a31
 8003954:	08003a5b 	.word	0x08003a5b
 8003958:	08003a85 	.word	0x08003a85
 800395c:	08003a85 	.word	0x08003a85
 8003960:	08003ad9 	.word	0x08003ad9
 8003964:	08003aaf 	.word	0x08003aaf
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <decode_basic_field+0x78>
 800396e:	7afb      	ldrb	r3, [r7, #11]
 8003970:	2bff      	cmp	r3, #255	@ 0xff
 8003972:	d00b      	beq.n	800398c <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <decode_basic_field+0x6e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	e000      	b.n	8003984 <decode_basic_field+0x70>
 8003982:	4b5d      	ldr	r3, [pc, #372]	@ (8003af8 <decode_basic_field+0x1e4>)
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	60d3      	str	r3, [r2, #12]
 8003988:	2300      	movs	r3, #0
 800398a:	e0b0      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fef6 	bl	8004780 <pb_dec_bool>
 8003994:	4603      	mov	r3, r0
 8003996:	e0aa      	b.n	8003aee <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003998:	7afb      	ldrb	r3, [r7, #11]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <decode_basic_field+0xa8>
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	2bff      	cmp	r3, #255	@ 0xff
 80039a2:	d00b      	beq.n	80039bc <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <decode_basic_field+0x9e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	e000      	b.n	80039b4 <decode_basic_field+0xa0>
 80039b2:	4b51      	ldr	r3, [pc, #324]	@ (8003af8 <decode_basic_field+0x1e4>)
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	60d3      	str	r3, [r2, #12]
 80039b8:	2300      	movs	r3, #0
 80039ba:	e098      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 feee 	bl	80047a0 <pb_dec_varint>
 80039c4:	4603      	mov	r3, r0
 80039c6:	e092      	b.n	8003aee <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80039c8:	7afb      	ldrb	r3, [r7, #11]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d00e      	beq.n	80039ec <decode_basic_field+0xd8>
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	2bff      	cmp	r3, #255	@ 0xff
 80039d2:	d00b      	beq.n	80039ec <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <decode_basic_field+0xce>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	e000      	b.n	80039e4 <decode_basic_field+0xd0>
 80039e2:	4b45      	ldr	r3, [pc, #276]	@ (8003af8 <decode_basic_field+0x1e4>)
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	60d3      	str	r3, [r2, #12]
 80039e8:	2300      	movs	r3, #0
 80039ea:	e080      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4619      	mov	r1, r3
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fe8a 	bl	800470c <pb_decode_fixed32>
 80039f8:	4603      	mov	r3, r0
 80039fa:	e078      	b.n	8003aee <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d00e      	beq.n	8003a20 <decode_basic_field+0x10c>
 8003a02:	7afb      	ldrb	r3, [r7, #11]
 8003a04:	2bff      	cmp	r3, #255	@ 0xff
 8003a06:	d00b      	beq.n	8003a20 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <decode_basic_field+0x102>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	e000      	b.n	8003a18 <decode_basic_field+0x104>
 8003a16:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <decode_basic_field+0x1e4>)
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	60d3      	str	r3, [r2, #12]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e066      	b.n	8003aee <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4619      	mov	r1, r3
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fe8c 	bl	8004744 <pb_decode_fixed64>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	e05e      	b.n	8003aee <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d00b      	beq.n	8003a4e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <decode_basic_field+0x130>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	e000      	b.n	8003a46 <decode_basic_field+0x132>
 8003a44:	4b2c      	ldr	r3, [pc, #176]	@ (8003af8 <decode_basic_field+0x1e4>)
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	60d3      	str	r3, [r2, #12]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e04f      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 ffd1 	bl	80049f8 <pb_dec_bytes>
 8003a56:	4603      	mov	r3, r0
 8003a58:	e049      	b.n	8003aee <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d00b      	beq.n	8003a78 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <decode_basic_field+0x15a>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	e000      	b.n	8003a70 <decode_basic_field+0x15c>
 8003a6e:	4b22      	ldr	r3, [pc, #136]	@ (8003af8 <decode_basic_field+0x1e4>)
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	60d3      	str	r3, [r2, #12]
 8003a74:	2300      	movs	r3, #0
 8003a76:	e03a      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f001 f830 	bl	8004ae0 <pb_dec_string>
 8003a80:	4603      	mov	r3, r0
 8003a82:	e034      	b.n	8003aee <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d00b      	beq.n	8003aa2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <decode_basic_field+0x184>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	e000      	b.n	8003a9a <decode_basic_field+0x186>
 8003a98:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <decode_basic_field+0x1e4>)
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	60d3      	str	r3, [r2, #12]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e025      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f001 f897 	bl	8004bd8 <pb_dec_submessage>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	e01f      	b.n	8003aee <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d00b      	beq.n	8003acc <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <decode_basic_field+0x1ae>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	e000      	b.n	8003ac4 <decode_basic_field+0x1b0>
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <decode_basic_field+0x1e4>)
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e010      	b.n	8003aee <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f001 f90c 	bl	8004cec <pb_dec_fixed_length_bytes>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	e00a      	b.n	8003aee <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <decode_basic_field+0x1d2>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	e000      	b.n	8003ae8 <decode_basic_field+0x1d4>
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <decode_basic_field+0x1e8>)
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	60d3      	str	r3, [r2, #12]
 8003aec:	2300      	movs	r3, #0
    }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	0800850c 	.word	0x0800850c
 8003afc:	0800851c 	.word	0x0800851c

08003b00 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b096      	sub	sp, #88	@ 0x58
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7d9b      	ldrb	r3, [r3, #22]
 8003b12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b16:	2b30      	cmp	r3, #48	@ 0x30
 8003b18:	f000 80c2 	beq.w	8003ca0 <decode_static_field+0x1a0>
 8003b1c:	2b30      	cmp	r3, #48	@ 0x30
 8003b1e:	f200 811a 	bhi.w	8003d56 <decode_static_field+0x256>
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d01f      	beq.n	8003b66 <decode_static_field+0x66>
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	f200 8115 	bhi.w	8003d56 <decode_static_field+0x256>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <decode_static_field+0x36>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d008      	beq.n	8003b46 <decode_static_field+0x46>
 8003b34:	e10f      	b.n	8003d56 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8003b36:	7afb      	ldrb	r3, [r7, #11]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fee9 	bl	8003914 <decode_basic_field>
 8003b42:	4603      	mov	r3, r0
 8003b44:	e112      	b.n	8003d6c <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff fed9 	bl	8003914 <decode_basic_field>
 8003b62:	4603      	mov	r3, r0
 8003b64:	e102      	b.n	8003d6c <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d16c      	bne.n	8003c46 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7d9b      	ldrb	r3, [r3, #22]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d866      	bhi.n	8003c46 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	8a52      	ldrh	r2, [r2, #18]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	fb01 f202 	mul.w	r2, r1, r2
 8003b96:	441a      	add	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8003b9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fe56 	bl	8003854 <pb_make_string_substream>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f083 0301 	eor.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01f      	beq.n	8003bf4 <decode_static_field+0xf4>
                    return false;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e0d9      	b.n	8003d6c <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8003bb8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	21ff      	movs	r1, #255	@ 0xff
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fea7 	bl	8003914 <decode_basic_field>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f083 0301 	eor.w	r3, r3, #1
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <decode_static_field+0xda>
                    {
                        status = false;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8003bd8:	e015      	b.n	8003c06 <decode_static_field+0x106>
                    }
                    (*size)++;
 8003bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be4:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	8a52      	ldrh	r2, [r2, #18]
 8003bee:	441a      	add	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <decode_static_field+0x106>
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8a9b      	ldrh	r3, [r3, #20]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3d8      	bcc.n	8003bb8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8003c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <decode_static_field+0x11a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	e000      	b.n	8003c1c <decode_static_field+0x11c>
 8003c1a:	4b56      	ldr	r3, [pc, #344]	@ (8003d74 <decode_static_field+0x274>)
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	60d3      	str	r3, [r2, #12]
 8003c20:	2300      	movs	r3, #0
 8003c22:	e0a3      	b.n	8003d6c <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8003c24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c28:	4619      	mov	r1, r3
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff fe4c 	bl	80038c8 <pb_close_string_substream>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f083 0301 	eor.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <decode_static_field+0x140>
                    return false;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e095      	b.n	8003d6c <decode_static_field+0x26c>

                return status;
 8003c40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003c44:	e092      	b.n	8003d6c <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	8a52      	ldrh	r2, [r2, #18]
 8003c54:	4611      	mov	r1, r2
 8003c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	fb01 f202 	mul.w	r2, r1, r2
 8003c5e:	441a      	add	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8003c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	b291      	uxth	r1, r2
 8003c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c6e:	8011      	strh	r1, [r2, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	8a92      	ldrh	r2, [r2, #20]
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d30b      	bcc.n	8003c90 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <decode_static_field+0x186>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	e000      	b.n	8003c88 <decode_static_field+0x188>
 8003c86:	4b3b      	ldr	r3, [pc, #236]	@ (8003d74 <decode_static_field+0x274>)
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	60d3      	str	r3, [r2, #12]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e06d      	b.n	8003d6c <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4619      	mov	r1, r3
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff fe3c 	bl	8003914 <decode_basic_field>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	e065      	b.n	8003d6c <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7d9b      	ldrb	r3, [r3, #22]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d005      	beq.n	8003cb8 <decode_static_field+0x1b8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7d9b      	ldrb	r3, [r3, #22]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d141      	bne.n	8003d3c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	881a      	ldrh	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d03a      	beq.n	8003d3c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69d8      	ldr	r0, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8a5b      	ldrh	r3, [r3, #18]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f003 ff01 	bl	8007ad8 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d022      	beq.n	8003d3c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 fabd 	bl	8007282 <pb_field_iter_begin>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fa4d 	bl	80041b2 <pb_message_set_to_defaults>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f083 0301 	eor.w	r3, r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <decode_static_field+0x232>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	e000      	b.n	8003d34 <decode_static_field+0x234>
 8003d32:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <decode_static_field+0x278>)
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	60d3      	str	r3, [r2, #12]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e017      	b.n	8003d6c <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	8a12      	ldrh	r2, [r2, #16]
 8003d44:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff fde1 	bl	8003914 <decode_basic_field>
 8003d52:	4603      	mov	r3, r0
 8003d54:	e00a      	b.n	8003d6c <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <decode_static_field+0x264>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	e000      	b.n	8003d66 <decode_static_field+0x266>
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <decode_static_field+0x27c>)
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	60d3      	str	r3, [r2, #12]
 8003d6a:	2300      	movs	r3, #0
    }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3758      	adds	r7, #88	@ 0x58
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	08008530 	.word	0x08008530
 8003d78:	08008540 	.word	0x08008540
 8003d7c:	0800851c 	.word	0x0800851c

08003d80 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <decode_pointer_field+0x1c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	e000      	b.n	8003d9e <decode_pointer_field+0x1e>
 8003d9c:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <decode_pointer_field+0x30>)
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	60d3      	str	r3, [r2, #12]
 8003da2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	08008558 	.word	0x08008558

08003db4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b097      	sub	sp, #92	@ 0x5c
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	61f8      	str	r0, [r7, #28]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	617a      	str	r2, [r7, #20]
 8003dc0:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8003dcc:	7efb      	ldrb	r3, [r7, #27]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	69f8      	ldr	r0, [r7, #28]
 8003dd2:	f7ff fc91 	bl	80036f8 <pb_skip_field>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	e070      	b.n	8003ebc <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8003dda:	7efb      	ldrb	r3, [r7, #27]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d145      	bne.n	8003e6c <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003de0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003de4:	4619      	mov	r1, r3
 8003de6:	69f8      	ldr	r0, [r7, #28]
 8003de8:	f7ff fd34 	bl	8003854 <pb_make_string_substream>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <decode_callback_field+0x48>
            return false;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e05f      	b.n	8003ebc <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dfe:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4798      	blx	r3
 8003e10:	4603      	mov	r3, r0
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <decode_callback_field+0x76>
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	e005      	b.n	8003e36 <decode_callback_field+0x82>
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <decode_callback_field+0x80>
 8003e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e32:	e000      	b.n	8003e36 <decode_callback_field+0x82>
 8003e34:	4b23      	ldr	r3, [pc, #140]	@ (8003ec4 <decode_callback_field+0x110>)
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	60d3      	str	r3, [r2, #12]
                return false;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e03e      	b.n	8003ebc <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <decode_callback_field+0x98>
 8003e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d8d7      	bhi.n	8003dfc <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8003e4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e50:	4619      	mov	r1, r3
 8003e52:	69f8      	ldr	r0, [r7, #28]
 8003e54:	f7ff fd38 	bl	80038c8 <pb_close_string_substream>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <decode_callback_field+0xb4>
            return false;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e029      	b.n	8003ebc <decode_callback_field+0x108>

        return true;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e027      	b.n	8003ebc <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003e6c:	230a      	movs	r3, #10
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003e78:	7ef9      	ldrb	r1, [r7, #27]
 8003e7a:	69f8      	ldr	r0, [r7, #28]
 8003e7c:	f7ff fc7e 	bl	800377c <read_raw_value>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f083 0301 	eor.w	r3, r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <decode_callback_field+0xdc>
            return false;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e015      	b.n	8003ebc <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	463b      	mov	r3, r7
 8003e94:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fa87 	bl	80033ac <pb_istream_from_buffer>
 8003e9e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4798      	blx	r3
 8003eba:	4603      	mov	r3, r0
    }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	375c      	adds	r7, #92	@ 0x5c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	0800856c 	.word	0x0800856c

08003ec8 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7d9b      	ldrb	r3, [r3, #22]
 8003eda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ede:	2b80      	cmp	r3, #128	@ 0x80
 8003ee0:	d00e      	beq.n	8003f00 <decode_field+0x38>
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d81c      	bhi.n	8003f20 <decode_field+0x58>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <decode_field+0x28>
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d010      	beq.n	8003f10 <decode_field+0x48>
 8003eee:	e017      	b.n	8003f20 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003ef0:	7afb      	ldrb	r3, [r7, #11]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fe02 	bl	8003b00 <decode_static_field>
 8003efc:	4603      	mov	r3, r0
 8003efe:	e01a      	b.n	8003f36 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003f00:	7afb      	ldrb	r3, [r7, #11]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4619      	mov	r1, r3
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ff3a 	bl	8003d80 <decode_pointer_field>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	e012      	b.n	8003f36 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4619      	mov	r1, r3
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff ff4c 	bl	8003db4 <decode_callback_field>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e00a      	b.n	8003f36 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <decode_field+0x66>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	e000      	b.n	8003f30 <decode_field+0x68>
 8003f2e:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <decode_field+0x78>)
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	2300      	movs	r3, #0
    }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	0800851c 	.word	0x0800851c

08003f44 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08e      	sub	sp, #56	@ 0x38
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 f9ab 	bl	80072b4 <pb_field_iter_begin_extension>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f083 0301 	eor.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <default_extension_decoder+0x34>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	e000      	b.n	8003f7a <default_extension_decoder+0x36>
 8003f78:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <default_extension_decoder+0x70>)
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	60d3      	str	r3, [r2, #12]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e014      	b.n	8003fac <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8003f82:	8c3b      	ldrh	r3, [r7, #32]
 8003f84:	461a      	mov	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d102      	bne.n	8003f92 <default_extension_decoder+0x4e>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <default_extension_decoder+0x52>
        return true;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e00a      	b.n	8003fac <default_extension_decoder+0x68>

    extension->found = true;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8003f9c:	f107 0210 	add.w	r2, r7, #16
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff ff8f 	bl	8003ec8 <decode_field>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3738      	adds	r7, #56	@ 0x38
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	0800857c 	.word	0x0800857c

08003fb8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8003fce:	e022      	b.n	8004016 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681c      	ldr	r4, [r3, #0]
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	47a0      	blx	r4
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]
 8003fee:	e007      	b.n	8004000 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff ffa4 	bl	8003f44 <default_extension_decoder>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <decode_extension+0x58>
            return false;
 800400c:	2300      	movs	r3, #0
 800400e:	e00b      	b.n	8004028 <decode_extension+0x70>
        
        extension = extension->next;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <decode_extension+0x6e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	429a      	cmp	r2, r3
 8004024:	d0d4      	beq.n	8003fd0 <decode_extension+0x18>
    }
    
    return true;
 8004026:	2301      	movs	r3, #1
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}

08004030 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	@ 0x38
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7d9b      	ldrb	r3, [r3, #22]
 800403c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004040:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2b0a      	cmp	r3, #10
 800404a:	d124      	bne.n	8004096 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8004054:	e01b      	b.n	800408e <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800405c:	4618      	mov	r0, r3
 800405e:	f003 f929 	bl	80072b4 <pb_field_iter_begin_extension>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00f      	beq.n	8004088 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	2200      	movs	r2, #0
 800406c:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f89d 	bl	80041b2 <pb_message_set_to_defaults>
 8004078:	4603      	mov	r3, r0
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <pb_field_set_to_default+0x58>
                    return false;
 8004084:	2300      	movs	r3, #0
 8004086:	e090      	b.n	80041aa <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8004088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e0      	bne.n	8004056 <pb_field_set_to_default+0x26>
 8004094:	e088      	b.n	80041a8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004096:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800409a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d166      	bne.n	8004170 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80040a8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80040ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d108      	bne.n	80040c6 <pb_field_set_to_default+0x96>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e012      	b.n	80040ec <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80040c6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80040ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d005      	beq.n	80040de <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80040d2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80040d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80040da:	2b30      	cmp	r3, #48	@ 0x30
 80040dc:	d106      	bne.n	80040ec <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	2200      	movs	r2, #0
 80040e4:	801a      	strh	r2, [r3, #0]
            init_data = false;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 80040ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d059      	beq.n	80041a8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7d9b      	ldrb	r3, [r3, #22]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d005      	beq.n	800410c <pb_field_set_to_default+0xdc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7d9b      	ldrb	r3, [r3, #22]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	2b09      	cmp	r3, #9
 800410a:	d128      	bne.n	800415e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	4618      	mov	r0, r3
 800413a:	f003 f8a2 	bl	8007282 <pb_field_iter_begin>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d030      	beq.n	80041a6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8004144:	f107 0308 	add.w	r3, r7, #8
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f832 	bl	80041b2 <pb_message_set_to_defaults>
 800414e:	4603      	mov	r3, r0
 8004150:	f083 0301 	eor.w	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d025      	beq.n	80041a6 <pb_field_set_to_default+0x176>
                        return false;
 800415a:	2300      	movs	r3, #0
 800415c:	e025      	b.n	80041aa <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69d8      	ldr	r0, [r3, #28]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8a5b      	ldrh	r3, [r3, #18]
 8004166:	461a      	mov	r2, r3
 8004168:	2100      	movs	r1, #0
 800416a:	f003 fcb5 	bl	8007ad8 <memset>
 800416e:	e01b      	b.n	80041a8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8004170:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004174:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004178:	2b80      	cmp	r3, #128	@ 0x80
 800417a:	d115      	bne.n	80041a8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004184:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004188:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800418c:	2b20      	cmp	r3, #32
 800418e:	d005      	beq.n	800419c <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004190:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004194:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004198:	2b30      	cmp	r3, #48	@ 0x30
 800419a:	d105      	bne.n	80041a8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	2200      	movs	r2, #0
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	e000      	b.n	80041a8 <pb_field_set_to_default+0x178>
            {
 80041a6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3738      	adds	r7, #56	@ 0x38
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80041b2:	b590      	push	{r4, r7, lr}
 80041b4:	b08d      	sub	sp, #52	@ 0x34
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80041ba:	f107 0320 	add.w	r3, r7, #32
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	609a      	str	r2, [r3, #8]
 80041c6:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 80041cc:	2300      	movs	r3, #0
 80041ce:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6899      	ldr	r1, [r3, #8]
 80041e0:	463b      	mov	r3, r7
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff f8e0 	bl	80033ac <pb_istream_from_buffer>
 80041ec:	f107 0420 	add.w	r4, r7, #32
 80041f0:	463b      	mov	r3, r7
 80041f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80041f8:	f107 031a 	add.w	r3, r7, #26
 80041fc:	f107 021c 	add.w	r2, r7, #28
 8004200:	f107 011b 	add.w	r1, r7, #27
 8004204:	f107 0020 	add.w	r0, r7, #32
 8004208:	f7ff fa47 	bl	800369a <pb_decode_tag>
 800420c:	4603      	mov	r3, r0
 800420e:	f083 0301 	eor.w	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <pb_message_set_to_defaults+0x6a>
            return false;
 8004218:	2300      	movs	r3, #0
 800421a:	e043      	b.n	80042a4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 800421c:	6978      	ldr	r0, [r7, #20]
 800421e:	f7ff ff07 	bl	8004030 <pb_field_set_to_default>
 8004222:	4603      	mov	r3, r0
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <pb_message_set_to_defaults+0x80>
            return false;
 800422e:	2300      	movs	r3, #0
 8004230:	e038      	b.n	80042a4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02e      	beq.n	8004296 <pb_message_set_to_defaults+0xe4>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	8a1b      	ldrh	r3, [r3, #16]
 800423c:	461a      	mov	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	429a      	cmp	r2, r3
 8004242:	d128      	bne.n	8004296 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8004244:	7ef9      	ldrb	r1, [r7, #27]
 8004246:	f107 0320 	add.w	r3, r7, #32
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fe3b 	bl	8003ec8 <decode_field>
 8004252:	4603      	mov	r3, r0
 8004254:	f083 0301 	eor.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <pb_message_set_to_defaults+0xb0>
                return false;
 800425e:	2300      	movs	r3, #0
 8004260:	e020      	b.n	80042a4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004262:	f107 031a 	add.w	r3, r7, #26
 8004266:	f107 021c 	add.w	r2, r7, #28
 800426a:	f107 011b 	add.w	r1, r7, #27
 800426e:	f107 0020 	add.w	r0, r7, #32
 8004272:	f7ff fa12 	bl	800369a <pb_decode_tag>
 8004276:	4603      	mov	r3, r0
 8004278:	f083 0301 	eor.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <pb_message_set_to_defaults+0xd4>
                return false;
 8004282:	2300      	movs	r3, #0
 8004284:	e00e      	b.n	80042a4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f003 f83c 	bl	8007314 <pb_field_iter_next>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1bc      	bne.n	800421c <pb_message_set_to_defaults+0x6a>

    return true;
 80042a2:	2301      	movs	r3, #1
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3734      	adds	r7, #52	@ 0x34
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd90      	pop	{r4, r7, pc}

080042ac <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b09a      	sub	sp, #104	@ 0x68
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 80042c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042c6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 80042d6:	2300      	movs	r3, #0
 80042d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042da:	2300      	movs	r3, #0
 80042dc:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042e2:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 80042e4:	f107 0318 	add.w	r3, r7, #24
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 ffc8 	bl	8007282 <pb_field_iter_begin>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8102 	beq.w	80044fe <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 80fc 	bne.w	80044fe <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8004306:	f107 0318 	add.w	r3, r7, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff51 	bl	80041b2 <pb_message_set_to_defaults>
 8004310:	4603      	mov	r3, r0
 8004312:	f083 0301 	eor.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80f0 	beq.w	80044fe <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <pb_decode_inner+0x80>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	e000      	b.n	800432e <pb_decode_inner+0x82>
 800432c:	4b99      	ldr	r3, [pc, #612]	@ (8004594 <pb_decode_inner+0x2e8>)
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	60d3      	str	r3, [r2, #12]
 8004332:	2300      	movs	r3, #0
 8004334:	e16d      	b.n	8004612 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004336:	f107 0312 	add.w	r3, r7, #18
 800433a:	f107 0214 	add.w	r2, r7, #20
 800433e:	f107 0113 	add.w	r1, r7, #19
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff f9a9 	bl	800369a <pb_decode_tag>
 8004348:	4603      	mov	r3, r0
 800434a:	f083 0301 	eor.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <pb_decode_inner+0xb4>
        {
            if (eof)
 8004354:	7cbb      	ldrb	r3, [r7, #18]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 80d7 	bne.w	800450a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 800435c:	2300      	movs	r3, #0
 800435e:	e158      	b.n	8004612 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d111      	bne.n	800438a <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 80ce 	bne.w	800450e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <pb_decode_inner+0xd4>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	e000      	b.n	8004382 <pb_decode_inner+0xd6>
 8004380:	4b85      	ldr	r3, [pc, #532]	@ (8004598 <pb_decode_inner+0x2ec>)
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	60d3      	str	r3, [r2, #12]
 8004386:	2300      	movs	r3, #0
 8004388:	e143      	b.n	8004612 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	f107 0318 	add.w	r3, r7, #24
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f002 ffd3 	bl	800733e <pb_field_iter_find>
 8004398:	4603      	mov	r3, r0
 800439a:	f083 0301 	eor.w	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d105      	bne.n	80043b0 <pb_decode_inner+0x104>
 80043a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	2b0a      	cmp	r3, #10
 80043ae:	d13c      	bne.n	800442a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 80043b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d112      	bne.n	80043dc <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 80043b6:	f107 0318 	add.w	r3, r7, #24
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 f815 	bl	80073ea <pb_field_iter_find_extension>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 80043c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 80043cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80043ce:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 80043d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043da:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d815      	bhi.n	8004410 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 80043ea:	6979      	ldr	r1, [r7, #20]
 80043ec:	7cfa      	ldrb	r2, [r7, #19]
 80043ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff fde1 	bl	8003fb8 <decode_extension>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <pb_decode_inner+0x15a>
                    return false;
 8004402:	2300      	movs	r3, #0
 8004404:	e105      	b.n	8004612 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800440c:	429a      	cmp	r2, r3
 800440e:	d173      	bne.n	80044f8 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	4619      	mov	r1, r3
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff f96f 	bl	80036f8 <pb_skip_field>
 800441a:	4603      	mov	r3, r0
 800441c:	f083 0301 	eor.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d06a      	beq.n	80044fc <pb_decode_inner+0x250>
                return false;
 8004426:	2300      	movs	r3, #0
 8004428:	e0f3      	b.n	8004612 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 800442a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800442e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004432:	2b20      	cmp	r3, #32
 8004434:	d12e      	bne.n	8004494 <pb_decode_inner+0x1e8>
 8004436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004438:	f107 0318 	add.w	r3, r7, #24
 800443c:	3314      	adds	r3, #20
 800443e:	429a      	cmp	r2, r3
 8004440:	d128      	bne.n	8004494 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8004442:	8c3b      	ldrh	r3, [r7, #32]
 8004444:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8004448:	429a      	cmp	r2, r3
 800444a:	d020      	beq.n	800448e <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 800444c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004450:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004454:	4293      	cmp	r3, r2
 8004456:	d011      	beq.n	800447c <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8004458:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 800445c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004460:	429a      	cmp	r2, r3
 8004462:	d00b      	beq.n	800447c <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <pb_decode_inner+0x1c6>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	e000      	b.n	8004474 <pb_decode_inner+0x1c8>
 8004472:	4b4a      	ldr	r3, [pc, #296]	@ (800459c <pb_decode_inner+0x2f0>)
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	60d3      	str	r3, [r2, #12]
 8004478:	2300      	movs	r3, #0
 800447a:	e0ca      	b.n	8004612 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 800447c:	8c3b      	ldrh	r3, [r7, #32]
 800447e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8004488:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800448a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 800448e:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8004494:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004498:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11c      	bne.n	80044da <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80044a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80044a4:	d819      	bhi.n	80044da <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80044a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2201      	movs	r2, #1
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 80044b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	3368      	adds	r3, #104	@ 0x68
 80044be:	443b      	add	r3, r7
 80044c0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80044c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4619      	mov	r1, r3
 80044cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ce:	431a      	orrs	r2, r3
 80044d0:	008b      	lsls	r3, r1, #2
 80044d2:	3368      	adds	r3, #104	@ 0x68
 80044d4:	443b      	add	r3, r7
 80044d6:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	f107 0218 	add.w	r2, r7, #24
 80044e0:	4619      	mov	r1, r3
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fcf0 	bl	8003ec8 <decode_field>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f083 0301 	eor.w	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <pb_decode_inner+0x252>
            return false;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e08c      	b.n	8004612 <pb_decode_inner+0x366>
                    continue;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <pb_decode_inner+0x252>
            continue;
 80044fc:	bf00      	nop
    while (stream->bytes_left)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f47f af17 	bne.w	8004336 <pb_decode_inner+0x8a>
 8004508:	e002      	b.n	8004510 <pb_decode_inner+0x264>
                break;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <pb_decode_inner+0x264>
            break;
 800450e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004510:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004518:	4293      	cmp	r3, r2
 800451a:	d011      	beq.n	8004540 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 800451c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004520:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004524:	429a      	cmp	r2, r3
 8004526:	d00b      	beq.n	8004540 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <pb_decode_inner+0x28a>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	e000      	b.n	8004538 <pb_decode_inner+0x28c>
 8004536:	4b19      	ldr	r3, [pc, #100]	@ (800459c <pb_decode_inner+0x2f0>)
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	60d3      	str	r3, [r2, #12]
 800453c:	2300      	movs	r3, #0
 800453e:	e068      	b.n	8004612 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	8a5b      	ldrh	r3, [r3, #18]
 8004544:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8004548:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05f      	beq.n	8004610 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004550:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004554:	2b40      	cmp	r3, #64	@ 0x40
 8004556:	d902      	bls.n	800455e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004558:	2340      	movs	r3, #64	@ 0x40
 800455a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800455e:	2300      	movs	r3, #0
 8004560:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004564:	e023      	b.n	80045ae <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8004566:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	3368      	adds	r3, #104	@ 0x68
 800456e:	443b      	add	r3, r7
 8004570:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004574:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004576:	429a      	cmp	r2, r3
 8004578:	d014      	beq.n	80045a4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <pb_decode_inner+0x2dc>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	e000      	b.n	800458a <pb_decode_inner+0x2de>
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <pb_decode_inner+0x2f4>)
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	60d3      	str	r3, [r2, #12]
 800458e:	2300      	movs	r3, #0
 8004590:	e03f      	b.n	8004612 <pb_decode_inner+0x366>
 8004592:	bf00      	nop
 8004594:	08008540 	.word	0x08008540
 8004598:	08008590 	.word	0x08008590
 800459c:	0800859c 	.word	0x0800859c
 80045a0:	080085c0 	.word	0x080085c0
            for (i = 0; i < (req_field_count >> 5); i++)
 80045a4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80045ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3d3      	bcc.n	8004566 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 80045be:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d022      	beq.n	8004610 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80045ca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	3368      	adds	r3, #104	@ 0x68
 80045d6:	443b      	add	r3, r7
 80045d8:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 80045dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f1c3 0320 	rsb	r3, r3, #32
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f2:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d00b      	beq.n	8004610 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <pb_decode_inner+0x35a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	e000      	b.n	8004608 <pb_decode_inner+0x35c>
 8004606:	4b05      	ldr	r3, [pc, #20]	@ (800461c <pb_decode_inner+0x370>)
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	60d3      	str	r3, [r2, #12]
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004610:	2301      	movs	r3, #1
}
 8004612:	4618      	mov	r0, r3
 8004614:	3768      	adds	r7, #104	@ 0x68
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	080085c0 	.word	0x080085c0

08004620 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 800462c:	2300      	movs	r3, #0
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff fe3a 	bl	80042ac <pb_decode_inner>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004650:	f107 030c 	add.w	r3, r7, #12
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe ff70 	bl	800353c <pb_decode_varint32>
 800465c:	4603      	mov	r3, r0
 800465e:	f083 0301 	eor.w	r3, r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <pb_decode_bool+0x26>
        return false;
 8004668:	2300      	movs	r3, #0
 800466a:	e008      	b.n	800467e <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf14      	ite	ne
 8004672:	2301      	movne	r3, #1
 8004674:	2300      	moveq	r3, #0
 8004676:	b2da      	uxtb	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	701a      	strb	r2, [r3, #0]
    return true;
 800467c:	2301      	movs	r3, #1
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8004686:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fe ff5f 	bl	800355c <pb_decode_varint>
 800469e:	4603      	mov	r3, r0
 80046a0:	f083 0301 	eor.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <pb_decode_svarint+0x28>
        return false;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e029      	b.n	8004702 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 80046ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b2:	f002 0401 	and.w	r4, r2, #1
 80046b6:	2500      	movs	r5, #0
 80046b8:	ea54 0305 	orrs.w	r3, r4, r5
 80046bc:	d013      	beq.n	80046e6 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 80046be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	0842      	lsrs	r2, r0, #1
 80046cc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80046d0:	084b      	lsrs	r3, r1, #1
 80046d2:	ea6f 0802 	mvn.w	r8, r2
 80046d6:	ea6f 0903 	mvn.w	r9, r3
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	e9c1 2300 	strd	r2, r3, [r1]
 80046e4:	e00c      	b.n	8004700 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 80046e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	0842      	lsrs	r2, r0, #1
 80046f4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80046f8:	084b      	lsrs	r3, r1, #1
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004700:	2301      	movs	r3, #1
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800470c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	2204      	movs	r2, #4
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fe fd92 	bl	8003248 <pb_read>
 8004724:	4603      	mov	r3, r0
 8004726:	f083 0301 	eor.w	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <pb_decode_fixed32+0x28>
        return false;
 8004730:	2300      	movs	r3, #0
 8004732:	e003      	b.n	800473c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 800473a:	2301      	movs	r3, #1
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	2208      	movs	r2, #8
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fe fd76 	bl	8003248 <pb_read>
 800475c:	4603      	mov	r3, r0
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <pb_decode_fixed64+0x28>
        return false;
 8004768:	2300      	movs	r3, #0
 800476a:	e005      	b.n	8004778 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 800476c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8004776:	2301      	movs	r3, #1
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff58 	bl	8004646 <pb_decode_bool>
 8004796:	4603      	mov	r3, r0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b094      	sub	sp, #80	@ 0x50
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80047aa:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	7d9b      	ldrb	r3, [r3, #22]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d179      	bne.n	80048ac <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 80047b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80047bc:	4619      	mov	r1, r3
 80047be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047c0:	f7fe fecc 	bl	800355c <pb_decode_varint>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f083 0301 	eor.w	r3, r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <pb_dec_varint+0x34>
            return false;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e107      	b.n	80049e4 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	8a5b      	ldrh	r3, [r3, #18]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d10a      	bne.n	80047f2 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047e4:	e9c1 2300 	strd	r2, r3, [r1]
 80047e8:	e9d1 2300 	ldrd	r2, r3, [r1]
 80047ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80047f0:	e046      	b.n	8004880 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	8a5b      	ldrh	r3, [r3, #18]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d10e      	bne.n	8004818 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 80047fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4602      	mov	r2, r0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	617a      	str	r2, [r7, #20]
 800480e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004812:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8004816:	e033      	b.n	8004880 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	8a5b      	ldrh	r3, [r3, #18]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d10f      	bne.n	8004840 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8004820:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	b282      	uxth	r2, r0
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2200      	movs	r2, #0
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	60fa      	str	r2, [r7, #12]
 8004836:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800483a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800483e:	e01f      	b.n	8004880 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	8a5b      	ldrh	r3, [r3, #18]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10f      	bne.n	8004868 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8004848:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	b2c2      	uxtb	r2, r0
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2200      	movs	r2, #0
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004862:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8004866:	e00b      	b.n	8004880 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <pb_dec_varint+0xd6>
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	e000      	b.n	8004878 <pb_dec_varint+0xd8>
 8004876:	4b5e      	ldr	r3, [pc, #376]	@ (80049f0 <pb_dec_varint+0x250>)
 8004878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487a:	60d3      	str	r3, [r2, #12]
 800487c:	2300      	movs	r3, #0
 800487e:	e0b1      	b.n	80049e4 <pb_dec_varint+0x244>

        if (clamped != value)
 8004880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004884:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8004888:	4299      	cmp	r1, r3
 800488a:	bf08      	it	eq
 800488c:	4290      	cmpeq	r0, r2
 800488e:	d00b      	beq.n	80048a8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <pb_dec_varint+0xfe>
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	e000      	b.n	80048a0 <pb_dec_varint+0x100>
 800489e:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <pb_dec_varint+0x254>)
 80048a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a2:	60d3      	str	r3, [r2, #12]
 80048a4:	2300      	movs	r3, #0
 80048a6:	e09d      	b.n	80049e4 <pb_dec_varint+0x244>

        return true;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e09b      	b.n	80049e4 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	7d9b      	ldrb	r3, [r3, #22]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d10d      	bne.n	80048d4 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80048b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048bc:	4619      	mov	r1, r3
 80048be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048c0:	f7ff fee1 	bl	8004686 <pb_decode_svarint>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f083 0301 	eor.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d022      	beq.n	8004916 <pb_dec_varint+0x176>
                return false;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e087      	b.n	80049e4 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 80048d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80048d8:	4619      	mov	r1, r3
 80048da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048dc:	f7fe fe3e 	bl	800355c <pb_decode_varint>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <pb_dec_varint+0x150>
                return false;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e079      	b.n	80049e4 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	8a5b      	ldrh	r3, [r3, #18]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d104      	bne.n	8004902 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80048f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004900:	e009      	b.n	8004916 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004902:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004906:	4613      	mov	r3, r2
 8004908:	17da      	asrs	r2, r3, #31
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	61fa      	str	r2, [r7, #28]
 800490e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004912:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	8a5b      	ldrh	r3, [r3, #18]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d10a      	bne.n	8004934 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	69d9      	ldr	r1, [r3, #28]
 8004922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004926:	e9c1 2300 	strd	r2, r3, [r1]
 800492a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800492e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004932:	e042      	b.n	80049ba <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	8a5b      	ldrh	r3, [r3, #18]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d10c      	bne.n	8004956 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 800493c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	4602      	mov	r2, r0
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	17da      	asrs	r2, r3, #31
 800494c:	469a      	mov	sl, r3
 800494e:	4693      	mov	fp, r2
 8004950:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8004954:	e031      	b.n	80049ba <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	8a5b      	ldrh	r3, [r3, #18]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d10e      	bne.n	800497c <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800495e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	b202      	sxth	r2, r0
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800496e:	b21b      	sxth	r3, r3
 8004970:	17da      	asrs	r2, r3, #31
 8004972:	4698      	mov	r8, r3
 8004974:	4691      	mov	r9, r2
 8004976:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 800497a:	e01e      	b.n	80049ba <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	8a5b      	ldrh	r3, [r3, #18]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10e      	bne.n	80049a2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8004984:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	b242      	sxtb	r2, r0
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	f993 3000 	ldrsb.w	r3, [r3]
 8004994:	b25b      	sxtb	r3, r3
 8004996:	17da      	asrs	r2, r3, #31
 8004998:	461c      	mov	r4, r3
 800499a:	4615      	mov	r5, r2
 800499c:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80049a0:	e00b      	b.n	80049ba <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <pb_dec_varint+0x210>
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	e000      	b.n	80049b2 <pb_dec_varint+0x212>
 80049b0:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <pb_dec_varint+0x250>)
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	60d3      	str	r3, [r2, #12]
 80049b6:	2300      	movs	r3, #0
 80049b8:	e014      	b.n	80049e4 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80049ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80049c2:	4299      	cmp	r1, r3
 80049c4:	bf08      	it	eq
 80049c6:	4290      	cmpeq	r0, r2
 80049c8:	d00b      	beq.n	80049e2 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <pb_dec_varint+0x238>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	e000      	b.n	80049da <pb_dec_varint+0x23a>
 80049d8:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <pb_dec_varint+0x254>)
 80049da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049dc:	60d3      	str	r3, [r2, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <pb_dec_varint+0x244>

        return true;
 80049e2:	2301      	movs	r3, #1
    }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3750      	adds	r7, #80	@ 0x50
 80049e8:	46bd      	mov	sp, r7
 80049ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ee:	bf00      	nop
 80049f0:	080085d8 	.word	0x080085d8
 80049f4:	080085ec 	.word	0x080085ec

080049f8 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004a02:	f107 030c 	add.w	r3, r7, #12
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe fd97 	bl	800353c <pb_decode_varint32>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f083 0301 	eor.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <pb_dec_bytes+0x26>
        return false;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e055      	b.n	8004aca <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a24:	d30b      	bcc.n	8004a3e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <pb_dec_bytes+0x3c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	e000      	b.n	8004a36 <pb_dec_bytes+0x3e>
 8004a34:	4b27      	ldr	r3, [pc, #156]	@ (8004ad4 <pb_dec_bytes+0xdc>)
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	60d3      	str	r3, [r2, #12]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e045      	b.n	8004aca <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3302      	adds	r3, #2
 8004a42:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d20b      	bcs.n	8004a64 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <pb_dec_bytes+0x62>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	e000      	b.n	8004a5c <pb_dec_bytes+0x64>
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad8 <pb_dec_bytes+0xe0>)
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	60d3      	str	r3, [r2, #12]
 8004a60:	2300      	movs	r3, #0
 8004a62:	e032      	b.n	8004aca <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	7d9b      	ldrb	r3, [r3, #22]
 8004a68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a6c:	2b80      	cmp	r3, #128	@ 0x80
 8004a6e:	d10b      	bne.n	8004a88 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <pb_dec_bytes+0x86>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	e000      	b.n	8004a80 <pb_dec_bytes+0x88>
 8004a7e:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <pb_dec_bytes+0xe4>)
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	60d3      	str	r3, [r2, #12]
 8004a84:	2300      	movs	r3, #0
 8004a86:	e020      	b.n	8004aca <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	8a5b      	ldrh	r3, [r3, #18]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d90b      	bls.n	8004aac <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <pb_dec_bytes+0xaa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	e000      	b.n	8004aa4 <pb_dec_bytes+0xac>
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <pb_dec_bytes+0xdc>)
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	60d3      	str	r3, [r2, #12]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e00e      	b.n	8004aca <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3302      	adds	r3, #2
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fe fbc0 	bl	8003248 <pb_read>
 8004ac8:	4603      	mov	r3, r0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08008600 	.word	0x08008600
 8004ad8:	08008610 	.word	0x08008610
 8004adc:	08008558 	.word	0x08008558

08004ae0 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe fd20 	bl	800353c <pb_decode_varint32>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f083 0301 	eor.w	r3, r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <pb_dec_string+0x2c>
        return false;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e05a      	b.n	8004bc2 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b12:	d10b      	bne.n	8004b2c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <pb_dec_string+0x42>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	e000      	b.n	8004b24 <pb_dec_string+0x44>
 8004b22:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <pb_dec_string+0xec>)
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	60d3      	str	r3, [r2, #12]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e04a      	b.n	8004bc2 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d20b      	bcs.n	8004b52 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <pb_dec_string+0x68>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	e000      	b.n	8004b4a <pb_dec_string+0x6a>
 8004b48:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <pb_dec_string+0xec>)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	60d3      	str	r3, [r2, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e037      	b.n	8004bc2 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	7d9b      	ldrb	r3, [r3, #22]
 8004b56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b5a:	2b80      	cmp	r3, #128	@ 0x80
 8004b5c:	d10b      	bne.n	8004b76 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <pb_dec_string+0x8c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	e000      	b.n	8004b6e <pb_dec_string+0x8e>
 8004b6c:	4b18      	ldr	r3, [pc, #96]	@ (8004bd0 <pb_dec_string+0xf0>)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	60d3      	str	r3, [r2, #12]
 8004b72:	2300      	movs	r3, #0
 8004b74:	e025      	b.n	8004bc2 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	8a5b      	ldrh	r3, [r3, #18]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d90b      	bls.n	8004b9a <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <pb_dec_string+0xb0>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	e000      	b.n	8004b92 <pb_dec_string+0xb2>
 8004b90:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <pb_dec_string+0xf4>)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60d3      	str	r3, [r2, #12]
 8004b96:	2300      	movs	r3, #0
 8004b98:	e013      	b.n	8004bc2 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6979      	ldr	r1, [r7, #20]
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fe fb4c 	bl	8003248 <pb_read>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f083 0301 	eor.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <pb_dec_string+0xe0>
        return false;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8004bc0:	2301      	movs	r3, #1
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08008610 	.word	0x08008610
 8004bd0:	08008558 	.word	0x08008558
 8004bd4:	08008620 	.word	0x08008620

08004bd8 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004bee:	f107 030c 	add.w	r3, r7, #12
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fe fe2d 	bl	8003854 <pb_make_string_substream>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f083 0301 	eor.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <pb_dec_submessage+0x32>
        return false;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e069      	b.n	8004cde <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <pb_dec_submessage+0x48>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	e000      	b.n	8004c22 <pb_dec_submessage+0x4a>
 8004c20:	4b31      	ldr	r3, [pc, #196]	@ (8004ce8 <pb_dec_submessage+0x110>)
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	60d3      	str	r3, [r2, #12]
 8004c26:	2300      	movs	r3, #0
 8004c28:	e059      	b.n	8004cde <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	7d9b      	ldrb	r3, [r3, #22]
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d11c      	bne.n	8004c70 <pb_dec_submessage+0x98>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	3b08      	subs	r3, #8
 8004c44:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d010      	beq.n	8004c70 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	3204      	adds	r2, #4
 8004c56:	f107 000c 	add.w	r0, r7, #12
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	4798      	blx	r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d022      	beq.n	8004cbe <pb_dec_submessage+0xe6>
 8004c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c7c:	f083 0301 	eor.w	r3, r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01b      	beq.n	8004cbe <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	7d9b      	ldrb	r3, [r3, #22]
 8004c8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d107      	bne.n	8004ca6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	7d9b      	ldrb	r3, [r3, #22]
 8004c9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d001      	beq.n	8004ca6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	f107 000c 	add.w	r0, r7, #12
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f7ff fafa 	bl	80042ac <pb_decode_inner>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fe fdff 	bl	80038c8 <pb_close_string_substream>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f083 0301 	eor.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <pb_dec_submessage+0x102>
        return false;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e001      	b.n	8004cde <pb_dec_submessage+0x106>

    return status;
 8004cda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	@ 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08008630 	.word	0x08008630

08004cec <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004cf6:	f107 030c 	add.w	r3, r7, #12
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fe fc1d 	bl	800353c <pb_decode_varint32>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f083 0301 	eor.w	r3, r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e037      	b.n	8004d82 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d30b      	bcc.n	8004d32 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <pb_dec_fixed_length_bytes+0x3c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	e000      	b.n	8004d2a <pb_dec_fixed_length_bytes+0x3e>
 8004d28:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <pb_dec_fixed_length_bytes+0xa0>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	60d3      	str	r3, [r2, #12]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e027      	b.n	8004d82 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	69d8      	ldr	r0, [r3, #28]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	8a5b      	ldrh	r3, [r3, #18]
 8004d40:	461a      	mov	r2, r3
 8004d42:	2100      	movs	r1, #0
 8004d44:	f002 fec8 	bl	8007ad8 <memset>
        return true;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01a      	b.n	8004d82 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	8a5b      	ldrh	r3, [r3, #18]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d00b      	beq.n	8004d70 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <pb_dec_fixed_length_bytes+0x7a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	e000      	b.n	8004d68 <pb_dec_fixed_length_bytes+0x7c>
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <pb_dec_fixed_length_bytes+0xa4>)
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	60d3      	str	r3, [r2, #12]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e008      	b.n	8004d82 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	69d9      	ldr	r1, [r3, #28]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	8a5b      	ldrh	r3, [r3, #18]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe fa64 	bl	8003248 <pb_read>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	08008600 	.word	0x08008600
 8004d90:	0800864c 	.word	0x0800864c

08004d94 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	441a      	add	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	6978      	ldr	r0, [r7, #20]
 8004db6:	f002 ff1a 	bl	8007bee <memcpy>
    
    return true;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8004dc4:	b4b0      	push	{r4, r5, r7}
 8004dc6:	b08b      	sub	sp, #44	@ 0x2c
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <pb_ostream_from_buffer+0x3c>)
 8004dd2:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	461d      	mov	r5, r3
 8004de8:	f107 0414 	add.w	r4, r7, #20
 8004dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	602b      	str	r3, [r5, #0]
}
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	372c      	adds	r7, #44	@ 0x2c
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bcb0      	pop	{r4, r5, r7}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	08004d95 	.word	0x08004d95

08004e04 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d037      	beq.n	8004e86 <pb_write+0x82>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d033      	beq.n	8004e86 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	441a      	add	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d307      	bcc.n	8004e3e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d90b      	bls.n	8004e56 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <pb_write+0x48>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	e000      	b.n	8004e4e <pb_write+0x4a>
 8004e4c:	4b13      	ldr	r3, [pc, #76]	@ (8004e9c <pb_write+0x98>)
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	6113      	str	r3, [r2, #16]
 8004e52:	2300      	movs	r3, #0
 8004e54:	e01e      	b.n	8004e94 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	4798      	blx	r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	f083 0301 	eor.w	r3, r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <pb_write+0x78>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	e000      	b.n	8004e7e <pb_write+0x7a>
 8004e7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <pb_write+0x9c>)
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	6113      	str	r3, [r2, #16]
 8004e82:	2300      	movs	r3, #0
 8004e84:	e006      	b.n	8004e94 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	441a      	add	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	60da      	str	r2, [r3, #12]
    return true;
 8004e92:	2301      	movs	r3, #1
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08008670 	.word	0x08008670
 8004ea0:	0800867c 	.word	0x0800867c

08004ea4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e00a      	b.n	8004ecc <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <safe_read_bool+0x22>
            return true;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e006      	b.n	8004ed4 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f1      	beq.n	8004eb6 <safe_read_bool+0x12>
    }
    return false;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b08c      	sub	sp, #48	@ 0x30
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8004ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <encode_array+0x1c>
        return true;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e13d      	b.n	8005178 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	7d9b      	ldrb	r3, [r3, #22]
 8004f00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f04:	2b80      	cmp	r3, #128	@ 0x80
 8004f06:	d010      	beq.n	8004f2a <encode_array+0x4a>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	8a9b      	ldrh	r3, [r3, #20]
 8004f0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90b      	bls.n	8004f2a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <encode_array+0x40>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	e000      	b.n	8004f22 <encode_array+0x42>
 8004f20:	4b97      	ldr	r3, [pc, #604]	@ (8005180 <encode_array+0x2a0>)
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6113      	str	r3, [r2, #16]
 8004f26:	2300      	movs	r3, #0
 8004f28:	e126      	b.n	8005178 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	7d9b      	ldrb	r3, [r3, #22]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	2b05      	cmp	r3, #5
 8004f34:	f200 80b3 	bhi.w	800509e <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	8a1b      	ldrh	r3, [r3, #16]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2102      	movs	r1, #2
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fcdd 	bl	8005900 <pb_encode_tag>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f083 0301 	eor.w	r3, r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <encode_array+0x76>
            return false;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e110      	b.n	8005178 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	7d9b      	ldrb	r3, [r3, #22]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d103      	bne.n	8004f6a <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8004f62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f68:	e047      	b.n	8004ffa <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	7d9b      	ldrb	r3, [r3, #22]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d103      	bne.n	8004f7e <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8004f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f7c:	e03d      	b.n	8004ffa <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8004f7e:	f107 0308 	add.w	r3, r7, #8
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8004f94:	2300      	movs	r3, #0
 8004f96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f98:	e026      	b.n	8004fe8 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fdef 	bl	8005b84 <pb_enc_varint>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f083 0301 	eor.w	r3, r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <encode_array+0xe0>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	e005      	b.n	8004fcc <encode_array+0xec>
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <encode_array+0xea>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	e000      	b.n	8004fcc <encode_array+0xec>
 8004fca:	4b6e      	ldr	r3, [pc, #440]	@ (8005184 <encode_array+0x2a4>)
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6113      	str	r3, [r2, #16]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e0d1      	b.n	8005178 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	8a52      	ldrh	r2, [r2, #18]
 8004fdc:	441a      	add	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8004fe2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004fe8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004fea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d3d4      	bcc.n	8004f9a <encode_array+0xba>
            }
            field->pData = pData_orig;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	461c      	mov	r4, r3
 8005000:	4615      	mov	r5, r2
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fbf7 	bl	80057fa <pb_encode_varint>
 800500c:	4603      	mov	r3, r0
 800500e:	f083 0301 	eor.w	r3, r3, #1
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <encode_array+0x13c>
            return false;
 8005018:	2300      	movs	r3, #0
 800501a:	e0ad      	b.n	8005178 <encode_array+0x298>
        
        if (stream->callback == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005026:	2100      	movs	r1, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff feeb 	bl	8004e04 <pb_write>
 800502e:	4603      	mov	r3, r0
 8005030:	e0a2      	b.n	8005178 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005036:	e02d      	b.n	8005094 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	7d9b      	ldrb	r3, [r3, #22]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2b04      	cmp	r3, #4
 8005042:	d005      	beq.n	8005050 <encode_array+0x170>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	7d9b      	ldrb	r3, [r3, #22]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	2b05      	cmp	r3, #5
 800504e:	d10b      	bne.n	8005068 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fe58 	bl	8005d08 <pb_enc_fixed>
 8005058:	4603      	mov	r3, r0
 800505a:	f083 0301 	eor.w	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <encode_array+0x1a0>
                    return false;
 8005064:	2300      	movs	r3, #0
 8005066:	e087      	b.n	8005178 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fd8a 	bl	8005b84 <pb_enc_varint>
 8005070:	4603      	mov	r3, r0
 8005072:	f083 0301 	eor.w	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <encode_array+0x1a0>
                    return false;
 800507c:	2300      	movs	r3, #0
 800507e:	e07b      	b.n	8005178 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	8a52      	ldrh	r2, [r2, #18]
 8005088:	441a      	add	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 800508e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005090:	3301      	adds	r3, #1
 8005092:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005094:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005098:	429a      	cmp	r2, r3
 800509a:	d3cd      	bcc.n	8005038 <encode_array+0x158>
 800509c:	e06b      	b.n	8005176 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050a2:	e064      	b.n	800516e <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	7d9b      	ldrb	r3, [r3, #22]
 80050a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050ac:	2b80      	cmp	r3, #128	@ 0x80
 80050ae:	d147      	bne.n	8005140 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	7d9b      	ldrb	r3, [r3, #22]
 80050b4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	d005      	beq.n	80050c8 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	7d9b      	ldrb	r3, [r3, #22]
 80050c0:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d13b      	bne.n	8005140 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11c      	bne.n	800511a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fc36 	bl	8005954 <pb_encode_tag_for_field>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fb7f 	bl	80057fa <pb_encode_varint>
 80050fc:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <encode_array+0x226>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <encode_array+0x228>
 8005106:	2300      	movs	r3, #0
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005118:	e006      	b.n	8005128 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f951 	bl	80053c4 <encode_basic_field>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	61da      	str	r2, [r3, #28]

                if (!status)
 800512e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005132:	f083 0301 	eor.w	r3, r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <encode_array+0x278>
                    return false;
 800513c:	2300      	movs	r3, #0
 800513e:	e01b      	b.n	8005178 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f93e 	bl	80053c4 <encode_basic_field>
 8005148:	4603      	mov	r3, r0
 800514a:	f083 0301 	eor.w	r3, r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <encode_array+0x27a>
                    return false;
 8005154:	2300      	movs	r3, #0
 8005156:	e00f      	b.n	8005178 <encode_array+0x298>
            {
 8005158:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	8a52      	ldrh	r2, [r2, #18]
 8005162:	441a      	add	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8005168:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800516a:	3301      	adds	r3, #1
 800516c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800516e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005172:	429a      	cmp	r2, r3
 8005174:	d396      	bcc.n	80050a4 <encode_array+0x1c4>
        }
    }
    
    return true;
 8005176:	2301      	movs	r3, #1
}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	@ 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bdb0      	pop	{r4, r5, r7, pc}
 8005180:	08008688 	.word	0x08008688
 8005184:	080086a0 	.word	0x080086a0

08005188 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b092      	sub	sp, #72	@ 0x48
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7d9b      	ldrb	r3, [r3, #22]
 8005194:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005198:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800519c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 80c9 	bne.w	8005338 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80051a6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80051aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e100      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80051b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80051ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d108      	bne.n	80051d4 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e0f1      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80051d4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80051d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051dc:	2b30      	cmp	r3, #48	@ 0x30
 80051de:	d108      	bne.n	80051f2 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e0e2      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80051f2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80051f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d115      	bne.n	800522a <pb_check_proto3_default_value+0xa2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d011      	beq.n	800522a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fe4a 	bl	8004ea4 <safe_read_bool>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f083 0301 	eor.w	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e0c6      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005234:	2300      	movs	r3, #0
 8005236:	e0bf      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005238:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2b05      	cmp	r3, #5
 8005242:	d81c      	bhi.n	800527e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 800524a:	2300      	movs	r3, #0
 800524c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005250:	e00d      	b.n	800526e <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8005252:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005258:	4413      	add	r3, r2
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8005260:	2300      	movs	r3, #0
 8005262:	e0a9      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8005264:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005268:	3301      	adds	r3, #1
 800526a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8a5b      	ldrh	r3, [r3, #18]
 8005272:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005276:	429a      	cmp	r2, r3
 8005278:	d3eb      	bcc.n	8005252 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 800527a:	2301      	movs	r3, #1
 800527c:	e09c      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800527e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	2b06      	cmp	r3, #6
 8005288:	d10a      	bne.n	80052a0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e08b      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80052a0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2b07      	cmp	r3, #7
 80052aa:	d108      	bne.n	80052be <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e07c      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80052be:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	2b0b      	cmp	r3, #11
 80052c8:	d107      	bne.n	80052da <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8a5b      	ldrh	r3, [r3, #18]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	e06e      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 80052da:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d005      	beq.n	80052f2 <pb_check_proto3_default_value+0x16a>
 80052e6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	2b09      	cmp	r3, #9
 80052f0:	d161      	bne.n	80053b6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 ffbf 	bl	8007282 <pb_field_iter_begin>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d014      	beq.n	8005334 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ff3a 	bl	8005188 <pb_check_proto3_default_value>
 8005314:	4603      	mov	r3, r0
 8005316:	f083 0301 	eor.w	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005320:	2300      	movs	r3, #0
 8005322:	e049      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fff3 	bl	8007314 <pb_field_iter_next>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ea      	bne.n	800530a <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005334:	2301      	movs	r3, #1
 8005336:	e03f      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005338:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800533c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005340:	2b80      	cmp	r3, #128	@ 0x80
 8005342:	d107      	bne.n	8005354 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e031      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8005354:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005358:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800535c:	2b40      	cmp	r3, #64	@ 0x40
 800535e:	d12a      	bne.n	80053b6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005360:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	2b0a      	cmp	r3, #10
 800536a:	d10a      	bne.n	8005382 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8005374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e01a      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a0d      	ldr	r2, [pc, #52]	@ (80053c0 <pb_check_proto3_default_value+0x238>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10a      	bne.n	80053a4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8005394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e009      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e000      	b.n	80053b8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3748      	adds	r7, #72	@ 0x48
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	080074b7 	.word	0x080074b7

080053c4 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e061      	b.n	800549e <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fab9 	bl	8005954 <pb_encode_tag_for_field>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f083 0301 	eor.w	r3, r3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <encode_basic_field+0x2e>
        return false;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e055      	b.n	800549e <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	7d9b      	ldrb	r3, [r3, #22]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	2b0b      	cmp	r3, #11
 80053fc:	d844      	bhi.n	8005488 <encode_basic_field+0xc4>
 80053fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <encode_basic_field+0x40>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005435 	.word	0x08005435
 8005408:	08005441 	.word	0x08005441
 800540c:	08005441 	.word	0x08005441
 8005410:	08005441 	.word	0x08005441
 8005414:	0800544d 	.word	0x0800544d
 8005418:	0800544d 	.word	0x0800544d
 800541c:	08005459 	.word	0x08005459
 8005420:	08005465 	.word	0x08005465
 8005424:	08005471 	.word	0x08005471
 8005428:	08005471 	.word	0x08005471
 800542c:	08005489 	.word	0x08005489
 8005430:	0800547d 	.word	0x0800547d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fb8a 	bl	8005b50 <pb_enc_bool>
 800543c:	4603      	mov	r3, r0
 800543e:	e02e      	b.n	800549e <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fb9e 	bl	8005b84 <pb_enc_varint>
 8005448:	4603      	mov	r3, r0
 800544a:	e028      	b.n	800549e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fc5a 	bl	8005d08 <pb_enc_fixed>
 8005454:	4603      	mov	r3, r0
 8005456:	e022      	b.n	800549e <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fc82 	bl	8005d64 <pb_enc_bytes>
 8005460:	4603      	mov	r3, r0
 8005462:	e01c      	b.n	800549e <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fcba 	bl	8005de0 <pb_enc_string>
 800546c:	4603      	mov	r3, r0
 800546e:	e016      	b.n	800549e <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fd12 	bl	8005e9c <pb_enc_submessage>
 8005478:	4603      	mov	r3, r0
 800547a:	e010      	b.n	800549e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fd52 	bl	8005f28 <pb_enc_fixed_length_bytes>
 8005484:	4603      	mov	r3, r0
 8005486:	e00a      	b.n	800549e <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <encode_basic_field+0xd2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	e000      	b.n	8005498 <encode_basic_field+0xd4>
 8005496:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <encode_basic_field+0xe4>)
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6113      	str	r3, [r2, #16]
 800549c:	2300      	movs	r3, #0
    }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	080086a8 	.word	0x080086a8

080054ac <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d018      	beq.n	80054f2 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	2000      	movs	r0, #0
 80054cc:	4798      	blx	r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <encode_callback_field+0x3c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	e000      	b.n	80054ea <encode_callback_field+0x3e>
 80054e8:	4b04      	ldr	r3, [pc, #16]	@ (80054fc <encode_callback_field+0x50>)
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6113      	str	r3, [r2, #16]
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <encode_callback_field+0x48>
    }
    return true;
 80054f2:	2301      	movs	r3, #1
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	080086bc 	.word	0x080086bc

08005500 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	7d9b      	ldrb	r3, [r3, #22]
 800550e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005512:	2b30      	cmp	r3, #48	@ 0x30
 8005514:	d108      	bne.n	8005528 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	8a1b      	ldrh	r3, [r3, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d026      	beq.n	8005572 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005524:	2301      	movs	r3, #1
 8005526:	e059      	b.n	80055dc <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	7d9b      	ldrb	r3, [r3, #22]
 800552c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005530:	2b10      	cmp	r3, #16
 8005532:	d11e      	bne.n	8005572 <encode_field+0x72>
    {
        if (field->pSize)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fcaf 	bl	8004ea4 <safe_read_bool>
 8005546:	4603      	mov	r3, r0
 8005548:	f083 0301 	eor.w	r3, r3, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00f      	beq.n	8005572 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8005552:	2301      	movs	r3, #1
 8005554:	e042      	b.n	80055dc <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	7d9b      	ldrb	r3, [r3, #22]
 800555a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	f7ff fe10 	bl	8005188 <pb_check_proto3_default_value>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <encode_field+0x72>
                return true;
 800556e:	2301      	movs	r3, #1
 8005570:	e034      	b.n	80055dc <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d113      	bne.n	80055a2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	7d9b      	ldrb	r3, [r3, #22]
 800557e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <encode_field+0x94>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	e000      	b.n	8005596 <encode_field+0x96>
 8005594:	4b13      	ldr	r3, [pc, #76]	@ (80055e4 <encode_field+0xe4>)
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6113      	str	r3, [r2, #16]
 800559a:	2300      	movs	r3, #0
 800559c:	e01e      	b.n	80055dc <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 800559e:	2301      	movs	r3, #1
 80055a0:	e01c      	b.n	80055dc <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	7d9b      	ldrb	r3, [r3, #22]
 80055a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d105      	bne.n	80055ba <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ff7b 	bl	80054ac <encode_callback_field>
 80055b6:	4603      	mov	r3, r0
 80055b8:	e010      	b.n	80055dc <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	7d9b      	ldrb	r3, [r3, #22]
 80055be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d105      	bne.n	80055d2 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fc89 	bl	8004ee0 <encode_array>
 80055ce:	4603      	mov	r3, r0
 80055d0:	e004      	b.n	80055dc <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fef5 	bl	80053c4 <encode_basic_field>
 80055da:	4603      	mov	r3, r0
    }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	080086cc 	.word	0x080086cc

080055e8 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08c      	sub	sp, #48	@ 0x30
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 80055f2:	f107 0308 	add.w	r3, r7, #8
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 ff4a 	bl	8007492 <pb_field_iter_begin_extension_const>
 80055fe:	4603      	mov	r3, r0
 8005600:	f083 0301 	eor.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <default_extension_encoder+0x30>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	e000      	b.n	800561a <default_extension_encoder+0x32>
 8005618:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <default_extension_encoder+0x50>)
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6113      	str	r3, [r2, #16]
 800561e:	2300      	movs	r3, #0
 8005620:	e006      	b.n	8005630 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8005622:	f107 0308 	add.w	r3, r7, #8
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff ff69 	bl	8005500 <encode_field>
 800562e:	4603      	mov	r3, r0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3730      	adds	r7, #48	@ 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	080086e4 	.word	0x080086e4

0800563c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60fb      	str	r3, [r7, #12]

    while (extension)
 800564e:	e01e      	b.n	800568e <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	4603      	mov	r3, r0
 8005668:	72fb      	strb	r3, [r7, #11]
 800566a:	e005      	b.n	8005678 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ffba 	bl	80055e8 <default_extension_encoder>
 8005674:	4603      	mov	r3, r0
 8005676:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	f083 0301 	eor.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <encode_extension_field+0x4c>
            return false;
 8005684:	2300      	movs	r3, #0
 8005686:	e006      	b.n	8005696 <encode_extension_field+0x5a>
        
        extension = extension->next;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60fb      	str	r3, [r7, #12]
    while (extension)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1dd      	bne.n	8005650 <encode_extension_field+0x14>
    }
    
    return true;
 8005694:	2301      	movs	r3, #1
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b08e      	sub	sp, #56	@ 0x38
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fed9 	bl	800746a <pb_field_iter_begin_const>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f083 0301 	eor.w	r3, r3, #1
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <pb_encode+0x2a>
        return true; /* Empty message type */
 80056c4:	2301      	movs	r3, #1
 80056c6:	e02a      	b.n	800571e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80056c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2b0a      	cmp	r3, #10
 80056d2:	d10d      	bne.n	80056f0 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	4619      	mov	r1, r3
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff ffae 	bl	800563c <encode_extension_field>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00f      	beq.n	800570c <pb_encode+0x6e>
                return false;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e016      	b.n	800571e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 80056f0:	f107 0310 	add.w	r3, r7, #16
 80056f4:	4619      	mov	r1, r3
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff ff02 	bl	8005500 <encode_field>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f083 0301 	eor.w	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <pb_encode+0x6e>
                return false;
 8005708:	2300      	movs	r3, #0
 800570a:	e008      	b.n	800571e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	4618      	mov	r0, r3
 8005712:	f001 fdff 	bl	8007314 <pb_field_iter_next>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1d5      	bne.n	80056c8 <pb_encode+0x2a>
    
    return true;
 800571c:	2301      	movs	r3, #1
}
 800571e:	4618      	mov	r0, r3
 8005720:	3738      	adds	r7, #56	@ 0x38
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b088      	sub	sp, #32
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800573e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	09db      	lsrs	r3, r3, #7
 8005744:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8005746:	e013      	b.n	8005770 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8005748:	7efb      	ldrb	r3, [r7, #27]
 800574a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800574e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	61fa      	str	r2, [r7, #28]
 8005756:	3320      	adds	r3, #32
 8005758:	443b      	add	r3, r7
 800575a:	7efa      	ldrb	r2, [r7, #27]
 800575c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005768:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	09db      	lsrs	r3, r3, #7
 800576e:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d805      	bhi.n	8005782 <pb_encode_varint_32+0x5c>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e5      	bne.n	8005748 <pb_encode_varint_32+0x22>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e2      	bne.n	8005748 <pb_encode_varint_32+0x22>
    }

    if (high)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d024      	beq.n	80057d2 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005794:	b2da      	uxtb	r2, r3
 8005796:	7efb      	ldrb	r3, [r7, #27]
 8005798:	4313      	orrs	r3, r2
 800579a:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	08db      	lsrs	r3, r3, #3
 80057a0:	607b      	str	r3, [r7, #4]

        while (high)
 80057a2:	e013      	b.n	80057cc <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 80057a4:	7efb      	ldrb	r3, [r7, #27]
 80057a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057aa:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	61fa      	str	r2, [r7, #28]
 80057b2:	3320      	adds	r3, #32
 80057b4:	443b      	add	r3, r7
 80057b6:	7efa      	ldrb	r2, [r7, #27]
 80057b8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c4:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	09db      	lsrs	r3, r3, #7
 80057ca:	607b      	str	r3, [r7, #4]
        while (high)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e8      	bne.n	80057a4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	61fa      	str	r2, [r7, #28]
 80057d8:	3320      	adds	r3, #32
 80057da:	443b      	add	r3, r7
 80057dc:	7efa      	ldrb	r2, [r7, #27]
 80057de:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 80057e2:	f107 0310 	add.w	r3, r7, #16
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	4619      	mov	r1, r3
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fb0a 	bl	8004e04 <pb_write>
 80057f0:	4603      	mov	r3, r0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 80057fa:	b590      	push	{r4, r7, lr}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8005806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800580a:	2a80      	cmp	r2, #128	@ 0x80
 800580c:	f173 0300 	sbcs.w	r3, r3, #0
 8005810:	d20a      	bcs.n	8005828 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8005812:	783b      	ldrb	r3, [r7, #0]
 8005814:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8005816:	f107 0317 	add.w	r3, r7, #23
 800581a:	2201      	movs	r2, #1
 800581c:	4619      	mov	r1, r3
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff faf0 	bl	8004e04 <pb_write>
 8005824:	4603      	mov	r3, r0
 8005826:	e00f      	b.n	8005848 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8005828:	683c      	ldr	r4, [r7, #0]
 800582a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	000a      	movs	r2, r1
 8005838:	2300      	movs	r3, #0
 800583a:	4613      	mov	r3, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4621      	mov	r1, r4
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff ff70 	bl	8005726 <pb_encode_varint_32>
 8005846:	4603      	mov	r3, r0
#endif
    }
}
 8005848:	4618      	mov	r0, r3
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	bd90      	pop	{r4, r7, pc}

08005850 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b08a      	sub	sp, #40	@ 0x28
 8005856:	af00      	add	r7, sp, #0
 8005858:	6178      	str	r0, [r7, #20]
 800585a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800585e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005862:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005866:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 800586a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	da15      	bge.n	800589e <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 8005872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587a:	ea00 0402 	and.w	r4, r0, r2
 800587e:	ea01 0503 	and.w	r5, r1, r3
 8005882:	1923      	adds	r3, r4, r4
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	eb45 0305 	adc.w	r3, r5, r5
 800588a:	607b      	str	r3, [r7, #4]
 800588c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005890:	ea6f 0a02 	mvn.w	sl, r2
 8005894:	ea6f 0b03 	mvn.w	fp, r3
 8005898:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 800589c:	e007      	b.n	80058ae <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800589e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a2:	eb12 0802 	adds.w	r8, r2, r2
 80058a6:	eb43 0903 	adc.w	r9, r3, r3
 80058aa:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80058ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f7ff ffa1 	bl	80057fa <pb_encode_varint>
 80058b8:	4603      	mov	r3, r0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3728      	adds	r7, #40	@ 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058c4 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 80058ce:	2204      	movs	r2, #4
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fa96 	bl	8004e04 <pb_write>
 80058d8:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 80058ec:	2208      	movs	r2, #8
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fa87 	bl	8004e04 <pb_write>
 80058f6:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b088      	sub	sp, #32
 8005906:	af00      	add	r7, sp, #0
 8005908:	6178      	str	r0, [r7, #20]
 800590a:	460b      	mov	r3, r1
 800590c:	60fa      	str	r2, [r7, #12]
 800590e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	469a      	mov	sl, r3
 8005916:	4693      	mov	fp, r2
 8005918:	ea4f 755a 	mov.w	r5, sl, lsr #29
 800591c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	2200      	movs	r2, #0
 8005924:	4698      	mov	r8, r3
 8005926:	4691      	mov	r9, r2
 8005928:	ea44 0308 	orr.w	r3, r4, r8
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	ea45 0309 	orr.w	r3, r5, r9
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005938:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 800593c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	f7ff ff5a 	bl	80057fa <pb_encode_varint>
 8005946:	4603      	mov	r3, r0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005954 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	7d9b      	ldrb	r3, [r3, #22]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	2b0b      	cmp	r3, #11
 8005968:	d826      	bhi.n	80059b8 <pb_encode_tag_for_field+0x64>
 800596a:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <pb_encode_tag_for_field+0x1c>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	080059a1 	.word	0x080059a1
 8005974:	080059a1 	.word	0x080059a1
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a7 	.word	0x080059a7
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b3 	.word	0x080059b3
 800598c:	080059b3 	.word	0x080059b3
 8005990:	080059b3 	.word	0x080059b3
 8005994:	080059b3 	.word	0x080059b3
 8005998:	080059b9 	.word	0x080059b9
 800599c:	080059b3 	.word	0x080059b3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
            break;
 80059a4:	e014      	b.n	80059d0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80059a6:	2305      	movs	r3, #5
 80059a8:	73fb      	strb	r3, [r7, #15]
            break;
 80059aa:	e011      	b.n	80059d0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
            break;
 80059b0:	e00e      	b.n	80059d0 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80059b2:	2302      	movs	r3, #2
 80059b4:	73fb      	strb	r3, [r7, #15]
            break;
 80059b6:	e00b      	b.n	80059d0 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <pb_encode_tag_for_field+0x72>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	e000      	b.n	80059c8 <pb_encode_tag_for_field+0x74>
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <pb_encode_tag_for_field+0x98>)
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6113      	str	r3, [r2, #16]
 80059cc:	2300      	movs	r3, #0
 80059ce:	e008      	b.n	80059e2 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	8a1b      	ldrh	r3, [r3, #16]
 80059d4:	461a      	mov	r2, r3
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff ff90 	bl	8005900 <pb_encode_tag>
 80059e0:	4603      	mov	r3, r0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	080086a8 	.word	0x080086a8

080059f0 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	461c      	mov	r4, r3
 8005a02:	4615      	mov	r5, r2
 8005a04:	4622      	mov	r2, r4
 8005a06:	462b      	mov	r3, r5
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fef6 	bl	80057fa <pb_encode_varint>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	f083 0301 	eor.w	r3, r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <pb_encode_string+0x2e>
        return false;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e005      	b.n	8005a2a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff f9ee 	bl	8004e04 <pb_write>
 8005a28:	4603      	mov	r3, r0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a34 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005a34:	b5b0      	push	{r4, r5, r7, lr}
 8005a36:	b08c      	sub	sp, #48	@ 0x30
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8005a50:	f107 0314 	add.w	r3, r7, #20
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fe20 	bl	800569e <pb_encode>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f083 0301 	eor.w	r3, r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e065      	b.n	8005b40 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	461c      	mov	r4, r3
 8005a7e:	4615      	mov	r5, r2
 8005a80:	4622      	mov	r2, r4
 8005a82:	462b      	mov	r3, r5
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff feb8 	bl	80057fa <pb_encode_varint>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <pb_encode_submessage+0x66>
        return false;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e052      	b.n	8005b40 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff f9ac 	bl	8004e04 <pb_write>
 8005aac:	4603      	mov	r3, r0
 8005aae:	e047      	b.n	8005b40 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d90b      	bls.n	8005ad8 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <pb_encode_submessage+0x9a>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	e000      	b.n	8005ad0 <pb_encode_submessage+0x9c>
 8005ace:	4b1e      	ldr	r3, [pc, #120]	@ (8005b48 <pb_encode_submessage+0x114>)
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	6113      	str	r3, [r2, #16]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e033      	b.n	8005b40 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8005af0:	f107 0314 	add.w	r3, r7, #20
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fdd0 	bl	800569e <pb_encode>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	441a      	add	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d00b      	beq.n	8005b3c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <pb_encode_submessage+0xfe>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	e000      	b.n	8005b34 <pb_encode_submessage+0x100>
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <pb_encode_submessage+0x118>)
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	6113      	str	r3, [r2, #16]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e001      	b.n	8005b40 <pb_encode_submessage+0x10c>
    
    return status;
 8005b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	@ 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bdb0      	pop	{r4, r5, r7, pc}
 8005b48:	08008670 	.word	0x08008670
 8005b4c:	080086f8 	.word	0x080086f8

08005b50 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005b50:	b5b0      	push	{r4, r5, r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff f9a0 	bl	8004ea4 <safe_read_bool>
 8005b64:	4603      	mov	r3, r0
 8005b66:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	461c      	mov	r4, r3
 8005b6e:	4615      	mov	r5, r2
 8005b70:	4622      	mov	r2, r4
 8005b72:	462b      	mov	r3, r5
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fe40 	bl	80057fa <pb_encode_varint>
 8005b7a:	4603      	mov	r3, r0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bdb0      	pop	{r4, r5, r7, pc}

08005b84 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b88:	b08c      	sub	sp, #48	@ 0x30
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	61f8      	str	r0, [r7, #28]
 8005b8e:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	7d9b      	ldrb	r3, [r3, #22]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d152      	bne.n	8005c42 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	8a5b      	ldrh	r3, [r3, #18]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10b      	bne.n	8005bc8 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2200      	movs	r2, #0
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	617a      	str	r2, [r7, #20]
 8005bbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005bc2:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005bc6:	e035      	b.n	8005c34 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	8a5b      	ldrh	r3, [r3, #18]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d10b      	bne.n	8005be8 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	60fa      	str	r2, [r7, #12]
 8005bde:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005be2:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005be6:	e025      	b.n	8005c34 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	8a5b      	ldrh	r3, [r3, #18]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d10a      	bne.n	8005c06 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c00:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8005c04:	e016      	b.n	8005c34 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	8a5b      	ldrh	r3, [r3, #18]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d106      	bne.n	8005c1c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8005c1a:	e00b      	b.n	8005c34 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <pb_enc_varint+0xa6>
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	e000      	b.n	8005c2c <pb_enc_varint+0xa8>
 8005c2a:	4b36      	ldr	r3, [pc, #216]	@ (8005d04 <pb_enc_varint+0x180>)
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	6113      	str	r3, [r2, #16]
 8005c30:	2300      	movs	r3, #0
 8005c32:	e061      	b.n	8005cf8 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8005c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c38:	69f8      	ldr	r0, [r7, #28]
 8005c3a:	f7ff fdde 	bl	80057fa <pb_encode_varint>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	e05a      	b.n	8005cf8 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	8a5b      	ldrh	r3, [r3, #18]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10a      	bne.n	8005c6c <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8005c5e:	b25b      	sxtb	r3, r3
 8005c60:	17da      	asrs	r2, r3, #31
 8005c62:	469a      	mov	sl, r3
 8005c64:	4693      	mov	fp, r2
 8005c66:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005c6a:	e032      	b.n	8005cd2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	8a5b      	ldrh	r3, [r3, #18]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d10a      	bne.n	8005c8a <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	17da      	asrs	r2, r3, #31
 8005c80:	4698      	mov	r8, r3
 8005c82:	4691      	mov	r9, r2
 8005c84:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8005c88:	e023      	b.n	8005cd2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	8a5b      	ldrh	r3, [r3, #18]
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d108      	bne.n	8005ca4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	17da      	asrs	r2, r3, #31
 8005c9a:	461c      	mov	r4, r3
 8005c9c:	4615      	mov	r5, r2
 8005c9e:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8005ca2:	e016      	b.n	8005cd2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	8a5b      	ldrh	r3, [r3, #18]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d106      	bne.n	8005cba <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005cb8:	e00b      	b.n	8005cd2 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <pb_enc_varint+0x144>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	e000      	b.n	8005cca <pb_enc_varint+0x146>
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d04 <pb_enc_varint+0x180>)
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e012      	b.n	8005cf8 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	7d9b      	ldrb	r3, [r3, #22]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d106      	bne.n	8005cec <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8005cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ce2:	69f8      	ldr	r0, [r7, #28]
 8005ce4:	f7ff fdb4 	bl	8005850 <pb_encode_svarint>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	e005      	b.n	8005cf8 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8005cec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cf0:	69f8      	ldr	r0, [r7, #28]
 8005cf2:	f7ff fd82 	bl	80057fa <pb_encode_varint>
 8005cf6:	4603      	mov	r3, r0

    }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3730      	adds	r7, #48	@ 0x30
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d02:	bf00      	nop
 8005d04:	0800870c 	.word	0x0800870c

08005d08 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	8a5b      	ldrh	r3, [r3, #18]
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d107      	bne.n	8005d2a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fdcf 	bl	80058c4 <pb_encode_fixed32>
 8005d26:	4603      	mov	r3, r0
 8005d28:	e016      	b.n	8005d58 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	8a5b      	ldrh	r3, [r3, #18]
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d107      	bne.n	8005d42 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fdd2 	bl	80058e2 <pb_encode_fixed64>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	e00a      	b.n	8005d58 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <pb_enc_fixed+0x48>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	e000      	b.n	8005d52 <pb_enc_fixed+0x4a>
 8005d50:	4b03      	ldr	r3, [pc, #12]	@ (8005d60 <pb_enc_fixed+0x58>)
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	2300      	movs	r3, #0
    }
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	0800870c 	.word	0x0800870c

08005d64 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2100      	movs	r1, #0
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fe34 	bl	80059f0 <pb_encode_string>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	e022      	b.n	8005dd2 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	7d9b      	ldrb	r3, [r3, #22]
 8005d90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	8a5b      	ldrh	r3, [r3, #18]
 8005da2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d90b      	bls.n	8005dc0 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <pb_enc_bytes+0x52>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	e000      	b.n	8005db8 <pb_enc_bytes+0x54>
 8005db6:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <pb_enc_bytes+0x78>)
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6113      	str	r3, [r2, #16]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e008      	b.n	8005dd2 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1c99      	adds	r1, r3, #2
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fe10 	bl	80059f0 <pb_encode_string>
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	08008720 	.word	0x08008720

08005de0 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	8a5b      	ldrh	r3, [r3, #18]
 8005df2:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	7d9b      	ldrb	r3, [r3, #22]
 8005dfe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e02:	2b80      	cmp	r3, #128	@ 0x80
 8005e04:	d103      	bne.n	8005e0e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e011      	b.n	8005e32 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10b      	bne.n	8005e2c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <pb_enc_string+0x42>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	e000      	b.n	8005e24 <pb_enc_string+0x44>
 8005e22:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <pb_enc_string+0xb4>)
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6113      	str	r3, [r2, #16]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e02f      	b.n	8005e8c <pb_enc_string+0xac>

        max_size -= 1;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	e020      	b.n	8005e80 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8005e42:	e005      	b.n	8005e50 <pb_enc_string+0x70>
        {
            size++;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3301      	adds	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
            p++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d203      	bcs.n	8005e60 <pb_enc_string+0x80>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f1      	bne.n	8005e44 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <pb_enc_string+0x96>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	e000      	b.n	8005e78 <pb_enc_string+0x98>
 8005e76:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <pb_enc_string+0xb8>)
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6113      	str	r3, [r2, #16]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e005      	b.n	8005e8c <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fdb3 	bl	80059f0 <pb_encode_string>
 8005e8a:	4603      	mov	r3, r0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	08008734 	.word	0x08008734
 8005e98:	08008748 	.word	0x08008748

08005e9c <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <pb_enc_submessage+0x20>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	e000      	b.n	8005ebe <pb_enc_submessage+0x22>
 8005ebc:	4b19      	ldr	r3, [pc, #100]	@ (8005f24 <pb_enc_submessage+0x88>)
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6113      	str	r3, [r2, #16]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e029      	b.n	8005f1a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	7d9b      	ldrb	r3, [r3, #22]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	2b09      	cmp	r3, #9
 8005ed0:	d11a      	bne.n	8005f08 <pb_enc_submessage+0x6c>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d016      	beq.n	8005f08 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	3b08      	subs	r3, #8
 8005ee0:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	3204      	adds	r2, #4
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f083 0301 	eor.w	r3, r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <pb_enc_submessage+0x6c>
                return false;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e008      	b.n	8005f1a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fd8e 	bl	8005a34 <pb_encode_submessage>
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	0800875c 	.word	0x0800875c

08005f28 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	69d9      	ldr	r1, [r3, #28]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	8a5b      	ldrh	r3, [r3, #18]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff fd57 	bl	80059f0 <pb_encode_string>
 8005f42:	4603      	mov	r3, r0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <TF_ClearMsg>:
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8005f54:	2218      	movs	r2, #24
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fdbd 	bl	8007ad8 <memset>
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f76:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d004      	beq.n	8005f88 <TF_ClaimTx+0x20>
            TF_Error("TF already locked for tx!");
 8005f7e:	4808      	ldr	r0, [pc, #32]	@ (8005fa0 <TF_ClaimTx+0x38>)
 8005f80:	f001 fcca 	bl	8007918 <puts>
            return false;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e006      	b.n	8005f96 <TF_ClaimTx+0x2e>
        }

        tf->soft_lock = true;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
        return true;
 8005f94:	2301      	movs	r3, #1
    }
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08008778 	.word	0x08008778

08005fa4 <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	460a      	mov	r2, r1
 8005fde:	80fb      	strh	r3, [r7, #6]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	717b      	strb	r3, [r7, #5]
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	88f9      	ldrh	r1, [r7, #6]
 8005fec:	797b      	ldrb	r3, [r7, #5]
 8005fee:	404b      	eors	r3, r1
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	4905      	ldr	r1, [pc, #20]	@ (8006008 <TF_CksumAdd+0x34>)
 8005ff4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005ff8:	4053      	eors	r3, r2
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	08008bd4 	.word	0x08008bd4

0800600c <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	80fb      	strh	r3, [r7, #6]
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 8006036:	480f      	ldr	r0, [pc, #60]	@ (8006074 <TF_InitStatic+0x50>)
 8006038:	f001 fc6e 	bl	8007918 <puts>
        return false;
 800603c:	2300      	movs	r3, #0
 800603e:	e015      	b.n	800606c <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 800604c:	f242 2260 	movw	r2, #8800	@ 0x2260
 8006050:	2100      	movs	r1, #0
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 fd40 	bl	8007ad8 <memset>

    tf->usertag = usertag;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	721a      	strb	r2, [r3, #8]
    return true;
 800606a:	2301      	movs	r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	08008798 	.word	0x08008798

08006078 <renew_id_listener>:

//region Listeners

/** Reset ID listener's timeout to the original value */
static inline void _TF_FN renew_id_listener(struct TF_IdListener_ *lst)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
    lst->timeout = lst->timeout_max;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	895a      	ldrh	r2, [r3, #10]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	811a      	strh	r2, [r3, #8]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <cleanup_id_listener>:

/** Notify callback about ID listener's demise & let it free any resources in userdata */
static void _TF_FN cleanup_id_listener(TinyFrame *tf, TF_COUNT i, struct TF_IdListener_ *lst)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	@ 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	460b      	mov	r3, r1
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	72fb      	strb	r3, [r7, #11]
    TF_Msg msg;
    if (lst->fn == NULL) return;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d02f      	beq.n	800610a <cleanup_id_listener+0x76>

    // Make user clean up their data - only if not NULL
    if (lst->userdata != NULL || lst->userdata2 != NULL) {
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <cleanup_id_listener+0x26>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <cleanup_id_listener+0x44>
        msg.userdata = lst->userdata;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	623b      	str	r3, [r7, #32]
        msg.userdata2 = lst->userdata2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24
        msg.data = NULL; // this is a signal that the listener should clean up
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
        lst->fn(tf, &msg); // return value is ignored here - use TF_STAY or TF_CLOSE
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f107 0210 	add.w	r2, r7, #16
 80060d2:	4611      	mov	r1, r2
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	4798      	blx	r3
    }

    lst->fn = NULL; // Discard listener
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	605a      	str	r2, [r3, #4]

    if (i == tf->count_id_lst - 1) {
 80060de:	7afa      	ldrb	r2, [r7, #11]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060e6:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 80060ea:	3b01      	subs	r3, #1
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d10d      	bne.n	800610c <cleanup_id_listener+0x78>
        tf->count_id_lst--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060f6:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006104:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 8006108:	e000      	b.n	800610c <cleanup_id_listener+0x78>
    if (lst->fn == NULL) return;
 800610a:	bf00      	nop
    }
}
 800610c:	3728      	adds	r7, #40	@ 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <cleanup_type_listener>:

/** Clean up Type listener */
static inline void _TF_FN cleanup_type_listener(TinyFrame *tf, TF_COUNT i, struct TF_TypeListener_ *lst)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	460b      	mov	r3, r1
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
    if (i == tf->count_type_lst - 1) {
 8006126:	7afa      	ldrb	r2, [r7, #11]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800612e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006132:	3b01      	subs	r3, #1
 8006134:	429a      	cmp	r2, r3
 8006136:	d10b      	bne.n	8006150 <cleanup_type_listener+0x3e>
        tf->count_type_lst--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800613e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006142:	3b01      	subs	r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800614c:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
    }
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <cleanup_generic_listener>:

/** Clean up Generic listener */
static inline void _TF_FN cleanup_generic_listener(TinyFrame *tf, TF_COUNT i, struct TF_GenericListener_ *lst)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	460b      	mov	r3, r1
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
    if (i == tf->count_generic_lst - 1) {
 8006170:	7afa      	ldrb	r2, [r7, #11]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006178:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800617c:	3b01      	subs	r3, #1
 800617e:	429a      	cmp	r2, r3
 8006180:	d10b      	bne.n	800619a <cleanup_generic_listener+0x3e>
        tf->count_generic_lst--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006188:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800618c:	3b01      	subs	r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006196:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    }
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <TF_AddIdListener>:

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_TICKS timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	807b      	strh	r3, [r7, #2]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
 80061ba:	e039      	b.n	8006230 <TF_AddIdListener+0x88>
        lst = &tf->id_listeners[i];
 80061bc:	7dfa      	ldrb	r2, [r7, #23]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80061ca:	3330      	adds	r3, #48	@ 0x30
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d127      	bne.n	800622a <TF_AddIdListener+0x82>
            lst->fn = cb;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	605a      	str	r2, [r3, #4]
            lst->id = msg->frame_id;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	601a      	str	r2, [r3, #0]
            lst->userdata = msg->userdata;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	60da      	str	r2, [r3, #12]
            lst->userdata2 = msg->userdata2;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	695a      	ldr	r2, [r3, #20]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	611a      	str	r2, [r3, #16]
            lst->timeout_max = lst->timeout = timeout;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	887a      	ldrh	r2, [r7, #2]
 80061fc:	811a      	strh	r2, [r3, #8]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	891a      	ldrh	r2, [r3, #8]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	815a      	strh	r2, [r3, #10]
            if (i >= tf->count_id_lst) {
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800620c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006210:	7dfa      	ldrb	r2, [r7, #23]
 8006212:	429a      	cmp	r2, r3
 8006214:	d307      	bcc.n	8006226 <TF_AddIdListener+0x7e>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	3301      	adds	r3, #1
 800621a:	b2da      	uxtb	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006222:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
            }
            return true;
 8006226:	2301      	movs	r3, #1
 8006228:	e009      	b.n	800623e <TF_AddIdListener+0x96>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	3301      	adds	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b09      	cmp	r3, #9
 8006234:	d9c2      	bls.n	80061bc <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 8006236:	4804      	ldr	r0, [pc, #16]	@ (8006248 <TF_AddIdListener+0xa0>)
 8006238:	f001 fb6e 	bl	8007918 <puts>
    return false;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	080087ec 	.word	0x080087ec

0800624c <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
 800625a:	e022      	b.n	80062a2 <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d114      	bne.n	800629c <TF_AddGenericListener+0x50>
            lst->fn = cb;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800627e:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8006282:	7bfa      	ldrb	r2, [r7, #15]
 8006284:	429a      	cmp	r2, r3
 8006286:	d307      	bcc.n	8006298 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	3301      	adds	r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006294:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 8006298:	2301      	movs	r3, #1
 800629a:	e009      	b.n	80062b0 <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	3301      	adds	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d9d9      	bls.n	800625c <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 80062a8:	4803      	ldr	r0, [pc, #12]	@ (80062b8 <TF_AddGenericListener+0x6c>)
 80062aa:	f001 fb35 	bl	8007918 <puts>
    return false;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	08008830 	.word	0x08008830

080062bc <TF_HandleReceivedMessage>:
    return false;
}

/** Handle a message that was just collected & verified by the parser */
static void _TF_FN TF_HandleReceivedMessage(TinyFrame *tf)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08e      	sub	sp, #56	@ 0x38
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    struct TF_GenericListener_ *glst;
    TF_Result res;

    // Prepare message object
    TF_Msg msg;
    TF_ClearMsg(&msg);
 80062c4:	f107 030c 	add.w	r3, r7, #12
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff fe3f 	bl	8005f4c <TF_ClearMsg>
    msg.frame_id = tf->id;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	60fb      	str	r3, [r7, #12]
    msg.is_response = false;
 80062d4:	2300      	movs	r3, #0
 80062d6:	743b      	strb	r3, [r7, #16]
    msg.type = tf->type;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062de:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80062e2:	827b      	strh	r3, [r7, #18]
    msg.data = tf->data;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	331a      	adds	r3, #26
 80062e8:	617b      	str	r3, [r7, #20]
    msg.len = tf->len;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8b1b      	ldrh	r3, [r3, #24]
 80062ee:	833b      	strh	r3, [r7, #24]

    // The loop upper bounds are the highest currently used slot index
    // (or close to it, depending on the order of listener removals).

    // ID listeners first
    for (i = 0; i < tf->count_id_lst; i++) {
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80062f6:	e04e      	b.n	8006396 <TF_HandleReceivedMessage+0xda>
        ilst = &tf->id_listeners[i];
 80062f8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006308:	3330      	adds	r3, #48	@ 0x30
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4413      	add	r3, r2
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24

        if (ilst->fn && ilst->id == msg.frame_id) {
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d039      	beq.n	800638c <TF_HandleReceivedMessage+0xd0>
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	429a      	cmp	r2, r3
 8006320:	d134      	bne.n	800638c <TF_HandleReceivedMessage+0xd0>
            msg.userdata = ilst->userdata; // pass userdata pointer to the callback
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	61fb      	str	r3, [r7, #28]
            msg.userdata2 = ilst->userdata2;
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	623b      	str	r3, [r7, #32]
            res = ilst->fn(tf, &msg);
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f107 020c 	add.w	r2, r7, #12
 8006336:	4611      	mov	r1, r2
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
 800633c:	4603      	mov	r3, r0
 800633e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            ilst->userdata = msg.userdata; // put it back (may have changed the pointer or set to NULL)
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	60da      	str	r2, [r3, #12]
            ilst->userdata2 = msg.userdata2; // put it back (may have changed the pointer or set to NULL)
 8006348:	6a3a      	ldr	r2, [r7, #32]
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	611a      	str	r2, [r3, #16]

            if (res != TF_NEXT) {
 800634e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <TF_HandleReceivedMessage+0xd0>
                // if it's TF_CLOSE, we assume user already cleaned up userdata
                if (res == TF_RENEW) {
 8006356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800635a:	2b02      	cmp	r3, #2
 800635c:	d103      	bne.n	8006366 <TF_HandleReceivedMessage+0xaa>
                    renew_id_listener(ilst);
 800635e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006360:	f7ff fe8a 	bl	8006078 <renew_id_listener>
                    // Set userdata to NULL to avoid calling user for cleanup
                    ilst->userdata = NULL;
                    ilst->userdata2 = NULL;
                    cleanup_id_listener(tf, i, ilst);
                }
                return;
 8006364:	e09f      	b.n	80064a6 <TF_HandleReceivedMessage+0x1ea>
                else if (res == TF_CLOSE) {
 8006366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800636a:	2b03      	cmp	r3, #3
 800636c:	f040 809b 	bne.w	80064a6 <TF_HandleReceivedMessage+0x1ea>
                    ilst->userdata = NULL;
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	2200      	movs	r2, #0
 8006374:	60da      	str	r2, [r3, #12]
                    ilst->userdata2 = NULL;
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	2200      	movs	r2, #0
 800637a:	611a      	str	r2, [r3, #16]
                    cleanup_id_listener(tf, i, ilst);
 800637c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fe85 	bl	8006094 <cleanup_id_listener>
                return;
 800638a:	e08c      	b.n	80064a6 <TF_HandleReceivedMessage+0x1ea>
    for (i = 0; i < tf->count_id_lst; i++) {
 800638c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006390:	3301      	adds	r3, #1
 8006392:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800639c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 80063a0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3a7      	bcc.n	80062f8 <TF_HandleReceivedMessage+0x3c>
            }
        }
    }
    // clean up for the following listeners that don't use userdata (this avoids data from
    // an ID listener that returned TF_NEXT from leaking into Type and Generic listeners)
    msg.userdata = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
    msg.userdata2 = NULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	623b      	str	r3, [r7, #32]

    // Type listeners
    for (i = 0; i < tf->count_type_lst; i++) {
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80063b6:	e02f      	b.n	8006418 <TF_HandleReceivedMessage+0x15c>
        tlst = &tf->type_listeners[i];
 80063b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063bc:	f203 433f 	addw	r3, r3, #1087	@ 0x43f
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	4413      	add	r3, r2
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (tlst->fn && tlst->type == msg.type) {
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01e      	beq.n	800640e <TF_HandleReceivedMessage+0x152>
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	881a      	ldrh	r2, [r3, #0]
 80063d4:	8a7b      	ldrh	r3, [r7, #18]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d119      	bne.n	800640e <TF_HandleReceivedMessage+0x152>
            res = tlst->fn(tf, &msg);
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f107 020c 	add.w	r2, r7, #12
 80063e2:	4611      	mov	r1, r2
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 80063ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <TF_HandleReceivedMessage+0x152>
                // type listeners don't have userdata.
                // TF_RENEW doesn't make sense here because type listeners don't expire = same as TF_STAY

                if (res == TF_CLOSE) {
 80063f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d155      	bne.n	80064aa <TF_HandleReceivedMessage+0x1ee>
                    cleanup_type_listener(tf, i, tlst);
 80063fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fe83 	bl	8006112 <cleanup_type_listener>
                }
                return;
 800640c:	e04d      	b.n	80064aa <TF_HandleReceivedMessage+0x1ee>
    for (i = 0; i < tf->count_type_lst; i++) {
 800640e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006412:	3301      	adds	r3, #1
 8006414:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800641e:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 8006422:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006426:	429a      	cmp	r2, r3
 8006428:	d3c6      	bcc.n	80063b8 <TF_HandleReceivedMessage+0xfc>
            }
        }
    }

    // Generic listeners
    for (i = 0; i < tf->count_generic_lst; i++) {
 800642a:	2300      	movs	r3, #0
 800642c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006430:	e02a      	b.n	8006488 <TF_HandleReceivedMessage+0x1cc>
        glst = &tf->generic_listeners[i];
 8006432:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006436:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	633b      	str	r3, [r7, #48]	@ 0x30

        if (glst->fn) {
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d019      	beq.n	800647e <TF_HandleReceivedMessage+0x1c2>
            res = glst->fn(tf, &msg);
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f107 020c 	add.w	r2, r7, #12
 8006452:	4611      	mov	r1, r2
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
 8006458:	4603      	mov	r3, r0
 800645a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (res != TF_NEXT) {
 800645e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <TF_HandleReceivedMessage+0x1c2>

                // note: It's not expected that user will have multiple generic listeners, or
                // ever actually remove them. They're most useful as default callbacks if no other listener
                // handled the message.

                if (res == TF_CLOSE) {
 8006466:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800646a:	2b03      	cmp	r3, #3
 800646c:	d11f      	bne.n	80064ae <TF_HandleReceivedMessage+0x1f2>
                    cleanup_generic_listener(tf, i, glst);
 800646e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fe70 	bl	800615c <cleanup_generic_listener>
                }
                return;
 800647c:	e017      	b.n	80064ae <TF_HandleReceivedMessage+0x1f2>
    for (i = 0; i < tf->count_generic_lst; i++) {
 800647e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006482:	3301      	adds	r3, #1
 8006484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800648e:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8006492:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006496:	429a      	cmp	r2, r3
 8006498:	d3cb      	bcc.n	8006432 <TF_HandleReceivedMessage+0x176>
            }
        }
    }

    TF_Error("Unhandled message, type %d", (int)msg.type);
 800649a:	8a7b      	ldrh	r3, [r7, #18]
 800649c:	4619      	mov	r1, r3
 800649e:	4806      	ldr	r0, [pc, #24]	@ (80064b8 <TF_HandleReceivedMessage+0x1fc>)
 80064a0:	f001 f9d2 	bl	8007848 <iprintf>
 80064a4:	e004      	b.n	80064b0 <TF_HandleReceivedMessage+0x1f4>
                return;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <TF_HandleReceivedMessage+0x1f4>
                return;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <TF_HandleReceivedMessage+0x1f4>
                return;
 80064ae:	bf00      	nop
}
 80064b0:	3738      	adds	r7, #56	@ 0x38
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	080088d8 	.word	0x080088d8

080064bc <TF_Accept>:

//region Parser

/** Handle a received byte buffer */
void _TF_FN TF_Accept(TinyFrame *tf, const uint8_t *buffer, uint32_t count)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < count; i++) {
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e00a      	b.n	80064e4 <TF_Accept+0x28>
        TF_AcceptChar(tf, buffer[i]);
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4413      	add	r3, r2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f849 	bl	8006570 <TF_AcceptChar>
    for (i = 0; i < count; i++) {
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3301      	adds	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d3f0      	bcc.n	80064ce <TF_Accept+0x12>
    }
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <TF_ResetParser>:

/** Reset the parser's internal state. */
void _TF_FN TF_ResetParser(TinyFrame *tf)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
    tf->state = TFState_SOF;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	741a      	strb	r2, [r3, #16]
    // more init will be done by the parser when the first byte is received
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <pars_begin_frame>:

/** SOF was received - prepare for the frame */
static void _TF_FN pars_begin_frame(TinyFrame *tf) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
    // Reset state vars
    CKSUM_RESET(tf->cksum);
 8006518:	f7ff fd54 	bl	8005fc4 <TF_CksumStart>
 800651c:	4603      	mov	r3, r0
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006526:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#if TF_USE_SOF_BYTE
    CKSUM_ADD(tf->cksum, TF_SOF_BYTE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006530:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006534:	21ab      	movs	r1, #171	@ 0xab
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fd4c 	bl	8005fd4 <TF_CksumAdd>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006546:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
#endif

    tf->discard_data = false;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006550:	2200      	movs	r2, #0
 8006552:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

    // Enter ID state
    tf->state = TFState_ID;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2203      	movs	r2, #3
 800655a:	741a      	strb	r2, [r3, #16]
    tf->rxi = 0;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006562:	2200      	movs	r2, #0
 8006564:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <TF_AcceptChar>:

/** Handle a received char - here's the main state machine */
void _TF_FN TF_AcceptChar(TinyFrame *tf, unsigned char c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
    // Parser timeout - clear
    if (tf->parser_timeout_ticks >= TF_PARSER_TIMEOUT_TICKS) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8a5b      	ldrh	r3, [r3, #18]
 8006580:	2b09      	cmp	r3, #9
 8006582:	d909      	bls.n	8006598 <TF_AcceptChar+0x28>
        if (tf->state != TFState_SOF) {
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7c1b      	ldrb	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <TF_AcceptChar+0x28>
            TF_ResetParser(tf);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ffb2 	bl	80064f6 <TF_ResetParser>
            TF_Error("Parser timeout");
 8006592:	48b4      	ldr	r0, [pc, #720]	@ (8006864 <TF_AcceptChar+0x2f4>)
 8006594:	f001 f9c0 	bl	8007918 <puts>
        }
    }
    tf->parser_timeout_ticks = 0;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	825a      	strh	r2, [r3, #18]
        pars_begin_frame(tf);
    }
#endif

    //@formatter:off
    switch (tf->state) {
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7c1b      	ldrb	r3, [r3, #16]
 80065a2:	2b06      	cmp	r3, #6
 80065a4:	f200 8201 	bhi.w	80069aa <TF_AcceptChar+0x43a>
 80065a8:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <TF_AcceptChar+0x40>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	08006649 	.word	0x08006649
 80065b8:	0800674d 	.word	0x0800674d
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080066bf 	.word	0x080066bf
 80065c4:	0800683d 	.word	0x0800683d
 80065c8:	080068e7 	.word	0x080068e7
        case TFState_SOF:
            if (c == TF_SOF_BYTE) {
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	2bab      	cmp	r3, #171	@ 0xab
 80065d0:	f040 81de 	bne.w	8006990 <TF_AcceptChar+0x420>
                pars_begin_frame(tf);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff9b 	bl	8006510 <pars_begin_frame>
            }
            break;
 80065da:	e1d9      	b.n	8006990 <TF_AcceptChar+0x420>

        case TFState_ID:
            CKSUM_ADD(tf->cksum, c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fcf2 	bl	8005fd4 <TF_CksumAdd>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fa:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->id, TF_ID) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	021a      	lsls	r2, r3, #8
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	615a      	str	r2, [r3, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006612:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006616:	3301      	adds	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006620:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800662e:	2b04      	cmp	r3, #4
 8006630:	f040 81b0 	bne.w	8006994 <TF_AcceptChar+0x424>
                // Enter LEN state
                tf->state = TFState_LEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 8006646:	e1a5      	b.n	8006994 <TF_AcceptChar+0x424>

        case TFState_LEN:
            CKSUM_ADD(tf->cksum, c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800664e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fcbc 	bl	8005fd4 <TF_CksumAdd>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006666:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->len, TF_LEN) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8b1b      	ldrh	r3, [r3, #24]
 800666e:	b21b      	sxth	r3, r3
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	b21a      	sxth	r2, r3
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	b21b      	sxth	r3, r3
 8006678:	4313      	orrs	r3, r2
 800667a:	b21b      	sxth	r3, r3
 800667c:	b29a      	uxth	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	831a      	strh	r2, [r3, #24]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006688:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800668c:	3301      	adds	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006696:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	f040 8177 	bne.w	8006998 <TF_AcceptChar+0x428>
                // Enter TYPE state
                tf->state = TFState_TYPE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            }
            break;
 80066bc:	e16c      	b.n	8006998 <TF_AcceptChar+0x428>

        case TFState_TYPE:
            CKSUM_ADD(tf->cksum, c);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80066c8:	78fa      	ldrb	r2, [r7, #3]
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fc81 	bl	8005fd4 <TF_CksumAdd>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066dc:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
            COLLECT_NUMBER(tf->type, TF_TYPE) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80066ea:	b21b      	sxth	r3, r3
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	b21a      	sxth	r2, r3
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	b21b      	sxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006700:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800670e:	3301      	adds	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006718:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006722:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006726:	2b02      	cmp	r3, #2
 8006728:	f040 8138 	bne.w	800699c <TF_AcceptChar+0x42c>
                #if TF_CKSUM_TYPE == TF_CKSUM_NONE
                    tf->state = TFState_DATA;
                    tf->rxi = 0;
                #else
                    // enter HEAD_CKSUM state
                    tf->state = TFState_HEAD_CKSUM;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006738:	2200      	movs	r2, #0
 800673a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006744:	2200      	movs	r2, #0
 8006746:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 800674a:	e127      	b.n	800699c <TF_AcceptChar+0x42c>

        case TFState_HEAD_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006752:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006756:	b21b      	sxth	r3, r3
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	b21a      	sxth	r2, r3
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	b21b      	sxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b21b      	sxth	r3, r3
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800676c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006776:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800677a:	3301      	adds	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006784:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006792:	2b02      	cmp	r3, #2
 8006794:	f040 8104 	bne.w	80069a0 <TF_AcceptChar+0x430>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fc32 	bl	800600c <TF_CksumEnd>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->cksum != tf->ref_cksum) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067bc:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d006      	beq.n	80067dc <TF_AcceptChar+0x26c>
                    TF_Error("Rx head cksum mismatch");
 80067ce:	4826      	ldr	r0, [pc, #152]	@ (8006868 <TF_AcceptChar+0x2f8>)
 80067d0:	f001 f8a2 	bl	8007918 <puts>
                    TF_ResetParser(tf);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff fe8e 	bl	80064f6 <TF_ResetParser>
                    break;
 80067da:	e0e6      	b.n	80069aa <TF_AcceptChar+0x43a>
                }

                if (tf->len == 0) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8b1b      	ldrh	r3, [r3, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <TF_AcceptChar+0x282>
                    // if the message has no body, we're done.
                    TF_HandleReceivedMessage(tf);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fd69 	bl	80062bc <TF_HandleReceivedMessage>
                    TF_ResetParser(tf);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fe83 	bl	80064f6 <TF_ResetParser>
                    break;
 80067f0:	e0db      	b.n	80069aa <TF_AcceptChar+0x43a>
                }

                // Enter DATA state
                tf->state = TFState_DATA;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2205      	movs	r2, #5
 80067f6:	741a      	strb	r2, [r3, #16]
                tf->rxi = 0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a

                CKSUM_RESET(tf->cksum); // Start collecting the payload
 8006804:	f7ff fbde 	bl	8005fc4 <TF_CksumStart>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006812:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

                if (tf->len > TF_MAX_PAYLOAD_RX) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8b1b      	ldrh	r3, [r3, #24]
 800681a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800681e:	f240 80bf 	bls.w	80069a0 <TF_AcceptChar+0x430>
                    TF_Error("Rx payload too long: %d", (int)tf->len);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8b1b      	ldrh	r3, [r3, #24]
 8006826:	4619      	mov	r1, r3
 8006828:	4810      	ldr	r0, [pc, #64]	@ (800686c <TF_AcceptChar+0x2fc>)
 800682a:	f001 f80d 	bl	8007848 <iprintf>
                    // ERROR - frame too long. Consume, but do not store.
                    tf->discard_data = true;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006834:	2201      	movs	r2, #1
 8006836:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                }
            }
            break;
 800683a:	e0b1      	b.n	80069a0 <TF_AcceptChar+0x430>

        case TFState_DATA:
            if (tf->discard_data) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006842:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d012      	beq.n	8006870 <TF_AcceptChar+0x300>
                tf->rxi++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006850:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006854:	3301      	adds	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800685e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006862:	e027      	b.n	80068b4 <TF_AcceptChar+0x344>
 8006864:	08008924 	.word	0x08008924
 8006868:	08008938 	.word	0x08008938
 800686c:	08008954 	.word	0x08008954
            } else {
                CKSUM_ADD(tf->cksum, c);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006876:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800687a:	78fa      	ldrb	r2, [r7, #3]
 800687c:	4611      	mov	r1, r2
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fba8 	bl	8005fd4 <TF_CksumAdd>
 8006884:	4603      	mov	r3, r0
 8006886:	461a      	mov	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                tf->data[tf->rxi++] = c;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006898:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	b291      	uxth	r1, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068a6:	f8a2 109a 	strh.w	r1, [r2, #154]	@ 0x9a
 80068aa:	461a      	mov	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4413      	add	r3, r2
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	769a      	strb	r2, [r3, #26]
            }

            if (tf->rxi == tf->len) {
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ba:	f8b3 209a 	ldrh.w	r2, [r3, #154]	@ 0x9a
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8b1b      	ldrh	r3, [r3, #24]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d16e      	bne.n	80069a4 <TF_AcceptChar+0x434>
                    // All done
                    TF_HandleReceivedMessage(tf);
                    TF_ResetParser(tf);
                #else
                    // Enter DATA_CKSUM state
                    tf->state = TFState_DATA_CKSUM;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2206      	movs	r2, #6
 80068ca:	741a      	strb	r2, [r3, #16]
                    tf->rxi = 0;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
                    tf->ref_cksum = 0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068de:	2200      	movs	r2, #0
 80068e0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
                #endif
            }
            break;
 80068e4:	e05e      	b.n	80069a4 <TF_AcceptChar+0x434>

        case TFState_DATA_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ec:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	b21a      	sxth	r2, r3
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b21b      	sxth	r3, r3
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006906:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006910:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8006914:	3301      	adds	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006928:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800692c:	2b02      	cmp	r3, #2
 800692e:	d13b      	bne.n	80069a8 <TF_AcceptChar+0x438>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006936:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fb66 	bl	800600c <TF_CksumEnd>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800694a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
                if (!tf->discard_data) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006954:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8006958:	f083 0301 	eor.w	r3, r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <TF_AcceptChar+0x418>
                    if (tf->cksum == tf->ref_cksum) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006968:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006972:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8006976:	429a      	cmp	r2, r3
 8006978:	d103      	bne.n	8006982 <TF_AcceptChar+0x412>
                        TF_HandleReceivedMessage(tf);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fc9e 	bl	80062bc <TF_HandleReceivedMessage>
 8006980:	e002      	b.n	8006988 <TF_AcceptChar+0x418>
                    } else {
                        TF_Error("Body cksum mismatch");
 8006982:	480c      	ldr	r0, [pc, #48]	@ (80069b4 <TF_AcceptChar+0x444>)
 8006984:	f000 ffc8 	bl	8007918 <puts>
                    }
                }

                TF_ResetParser(tf);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fdb4 	bl	80064f6 <TF_ResetParser>
            }
            break;
 800698e:	e00b      	b.n	80069a8 <TF_AcceptChar+0x438>
            break;
 8006990:	bf00      	nop
 8006992:	e00a      	b.n	80069aa <TF_AcceptChar+0x43a>
            break;
 8006994:	bf00      	nop
 8006996:	e008      	b.n	80069aa <TF_AcceptChar+0x43a>
            break;
 8006998:	bf00      	nop
 800699a:	e006      	b.n	80069aa <TF_AcceptChar+0x43a>
            break;
 800699c:	bf00      	nop
 800699e:	e004      	b.n	80069aa <TF_AcceptChar+0x43a>
            break;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <TF_AcceptChar+0x43a>
            break;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <TF_AcceptChar+0x43a>
            break;
 80069a8:	bf00      	nop
    }
    //@formatter:on
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08008974 	.word	0x08008974

080069b8 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	@ 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t b = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
    TF_CKSUM cksum = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	83fb      	strh	r3, [r7, #30]
    uint32_t pos = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 80069da:	f7ff faf3 	bl	8005fc4 <TF_CksumStart>
 80069de:	4603      	mov	r3, r0
 80069e0:	83fb      	strh	r3, [r7, #30]

    // Gen ID
    if (msg->is_response) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <TF_ComposeHead+0x3a>
        id = msg->frame_id;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	e00f      	b.n	8006a12 <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	60d1      	str	r1, [r2, #12]
 80069fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a00:	623b      	str	r3, [r7, #32]
        if (tf->peer_bit) {
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	7a1b      	ldrb	r3, [r3, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a10:	623b      	str	r3, [r7, #32]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a3a      	ldr	r2, [r7, #32]
 8006a16:	601a      	str	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 8006a18:	f7ff fad4 	bl	8005fc4 <TF_CksumStart>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	83fb      	strh	r3, [r7, #30]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	61ba      	str	r2, [r7, #24]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	22ab      	movs	r2, #171	@ 0xab
 8006a2c:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 8006a2e:	8bfb      	ldrh	r3, [r7, #30]
 8006a30:	21ab      	movs	r1, #171	@ 0xab
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff face 	bl	8005fd4 <TF_CksumAdd>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	83fb      	strh	r3, [r7, #30]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a42:	e01c      	b.n	8006a7e <TF_ComposeHead+0xc6>
 8006a44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a50:	75fb      	strb	r3, [r7, #23]
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	61ba      	str	r2, [r7, #24]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	7dfa      	ldrb	r2, [r7, #23]
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	7dfa      	ldrb	r2, [r7, #23]
 8006a62:	8bfb      	ldrh	r3, [r7, #30]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fab4 	bl	8005fd4 <TF_CksumAdd>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	83fb      	strh	r3, [r7, #30]
 8006a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	dade      	bge.n	8006a44 <TF_ComposeHead+0x8c>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a8c:	e01e      	b.n	8006acc <TF_ComposeHead+0x114>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	899b      	ldrh	r3, [r3, #12]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	fa42 f303 	asr.w	r3, r2, r3
 8006a9e:	75fb      	strb	r3, [r7, #23]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	61ba      	str	r2, [r7, #24]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	7dfa      	ldrb	r2, [r7, #23]
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	7dfa      	ldrb	r2, [r7, #23]
 8006ab0:	8bfb      	ldrh	r3, [r7, #30]
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fa8d 	bl	8005fd4 <TF_CksumAdd>
 8006aba:	4603      	mov	r3, r0
 8006abc:	83fb      	strh	r3, [r7, #30]
 8006abe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006acc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dadc      	bge.n	8006a8e <TF_ComposeHead+0xd6>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ada:	e01e      	b.n	8006b1a <TF_ComposeHead+0x162>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	fa42 f303 	asr.w	r3, r2, r3
 8006aec:	75fb      	strb	r3, [r7, #23]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	61ba      	str	r2, [r7, #24]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	4413      	add	r3, r2
 8006af8:	7dfa      	ldrb	r2, [r7, #23]
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	7dfa      	ldrb	r2, [r7, #23]
 8006afe:	8bfb      	ldrh	r3, [r7, #30]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fa66 	bl	8005fd4 <TF_CksumAdd>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	83fb      	strh	r3, [r7, #30]
 8006b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dadc      	bge.n	8006adc <TF_ComposeHead+0x124>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 8006b22:	8bfb      	ldrh	r3, [r7, #30]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fa71 	bl	800600c <TF_CksumEnd>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	83fb      	strh	r3, [r7, #30]
    WRITENUM(TF_CKSUM, cksum);
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b34:	e014      	b.n	8006b60 <TF_ComposeHead+0x1a8>
 8006b36:	8bfa      	ldrh	r2, [r7, #30]
 8006b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	fa42 f303 	asr.w	r3, r2, r3
 8006b42:	75fb      	strb	r3, [r7, #23]
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	61ba      	str	r2, [r7, #24]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	7dfa      	ldrb	r2, [r7, #23]
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dae6      	bge.n	8006b36 <TF_ComposeHead+0x17e>
#endif

    return pos;
 8006b68:	69bb      	ldr	r3, [r7, #24]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3728      	adds	r7, #40	@ 0x28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 8006b8e:	2300      	movs	r3, #0
 8006b90:	83fb      	strh	r3, [r7, #30]
 8006b92:	e019      	b.n	8006bc8 <TF_ComposeBody+0x56>
        b = data[i];
 8006b94:	8bfb      	ldrh	r3, [r7, #30]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	61ba      	str	r2, [r7, #24]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	7dfa      	ldrb	r2, [r7, #23]
 8006baa:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	7dfa      	ldrb	r2, [r7, #23]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fa0d 	bl	8005fd4 <TF_CksumAdd>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 8006bc2:	8bfb      	ldrh	r3, [r7, #30]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	83fb      	strh	r3, [r7, #30]
 8006bc8:	8bfa      	ldrh	r2, [r7, #30]
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d3e1      	bcc.n	8006b94 <TF_ComposeBody+0x22>
    }

    return pos;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 8006be4:	2300      	movs	r3, #0
 8006be6:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff fa09 	bl	800600c <TF_CksumEnd>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
 8006c06:	e015      	b.n	8006c34 <TF_ComposeTail+0x5a>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	fa42 f303 	asr.w	r3, r2, r3
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	613a      	str	r2, [r7, #16]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	7bfa      	ldrb	r2, [r7, #15]
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	75fb      	strb	r3, [r7, #23]
 8006c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dae5      	bge.n	8006c08 <TF_ComposeTail+0x2e>
#endif
    return pos;
 8006c3c:	693b      	ldr	r3, [r7, #16]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <TF_SendFrame_Begin>:
 * @param listener - response listener or NULL
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_ClaimTx(tf));
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff f987 	bl	8005f68 <TF_ClaimTx>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f083 0301 	eor.w	r3, r3, #1
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <TF_SendFrame_Begin+0x24>
 8006c66:	2300      	movs	r3, #0
 8006c68:	e031      	b.n	8006cce <TF_SendFrame_Begin+0x88>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006c70:	3303      	adds	r3, #3
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7ff fe9e 	bl	80069b8 <TF_ComposeHead>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006c84:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    tf->tx_len = msg->len;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	899b      	ldrh	r3, [r3, #12]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006c94:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    if (listener) {
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00d      	beq.n	8006cba <TF_SendFrame_Begin+0x74>
        TF_TRY(TF_AddIdListener(tf, msg, listener, timeout));
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fa7f 	bl	80061a8 <TF_AddIdListener>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f083 0301 	eor.w	r3, r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <TF_SendFrame_Begin+0x74>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e009      	b.n	8006cce <TF_SendFrame_Begin+0x88>
    }

    CKSUM_RESET(tf->tx_cksum);
 8006cba:	f7ff f983 	bl	8005fc4 <TF_CksumStart>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cc8:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    return true;
 8006ccc:	2301      	movs	r3, #1
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61bb      	str	r3, [r7, #24]

    remain = length;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 8006cea:	e050      	b.n	8006d8e <TF_SendFrame_Chunk+0xb8>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cf2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006cf6:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	bf28      	it	cs
 8006d00:	4613      	movcs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006d0a:	3303      	adds	r3, #3
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006d12:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006d16:	1898      	adds	r0, r3, r2
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	18d1      	adds	r1, r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006d28:	332c      	adds	r3, #44	@ 0x2c
 8006d2a:	f7ff ff22 	bl	8006b72 <TF_ComposeBody>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006d36:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006d3a:	4413      	add	r3, r2
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006d42:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        remain -= chunk;
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006d5c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006d60:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8006d64:	d113      	bne.n	8006d8e <TF_SendFrame_Chunk+0xb8>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006d6c:	3303      	adds	r3, #3
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006d74:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006d78:	4619      	mov	r1, r3
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7fb ff9d 	bl	8002cba <TF_WriteImpl>
            tf->tx_pos = 0;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    while (remain > 0) {
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ab      	bne.n	8006cec <TF_SendFrame_Chunk+0x16>
        }
    }
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006dac:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d03a      	beq.n	8006e2a <TF_SendFrame_End+0x8c>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006dba:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006dbe:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d813      	bhi.n	8006dee <TF_SendFrame_End+0x50>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006dcc:	3303      	adds	r3, #3
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006dd4:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fb ff6d 	bl	8002cba <TF_WriteImpl>
            tf->tx_pos = 0;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006df4:	3303      	adds	r3, #3
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006dfc:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006e00:	441a      	add	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006e08:	332c      	adds	r3, #44	@ 0x2c
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7ff fee4 	bl	8006bda <TF_ComposeTail>
 8006e12:	4602      	mov	r2, r0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006e1a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006e1e:	4413      	add	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e26:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 5385 	add.w	r3, r3, #4256	@ 0x10a0
 8006e30:	3303      	adds	r3, #3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8006e38:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fb ff3b 	bl	8002cba <TF_WriteImpl>
    TF_ReleaseTx(tf);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff f8ad 	bl	8005fa4 <TF_ReleaseTx>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <TF_SendFrame>:
 * @param listener - ID listener, or NULL
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_TICKS timeout)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	807b      	strh	r3, [r7, #2]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, timeout));
 8006e60:	887b      	ldrh	r3, [r7, #2]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff feed 	bl	8006c46 <TF_SendFrame_Begin>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f083 0301 	eor.w	r3, r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <TF_SendFrame+0x2a>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e013      	b.n	8006ea4 <TF_SendFrame+0x52>
    if (msg->len == 0 || msg->data != NULL) {
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	899b      	ldrh	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <TF_SendFrame+0x3a>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <TF_SendFrame+0x50>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6899      	ldr	r1, [r3, #8]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	899b      	ldrh	r3, [r3, #12]
 8006e94:	461a      	mov	r2, r3
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff ff1d 	bl	8006cd6 <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff ff7e 	bl	8006d9e <TF_SendFrame_End>
    }
    return true;
 8006ea2:	2301      	movs	r3, #1
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, 0);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ffc8 	bl	8006e52 <TF_SendFrame>
 8006ec2:	4603      	mov	r3, r0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <TF_Respond>:
    return TF_SendFrame(tf, msg, listener, timeout);
}

/** Like TF_Send, but with explicit frame ID (set inside the msg object), use for responses */
bool _TF_FN TF_Respond(TinyFrame *tf, TF_Msg *msg)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
    msg->is_response = true;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	711a      	strb	r2, [r3, #4]
    return TF_Send(tf, msg);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ffe4 	bl	8006eac <TF_Send>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b08f      	sub	sp, #60	@ 0x3c
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	891a      	ldrh	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	8a1b      	ldrh	r3, [r3, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d301      	bcc.n	8006f08 <load_descriptor_values+0x1a>
        return false;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e156      	b.n	80071b6 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	895b      	ldrh	r3, [r3, #10]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8006f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8006f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d05a      	beq.n	8006fe4 <load_descriptor_values+0xf6>
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	f200 8094 	bhi.w	800705c <load_descriptor_values+0x16e>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <load_descriptor_values+0x50>
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d01f      	beq.n	8006f7c <load_descriptor_values+0x8e>
 8006f3c:	e08e      	b.n	800705c <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8006f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f56:	0e1b      	lsrs	r3, r3, #24
 8006f58:	b25b      	sxtb	r3, r3
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8006f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6c:	0f1b      	lsrs	r3, r3, #28
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	825a      	strh	r2, [r3, #18]
            break;
 8006f7a:	e0b4      	b.n	80070e6 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	895b      	ldrh	r3, [r3, #10]
 8006f86:	3301      	adds	r3, #1
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	0c1b      	lsrs	r3, r3, #16
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8006fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa2:	089b      	lsrs	r3, r3, #2
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	0f1b      	lsrs	r3, r3, #28
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	019b      	lsls	r3, r3, #6
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	0f1b      	lsrs	r3, r3, #28
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	825a      	strh	r2, [r3, #18]
            break;
 8006fe2:	e080      	b.n	80070e6 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	895b      	ldrh	r3, [r3, #10]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	3302      	adds	r3, #2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	895b      	ldrh	r3, [r3, #10]
 8007016:	3303      	adds	r3, #3
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	089b      	lsrs	r3, r3, #2
 800702e:	b29b      	uxth	r3, r3
 8007030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007034:	b29a      	uxth	r2, r3
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	b29b      	uxth	r3, r3
 800703c:	019b      	lsls	r3, r3, #6
 800703e:	b29b      	uxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	825a      	strh	r2, [r3, #18]
            break;
 800705a:	e044      	b.n	80070e6 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	895b      	ldrh	r3, [r3, #10]
 8007066:	3301      	adds	r3, #1
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	895b      	ldrh	r3, [r3, #10]
 800707a:	3302      	adds	r3, #2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	895b      	ldrh	r3, [r3, #10]
 800708e:	3303      	adds	r3, #3
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	895b      	ldrh	r3, [r3, #10]
 80070a2:	3304      	adds	r3, #4
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070be:	b29a      	uxth	r2, r3
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	019b      	lsls	r3, r3, #6
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	825a      	strh	r2, [r3, #18]
            break;
 80070e4:	bf00      	nop
        }
    }

    if (!iter->message)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	621a      	str	r2, [r3, #32]
 80070fa:	e041      	b.n	8007180 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007102:	441a      	add	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8007108:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007118:	425b      	negs	r3, r3
 800711a:	441a      	add	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	621a      	str	r2, [r3, #32]
 8007120:	e01a      	b.n	8007158 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7d9b      	ldrb	r3, [r3, #22]
 8007126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800712a:	2b20      	cmp	r3, #32
 800712c:	d111      	bne.n	8007152 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7d9b      	ldrb	r3, [r3, #22]
 8007132:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7d9b      	ldrb	r3, [r3, #22]
 800713e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8007142:	2b80      	cmp	r3, #128	@ 0x80
 8007144:	d105      	bne.n	8007152 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f103 0214 	add.w	r2, r3, #20
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	621a      	str	r2, [r3, #32]
 8007150:	e002      	b.n	8007158 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7d9b      	ldrb	r3, [r3, #22]
 800715c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007160:	2b80      	cmp	r3, #128	@ 0x80
 8007162:	d109      	bne.n	8007178 <load_descriptor_values+0x28a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	61da      	str	r2, [r3, #28]
 8007176:	e003      	b.n	8007180 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7d9b      	ldrb	r3, [r3, #22]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	2b08      	cmp	r3, #8
 800718a:	d005      	beq.n	8007198 <load_descriptor_values+0x2aa>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7d9b      	ldrb	r3, [r3, #22]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	2b09      	cmp	r3, #9
 8007196:	d10a      	bne.n	80071ae <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	89db      	ldrh	r3, [r3, #14]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80071ac:	e002      	b.n	80071b4 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 80071b4:	2301      	movs	r3, #1
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	373c      	adds	r7, #60	@ 0x3c
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
    iter->index++;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	891b      	ldrh	r3, [r3, #8]
 80071ce:	3301      	adds	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	891a      	ldrh	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	8a1b      	ldrh	r3, [r3, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d30c      	bcc.n	80071fe <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 80071fc:	e03b      	b.n	8007276 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	895b      	ldrh	r3, [r3, #10]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	2201      	movs	r2, #1
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	895a      	ldrh	r2, [r3, #10]
 8007228:	893b      	ldrh	r3, [r7, #8]
 800722a:	4413      	add	r3, r2
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	899b      	ldrh	r3, [r3, #12]
 8007236:	7afa      	ldrb	r2, [r7, #11]
 8007238:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800723c:	2a00      	cmp	r2, #0
 800723e:	bf0c      	ite	eq
 8007240:	2201      	moveq	r2, #1
 8007242:	2200      	movne	r2, #0
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	4413      	add	r3, r2
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	89da      	ldrh	r2, [r3, #14]
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	2b08      	cmp	r3, #8
 800725a:	d004      	beq.n	8007266 <advance_iterator+0xa4>
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	f003 030f 	and.w	r3, r3, #15
 8007262:	2b09      	cmp	r3, #9
 8007264:	d101      	bne.n	800726a <advance_iterator+0xa8>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <advance_iterator+0xaa>
 800726a:	2300      	movs	r3, #0
 800726c:	b29b      	uxth	r3, r3
 800726e:	4413      	add	r3, r2
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	81da      	strh	r2, [r3, #14]
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800728e:	2228      	movs	r2, #40	@ 0x28
 8007290:	2100      	movs	r1, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fc20 	bl	8007ad8 <memset>

    iter->descriptor = desc;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fe22 	bl	8006eee <load_descriptor_values>
 80072aa:	4603      	mov	r3, r0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	0a1b      	lsrs	r3, r3, #8
 80072d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072d6:	2b80      	cmp	r3, #128	@ 0x80
 80072d8:	d109      	bne.n	80072ee <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	3304      	adds	r3, #4
 80072de:	461a      	mov	r2, r3
 80072e0:	6939      	ldr	r1, [r7, #16]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff ffcd 	bl	8007282 <pb_field_iter_begin>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]
 80072ec:	e008      	b.n	8007300 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	461a      	mov	r2, r3
 80072f4:	6939      	ldr	r1, [r7, #16]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff ffc3 	bl	8007282 <pb_field_iter_begin>
 80072fc:	4603      	mov	r3, r0
 80072fe:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f103 020c 	add.w	r2, r3, #12
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]
    return status;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff ff50 	bl	80071c2 <advance_iterator>
    (void)load_descriptor_values(iter);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fde3 	bl	8006eee <load_descriptor_values>
    return iter->index != 0;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	891b      	ldrh	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8a1b      	ldrh	r3, [r3, #16]
 800734c:	461a      	mov	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	4293      	cmp	r3, r2
 8007352:	d101      	bne.n	8007358 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8007354:	2301      	movs	r3, #1
 8007356:	e044      	b.n	80073e2 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	8a9b      	ldrh	r3, [r3, #20]
 800735e:	461a      	mov	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <pb_field_iter_find+0x2c>
    {
        return false;
 8007366:	2300      	movs	r3, #0
 8007368:	e03b      	b.n	80073e2 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	891b      	ldrh	r3, [r3, #8]
 800736e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8a1b      	ldrh	r3, [r3, #16]
 8007374:	461a      	mov	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	4293      	cmp	r3, r2
 800737a:	d204      	bcs.n	8007386 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	8a1a      	ldrh	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff ff1b 	bl	80071c2 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	895b      	ldrh	r3, [r3, #10]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	089a      	lsrs	r2, r3, #2
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	4053      	eors	r3, r2
 80073a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d110      	bne.n	80073d0 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff fd9d 	bl	8006eee <load_descriptor_values>

                if (iter->tag == tag &&
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8a1b      	ldrh	r3, [r3, #16]
 80073b8:	461a      	mov	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	4293      	cmp	r3, r2
 80073be:	d107      	bne.n	80073d0 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	7d9b      	ldrb	r3, [r3, #22]
 80073c4:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80073c8:	2b0a      	cmp	r3, #10
 80073ca:	d001      	beq.n	80073d0 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e008      	b.n	80073e2 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	891b      	ldrh	r3, [r3, #8]
 80073d4:	89fa      	ldrh	r2, [r7, #14]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d1d5      	bne.n	8007386 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fd87 	bl	8006eee <load_descriptor_values>
        return false;
 80073e0:	2300      	movs	r3, #0
    }
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	7d9b      	ldrb	r3, [r3, #22]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	2b0a      	cmp	r3, #10
 80073fc:	d101      	bne.n	8007402 <pb_field_iter_find_extension+0x18>
    {
        return true;
 80073fe:	2301      	movs	r3, #1
 8007400:	e022      	b.n	8007448 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	891b      	ldrh	r3, [r3, #8]
 8007406:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff feda 	bl	80071c2 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	895b      	ldrh	r3, [r3, #10]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	2b0a      	cmp	r3, #10
 800742a:	d104      	bne.n	8007436 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fd5e 	bl	8006eee <load_descriptor_values>
 8007432:	4603      	mov	r3, r0
 8007434:	e008      	b.n	8007448 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	891b      	ldrh	r3, [r3, #8]
 800743a:	89fa      	ldrh	r2, [r7, #14]
 800743c:	429a      	cmp	r2, r3
 800743e:	d1e3      	bne.n	8007408 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fd54 	bl	8006eee <load_descriptor_values>
        return false;
 8007446:	2300      	movs	r3, #0
    }
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800745c:	68fb      	ldr	r3, [r7, #12]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff ffea 	bl	8007450 <pb_const_cast>
 800747c:	4603      	mov	r3, r0
 800747e:	461a      	mov	r2, r3
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff fefd 	bl	8007282 <pb_field_iter_begin>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800749c:	6838      	ldr	r0, [r7, #0]
 800749e:	f7ff ffd7 	bl	8007450 <pb_const_cast>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff ff04 	bl	80072b4 <pb_field_iter_begin_extension>
 80074ac:	4603      	mov	r3, r0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b086      	sub	sp, #24
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8a5b      	ldrh	r3, [r3, #18]
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d125      	bne.n	8007516 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01f      	beq.n	8007516 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <pb_default_field_callback+0x40>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	3204      	adds	r2, #4
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	4798      	blx	r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	e010      	b.n	8007518 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00c      	beq.n	8007516 <pb_default_field_callback+0x60>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d008      	beq.n	8007516 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	3204      	adds	r2, #4
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	68b8      	ldr	r0, [r7, #8]
 8007510:	4798      	blx	r3
 8007512:	4603      	mov	r3, r0
 8007514:	e000      	b.n	8007518 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8007516:	2301      	movs	r3, #1

}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <calloc>:
 8007520:	4b02      	ldr	r3, [pc, #8]	@ (800752c <calloc+0xc>)
 8007522:	460a      	mov	r2, r1
 8007524:	4601      	mov	r1, r0
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	f000 b802 	b.w	8007530 <_calloc_r>
 800752c:	20000024 	.word	0x20000024

08007530 <_calloc_r>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	fba1 5402 	umull	r5, r4, r1, r2
 8007536:	b934      	cbnz	r4, 8007546 <_calloc_r+0x16>
 8007538:	4629      	mov	r1, r5
 800753a:	f000 f837 	bl	80075ac <_malloc_r>
 800753e:	4606      	mov	r6, r0
 8007540:	b928      	cbnz	r0, 800754e <_calloc_r+0x1e>
 8007542:	4630      	mov	r0, r6
 8007544:	bd70      	pop	{r4, r5, r6, pc}
 8007546:	220c      	movs	r2, #12
 8007548:	6002      	str	r2, [r0, #0]
 800754a:	2600      	movs	r6, #0
 800754c:	e7f9      	b.n	8007542 <_calloc_r+0x12>
 800754e:	462a      	mov	r2, r5
 8007550:	4621      	mov	r1, r4
 8007552:	f000 fac1 	bl	8007ad8 <memset>
 8007556:	e7f4      	b.n	8007542 <_calloc_r+0x12>

08007558 <free>:
 8007558:	4b02      	ldr	r3, [pc, #8]	@ (8007564 <free+0xc>)
 800755a:	4601      	mov	r1, r0
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f000 bb55 	b.w	8007c0c <_free_r>
 8007562:	bf00      	nop
 8007564:	20000024 	.word	0x20000024

08007568 <sbrk_aligned>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4e0f      	ldr	r6, [pc, #60]	@ (80075a8 <sbrk_aligned+0x40>)
 800756c:	460c      	mov	r4, r1
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	4605      	mov	r5, r0
 8007572:	b911      	cbnz	r1, 800757a <sbrk_aligned+0x12>
 8007574:	f000 faec 	bl	8007b50 <_sbrk_r>
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fae7 	bl	8007b50 <_sbrk_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d103      	bne.n	800758e <sbrk_aligned+0x26>
 8007586:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800758a:	4620      	mov	r0, r4
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d0f8      	beq.n	800758a <sbrk_aligned+0x22>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fad8 	bl	8007b50 <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d1f2      	bne.n	800758a <sbrk_aligned+0x22>
 80075a4:	e7ef      	b.n	8007586 <sbrk_aligned+0x1e>
 80075a6:	bf00      	nop
 80075a8:	20000530 	.word	0x20000530

080075ac <_malloc_r>:
 80075ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b0:	1ccd      	adds	r5, r1, #3
 80075b2:	f025 0503 	bic.w	r5, r5, #3
 80075b6:	3508      	adds	r5, #8
 80075b8:	2d0c      	cmp	r5, #12
 80075ba:	bf38      	it	cc
 80075bc:	250c      	movcc	r5, #12
 80075be:	2d00      	cmp	r5, #0
 80075c0:	4606      	mov	r6, r0
 80075c2:	db01      	blt.n	80075c8 <_malloc_r+0x1c>
 80075c4:	42a9      	cmp	r1, r5
 80075c6:	d904      	bls.n	80075d2 <_malloc_r+0x26>
 80075c8:	230c      	movs	r3, #12
 80075ca:	6033      	str	r3, [r6, #0]
 80075cc:	2000      	movs	r0, #0
 80075ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076a8 <_malloc_r+0xfc>
 80075d6:	f000 f869 	bl	80076ac <__malloc_lock>
 80075da:	f8d8 3000 	ldr.w	r3, [r8]
 80075de:	461c      	mov	r4, r3
 80075e0:	bb44      	cbnz	r4, 8007634 <_malloc_r+0x88>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff ffbf 	bl	8007568 <sbrk_aligned>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	4604      	mov	r4, r0
 80075ee:	d158      	bne.n	80076a2 <_malloc_r+0xf6>
 80075f0:	f8d8 4000 	ldr.w	r4, [r8]
 80075f4:	4627      	mov	r7, r4
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	d143      	bne.n	8007682 <_malloc_r+0xd6>
 80075fa:	2c00      	cmp	r4, #0
 80075fc:	d04b      	beq.n	8007696 <_malloc_r+0xea>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	4639      	mov	r1, r7
 8007602:	4630      	mov	r0, r6
 8007604:	eb04 0903 	add.w	r9, r4, r3
 8007608:	f000 faa2 	bl	8007b50 <_sbrk_r>
 800760c:	4581      	cmp	r9, r0
 800760e:	d142      	bne.n	8007696 <_malloc_r+0xea>
 8007610:	6821      	ldr	r1, [r4, #0]
 8007612:	1a6d      	subs	r5, r5, r1
 8007614:	4629      	mov	r1, r5
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ffa6 	bl	8007568 <sbrk_aligned>
 800761c:	3001      	adds	r0, #1
 800761e:	d03a      	beq.n	8007696 <_malloc_r+0xea>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	442b      	add	r3, r5
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	f8d8 3000 	ldr.w	r3, [r8]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	bb62      	cbnz	r2, 8007688 <_malloc_r+0xdc>
 800762e:	f8c8 7000 	str.w	r7, [r8]
 8007632:	e00f      	b.n	8007654 <_malloc_r+0xa8>
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	1b52      	subs	r2, r2, r5
 8007638:	d420      	bmi.n	800767c <_malloc_r+0xd0>
 800763a:	2a0b      	cmp	r2, #11
 800763c:	d917      	bls.n	800766e <_malloc_r+0xc2>
 800763e:	1961      	adds	r1, r4, r5
 8007640:	42a3      	cmp	r3, r4
 8007642:	6025      	str	r5, [r4, #0]
 8007644:	bf18      	it	ne
 8007646:	6059      	strne	r1, [r3, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	bf08      	it	eq
 800764c:	f8c8 1000 	streq.w	r1, [r8]
 8007650:	5162      	str	r2, [r4, r5]
 8007652:	604b      	str	r3, [r1, #4]
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f82f 	bl	80076b8 <__malloc_unlock>
 800765a:	f104 000b 	add.w	r0, r4, #11
 800765e:	1d23      	adds	r3, r4, #4
 8007660:	f020 0007 	bic.w	r0, r0, #7
 8007664:	1ac2      	subs	r2, r0, r3
 8007666:	bf1c      	itt	ne
 8007668:	1a1b      	subne	r3, r3, r0
 800766a:	50a3      	strne	r3, [r4, r2]
 800766c:	e7af      	b.n	80075ce <_malloc_r+0x22>
 800766e:	6862      	ldr	r2, [r4, #4]
 8007670:	42a3      	cmp	r3, r4
 8007672:	bf0c      	ite	eq
 8007674:	f8c8 2000 	streq.w	r2, [r8]
 8007678:	605a      	strne	r2, [r3, #4]
 800767a:	e7eb      	b.n	8007654 <_malloc_r+0xa8>
 800767c:	4623      	mov	r3, r4
 800767e:	6864      	ldr	r4, [r4, #4]
 8007680:	e7ae      	b.n	80075e0 <_malloc_r+0x34>
 8007682:	463c      	mov	r4, r7
 8007684:	687f      	ldr	r7, [r7, #4]
 8007686:	e7b6      	b.n	80075f6 <_malloc_r+0x4a>
 8007688:	461a      	mov	r2, r3
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	42a3      	cmp	r3, r4
 800768e:	d1fb      	bne.n	8007688 <_malloc_r+0xdc>
 8007690:	2300      	movs	r3, #0
 8007692:	6053      	str	r3, [r2, #4]
 8007694:	e7de      	b.n	8007654 <_malloc_r+0xa8>
 8007696:	230c      	movs	r3, #12
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f80c 	bl	80076b8 <__malloc_unlock>
 80076a0:	e794      	b.n	80075cc <_malloc_r+0x20>
 80076a2:	6005      	str	r5, [r0, #0]
 80076a4:	e7d6      	b.n	8007654 <_malloc_r+0xa8>
 80076a6:	bf00      	nop
 80076a8:	20000534 	.word	0x20000534

080076ac <__malloc_lock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	@ (80076b4 <__malloc_lock+0x8>)
 80076ae:	f000 ba9c 	b.w	8007bea <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	20000678 	.word	0x20000678

080076b8 <__malloc_unlock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	@ (80076c0 <__malloc_unlock+0x8>)
 80076ba:	f000 ba97 	b.w	8007bec <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	20000678 	.word	0x20000678

080076c4 <std>:
 80076c4:	2300      	movs	r3, #0
 80076c6:	b510      	push	{r4, lr}
 80076c8:	4604      	mov	r4, r0
 80076ca:	e9c0 3300 	strd	r3, r3, [r0]
 80076ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076d2:	6083      	str	r3, [r0, #8]
 80076d4:	8181      	strh	r1, [r0, #12]
 80076d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076d8:	81c2      	strh	r2, [r0, #14]
 80076da:	6183      	str	r3, [r0, #24]
 80076dc:	4619      	mov	r1, r3
 80076de:	2208      	movs	r2, #8
 80076e0:	305c      	adds	r0, #92	@ 0x5c
 80076e2:	f000 f9f9 	bl	8007ad8 <memset>
 80076e6:	4b0d      	ldr	r3, [pc, #52]	@ (800771c <std+0x58>)
 80076e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <std+0x5c>)
 80076ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007724 <std+0x60>)
 80076f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <std+0x64>)
 80076f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80076f6:	4b0d      	ldr	r3, [pc, #52]	@ (800772c <std+0x68>)
 80076f8:	6224      	str	r4, [r4, #32]
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d006      	beq.n	800770c <std+0x48>
 80076fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007702:	4294      	cmp	r4, r2
 8007704:	d002      	beq.n	800770c <std+0x48>
 8007706:	33d0      	adds	r3, #208	@ 0xd0
 8007708:	429c      	cmp	r4, r3
 800770a:	d105      	bne.n	8007718 <std+0x54>
 800770c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007714:	f000 ba68 	b.w	8007be8 <__retarget_lock_init_recursive>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	bf00      	nop
 800771c:	08007929 	.word	0x08007929
 8007720:	0800794b 	.word	0x0800794b
 8007724:	08007983 	.word	0x08007983
 8007728:	080079a7 	.word	0x080079a7
 800772c:	20000538 	.word	0x20000538

08007730 <stdio_exit_handler>:
 8007730:	4a02      	ldr	r2, [pc, #8]	@ (800773c <stdio_exit_handler+0xc>)
 8007732:	4903      	ldr	r1, [pc, #12]	@ (8007740 <stdio_exit_handler+0x10>)
 8007734:	4803      	ldr	r0, [pc, #12]	@ (8007744 <stdio_exit_handler+0x14>)
 8007736:	f000 b869 	b.w	800780c <_fwalk_sglue>
 800773a:	bf00      	nop
 800773c:	20000018 	.word	0x20000018
 8007740:	08008345 	.word	0x08008345
 8007744:	20000028 	.word	0x20000028

08007748 <cleanup_stdio>:
 8007748:	6841      	ldr	r1, [r0, #4]
 800774a:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <cleanup_stdio+0x34>)
 800774c:	4299      	cmp	r1, r3
 800774e:	b510      	push	{r4, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	d001      	beq.n	8007758 <cleanup_stdio+0x10>
 8007754:	f000 fdf6 	bl	8008344 <_fflush_r>
 8007758:	68a1      	ldr	r1, [r4, #8]
 800775a:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <cleanup_stdio+0x38>)
 800775c:	4299      	cmp	r1, r3
 800775e:	d002      	beq.n	8007766 <cleanup_stdio+0x1e>
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fdef 	bl	8008344 <_fflush_r>
 8007766:	68e1      	ldr	r1, [r4, #12]
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <cleanup_stdio+0x3c>)
 800776a:	4299      	cmp	r1, r3
 800776c:	d004      	beq.n	8007778 <cleanup_stdio+0x30>
 800776e:	4620      	mov	r0, r4
 8007770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007774:	f000 bde6 	b.w	8008344 <_fflush_r>
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	20000538 	.word	0x20000538
 8007780:	200005a0 	.word	0x200005a0
 8007784:	20000608 	.word	0x20000608

08007788 <global_stdio_init.part.0>:
 8007788:	b510      	push	{r4, lr}
 800778a:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <global_stdio_init.part.0+0x30>)
 800778c:	4c0b      	ldr	r4, [pc, #44]	@ (80077bc <global_stdio_init.part.0+0x34>)
 800778e:	4a0c      	ldr	r2, [pc, #48]	@ (80077c0 <global_stdio_init.part.0+0x38>)
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	4620      	mov	r0, r4
 8007794:	2200      	movs	r2, #0
 8007796:	2104      	movs	r1, #4
 8007798:	f7ff ff94 	bl	80076c4 <std>
 800779c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077a0:	2201      	movs	r2, #1
 80077a2:	2109      	movs	r1, #9
 80077a4:	f7ff ff8e 	bl	80076c4 <std>
 80077a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077ac:	2202      	movs	r2, #2
 80077ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b2:	2112      	movs	r1, #18
 80077b4:	f7ff bf86 	b.w	80076c4 <std>
 80077b8:	20000670 	.word	0x20000670
 80077bc:	20000538 	.word	0x20000538
 80077c0:	08007731 	.word	0x08007731

080077c4 <__sfp_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <__sfp_lock_acquire+0x8>)
 80077c6:	f000 ba10 	b.w	8007bea <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	20000679 	.word	0x20000679

080077d0 <__sfp_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	@ (80077d8 <__sfp_lock_release+0x8>)
 80077d2:	f000 ba0b 	b.w	8007bec <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000679 	.word	0x20000679

080077dc <__sinit>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	f7ff fff0 	bl	80077c4 <__sfp_lock_acquire>
 80077e4:	6a23      	ldr	r3, [r4, #32]
 80077e6:	b11b      	cbz	r3, 80077f0 <__sinit+0x14>
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f7ff bff0 	b.w	80077d0 <__sfp_lock_release>
 80077f0:	4b04      	ldr	r3, [pc, #16]	@ (8007804 <__sinit+0x28>)
 80077f2:	6223      	str	r3, [r4, #32]
 80077f4:	4b04      	ldr	r3, [pc, #16]	@ (8007808 <__sinit+0x2c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f5      	bne.n	80077e8 <__sinit+0xc>
 80077fc:	f7ff ffc4 	bl	8007788 <global_stdio_init.part.0>
 8007800:	e7f2      	b.n	80077e8 <__sinit+0xc>
 8007802:	bf00      	nop
 8007804:	08007749 	.word	0x08007749
 8007808:	20000670 	.word	0x20000670

0800780c <_fwalk_sglue>:
 800780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007810:	4607      	mov	r7, r0
 8007812:	4688      	mov	r8, r1
 8007814:	4614      	mov	r4, r2
 8007816:	2600      	movs	r6, #0
 8007818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800781c:	f1b9 0901 	subs.w	r9, r9, #1
 8007820:	d505      	bpl.n	800782e <_fwalk_sglue+0x22>
 8007822:	6824      	ldr	r4, [r4, #0]
 8007824:	2c00      	cmp	r4, #0
 8007826:	d1f7      	bne.n	8007818 <_fwalk_sglue+0xc>
 8007828:	4630      	mov	r0, r6
 800782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d907      	bls.n	8007844 <_fwalk_sglue+0x38>
 8007834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007838:	3301      	adds	r3, #1
 800783a:	d003      	beq.n	8007844 <_fwalk_sglue+0x38>
 800783c:	4629      	mov	r1, r5
 800783e:	4638      	mov	r0, r7
 8007840:	47c0      	blx	r8
 8007842:	4306      	orrs	r6, r0
 8007844:	3568      	adds	r5, #104	@ 0x68
 8007846:	e7e9      	b.n	800781c <_fwalk_sglue+0x10>

08007848 <iprintf>:
 8007848:	b40f      	push	{r0, r1, r2, r3}
 800784a:	b507      	push	{r0, r1, r2, lr}
 800784c:	4906      	ldr	r1, [pc, #24]	@ (8007868 <iprintf+0x20>)
 800784e:	ab04      	add	r3, sp, #16
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	f853 2b04 	ldr.w	r2, [r3], #4
 8007856:	6881      	ldr	r1, [r0, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	f000 fa4b 	bl	8007cf4 <_vfiprintf_r>
 800785e:	b003      	add	sp, #12
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b004      	add	sp, #16
 8007866:	4770      	bx	lr
 8007868:	20000024 	.word	0x20000024

0800786c <_puts_r>:
 800786c:	6a03      	ldr	r3, [r0, #32]
 800786e:	b570      	push	{r4, r5, r6, lr}
 8007870:	6884      	ldr	r4, [r0, #8]
 8007872:	4605      	mov	r5, r0
 8007874:	460e      	mov	r6, r1
 8007876:	b90b      	cbnz	r3, 800787c <_puts_r+0x10>
 8007878:	f7ff ffb0 	bl	80077dc <__sinit>
 800787c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800787e:	07db      	lsls	r3, r3, #31
 8007880:	d405      	bmi.n	800788e <_puts_r+0x22>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	0598      	lsls	r0, r3, #22
 8007886:	d402      	bmi.n	800788e <_puts_r+0x22>
 8007888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788a:	f000 f9ae 	bl	8007bea <__retarget_lock_acquire_recursive>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	0719      	lsls	r1, r3, #28
 8007892:	d502      	bpl.n	800789a <_puts_r+0x2e>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d135      	bne.n	8007906 <_puts_r+0x9a>
 800789a:	4621      	mov	r1, r4
 800789c:	4628      	mov	r0, r5
 800789e:	f000 f8c5 	bl	8007a2c <__swsetup_r>
 80078a2:	b380      	cbz	r0, 8007906 <_puts_r+0x9a>
 80078a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80078a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078aa:	07da      	lsls	r2, r3, #31
 80078ac:	d405      	bmi.n	80078ba <_puts_r+0x4e>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	059b      	lsls	r3, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_puts_r+0x4e>
 80078b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078b6:	f000 f999 	bl	8007bec <__retarget_lock_release_recursive>
 80078ba:	4628      	mov	r0, r5
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	2b00      	cmp	r3, #0
 80078c0:	da04      	bge.n	80078cc <_puts_r+0x60>
 80078c2:	69a2      	ldr	r2, [r4, #24]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	dc17      	bgt.n	80078f8 <_puts_r+0x8c>
 80078c8:	290a      	cmp	r1, #10
 80078ca:	d015      	beq.n	80078f8 <_puts_r+0x8c>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	7019      	strb	r1, [r3, #0]
 80078d4:	68a3      	ldr	r3, [r4, #8]
 80078d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078da:	3b01      	subs	r3, #1
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	2900      	cmp	r1, #0
 80078e0:	d1ed      	bne.n	80078be <_puts_r+0x52>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da11      	bge.n	800790a <_puts_r+0x9e>
 80078e6:	4622      	mov	r2, r4
 80078e8:	210a      	movs	r1, #10
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f85f 	bl	80079ae <__swbuf_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0d7      	beq.n	80078a4 <_puts_r+0x38>
 80078f4:	250a      	movs	r5, #10
 80078f6:	e7d7      	b.n	80078a8 <_puts_r+0x3c>
 80078f8:	4622      	mov	r2, r4
 80078fa:	4628      	mov	r0, r5
 80078fc:	f000 f857 	bl	80079ae <__swbuf_r>
 8007900:	3001      	adds	r0, #1
 8007902:	d1e7      	bne.n	80078d4 <_puts_r+0x68>
 8007904:	e7ce      	b.n	80078a4 <_puts_r+0x38>
 8007906:	3e01      	subs	r6, #1
 8007908:	e7e4      	b.n	80078d4 <_puts_r+0x68>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	6022      	str	r2, [r4, #0]
 8007910:	220a      	movs	r2, #10
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e7ee      	b.n	80078f4 <_puts_r+0x88>
	...

08007918 <puts>:
 8007918:	4b02      	ldr	r3, [pc, #8]	@ (8007924 <puts+0xc>)
 800791a:	4601      	mov	r1, r0
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f7ff bfa5 	b.w	800786c <_puts_r>
 8007922:	bf00      	nop
 8007924:	20000024 	.word	0x20000024

08007928 <__sread>:
 8007928:	b510      	push	{r4, lr}
 800792a:	460c      	mov	r4, r1
 800792c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007930:	f000 f8fc 	bl	8007b2c <_read_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	bfab      	itete	ge
 8007938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800793a:	89a3      	ldrhlt	r3, [r4, #12]
 800793c:	181b      	addge	r3, r3, r0
 800793e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007942:	bfac      	ite	ge
 8007944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007946:	81a3      	strhlt	r3, [r4, #12]
 8007948:	bd10      	pop	{r4, pc}

0800794a <__swrite>:
 800794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	461f      	mov	r7, r3
 8007950:	898b      	ldrh	r3, [r1, #12]
 8007952:	05db      	lsls	r3, r3, #23
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	4616      	mov	r6, r2
 800795a:	d505      	bpl.n	8007968 <__swrite+0x1e>
 800795c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007960:	2302      	movs	r3, #2
 8007962:	2200      	movs	r2, #0
 8007964:	f000 f8d0 	bl	8007b08 <_lseek_r>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	4628      	mov	r0, r5
 800797a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797e:	f000 b8f7 	b.w	8007b70 <_write_r>

08007982 <__sseek>:
 8007982:	b510      	push	{r4, lr}
 8007984:	460c      	mov	r4, r1
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	f000 f8bd 	bl	8007b08 <_lseek_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	bf15      	itete	ne
 8007994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800799a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800799e:	81a3      	strheq	r3, [r4, #12]
 80079a0:	bf18      	it	ne
 80079a2:	81a3      	strhne	r3, [r4, #12]
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <__sclose>:
 80079a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079aa:	f000 b89d 	b.w	8007ae8 <_close_r>

080079ae <__swbuf_r>:
 80079ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b0:	460e      	mov	r6, r1
 80079b2:	4614      	mov	r4, r2
 80079b4:	4605      	mov	r5, r0
 80079b6:	b118      	cbz	r0, 80079c0 <__swbuf_r+0x12>
 80079b8:	6a03      	ldr	r3, [r0, #32]
 80079ba:	b90b      	cbnz	r3, 80079c0 <__swbuf_r+0x12>
 80079bc:	f7ff ff0e 	bl	80077dc <__sinit>
 80079c0:	69a3      	ldr	r3, [r4, #24]
 80079c2:	60a3      	str	r3, [r4, #8]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	071a      	lsls	r2, r3, #28
 80079c8:	d501      	bpl.n	80079ce <__swbuf_r+0x20>
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	b943      	cbnz	r3, 80079e0 <__swbuf_r+0x32>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f82b 	bl	8007a2c <__swsetup_r>
 80079d6:	b118      	cbz	r0, 80079e0 <__swbuf_r+0x32>
 80079d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80079dc:	4638      	mov	r0, r7
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	6922      	ldr	r2, [r4, #16]
 80079e4:	1a98      	subs	r0, r3, r2
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	b2f6      	uxtb	r6, r6
 80079ea:	4283      	cmp	r3, r0
 80079ec:	4637      	mov	r7, r6
 80079ee:	dc05      	bgt.n	80079fc <__swbuf_r+0x4e>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 fca6 	bl	8008344 <_fflush_r>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1ed      	bne.n	80079d8 <__swbuf_r+0x2a>
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	701e      	strb	r6, [r3, #0]
 8007a0a:	6962      	ldr	r2, [r4, #20]
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d004      	beq.n	8007a1c <__swbuf_r+0x6e>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	07db      	lsls	r3, r3, #31
 8007a16:	d5e1      	bpl.n	80079dc <__swbuf_r+0x2e>
 8007a18:	2e0a      	cmp	r6, #10
 8007a1a:	d1df      	bne.n	80079dc <__swbuf_r+0x2e>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fc90 	bl	8008344 <_fflush_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d0d9      	beq.n	80079dc <__swbuf_r+0x2e>
 8007a28:	e7d6      	b.n	80079d8 <__swbuf_r+0x2a>
	...

08007a2c <__swsetup_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <__swsetup_r+0xa8>)
 8007a30:	4605      	mov	r5, r0
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	460c      	mov	r4, r1
 8007a36:	b118      	cbz	r0, 8007a40 <__swsetup_r+0x14>
 8007a38:	6a03      	ldr	r3, [r0, #32]
 8007a3a:	b90b      	cbnz	r3, 8007a40 <__swsetup_r+0x14>
 8007a3c:	f7ff fece 	bl	80077dc <__sinit>
 8007a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a44:	0719      	lsls	r1, r3, #28
 8007a46:	d422      	bmi.n	8007a8e <__swsetup_r+0x62>
 8007a48:	06da      	lsls	r2, r3, #27
 8007a4a:	d407      	bmi.n	8007a5c <__swsetup_r+0x30>
 8007a4c:	2209      	movs	r2, #9
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a5a:	e033      	b.n	8007ac4 <__swsetup_r+0x98>
 8007a5c:	0758      	lsls	r0, r3, #29
 8007a5e:	d512      	bpl.n	8007a86 <__swsetup_r+0x5a>
 8007a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a62:	b141      	cbz	r1, 8007a76 <__swsetup_r+0x4a>
 8007a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <__swsetup_r+0x46>
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f8cd 	bl	8007c0c <_free_r>
 8007a72:	2300      	movs	r3, #0
 8007a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f043 0308 	orr.w	r3, r3, #8
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	b94b      	cbnz	r3, 8007aa6 <__swsetup_r+0x7a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9c:	d003      	beq.n	8007aa6 <__swsetup_r+0x7a>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 fc9d 	bl	80083e0 <__smakebuf_r>
 8007aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aaa:	f013 0201 	ands.w	r2, r3, #1
 8007aae:	d00a      	beq.n	8007ac6 <__swsetup_r+0x9a>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	60a2      	str	r2, [r4, #8]
 8007ab4:	6962      	ldr	r2, [r4, #20]
 8007ab6:	4252      	negs	r2, r2
 8007ab8:	61a2      	str	r2, [r4, #24]
 8007aba:	6922      	ldr	r2, [r4, #16]
 8007abc:	b942      	cbnz	r2, 8007ad0 <__swsetup_r+0xa4>
 8007abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ac2:	d1c5      	bne.n	8007a50 <__swsetup_r+0x24>
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	0799      	lsls	r1, r3, #30
 8007ac8:	bf58      	it	pl
 8007aca:	6962      	ldrpl	r2, [r4, #20]
 8007acc:	60a2      	str	r2, [r4, #8]
 8007ace:	e7f4      	b.n	8007aba <__swsetup_r+0x8e>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e7f7      	b.n	8007ac4 <__swsetup_r+0x98>
 8007ad4:	20000024 	.word	0x20000024

08007ad8 <memset>:
 8007ad8:	4402      	add	r2, r0
 8007ada:	4603      	mov	r3, r0
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d100      	bne.n	8007ae2 <memset+0xa>
 8007ae0:	4770      	bx	lr
 8007ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ae6:	e7f9      	b.n	8007adc <memset+0x4>

08007ae8 <_close_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d06      	ldr	r5, [pc, #24]	@ (8007b04 <_close_r+0x1c>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7f9 f825 	bl	8000b42 <_close>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_close_r+0x1a>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_close_r+0x1a>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20000674 	.word	0x20000674

08007b08 <_lseek_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_lseek_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 f83a 	bl	8000b90 <_lseek>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_lseek_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_lseek_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20000674 	.word	0x20000674

08007b2c <_read_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	@ (8007b4c <_read_r+0x20>)
 8007b30:	4604      	mov	r4, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	602a      	str	r2, [r5, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f7f8 ffc8 	bl	8000ad0 <_read>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_read_r+0x1e>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_read_r+0x1e>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000674 	.word	0x20000674

08007b50 <_sbrk_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	@ (8007b6c <_sbrk_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7f9 f826 	bl	8000bac <_sbrk>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_sbrk_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_sbrk_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000674 	.word	0x20000674

08007b70 <_write_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	@ (8007b90 <_write_r+0x20>)
 8007b74:	4604      	mov	r4, r0
 8007b76:	4608      	mov	r0, r1
 8007b78:	4611      	mov	r1, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7f8 ffc3 	bl	8000b0a <_write>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_write_r+0x1e>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_write_r+0x1e>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000674 	.word	0x20000674

08007b94 <__errno>:
 8007b94:	4b01      	ldr	r3, [pc, #4]	@ (8007b9c <__errno+0x8>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20000024 	.word	0x20000024

08007ba0 <__libc_init_array>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8007bd8 <__libc_init_array+0x38>)
 8007ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8007bdc <__libc_init_array+0x3c>)
 8007ba6:	1b64      	subs	r4, r4, r5
 8007ba8:	10a4      	asrs	r4, r4, #2
 8007baa:	2600      	movs	r6, #0
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	d109      	bne.n	8007bc4 <__libc_init_array+0x24>
 8007bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8007be0 <__libc_init_array+0x40>)
 8007bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8007be4 <__libc_init_array+0x44>)
 8007bb4:	f000 fc72 	bl	800849c <_init>
 8007bb8:	1b64      	subs	r4, r4, r5
 8007bba:	10a4      	asrs	r4, r4, #2
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	42a6      	cmp	r6, r4
 8007bc0:	d105      	bne.n	8007bce <__libc_init_array+0x2e>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc8:	4798      	blx	r3
 8007bca:	3601      	adds	r6, #1
 8007bcc:	e7ee      	b.n	8007bac <__libc_init_array+0xc>
 8007bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd2:	4798      	blx	r3
 8007bd4:	3601      	adds	r6, #1
 8007bd6:	e7f2      	b.n	8007bbe <__libc_init_array+0x1e>
 8007bd8:	08008e10 	.word	0x08008e10
 8007bdc:	08008e10 	.word	0x08008e10
 8007be0:	08008e10 	.word	0x08008e10
 8007be4:	08008e14 	.word	0x08008e14

08007be8 <__retarget_lock_init_recursive>:
 8007be8:	4770      	bx	lr

08007bea <__retarget_lock_acquire_recursive>:
 8007bea:	4770      	bx	lr

08007bec <__retarget_lock_release_recursive>:
 8007bec:	4770      	bx	lr

08007bee <memcpy>:
 8007bee:	440a      	add	r2, r1
 8007bf0:	4291      	cmp	r1, r2
 8007bf2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007bf6:	d100      	bne.n	8007bfa <memcpy+0xc>
 8007bf8:	4770      	bx	lr
 8007bfa:	b510      	push	{r4, lr}
 8007bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c04:	4291      	cmp	r1, r2
 8007c06:	d1f9      	bne.n	8007bfc <memcpy+0xe>
 8007c08:	bd10      	pop	{r4, pc}
	...

08007c0c <_free_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4605      	mov	r5, r0
 8007c10:	2900      	cmp	r1, #0
 8007c12:	d041      	beq.n	8007c98 <_free_r+0x8c>
 8007c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c18:	1f0c      	subs	r4, r1, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bfb8      	it	lt
 8007c1e:	18e4      	addlt	r4, r4, r3
 8007c20:	f7ff fd44 	bl	80076ac <__malloc_lock>
 8007c24:	4a1d      	ldr	r2, [pc, #116]	@ (8007c9c <_free_r+0x90>)
 8007c26:	6813      	ldr	r3, [r2, #0]
 8007c28:	b933      	cbnz	r3, 8007c38 <_free_r+0x2c>
 8007c2a:	6063      	str	r3, [r4, #4]
 8007c2c:	6014      	str	r4, [r2, #0]
 8007c2e:	4628      	mov	r0, r5
 8007c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c34:	f7ff bd40 	b.w	80076b8 <__malloc_unlock>
 8007c38:	42a3      	cmp	r3, r4
 8007c3a:	d908      	bls.n	8007c4e <_free_r+0x42>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	1821      	adds	r1, r4, r0
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf01      	itttt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	1809      	addeq	r1, r1, r0
 8007c4a:	6021      	streq	r1, [r4, #0]
 8007c4c:	e7ed      	b.n	8007c2a <_free_r+0x1e>
 8007c4e:	461a      	mov	r2, r3
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	b10b      	cbz	r3, 8007c58 <_free_r+0x4c>
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	d9fa      	bls.n	8007c4e <_free_r+0x42>
 8007c58:	6811      	ldr	r1, [r2, #0]
 8007c5a:	1850      	adds	r0, r2, r1
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d10b      	bne.n	8007c78 <_free_r+0x6c>
 8007c60:	6820      	ldr	r0, [r4, #0]
 8007c62:	4401      	add	r1, r0
 8007c64:	1850      	adds	r0, r2, r1
 8007c66:	4283      	cmp	r3, r0
 8007c68:	6011      	str	r1, [r2, #0]
 8007c6a:	d1e0      	bne.n	8007c2e <_free_r+0x22>
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	6053      	str	r3, [r2, #4]
 8007c72:	4408      	add	r0, r1
 8007c74:	6010      	str	r0, [r2, #0]
 8007c76:	e7da      	b.n	8007c2e <_free_r+0x22>
 8007c78:	d902      	bls.n	8007c80 <_free_r+0x74>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	e7d6      	b.n	8007c2e <_free_r+0x22>
 8007c80:	6820      	ldr	r0, [r4, #0]
 8007c82:	1821      	adds	r1, r4, r0
 8007c84:	428b      	cmp	r3, r1
 8007c86:	bf04      	itt	eq
 8007c88:	6819      	ldreq	r1, [r3, #0]
 8007c8a:	685b      	ldreq	r3, [r3, #4]
 8007c8c:	6063      	str	r3, [r4, #4]
 8007c8e:	bf04      	itt	eq
 8007c90:	1809      	addeq	r1, r1, r0
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	6054      	str	r4, [r2, #4]
 8007c96:	e7ca      	b.n	8007c2e <_free_r+0x22>
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000534 	.word	0x20000534

08007ca0 <__sfputc_r>:
 8007ca0:	6893      	ldr	r3, [r2, #8]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	b410      	push	{r4}
 8007ca8:	6093      	str	r3, [r2, #8]
 8007caa:	da08      	bge.n	8007cbe <__sfputc_r+0x1e>
 8007cac:	6994      	ldr	r4, [r2, #24]
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	db01      	blt.n	8007cb6 <__sfputc_r+0x16>
 8007cb2:	290a      	cmp	r1, #10
 8007cb4:	d103      	bne.n	8007cbe <__sfputc_r+0x1e>
 8007cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cba:	f7ff be78 	b.w	80079ae <__swbuf_r>
 8007cbe:	6813      	ldr	r3, [r2, #0]
 8007cc0:	1c58      	adds	r0, r3, #1
 8007cc2:	6010      	str	r0, [r2, #0]
 8007cc4:	7019      	strb	r1, [r3, #0]
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <__sfputs_r>:
 8007cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	18d5      	adds	r5, r2, r3
 8007cd8:	42ac      	cmp	r4, r5
 8007cda:	d101      	bne.n	8007ce0 <__sfputs_r+0x12>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e007      	b.n	8007cf0 <__sfputs_r+0x22>
 8007ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce4:	463a      	mov	r2, r7
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ffda 	bl	8007ca0 <__sfputc_r>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d1f3      	bne.n	8007cd8 <__sfputs_r+0xa>
 8007cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf4 <_vfiprintf_r>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	b09d      	sub	sp, #116	@ 0x74
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	4698      	mov	r8, r3
 8007d00:	4606      	mov	r6, r0
 8007d02:	b118      	cbz	r0, 8007d0c <_vfiprintf_r+0x18>
 8007d04:	6a03      	ldr	r3, [r0, #32]
 8007d06:	b90b      	cbnz	r3, 8007d0c <_vfiprintf_r+0x18>
 8007d08:	f7ff fd68 	bl	80077dc <__sinit>
 8007d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d0e:	07d9      	lsls	r1, r3, #31
 8007d10:	d405      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	059a      	lsls	r2, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d1a:	f7ff ff66 	bl	8007bea <__retarget_lock_acquire_recursive>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	d501      	bpl.n	8007d28 <_vfiprintf_r+0x34>
 8007d24:	692b      	ldr	r3, [r5, #16]
 8007d26:	b99b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x5c>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7ff fe7e 	bl	8007a2c <__swsetup_r>
 8007d30:	b170      	cbz	r0, 8007d50 <_vfiprintf_r+0x5c>
 8007d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d34:	07dc      	lsls	r4, r3, #31
 8007d36:	d504      	bpl.n	8007d42 <_vfiprintf_r+0x4e>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d3c:	b01d      	add	sp, #116	@ 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	0598      	lsls	r0, r3, #22
 8007d46:	d4f7      	bmi.n	8007d38 <_vfiprintf_r+0x44>
 8007d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d4a:	f7ff ff4f 	bl	8007bec <__retarget_lock_release_recursive>
 8007d4e:	e7f3      	b.n	8007d38 <_vfiprintf_r+0x44>
 8007d50:	2300      	movs	r3, #0
 8007d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d54:	2320      	movs	r3, #32
 8007d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d5e:	2330      	movs	r3, #48	@ 0x30
 8007d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f10 <_vfiprintf_r+0x21c>
 8007d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d68:	f04f 0901 	mov.w	r9, #1
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	469a      	mov	sl, r3
 8007d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d74:	b10a      	cbz	r2, 8007d7a <_vfiprintf_r+0x86>
 8007d76:	2a25      	cmp	r2, #37	@ 0x25
 8007d78:	d1f9      	bne.n	8007d6e <_vfiprintf_r+0x7a>
 8007d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d7e:	d00b      	beq.n	8007d98 <_vfiprintf_r+0xa4>
 8007d80:	465b      	mov	r3, fp
 8007d82:	4622      	mov	r2, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff ffa1 	bl	8007cce <__sfputs_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f000 80a7 	beq.w	8007ee0 <_vfiprintf_r+0x1ec>
 8007d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d94:	445a      	add	r2, fp
 8007d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d98:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 809f 	beq.w	8007ee0 <_vfiprintf_r+0x1ec>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dac:	f10a 0a01 	add.w	sl, sl, #1
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9307      	str	r3, [sp, #28]
 8007db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc2:	4853      	ldr	r0, [pc, #332]	@ (8007f10 <_vfiprintf_r+0x21c>)
 8007dc4:	f7f8 fa0c 	bl	80001e0 <memchr>
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	b9d8      	cbnz	r0, 8007e04 <_vfiprintf_r+0x110>
 8007dcc:	06d1      	lsls	r1, r2, #27
 8007dce:	bf44      	itt	mi
 8007dd0:	2320      	movmi	r3, #32
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd6:	0713      	lsls	r3, r2, #28
 8007dd8:	bf44      	itt	mi
 8007dda:	232b      	movmi	r3, #43	@ 0x2b
 8007ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de0:	f89a 3000 	ldrb.w	r3, [sl]
 8007de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de6:	d015      	beq.n	8007e14 <_vfiprintf_r+0x120>
 8007de8:	9a07      	ldr	r2, [sp, #28]
 8007dea:	4654      	mov	r4, sl
 8007dec:	2000      	movs	r0, #0
 8007dee:	f04f 0c0a 	mov.w	ip, #10
 8007df2:	4621      	mov	r1, r4
 8007df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df8:	3b30      	subs	r3, #48	@ 0x30
 8007dfa:	2b09      	cmp	r3, #9
 8007dfc:	d94b      	bls.n	8007e96 <_vfiprintf_r+0x1a2>
 8007dfe:	b1b0      	cbz	r0, 8007e2e <_vfiprintf_r+0x13a>
 8007e00:	9207      	str	r2, [sp, #28]
 8007e02:	e014      	b.n	8007e2e <_vfiprintf_r+0x13a>
 8007e04:	eba0 0308 	sub.w	r3, r0, r8
 8007e08:	fa09 f303 	lsl.w	r3, r9, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	46a2      	mov	sl, r4
 8007e12:	e7d2      	b.n	8007dba <_vfiprintf_r+0xc6>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d19      	adds	r1, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfbb      	ittet	lt
 8007e20:	425b      	neglt	r3, r3
 8007e22:	f042 0202 	orrlt.w	r2, r2, #2
 8007e26:	9307      	strge	r3, [sp, #28]
 8007e28:	9307      	strlt	r3, [sp, #28]
 8007e2a:	bfb8      	it	lt
 8007e2c:	9204      	strlt	r2, [sp, #16]
 8007e2e:	7823      	ldrb	r3, [r4, #0]
 8007e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e32:	d10a      	bne.n	8007e4a <_vfiprintf_r+0x156>
 8007e34:	7863      	ldrb	r3, [r4, #1]
 8007e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e38:	d132      	bne.n	8007ea0 <_vfiprintf_r+0x1ac>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	1d1a      	adds	r2, r3, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	9203      	str	r2, [sp, #12]
 8007e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e46:	3402      	adds	r4, #2
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f20 <_vfiprintf_r+0x22c>
 8007e4e:	7821      	ldrb	r1, [r4, #0]
 8007e50:	2203      	movs	r2, #3
 8007e52:	4650      	mov	r0, sl
 8007e54:	f7f8 f9c4 	bl	80001e0 <memchr>
 8007e58:	b138      	cbz	r0, 8007e6a <_vfiprintf_r+0x176>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	eba0 000a 	sub.w	r0, r0, sl
 8007e60:	2240      	movs	r2, #64	@ 0x40
 8007e62:	4082      	lsls	r2, r0
 8007e64:	4313      	orrs	r3, r2
 8007e66:	3401      	adds	r4, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6e:	4829      	ldr	r0, [pc, #164]	@ (8007f14 <_vfiprintf_r+0x220>)
 8007e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e74:	2206      	movs	r2, #6
 8007e76:	f7f8 f9b3 	bl	80001e0 <memchr>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d03f      	beq.n	8007efe <_vfiprintf_r+0x20a>
 8007e7e:	4b26      	ldr	r3, [pc, #152]	@ (8007f18 <_vfiprintf_r+0x224>)
 8007e80:	bb1b      	cbnz	r3, 8007eca <_vfiprintf_r+0x1d6>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	3307      	adds	r3, #7
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	9303      	str	r3, [sp, #12]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e90:	443b      	add	r3, r7
 8007e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e94:	e76a      	b.n	8007d6c <_vfiprintf_r+0x78>
 8007e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	e7a8      	b.n	8007df2 <_vfiprintf_r+0xfe>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	3401      	adds	r4, #1
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4620      	mov	r0, r4
 8007eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb2:	3a30      	subs	r2, #48	@ 0x30
 8007eb4:	2a09      	cmp	r2, #9
 8007eb6:	d903      	bls.n	8007ec0 <_vfiprintf_r+0x1cc>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0c6      	beq.n	8007e4a <_vfiprintf_r+0x156>
 8007ebc:	9105      	str	r1, [sp, #20]
 8007ebe:	e7c4      	b.n	8007e4a <_vfiprintf_r+0x156>
 8007ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7f0      	b.n	8007eac <_vfiprintf_r+0x1b8>
 8007eca:	ab03      	add	r3, sp, #12
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	462a      	mov	r2, r5
 8007ed0:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <_vfiprintf_r+0x228>)
 8007ed2:	a904      	add	r1, sp, #16
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f3af 8000 	nop.w
 8007eda:	4607      	mov	r7, r0
 8007edc:	1c78      	adds	r0, r7, #1
 8007ede:	d1d6      	bne.n	8007e8e <_vfiprintf_r+0x19a>
 8007ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ee2:	07d9      	lsls	r1, r3, #31
 8007ee4:	d405      	bmi.n	8007ef2 <_vfiprintf_r+0x1fe>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	059a      	lsls	r2, r3, #22
 8007eea:	d402      	bmi.n	8007ef2 <_vfiprintf_r+0x1fe>
 8007eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eee:	f7ff fe7d 	bl	8007bec <__retarget_lock_release_recursive>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	065b      	lsls	r3, r3, #25
 8007ef6:	f53f af1f 	bmi.w	8007d38 <_vfiprintf_r+0x44>
 8007efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007efc:	e71e      	b.n	8007d3c <_vfiprintf_r+0x48>
 8007efe:	ab03      	add	r3, sp, #12
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	462a      	mov	r2, r5
 8007f04:	4b05      	ldr	r3, [pc, #20]	@ (8007f1c <_vfiprintf_r+0x228>)
 8007f06:	a904      	add	r1, sp, #16
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 f879 	bl	8008000 <_printf_i>
 8007f0e:	e7e4      	b.n	8007eda <_vfiprintf_r+0x1e6>
 8007f10:	08008dd4 	.word	0x08008dd4
 8007f14:	08008dde 	.word	0x08008dde
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	08007ccf 	.word	0x08007ccf
 8007f20:	08008dda 	.word	0x08008dda

08007f24 <_printf_common>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	4616      	mov	r6, r2
 8007f2a:	4698      	mov	r8, r3
 8007f2c:	688a      	ldr	r2, [r1, #8]
 8007f2e:	690b      	ldr	r3, [r1, #16]
 8007f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bfb8      	it	lt
 8007f38:	4613      	movlt	r3, r2
 8007f3a:	6033      	str	r3, [r6, #0]
 8007f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f40:	4607      	mov	r7, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b10a      	cbz	r2, 8007f4a <_printf_common+0x26>
 8007f46:	3301      	adds	r3, #1
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	0699      	lsls	r1, r3, #26
 8007f4e:	bf42      	ittt	mi
 8007f50:	6833      	ldrmi	r3, [r6, #0]
 8007f52:	3302      	addmi	r3, #2
 8007f54:	6033      	strmi	r3, [r6, #0]
 8007f56:	6825      	ldr	r5, [r4, #0]
 8007f58:	f015 0506 	ands.w	r5, r5, #6
 8007f5c:	d106      	bne.n	8007f6c <_printf_common+0x48>
 8007f5e:	f104 0a19 	add.w	sl, r4, #25
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	6832      	ldr	r2, [r6, #0]
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dc26      	bgt.n	8007fba <_printf_common+0x96>
 8007f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	3b00      	subs	r3, #0
 8007f74:	bf18      	it	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	0692      	lsls	r2, r2, #26
 8007f7a:	d42b      	bmi.n	8007fd4 <_printf_common+0xb0>
 8007f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f80:	4641      	mov	r1, r8
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c8      	blx	r9
 8007f86:	3001      	adds	r0, #1
 8007f88:	d01e      	beq.n	8007fc8 <_printf_common+0xa4>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	6922      	ldr	r2, [r4, #16]
 8007f8e:	f003 0306 	and.w	r3, r3, #6
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	bf02      	ittt	eq
 8007f96:	68e5      	ldreq	r5, [r4, #12]
 8007f98:	6833      	ldreq	r3, [r6, #0]
 8007f9a:	1aed      	subeq	r5, r5, r3
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	bf0c      	ite	eq
 8007fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fa4:	2500      	movne	r5, #0
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bfc4      	itt	gt
 8007faa:	1a9b      	subgt	r3, r3, r2
 8007fac:	18ed      	addgt	r5, r5, r3
 8007fae:	2600      	movs	r6, #0
 8007fb0:	341a      	adds	r4, #26
 8007fb2:	42b5      	cmp	r5, r6
 8007fb4:	d11a      	bne.n	8007fec <_printf_common+0xc8>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e008      	b.n	8007fcc <_printf_common+0xa8>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	47c8      	blx	r9
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d103      	bne.n	8007fd0 <_printf_common+0xac>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	e7c6      	b.n	8007f62 <_printf_common+0x3e>
 8007fd4:	18e1      	adds	r1, r4, r3
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	2030      	movs	r0, #48	@ 0x30
 8007fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fde:	4422      	add	r2, r4
 8007fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fe8:	3302      	adds	r3, #2
 8007fea:	e7c7      	b.n	8007f7c <_printf_common+0x58>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	47c8      	blx	r9
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d0e6      	beq.n	8007fc8 <_printf_common+0xa4>
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7d9      	b.n	8007fb2 <_printf_common+0x8e>
	...

08008000 <_printf_i>:
 8008000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	7e0f      	ldrb	r7, [r1, #24]
 8008006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008008:	2f78      	cmp	r7, #120	@ 0x78
 800800a:	4691      	mov	r9, r2
 800800c:	4680      	mov	r8, r0
 800800e:	460c      	mov	r4, r1
 8008010:	469a      	mov	sl, r3
 8008012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008016:	d807      	bhi.n	8008028 <_printf_i+0x28>
 8008018:	2f62      	cmp	r7, #98	@ 0x62
 800801a:	d80a      	bhi.n	8008032 <_printf_i+0x32>
 800801c:	2f00      	cmp	r7, #0
 800801e:	f000 80d1 	beq.w	80081c4 <_printf_i+0x1c4>
 8008022:	2f58      	cmp	r7, #88	@ 0x58
 8008024:	f000 80b8 	beq.w	8008198 <_printf_i+0x198>
 8008028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800802c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008030:	e03a      	b.n	80080a8 <_printf_i+0xa8>
 8008032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008036:	2b15      	cmp	r3, #21
 8008038:	d8f6      	bhi.n	8008028 <_printf_i+0x28>
 800803a:	a101      	add	r1, pc, #4	@ (adr r1, 8008040 <_printf_i+0x40>)
 800803c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008040:	08008099 	.word	0x08008099
 8008044:	080080ad 	.word	0x080080ad
 8008048:	08008029 	.word	0x08008029
 800804c:	08008029 	.word	0x08008029
 8008050:	08008029 	.word	0x08008029
 8008054:	08008029 	.word	0x08008029
 8008058:	080080ad 	.word	0x080080ad
 800805c:	08008029 	.word	0x08008029
 8008060:	08008029 	.word	0x08008029
 8008064:	08008029 	.word	0x08008029
 8008068:	08008029 	.word	0x08008029
 800806c:	080081ab 	.word	0x080081ab
 8008070:	080080d7 	.word	0x080080d7
 8008074:	08008165 	.word	0x08008165
 8008078:	08008029 	.word	0x08008029
 800807c:	08008029 	.word	0x08008029
 8008080:	080081cd 	.word	0x080081cd
 8008084:	08008029 	.word	0x08008029
 8008088:	080080d7 	.word	0x080080d7
 800808c:	08008029 	.word	0x08008029
 8008090:	08008029 	.word	0x08008029
 8008094:	0800816d 	.word	0x0800816d
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	1d1a      	adds	r2, r3, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6032      	str	r2, [r6, #0]
 80080a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080a8:	2301      	movs	r3, #1
 80080aa:	e09c      	b.n	80081e6 <_printf_i+0x1e6>
 80080ac:	6833      	ldr	r3, [r6, #0]
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	1d19      	adds	r1, r3, #4
 80080b2:	6031      	str	r1, [r6, #0]
 80080b4:	0606      	lsls	r6, r0, #24
 80080b6:	d501      	bpl.n	80080bc <_printf_i+0xbc>
 80080b8:	681d      	ldr	r5, [r3, #0]
 80080ba:	e003      	b.n	80080c4 <_printf_i+0xc4>
 80080bc:	0645      	lsls	r5, r0, #25
 80080be:	d5fb      	bpl.n	80080b8 <_printf_i+0xb8>
 80080c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	da03      	bge.n	80080d0 <_printf_i+0xd0>
 80080c8:	232d      	movs	r3, #45	@ 0x2d
 80080ca:	426d      	negs	r5, r5
 80080cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080d0:	4858      	ldr	r0, [pc, #352]	@ (8008234 <_printf_i+0x234>)
 80080d2:	230a      	movs	r3, #10
 80080d4:	e011      	b.n	80080fa <_printf_i+0xfa>
 80080d6:	6821      	ldr	r1, [r4, #0]
 80080d8:	6833      	ldr	r3, [r6, #0]
 80080da:	0608      	lsls	r0, r1, #24
 80080dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80080e0:	d402      	bmi.n	80080e8 <_printf_i+0xe8>
 80080e2:	0649      	lsls	r1, r1, #25
 80080e4:	bf48      	it	mi
 80080e6:	b2ad      	uxthmi	r5, r5
 80080e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80080ea:	4852      	ldr	r0, [pc, #328]	@ (8008234 <_printf_i+0x234>)
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	bf14      	ite	ne
 80080f0:	230a      	movne	r3, #10
 80080f2:	2308      	moveq	r3, #8
 80080f4:	2100      	movs	r1, #0
 80080f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080fa:	6866      	ldr	r6, [r4, #4]
 80080fc:	60a6      	str	r6, [r4, #8]
 80080fe:	2e00      	cmp	r6, #0
 8008100:	db05      	blt.n	800810e <_printf_i+0x10e>
 8008102:	6821      	ldr	r1, [r4, #0]
 8008104:	432e      	orrs	r6, r5
 8008106:	f021 0104 	bic.w	r1, r1, #4
 800810a:	6021      	str	r1, [r4, #0]
 800810c:	d04b      	beq.n	80081a6 <_printf_i+0x1a6>
 800810e:	4616      	mov	r6, r2
 8008110:	fbb5 f1f3 	udiv	r1, r5, r3
 8008114:	fb03 5711 	mls	r7, r3, r1, r5
 8008118:	5dc7      	ldrb	r7, [r0, r7]
 800811a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800811e:	462f      	mov	r7, r5
 8008120:	42bb      	cmp	r3, r7
 8008122:	460d      	mov	r5, r1
 8008124:	d9f4      	bls.n	8008110 <_printf_i+0x110>
 8008126:	2b08      	cmp	r3, #8
 8008128:	d10b      	bne.n	8008142 <_printf_i+0x142>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	07df      	lsls	r7, r3, #31
 800812e:	d508      	bpl.n	8008142 <_printf_i+0x142>
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	6861      	ldr	r1, [r4, #4]
 8008134:	4299      	cmp	r1, r3
 8008136:	bfde      	ittt	le
 8008138:	2330      	movle	r3, #48	@ 0x30
 800813a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800813e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008142:	1b92      	subs	r2, r2, r6
 8008144:	6122      	str	r2, [r4, #16]
 8008146:	f8cd a000 	str.w	sl, [sp]
 800814a:	464b      	mov	r3, r9
 800814c:	aa03      	add	r2, sp, #12
 800814e:	4621      	mov	r1, r4
 8008150:	4640      	mov	r0, r8
 8008152:	f7ff fee7 	bl	8007f24 <_printf_common>
 8008156:	3001      	adds	r0, #1
 8008158:	d14a      	bne.n	80081f0 <_printf_i+0x1f0>
 800815a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800815e:	b004      	add	sp, #16
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	f043 0320 	orr.w	r3, r3, #32
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	4832      	ldr	r0, [pc, #200]	@ (8008238 <_printf_i+0x238>)
 800816e:	2778      	movs	r7, #120	@ 0x78
 8008170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	6831      	ldr	r1, [r6, #0]
 8008178:	061f      	lsls	r7, r3, #24
 800817a:	f851 5b04 	ldr.w	r5, [r1], #4
 800817e:	d402      	bmi.n	8008186 <_printf_i+0x186>
 8008180:	065f      	lsls	r7, r3, #25
 8008182:	bf48      	it	mi
 8008184:	b2ad      	uxthmi	r5, r5
 8008186:	6031      	str	r1, [r6, #0]
 8008188:	07d9      	lsls	r1, r3, #31
 800818a:	bf44      	itt	mi
 800818c:	f043 0320 	orrmi.w	r3, r3, #32
 8008190:	6023      	strmi	r3, [r4, #0]
 8008192:	b11d      	cbz	r5, 800819c <_printf_i+0x19c>
 8008194:	2310      	movs	r3, #16
 8008196:	e7ad      	b.n	80080f4 <_printf_i+0xf4>
 8008198:	4826      	ldr	r0, [pc, #152]	@ (8008234 <_printf_i+0x234>)
 800819a:	e7e9      	b.n	8008170 <_printf_i+0x170>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	f023 0320 	bic.w	r3, r3, #32
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	e7f6      	b.n	8008194 <_printf_i+0x194>
 80081a6:	4616      	mov	r6, r2
 80081a8:	e7bd      	b.n	8008126 <_printf_i+0x126>
 80081aa:	6833      	ldr	r3, [r6, #0]
 80081ac:	6825      	ldr	r5, [r4, #0]
 80081ae:	6961      	ldr	r1, [r4, #20]
 80081b0:	1d18      	adds	r0, r3, #4
 80081b2:	6030      	str	r0, [r6, #0]
 80081b4:	062e      	lsls	r6, r5, #24
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	d501      	bpl.n	80081be <_printf_i+0x1be>
 80081ba:	6019      	str	r1, [r3, #0]
 80081bc:	e002      	b.n	80081c4 <_printf_i+0x1c4>
 80081be:	0668      	lsls	r0, r5, #25
 80081c0:	d5fb      	bpl.n	80081ba <_printf_i+0x1ba>
 80081c2:	8019      	strh	r1, [r3, #0]
 80081c4:	2300      	movs	r3, #0
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	4616      	mov	r6, r2
 80081ca:	e7bc      	b.n	8008146 <_printf_i+0x146>
 80081cc:	6833      	ldr	r3, [r6, #0]
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	6032      	str	r2, [r6, #0]
 80081d2:	681e      	ldr	r6, [r3, #0]
 80081d4:	6862      	ldr	r2, [r4, #4]
 80081d6:	2100      	movs	r1, #0
 80081d8:	4630      	mov	r0, r6
 80081da:	f7f8 f801 	bl	80001e0 <memchr>
 80081de:	b108      	cbz	r0, 80081e4 <_printf_i+0x1e4>
 80081e0:	1b80      	subs	r0, r0, r6
 80081e2:	6060      	str	r0, [r4, #4]
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	2300      	movs	r3, #0
 80081ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081ee:	e7aa      	b.n	8008146 <_printf_i+0x146>
 80081f0:	6923      	ldr	r3, [r4, #16]
 80081f2:	4632      	mov	r2, r6
 80081f4:	4649      	mov	r1, r9
 80081f6:	4640      	mov	r0, r8
 80081f8:	47d0      	blx	sl
 80081fa:	3001      	adds	r0, #1
 80081fc:	d0ad      	beq.n	800815a <_printf_i+0x15a>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	079b      	lsls	r3, r3, #30
 8008202:	d413      	bmi.n	800822c <_printf_i+0x22c>
 8008204:	68e0      	ldr	r0, [r4, #12]
 8008206:	9b03      	ldr	r3, [sp, #12]
 8008208:	4298      	cmp	r0, r3
 800820a:	bfb8      	it	lt
 800820c:	4618      	movlt	r0, r3
 800820e:	e7a6      	b.n	800815e <_printf_i+0x15e>
 8008210:	2301      	movs	r3, #1
 8008212:	4632      	mov	r2, r6
 8008214:	4649      	mov	r1, r9
 8008216:	4640      	mov	r0, r8
 8008218:	47d0      	blx	sl
 800821a:	3001      	adds	r0, #1
 800821c:	d09d      	beq.n	800815a <_printf_i+0x15a>
 800821e:	3501      	adds	r5, #1
 8008220:	68e3      	ldr	r3, [r4, #12]
 8008222:	9903      	ldr	r1, [sp, #12]
 8008224:	1a5b      	subs	r3, r3, r1
 8008226:	42ab      	cmp	r3, r5
 8008228:	dcf2      	bgt.n	8008210 <_printf_i+0x210>
 800822a:	e7eb      	b.n	8008204 <_printf_i+0x204>
 800822c:	2500      	movs	r5, #0
 800822e:	f104 0619 	add.w	r6, r4, #25
 8008232:	e7f5      	b.n	8008220 <_printf_i+0x220>
 8008234:	08008de5 	.word	0x08008de5
 8008238:	08008df6 	.word	0x08008df6

0800823c <__sflush_r>:
 800823c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	0716      	lsls	r6, r2, #28
 8008246:	4605      	mov	r5, r0
 8008248:	460c      	mov	r4, r1
 800824a:	d454      	bmi.n	80082f6 <__sflush_r+0xba>
 800824c:	684b      	ldr	r3, [r1, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dc02      	bgt.n	8008258 <__sflush_r+0x1c>
 8008252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd48      	ble.n	80082ea <__sflush_r+0xae>
 8008258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800825a:	2e00      	cmp	r6, #0
 800825c:	d045      	beq.n	80082ea <__sflush_r+0xae>
 800825e:	2300      	movs	r3, #0
 8008260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008264:	682f      	ldr	r7, [r5, #0]
 8008266:	6a21      	ldr	r1, [r4, #32]
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	d030      	beq.n	80082ce <__sflush_r+0x92>
 800826c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	0759      	lsls	r1, r3, #29
 8008272:	d505      	bpl.n	8008280 <__sflush_r+0x44>
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800827a:	b10b      	cbz	r3, 8008280 <__sflush_r+0x44>
 800827c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	2300      	movs	r3, #0
 8008282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008284:	6a21      	ldr	r1, [r4, #32]
 8008286:	4628      	mov	r0, r5
 8008288:	47b0      	blx	r6
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	d106      	bne.n	800829e <__sflush_r+0x62>
 8008290:	6829      	ldr	r1, [r5, #0]
 8008292:	291d      	cmp	r1, #29
 8008294:	d82b      	bhi.n	80082ee <__sflush_r+0xb2>
 8008296:	4a2a      	ldr	r2, [pc, #168]	@ (8008340 <__sflush_r+0x104>)
 8008298:	40ca      	lsrs	r2, r1
 800829a:	07d6      	lsls	r6, r2, #31
 800829c:	d527      	bpl.n	80082ee <__sflush_r+0xb2>
 800829e:	2200      	movs	r2, #0
 80082a0:	6062      	str	r2, [r4, #4]
 80082a2:	04d9      	lsls	r1, r3, #19
 80082a4:	6922      	ldr	r2, [r4, #16]
 80082a6:	6022      	str	r2, [r4, #0]
 80082a8:	d504      	bpl.n	80082b4 <__sflush_r+0x78>
 80082aa:	1c42      	adds	r2, r0, #1
 80082ac:	d101      	bne.n	80082b2 <__sflush_r+0x76>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b903      	cbnz	r3, 80082b4 <__sflush_r+0x78>
 80082b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80082b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082b6:	602f      	str	r7, [r5, #0]
 80082b8:	b1b9      	cbz	r1, 80082ea <__sflush_r+0xae>
 80082ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082be:	4299      	cmp	r1, r3
 80082c0:	d002      	beq.n	80082c8 <__sflush_r+0x8c>
 80082c2:	4628      	mov	r0, r5
 80082c4:	f7ff fca2 	bl	8007c0c <_free_r>
 80082c8:	2300      	movs	r3, #0
 80082ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80082cc:	e00d      	b.n	80082ea <__sflush_r+0xae>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b0      	blx	r6
 80082d4:	4602      	mov	r2, r0
 80082d6:	1c50      	adds	r0, r2, #1
 80082d8:	d1c9      	bne.n	800826e <__sflush_r+0x32>
 80082da:	682b      	ldr	r3, [r5, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0c6      	beq.n	800826e <__sflush_r+0x32>
 80082e0:	2b1d      	cmp	r3, #29
 80082e2:	d001      	beq.n	80082e8 <__sflush_r+0xac>
 80082e4:	2b16      	cmp	r3, #22
 80082e6:	d11e      	bne.n	8008326 <__sflush_r+0xea>
 80082e8:	602f      	str	r7, [r5, #0]
 80082ea:	2000      	movs	r0, #0
 80082ec:	e022      	b.n	8008334 <__sflush_r+0xf8>
 80082ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f2:	b21b      	sxth	r3, r3
 80082f4:	e01b      	b.n	800832e <__sflush_r+0xf2>
 80082f6:	690f      	ldr	r7, [r1, #16]
 80082f8:	2f00      	cmp	r7, #0
 80082fa:	d0f6      	beq.n	80082ea <__sflush_r+0xae>
 80082fc:	0793      	lsls	r3, r2, #30
 80082fe:	680e      	ldr	r6, [r1, #0]
 8008300:	bf08      	it	eq
 8008302:	694b      	ldreq	r3, [r1, #20]
 8008304:	600f      	str	r7, [r1, #0]
 8008306:	bf18      	it	ne
 8008308:	2300      	movne	r3, #0
 800830a:	eba6 0807 	sub.w	r8, r6, r7
 800830e:	608b      	str	r3, [r1, #8]
 8008310:	f1b8 0f00 	cmp.w	r8, #0
 8008314:	dde9      	ble.n	80082ea <__sflush_r+0xae>
 8008316:	6a21      	ldr	r1, [r4, #32]
 8008318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800831a:	4643      	mov	r3, r8
 800831c:	463a      	mov	r2, r7
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	2800      	cmp	r0, #0
 8008324:	dc08      	bgt.n	8008338 <__sflush_r+0xfc>
 8008326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	4407      	add	r7, r0
 800833a:	eba8 0800 	sub.w	r8, r8, r0
 800833e:	e7e7      	b.n	8008310 <__sflush_r+0xd4>
 8008340:	20400001 	.word	0x20400001

08008344 <_fflush_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	4605      	mov	r5, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b913      	cbnz	r3, 8008354 <_fflush_r+0x10>
 800834e:	2500      	movs	r5, #0
 8008350:	4628      	mov	r0, r5
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	b118      	cbz	r0, 800835e <_fflush_r+0x1a>
 8008356:	6a03      	ldr	r3, [r0, #32]
 8008358:	b90b      	cbnz	r3, 800835e <_fflush_r+0x1a>
 800835a:	f7ff fa3f 	bl	80077dc <__sinit>
 800835e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f3      	beq.n	800834e <_fflush_r+0xa>
 8008366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008368:	07d0      	lsls	r0, r2, #31
 800836a:	d404      	bmi.n	8008376 <_fflush_r+0x32>
 800836c:	0599      	lsls	r1, r3, #22
 800836e:	d402      	bmi.n	8008376 <_fflush_r+0x32>
 8008370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008372:	f7ff fc3a 	bl	8007bea <__retarget_lock_acquire_recursive>
 8008376:	4628      	mov	r0, r5
 8008378:	4621      	mov	r1, r4
 800837a:	f7ff ff5f 	bl	800823c <__sflush_r>
 800837e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008380:	07da      	lsls	r2, r3, #31
 8008382:	4605      	mov	r5, r0
 8008384:	d4e4      	bmi.n	8008350 <_fflush_r+0xc>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	059b      	lsls	r3, r3, #22
 800838a:	d4e1      	bmi.n	8008350 <_fflush_r+0xc>
 800838c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800838e:	f7ff fc2d 	bl	8007bec <__retarget_lock_release_recursive>
 8008392:	e7dd      	b.n	8008350 <_fflush_r+0xc>

08008394 <__swhatbuf_r>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	460c      	mov	r4, r1
 8008398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839c:	2900      	cmp	r1, #0
 800839e:	b096      	sub	sp, #88	@ 0x58
 80083a0:	4615      	mov	r5, r2
 80083a2:	461e      	mov	r6, r3
 80083a4:	da0d      	bge.n	80083c2 <__swhatbuf_r+0x2e>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	bf14      	ite	ne
 80083b2:	2340      	movne	r3, #64	@ 0x40
 80083b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083b8:	2000      	movs	r0, #0
 80083ba:	6031      	str	r1, [r6, #0]
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	b016      	add	sp, #88	@ 0x58
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
 80083c2:	466a      	mov	r2, sp
 80083c4:	f000 f848 	bl	8008458 <_fstat_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	dbec      	blt.n	80083a6 <__swhatbuf_r+0x12>
 80083cc:	9901      	ldr	r1, [sp, #4]
 80083ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083d6:	4259      	negs	r1, r3
 80083d8:	4159      	adcs	r1, r3
 80083da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083de:	e7eb      	b.n	80083b8 <__swhatbuf_r+0x24>

080083e0 <__smakebuf_r>:
 80083e0:	898b      	ldrh	r3, [r1, #12]
 80083e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083e4:	079d      	lsls	r5, r3, #30
 80083e6:	4606      	mov	r6, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	d507      	bpl.n	80083fc <__smakebuf_r+0x1c>
 80083ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	6123      	str	r3, [r4, #16]
 80083f4:	2301      	movs	r3, #1
 80083f6:	6163      	str	r3, [r4, #20]
 80083f8:	b003      	add	sp, #12
 80083fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083fc:	ab01      	add	r3, sp, #4
 80083fe:	466a      	mov	r2, sp
 8008400:	f7ff ffc8 	bl	8008394 <__swhatbuf_r>
 8008404:	9f00      	ldr	r7, [sp, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	4639      	mov	r1, r7
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff f8ce 	bl	80075ac <_malloc_r>
 8008410:	b948      	cbnz	r0, 8008426 <__smakebuf_r+0x46>
 8008412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008416:	059a      	lsls	r2, r3, #22
 8008418:	d4ee      	bmi.n	80083f8 <__smakebuf_r+0x18>
 800841a:	f023 0303 	bic.w	r3, r3, #3
 800841e:	f043 0302 	orr.w	r3, r3, #2
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	e7e2      	b.n	80083ec <__smakebuf_r+0xc>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	6020      	str	r0, [r4, #0]
 800842a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008436:	b15b      	cbz	r3, 8008450 <__smakebuf_r+0x70>
 8008438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800843c:	4630      	mov	r0, r6
 800843e:	f000 f81d 	bl	800847c <_isatty_r>
 8008442:	b128      	cbz	r0, 8008450 <__smakebuf_r+0x70>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	431d      	orrs	r5, r3
 8008454:	81a5      	strh	r5, [r4, #12]
 8008456:	e7cf      	b.n	80083f8 <__smakebuf_r+0x18>

08008458 <_fstat_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d07      	ldr	r5, [pc, #28]	@ (8008478 <_fstat_r+0x20>)
 800845c:	2300      	movs	r3, #0
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	4611      	mov	r1, r2
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	f7f8 fb78 	bl	8000b5a <_fstat>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	d102      	bne.n	8008474 <_fstat_r+0x1c>
 800846e:	682b      	ldr	r3, [r5, #0]
 8008470:	b103      	cbz	r3, 8008474 <_fstat_r+0x1c>
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	bd38      	pop	{r3, r4, r5, pc}
 8008476:	bf00      	nop
 8008478:	20000674 	.word	0x20000674

0800847c <_isatty_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d06      	ldr	r5, [pc, #24]	@ (8008498 <_isatty_r+0x1c>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7f8 fb77 	bl	8000b7a <_isatty>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_isatty_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_isatty_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	20000674 	.word	0x20000674

0800849c <_init>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr

080084a8 <_fini>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr
