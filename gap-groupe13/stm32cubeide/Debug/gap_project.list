
gap_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  080054c0  080054c0  000064c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ae8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08005b50  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005b50  00007220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0f5  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fa  00000000  00000000  0001318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00015988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081d  00000000  00000000  00016450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f0  00000000  00000000  00016c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c911  00000000  00000000  0002f35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903f9  00000000  00000000  0003bc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000314c  00000000  00000000  000cc0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000cf1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080054a8 	.word	0x080054a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	080054a8 	.word	0x080054a8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa4e 	bl	80009a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  gapcom_handle_instance = gapcom_create();
 8000508:	f001 ffe4 	bl	80024d4 <gapcom_create>
 800050c:	4603      	mov	r3, r0
 800050e:	4a05      	ldr	r2, [pc, #20]	@ (8000524 <main+0x24>)
 8000510:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f809 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f893 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_Init();
 800051a:	f000 f865 	bl	80005e8 <MX_USART2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051e:	bf00      	nop
 8000520:	e7fd      	b.n	800051e <main+0x1e>
 8000522:	bf00      	nop
 8000524:	200000c8 	.word	0x200000c8

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 fda2 	bl	8005080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a22      	ldr	r2, [pc, #136]	@ (80005e0 <SystemClock_Config+0xb8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <SystemClock_Config+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000574:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <SystemClock_Config+0xbc>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <SystemClock_Config+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fd2b 	bl	8000ff8 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f864 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 ff8e 	bl	80014e8 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d2:	f000 f84f 	bl	8000674 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	@ 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_USART2_Init+0x50>)
 80005ee:	4a13      	ldr	r2, [pc, #76]	@ (800063c <MX_USART2_Init+0x54>)
 80005f0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_USART2_Init+0x50>)
 80005f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005f8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_USART2_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <MX_USART2_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_USART2_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <MX_USART2_Init+0x50>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_USART2_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <MX_USART2_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_USART2_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	@ (8000638 <MX_USART2_Init+0x50>)
 8000626:	f001 f93f 	bl	80018a8 <HAL_USART_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000630:	f000 f820 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000084 	.word	0x20000084
 800063c:	40004400 	.word	0x40004400

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_GPIO_Init+0x30>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <MX_GPIO_Init+0x30>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_GPIO_Init+0x30>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Error_Handler+0x8>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068e:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <HAL_MspInit+0x4c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000694:	6453      	str	r3, [r2, #68]	@ 0x44
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	@ (80006cc <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000764 <HAL_USART_MspInit+0x94>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d133      	bne.n	800075a <HAL_USART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <HAL_USART_MspInit+0x98>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <HAL_USART_MspInit+0x98>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000700:	6413      	str	r3, [r2, #64]	@ 0x40
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <HAL_USART_MspInit+0x98>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_USART_MspInit+0x98>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <HAL_USART_MspInit+0x98>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_USART_MspInit+0x98>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800072a:	231c      	movs	r3, #28
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800073a:	2307      	movs	r3, #7
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <HAL_USART_MspInit+0x9c>)
 8000746:	f000 fad3 	bl	8000cf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2026      	movs	r0, #38	@ 0x26
 8000750:	f000 fa75 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000754:	2026      	movs	r0, #38	@ 0x26
 8000756:	f000 fa8e 	bl	8000c76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f93f 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <USART2_IRQHandler+0x10>)
 80007d6:	f001 f8a9 	bl	800192c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000084 	.word	0x20000084

080007e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e00a      	b.n	800080c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f6:	f3af 8000 	nop.w
 80007fa:	4601      	mov	r1, r0
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	b2ca      	uxtb	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf0      	blt.n	80007f6 <_read+0x12>
  }

  return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e009      	b.n	8000844 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf1      	blt.n	8000830 <_write+0x12>
  }
  return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_close>:

int _close(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087e:	605a      	str	r2, [r3, #4]
  return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <_isatty>:

int _isatty(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f004 fc24 	bl	800513c <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20018000 	.word	0x20018000
 8000920:	00000400 	.word	0x00000400
 8000924:	200000cc 	.word	0x200000cc
 8000928:	20000220 	.word	0x20000220

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000954:	f7ff ffea 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	@ (8000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	@ (800099c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800097e:	f004 fbe3 	bl	8005148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fdbd 	bl	8000500 <main>
  bx  lr    
 8000986:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000988:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000994:	08005ae8 	.word	0x08005ae8
  ldr r2, =_sbss
 8000998:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800099c:	20000220 	.word	0x20000220

080009a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <HAL_Init+0x40>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_Init+0x40>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <HAL_Init+0x40>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f92b 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	200f      	movs	r0, #15
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fe52 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023c00 	.word	0x40023c00

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f943 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a24:	f000 f90b 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	200000d0 	.word	0x200000d0

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200000d0 	.word	0x200000d0

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	@ (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	@ 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff3e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d004      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e00c      	b.n	8000ce2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2205      	movs	r2, #5
 8000ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e159      	b.n	8000fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 8148 	bne.w	8000fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d005      	beq.n	8000d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d130      	bne.n	8000da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 0201 	and.w	r2, r3, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d017      	beq.n	8000de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d123      	bne.n	8000e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0203 	and.w	r2, r3, #3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a2 	beq.w	8000fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b57      	ldr	r3, [pc, #348]	@ (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a56      	ldr	r2, [pc, #344]	@ (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b54      	ldr	r3, [pc, #336]	@ (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e92:	4a52      	ldr	r2, [pc, #328]	@ (8000fdc <HAL_GPIO_Init+0x2ec>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	@ (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x202>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a48      	ldr	r2, [pc, #288]	@ (8000fe4 <HAL_GPIO_Init+0x2f4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x1fe>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a47      	ldr	r2, [pc, #284]	@ (8000fe8 <HAL_GPIO_Init+0x2f8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x1fa>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a46      	ldr	r2, [pc, #280]	@ (8000fec <HAL_GPIO_Init+0x2fc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x1f6>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a45      	ldr	r2, [pc, #276]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x1f2>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e008      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	f002 0203 	and.w	r2, r2, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f04:	4935      	ldr	r1, [pc, #212]	@ (8000fdc <HAL_GPIO_Init+0x2ec>)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f12:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f36:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f60:	4a24      	ldr	r2, [pc, #144]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	f67f aea2 	bls.w	8000d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3724      	adds	r7, #36	@ 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e267      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d075      	beq.n	8001102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001016:	4b88      	ldr	r3, [pc, #544]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b04      	cmp	r3, #4
 8001020:	d00c      	beq.n	800103c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4b85      	ldr	r3, [pc, #532]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800102a:	2b08      	cmp	r3, #8
 800102c:	d112      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102e:	4b82      	ldr	r3, [pc, #520]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800103a:	d10b      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b7e      	ldr	r3, [pc, #504]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d05b      	beq.n	8001100 <HAL_RCC_OscConfig+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d157      	bne.n	8001100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e242      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x74>
 800105e:	4b76      	ldr	r3, [pc, #472]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a75      	ldr	r2, [pc, #468]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e01d      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x98>
 8001076:	4b70      	ldr	r3, [pc, #448]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6f      	ldr	r2, [pc, #444]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b6d      	ldr	r3, [pc, #436]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a6c      	ldr	r2, [pc, #432]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e00b      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 8001090:	4b69      	ldr	r3, [pc, #420]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a68      	ldr	r2, [pc, #416]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b66      	ldr	r3, [pc, #408]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a65      	ldr	r2, [pc, #404]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fcde 	bl	8000a70 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fcda 	bl	8000a70 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	@ 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e207      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 80010d6:	e014      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcca 	bl	8000a70 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcc6 	bl	8000a70 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	@ 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1f3      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0xe8>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d063      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800110e:	4b4a      	ldr	r3, [pc, #296]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b47      	ldr	r3, [pc, #284]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001122:	2b08      	cmp	r3, #8
 8001124:	d11c      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b44      	ldr	r3, [pc, #272]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d116      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1c7      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4937      	ldr	r1, [pc, #220]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e03a      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001168:	4b34      	ldr	r3, [pc, #208]	@ (800123c <HAL_RCC_OscConfig+0x244>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fc7f 	bl	8000a70 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fc7b 	bl	8000a70 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e1a8      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4925      	ldr	r1, [pc, #148]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_RCC_OscConfig+0x244>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc5e 	bl	8000a70 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc5a 	bl	8000a70 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e187      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d036      	beq.n	8001250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d016      	beq.n	8001218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_RCC_OscConfig+0x248>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc3e 	bl	8000a70 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc3a 	bl	8000a70 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e167      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_RCC_OscConfig+0x240>)
 800120c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x200>
 8001216:	e01b      	b.n	8001250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_RCC_OscConfig+0x248>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fc27 	bl	8000a70 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	e00e      	b.n	8001244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fc23 	bl	8000a70 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d907      	bls.n	8001244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e150      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
 8001238:	40023800 	.word	0x40023800
 800123c:	42470000 	.word	0x42470000
 8001240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	4b88      	ldr	r3, [pc, #544]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1ea      	bne.n	8001226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8097 	beq.w	800138c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001262:	4b81      	ldr	r3, [pc, #516]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10f      	bne.n	800128e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b7d      	ldr	r3, [pc, #500]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a7c      	ldr	r2, [pc, #496]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40
 800127e:	4b7a      	ldr	r3, [pc, #488]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800128a:	2301      	movs	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	4b77      	ldr	r3, [pc, #476]	@ (800146c <HAL_RCC_OscConfig+0x474>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d118      	bne.n	80012cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129a:	4b74      	ldr	r3, [pc, #464]	@ (800146c <HAL_RCC_OscConfig+0x474>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a73      	ldr	r2, [pc, #460]	@ (800146c <HAL_RCC_OscConfig+0x474>)
 80012a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fbe3 	bl	8000a70 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ae:	f7ff fbdf 	bl	8000a70 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e10c      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	4b6a      	ldr	r3, [pc, #424]	@ (800146c <HAL_RCC_OscConfig+0x474>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2ea>
 80012d4:	4b64      	ldr	r3, [pc, #400]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d8:	4a63      	ldr	r2, [pc, #396]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e0:	e01c      	b.n	800131c <HAL_RCC_OscConfig+0x324>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x30c>
 80012ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6713      	str	r3, [r2, #112]	@ 0x70
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0x324>
 8001304:	4b58      	ldr	r3, [pc, #352]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001308:	4a57      	ldr	r2, [pc, #348]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001310:	4b55      	ldr	r3, [pc, #340]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001314:	4a54      	ldr	r2, [pc, #336]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001316:	f023 0304 	bic.w	r3, r3, #4
 800131a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d015      	beq.n	8001350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff fba4 	bl	8000a70 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132a:	e00a      	b.n	8001342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7ff fba0 	bl	8000a70 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e0cb      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001342:	4b49      	ldr	r3, [pc, #292]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0ee      	beq.n	800132c <HAL_RCC_OscConfig+0x334>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff fb8e 	bl	8000a70 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001356:	e00a      	b.n	800136e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f7ff fb8a 	bl	8000a70 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e0b5      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136e:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ee      	bne.n	8001358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001380:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	4a38      	ldr	r2, [pc, #224]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80a1 	beq.w	80014d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001396:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d05c      	beq.n	800145c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d141      	bne.n	800142e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <HAL_RCC_OscConfig+0x478>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb5e 	bl	8000a70 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fb5a 	bl	8000a70 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e087      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	3b01      	subs	r3, #1
 80013f0:	041b      	lsls	r3, r3, #16
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	491b      	ldr	r1, [pc, #108]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_RCC_OscConfig+0x478>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fb33 	bl	8000a70 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fb2f 	bl	8000a70 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e05c      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x416>
 800142c:	e054      	b.n	80014d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <HAL_RCC_OscConfig+0x478>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fb1c 	bl	8000a70 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fb18 	bl	8000a70 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e045      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_RCC_OscConfig+0x470>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x444>
 800145a:	e03d      	b.n	80014d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e038      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
 8001468:	40023800 	.word	0x40023800
 800146c:	40007000 	.word	0x40007000
 8001470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d028      	beq.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d121      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	429a      	cmp	r2, r3
 800149c:	d11a      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014a4:	4013      	ands	r3, r2
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d111      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ba:	085b      	lsrs	r3, r3, #1
 80014bc:	3b01      	subs	r3, #1
 80014be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d107      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0cc      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b68      	ldr	r3, [pc, #416]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d90c      	bls.n	8001524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b65      	ldr	r3, [pc, #404]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a58      	ldr	r2, [pc, #352]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a52      	ldr	r2, [pc, #328]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800155e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d044      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d119      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b3f      	ldr	r3, [pc, #252]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e06f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e067      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b37      	ldr	r3, [pc, #220]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4934      	ldr	r1, [pc, #208]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fa4a 	bl	8000a70 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff fa46 	bl	8000a70 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e04f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d20c      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f9aa 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00
 80016a4:	40023800 	.word	0x40023800
 80016a8:	080058b8 	.word	0x080058b8
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b8:	b090      	sub	sp, #64	@ 0x40
 80016ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016cc:	4b59      	ldr	r3, [pc, #356]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d00d      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x40>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	f200 80a1 	bhi.w	8001820 <HAL_RCC_GetSysClockFreq+0x16c>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x34>
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0x3a>
 80016e6:	e09b      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x184>)
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016ec:	e09b      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ee:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_GetSysClockFreq+0x188>)
 80016f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016f2:	e098      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x180>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d028      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x180>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	2200      	movs	r2, #0
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	627a      	str	r2, [r7, #36]	@ 0x24
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800171c:	2100      	movs	r1, #0
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_GetSysClockFreq+0x188>)
 8001720:	fb03 f201 	mul.w	r2, r3, r1
 8001724:	2300      	movs	r3, #0
 8001726:	fb00 f303 	mul.w	r3, r0, r3
 800172a:	4413      	add	r3, r2
 800172c:	4a43      	ldr	r2, [pc, #268]	@ (800183c <HAL_RCC_GetSysClockFreq+0x188>)
 800172e:	fba0 1202 	umull	r1, r2, r0, r2
 8001732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001734:	460a      	mov	r2, r1
 8001736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800173a:	4413      	add	r3, r2
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800173e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001740:	2200      	movs	r2, #0
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	61fa      	str	r2, [r7, #28]
 8001746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800174a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800174e:	f7fe fd41 	bl	80001d4 <__aeabi_uldivmod>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4613      	mov	r3, r2
 8001758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800175a:	e053      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175c:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x180>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	2200      	movs	r2, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	617a      	str	r2, [r7, #20]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800176e:	f04f 0b00 	mov.w	fp, #0
 8001772:	4652      	mov	r2, sl
 8001774:	465b      	mov	r3, fp
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	0159      	lsls	r1, r3, #5
 8001780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001784:	0150      	lsls	r0, r2, #5
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	ebb2 080a 	subs.w	r8, r2, sl
 800178e:	eb63 090b 	sbc.w	r9, r3, fp
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800179e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017a6:	ebb2 0408 	subs.w	r4, r2, r8
 80017aa:	eb63 0509 	sbc.w	r5, r3, r9
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	00eb      	lsls	r3, r5, #3
 80017b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017bc:	00e2      	lsls	r2, r4, #3
 80017be:	4614      	mov	r4, r2
 80017c0:	461d      	mov	r5, r3
 80017c2:	eb14 030a 	adds.w	r3, r4, sl
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	eb45 030b 	adc.w	r3, r5, fp
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017da:	4629      	mov	r1, r5
 80017dc:	028b      	lsls	r3, r1, #10
 80017de:	4621      	mov	r1, r4
 80017e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e4:	4621      	mov	r1, r4
 80017e6:	028a      	lsls	r2, r1, #10
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ee:	2200      	movs	r2, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	60fa      	str	r2, [r7, #12]
 80017f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017f8:	f7fe fcec 	bl	80001d4 <__aeabi_uldivmod>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4613      	mov	r3, r2
 8001802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x180>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	3301      	adds	r3, #1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800181e:	e002      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x184>)
 8001822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001828:	4618      	mov	r0, r3
 800182a:	3740      	adds	r7, #64	@ 0x40
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	00f42400 	.word	0x00f42400
 800183c:	017d7840 	.word	0x017d7840

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_RCC_GetHCLKFreq+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800185c:	f7ff fff0 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	0a9b      	lsrs	r3, r3, #10
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4903      	ldr	r1, [pc, #12]	@ (800187c <HAL_RCC_GetPCLK1Freq+0x24>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	080058c8 	.word	0x080058c8

08001880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001884:	f7ff ffdc 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0b5b      	lsrs	r3, r3, #13
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4903      	ldr	r1, [pc, #12]	@ (80018a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	080058c8 	.word	0x080058c8

080018a8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e033      	b.n	8001922 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7fe fefe 	bl	80006d0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fb61 	bl	8001fa4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001900:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001910:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d117      	bne.n	8001992 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d012      	beq.n	8001992 <HAL_USART_IRQHandler+0x66>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b22      	cmp	r3, #34	@ 0x22
 8001980:	d103      	bne.n	800198a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f9ba 	bl	8001cfc <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8001988:	e0e9      	b.n	8001b5e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fa3c 	bl	8001e08 <USART_TransmitReceive_IT>
      return;
 8001990:	e0e5      	b.n	8001b5e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80bb 	beq.w	8001b10 <HAL_USART_IRQHandler+0x1e4>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_USART_IRQHandler+0x84>
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80b0 	beq.w	8001b10 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_USART_IRQHandler+0xa4>
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <HAL_USART_IRQHandler+0xc4>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f043 0202 	orr.w	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_USART_IRQHandler+0xe4>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f043 0204 	orr.w	r2, r3, #4
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00f      	beq.n	8001a3a <HAL_USART_IRQHandler+0x10e>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <HAL_USART_IRQHandler+0x102>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f043 0208 	orr.w	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 808c 	beq.w	8001b5c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d011      	beq.n	8001a72 <HAL_USART_IRQHandler+0x146>
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b22      	cmp	r3, #34	@ 0x22
 8001a62:	d103      	bne.n	8001a6c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f949 	bl	8001cfc <USART_Receive_IT>
 8001a6a:	e002      	b.n	8001a72 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f9cb 	bl	8001e08 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7c:	2b40      	cmp	r3, #64	@ 0x40
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <HAL_USART_IRQHandler+0x16e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d031      	beq.n	8001afe <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f88c 	bl	8001bb8 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aaa:	2b40      	cmp	r3, #64	@ 0x40
 8001aac:	d123      	bne.n	8001af6 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001abc:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d013      	beq.n	8001aee <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aca:	4a26      	ldr	r2, [pc, #152]	@ (8001b64 <HAL_USART_IRQHandler+0x238>)
 8001acc:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f8e9 	bl	8000caa <HAL_DMA_Abort_IT>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d016      	beq.n	8001b0c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001aec:	e00e      	b.n	8001b0c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f858 	bl	8001ba4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001af4:	e00a      	b.n	8001b0c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f854 	bl	8001ba4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001afc:	e006      	b.n	8001b0c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f850 	bl	8001ba4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8001b0a:	e027      	b.n	8001b5c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8001b0c:	bf00      	nop
    return;
 8001b0e:	e025      	b.n	8001b5c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d012      	beq.n	8001b40 <HAL_USART_IRQHandler+0x214>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	d103      	bne.n	8001b38 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f873 	bl	8001c1c <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8001b36:	e012      	b.n	8001b5e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f965 	bl	8001e08 <USART_TransmitReceive_IT>
    return;
 8001b3e:	e00e      	b.n	8001b5e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_USART_IRQHandler+0x232>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8b1 	bl	8001cbc <USART_EndTransmit_IT>
    return;
 8001b5a:	e000      	b.n	8001b5e <HAL_USART_IRQHandler+0x232>
    return;
 8001b5c:	bf00      	nop
  }
}
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	08001bf5 	.word	0x08001bf5

08001b68 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8001bce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c00:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff ffc8 	bl	8001ba4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d13e      	bne.n	8001cae <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c38:	d114      	bne.n	8001c64 <USART_Transmit_IT+0x48>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d110      	bne.n	8001c64 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c56:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	1c9a      	adds	r2, r3, #2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c62:	e008      	b.n	8001c76 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	1c59      	adds	r1, r3, #1
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6251      	str	r1, [r2, #36]	@ 0x24
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4619      	mov	r1, r3
 8001c84:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10f      	bne.n	8001caa <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c98:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ca8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff3b 	bl	8001b68 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b22      	cmp	r3, #34	@ 0x22
 8001d0e:	d176      	bne.n	8001dfe <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d18:	d117      	bne.n	8001d4a <USART_Receive_IT+0x4e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	1c9a      	adds	r2, r3, #2
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d48:	e026      	b.n	8001d98 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5c:	d007      	beq.n	8001d6e <USART_Receive_IT+0x72>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10a      	bne.n	8001d7c <USART_Receive_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e008      	b.n	8001d8e <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d120      	bne.n	8001df2 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0220 	bic.w	r2, r2, #32
 8001dbe:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dce:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fec7 	bl	8001b7c <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e006      	b.n	8001e00 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	22ff      	movs	r2, #255	@ 0xff
 8001df8:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b32      	cmp	r3, #50	@ 0x32
 8001e1a:	f040 80bd 	bne.w	8001f98 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d03d      	beq.n	8001ea4 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	2b80      	cmp	r3, #128	@ 0x80
 8001e34:	d136      	bne.n	8001ea4 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e3e:	d114      	bne.n	8001e6a <USART_TransmitReceive_IT+0x62>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d110      	bne.n	8001e6a <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e5c:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	1c9a      	adds	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e68:	e008      	b.n	8001e7c <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6251      	str	r1, [r2, #36]	@ 0x24
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea2:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04c      	beq.n	8001f48 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d145      	bne.n	8001f48 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ec4:	d115      	bne.n	8001ef2 <USART_TransmitReceive_IT+0xea>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d111      	bne.n	8001ef2 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	1c9a      	adds	r2, r3, #2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ef0:	e023      	b.n	8001f3a <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001efa:	d007      	beq.n	8001f0c <USART_TransmitReceive_IT+0x104>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10b      	bne.n	8001f1c <USART_TransmitReceive_IT+0x114>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e009      	b.n	8001f30 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d120      	bne.n	8001f94 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0220 	bic.w	r2, r2, #32
 8001f60:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f70:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fe00 	bl	8001b90 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e002      	b.n	8001f9a <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa8:	b0c6      	sub	sp, #280	@ 0x118
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	f021 030c 	bic.w	r3, r1, #12
 8001fc8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001fda:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fde:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fe6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fec:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001fee:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ffc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001ffe:	431a      	orrs	r2, r3
 8002000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002004:	4313      	orrs	r3, r2
 8002006:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800200a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800200e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002018:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800201a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800202a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800202e:	f023 030c 	bic.w	r3, r3, #12
 8002032:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	431a      	orrs	r2, r3
 8002044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	431a      	orrs	r2, r3
 800204c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002050:	4313      	orrs	r3, r2
 8002052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002056:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800205a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002064:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8002078:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800207a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b8b      	ldr	r3, [pc, #556]	@ (80022b0 <USART_SetConfig+0x30c>)
 8002082:	429a      	cmp	r2, r3
 8002084:	d006      	beq.n	8002094 <USART_SetConfig+0xf0>
 8002086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b89      	ldr	r3, [pc, #548]	@ (80022b4 <USART_SetConfig+0x310>)
 800208e:	429a      	cmp	r2, r3
 8002090:	f040 8114 	bne.w	80022bc <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002094:	f7ff fbf4 	bl	8001880 <HAL_RCC_GetPCLK2Freq>
 8002098:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800209c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020a0:	2200      	movs	r2, #0
 80020a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80020a6:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80020aa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	1891      	adds	r1, r2, r2
 80020b4:	6739      	str	r1, [r7, #112]	@ 0x70
 80020b6:	415b      	adcs	r3, r3
 80020b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80020ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020be:	4621      	mov	r1, r4
 80020c0:	eb12 0801 	adds.w	r8, r2, r1
 80020c4:	4629      	mov	r1, r5
 80020c6:	eb43 0901 	adc.w	r9, r3, r1
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020de:	4690      	mov	r8, r2
 80020e0:	4699      	mov	r9, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	eb18 0303 	adds.w	r3, r8, r3
 80020e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80020ec:	462b      	mov	r3, r5
 80020ee:	eb49 0303 	adc.w	r3, r9, r3
 80020f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80020f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002102:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002106:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800210a:	460b      	mov	r3, r1
 800210c:	18db      	adds	r3, r3, r3
 800210e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002110:	4613      	mov	r3, r2
 8002112:	eb42 0303 	adc.w	r3, r2, r3
 8002116:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002118:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800211c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002120:	f7fe f858 	bl	80001d4 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <USART_SetConfig+0x314>)
 800212a:	fba3 2302 	umull	r2, r3, r3, r2
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	011c      	lsls	r4, r3, #4
 8002132:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002136:	2200      	movs	r2, #0
 8002138:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800213c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002140:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002144:	4642      	mov	r2, r8
 8002146:	464b      	mov	r3, r9
 8002148:	1891      	adds	r1, r2, r2
 800214a:	6639      	str	r1, [r7, #96]	@ 0x60
 800214c:	415b      	adcs	r3, r3
 800214e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002150:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002154:	4641      	mov	r1, r8
 8002156:	1851      	adds	r1, r2, r1
 8002158:	65b9      	str	r1, [r7, #88]	@ 0x58
 800215a:	4649      	mov	r1, r9
 800215c:	414b      	adcs	r3, r1
 800215e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800216c:	4659      	mov	r1, fp
 800216e:	00cb      	lsls	r3, r1, #3
 8002170:	4651      	mov	r1, sl
 8002172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002176:	4651      	mov	r1, sl
 8002178:	00ca      	lsls	r2, r1, #3
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	4603      	mov	r3, r0
 8002180:	4642      	mov	r2, r8
 8002182:	189b      	adds	r3, r3, r2
 8002184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002188:	464b      	mov	r3, r9
 800218a:	460a      	mov	r2, r1
 800218c:	eb42 0303 	adc.w	r3, r2, r3
 8002190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021a0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80021a8:	460b      	mov	r3, r1
 80021aa:	18db      	adds	r3, r3, r3
 80021ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80021ae:	4613      	mov	r3, r2
 80021b0:	eb42 0303 	adc.w	r3, r2, r3
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021ba:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021be:	f7fe f809 	bl	80001d4 <__aeabi_uldivmod>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <USART_SetConfig+0x314>)
 80021ca:	fba3 2301 	umull	r2, r3, r3, r1
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2264      	movs	r2, #100	@ 0x64
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	1acb      	subs	r3, r1, r3
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021de:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <USART_SetConfig+0x314>)
 80021e0:	fba3 2302 	umull	r2, r3, r3, r2
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021ec:	441c      	add	r4, r3
 80021ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80021fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	1891      	adds	r1, r2, r2
 8002206:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002208:	415b      	adcs	r3, r3
 800220a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800220c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002210:	4641      	mov	r1, r8
 8002212:	1851      	adds	r1, r2, r1
 8002214:	6439      	str	r1, [r7, #64]	@ 0x40
 8002216:	4649      	mov	r1, r9
 8002218:	414b      	adcs	r3, r1
 800221a:	647b      	str	r3, [r7, #68]	@ 0x44
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8002228:	4659      	mov	r1, fp
 800222a:	00cb      	lsls	r3, r1, #3
 800222c:	4651      	mov	r1, sl
 800222e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002232:	4651      	mov	r1, sl
 8002234:	00ca      	lsls	r2, r1, #3
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	4603      	mov	r3, r0
 800223c:	4642      	mov	r2, r8
 800223e:	189b      	adds	r3, r3, r2
 8002240:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002244:	464b      	mov	r3, r9
 8002246:	460a      	mov	r2, r1
 8002248:	eb42 0303 	adc.w	r3, r2, r3
 800224c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800225c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002264:	460b      	mov	r3, r1
 8002266:	18db      	adds	r3, r3, r3
 8002268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800226a:	4613      	mov	r3, r2
 800226c:	eb42 0303 	adc.w	r3, r2, r3
 8002270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002272:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800227a:	f7fd ffab 	bl	80001d4 <__aeabi_uldivmod>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <USART_SetConfig+0x314>)
 8002284:	fba3 1302 	umull	r1, r3, r3, r2
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	2164      	movs	r1, #100	@ 0x64
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	3332      	adds	r3, #50	@ 0x32
 8002296:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <USART_SetConfig+0x314>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	f003 0207 	and.w	r2, r3, #7
 80022a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4422      	add	r2, r4
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e109      	b.n	80024c2 <USART_SetConfig+0x51e>
 80022ae:	bf00      	nop
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40011400 	.word	0x40011400
 80022b8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022bc:	f7ff facc 	bl	8001858 <HAL_RCC_GetPCLK1Freq>
 80022c0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80022c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022c8:	2200      	movs	r2, #0
 80022ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022ce:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80022d2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80022d6:	4642      	mov	r2, r8
 80022d8:	464b      	mov	r3, r9
 80022da:	1891      	adds	r1, r2, r2
 80022dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80022de:	415b      	adcs	r3, r3
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022e6:	4641      	mov	r1, r8
 80022e8:	1854      	adds	r4, r2, r1
 80022ea:	4649      	mov	r1, r9
 80022ec:	eb43 0501 	adc.w	r5, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	00eb      	lsls	r3, r5, #3
 80022fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	4643      	mov	r3, r8
 8002306:	18e3      	adds	r3, r4, r3
 8002308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800230c:	464b      	mov	r3, r9
 800230e:	eb45 0303 	adc.w	r3, r5, r3
 8002312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002322:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002326:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800232a:	460b      	mov	r3, r1
 800232c:	18db      	adds	r3, r3, r3
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002330:	4613      	mov	r3, r2
 8002332:	eb42 0303 	adc.w	r3, r2, r3
 8002336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800233c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002340:	f7fd ff48 	bl	80001d4 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <USART_SetConfig+0x52c>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	011c      	lsls	r4, r3, #4
 8002352:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800235c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002360:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	6239      	str	r1, [r7, #32]
 800236c:	415b      	adcs	r3, r3
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002370:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002374:	4641      	mov	r1, r8
 8002376:	eb12 0a01 	adds.w	sl, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb43 0b01 	adc.w	fp, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800238c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002394:	4692      	mov	sl, r2
 8002396:	469b      	mov	fp, r3
 8002398:	4643      	mov	r3, r8
 800239a:	eb1a 0303 	adds.w	r3, sl, r3
 800239e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023a2:	464b      	mov	r3, r9
 80023a4:	eb4b 0303 	adc.w	r3, fp, r3
 80023a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023bc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80023c0:	460b      	mov	r3, r1
 80023c2:	18db      	adds	r3, r3, r3
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	4613      	mov	r3, r2
 80023c8:	eb42 0303 	adc.w	r3, r2, r3
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80023d6:	f7fd fefd 	bl	80001d4 <__aeabi_uldivmod>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <USART_SetConfig+0x52c>)
 80023e2:	fba3 2301 	umull	r2, r3, r3, r1
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2264      	movs	r2, #100	@ 0x64
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	1acb      	subs	r3, r1, r3
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023f6:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <USART_SetConfig+0x52c>)
 80023f8:	fba3 2302 	umull	r2, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002404:	441c      	add	r4, r3
 8002406:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	1891      	adds	r1, r2, r2
 800241e:	6139      	str	r1, [r7, #16]
 8002420:	415b      	adcs	r3, r3
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002428:	4641      	mov	r1, r8
 800242a:	1851      	adds	r1, r2, r1
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4649      	mov	r1, r9
 8002430:	414b      	adcs	r3, r1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002440:	4659      	mov	r1, fp
 8002442:	00cb      	lsls	r3, r1, #3
 8002444:	4651      	mov	r1, sl
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	4651      	mov	r1, sl
 800244c:	00ca      	lsls	r2, r1, #3
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	4603      	mov	r3, r0
 8002454:	4642      	mov	r2, r8
 8002456:	189b      	adds	r3, r3, r2
 8002458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800245c:	464b      	mov	r3, r9
 800245e:	460a      	mov	r2, r1
 8002460:	eb42 0303 	adc.w	r3, r2, r3
 8002464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002472:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002474:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002478:	460b      	mov	r3, r1
 800247a:	18db      	adds	r3, r3, r3
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	eb42 0303 	adc.w	r3, r2, r3
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800248a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800248e:	f7fd fea1 	bl	80001d4 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <USART_SetConfig+0x52c>)
 8002498:	fba3 1302 	umull	r1, r3, r3, r2
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	2164      	movs	r1, #100	@ 0x64
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	3332      	adds	r3, #50	@ 0x32
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <USART_SetConfig+0x52c>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	f003 0207 	and.w	r2, r3, #7
 80024b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4422      	add	r2, r4
 80024be:	609a      	str	r2, [r3, #8]
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ce:	bf00      	nop
 80024d0:	51eb851f 	.word	0x51eb851f

080024d4 <gapcom_create>:
/************************
 *** Public functions ***
 ************************/

gapcom_handle_t* gapcom_create()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
    gapcom_handle_t* handle;
    bool status;

    handle = calloc(1, sizeof(*handle));
 80024da:	f243 3114 	movw	r1, #13076	@ 0x3314
 80024de:	2001      	movs	r0, #1
 80024e0:	f002 fb04 	bl	8004aec <calloc>
 80024e4:	4603      	mov	r3, r0
 80024e6:	607b      	str	r3, [r7, #4]
    if (!handle)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <gapcom_create+0x4e>
        goto end;

    status = TF_InitStatic(&handle->tf_handle, TF_MASTER);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 ffe6 	bl	80044c4 <TF_InitStatic>
 80024f8:	4603      	mov	r3, r0
 80024fa:	70fb      	strb	r3, [r7, #3]
    if (!status)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f083 0301 	eor.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <gapcom_create+0x40>
        goto free_handle;

    /* All libgapcom instances use the same generic listener */
    TF_AddGenericListener(&handle->tf_handle, gapcom_tf_id_listener);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4909      	ldr	r1, [pc, #36]	@ (8002530 <gapcom_create+0x5c>)
 800250c:	4618      	mov	r0, r3
 800250e:	f002 f803 	bl	8004518 <TF_AddGenericListener>

    goto end;
 8002512:	e007      	b.n	8002524 <gapcom_create+0x50>
        goto free_handle;
 8002514:	bf00      	nop

free_handle:
    free(handle);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f002 fb04 	bl	8004b24 <free>
    handle = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	e000      	b.n	8002524 <gapcom_create+0x50>
        goto end;
 8002522:	bf00      	nop
end:
    return handle;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	08002535 	.word	0x08002535

08002534 <gapcom_tf_id_listener>:
            log_com("Failed to decode protobuf for message type %s", #MsgFieldsType); \
        } \
    } while (0)

TF_Result gapcom_tf_id_listener(TinyFrame* tf_handle, TF_Msg* tf_msg)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b0a3      	sub	sp, #140	@ 0x8c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6178      	str	r0, [r7, #20]
 800253c:	6139      	str	r1, [r7, #16]
    gapcom_callback_t callback;
    pb_istream_t stream;
    bool success;

    /* Check if there is any user-defined callback to be called */
    handle = container_of(tf_handle, gapcom_handle_t, tf_handle);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002544:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    callback = handle->user_callback[tf_msg->type];
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	88db      	ldrh	r3, [r3, #6]
 8002550:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002554:	f603 039e 	addw	r3, r3, #2206	@ 0x89e
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (!callback)
 8002560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81e0 	beq.w	8002928 <gapcom_tf_id_listener+0x3f4>
        goto end;

    /* Decode Protocol Buffer payload */
    stream = pb_istream_from_buffer(tf_handle->data, tf_handle->len);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f103 011a 	add.w	r1, r3, #26
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	8b1b      	ldrh	r3, [r3, #24]
 8002572:	461a      	mov	r2, r3
 8002574:	463b      	mov	r3, r7
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fab0 	bl	8002adc <pb_istream_from_buffer>
 800257c:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002580:	463b      	mov	r3, r7
 8002582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (tf_msg->type == GAPCOM_MSG_PING_REQ)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	88db      	ldrh	r3, [r3, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d11a      	bne.n	80025c6 <gapcom_tf_id_listener+0x92>
    {
        GAPPingReq req = GAPPingReq_init_zero;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingReq_fields, &req);
 8002596:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800259a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800259e:	49b9      	ldr	r1, [pc, #740]	@ (8002884 <gapcom_tf_id_listener+0x350>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fbd5 	bl	8003d50 <pb_decode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80025ac:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 81bc 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 80025b6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80025ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025bc:	4611      	mov	r1, r2
 80025be:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80025c2:	4798      	blx	r3
 80025c4:	e1b3      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_PING_RESP)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	88db      	ldrh	r3, [r3, #6]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d11a      	bne.n	8002604 <gapcom_tf_id_listener+0xd0>
    {
        GAPPingResp resp = GAPPingResp_init_zero;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPingResp_fields, &resp);
 80025d4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80025d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025dc:	49aa      	ldr	r1, [pc, #680]	@ (8002888 <gapcom_tf_id_listener+0x354>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 fbb6 	bl	8003d50 <pb_decode>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80025ea:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 819d 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 80025f4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80025f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025fa:	4611      	mov	r1, r2
 80025fc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002600:	4798      	blx	r3
 8002602:	e194      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_REQ)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	88db      	ldrh	r3, [r3, #6]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d11a      	bne.n	8002642 <gapcom_tf_id_listener+0x10e>
    {
        GAPSetLogVerbosityReq req = GAPSetLogVerbosityReq_init_zero;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityReq_fields, &req);
 8002612:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002616:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800261a:	499c      	ldr	r1, [pc, #624]	@ (800288c <gapcom_tf_id_listener+0x358>)
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fb97 	bl	8003d50 <pb_decode>
 8002622:	4603      	mov	r3, r0
 8002624:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002628:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 817e 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 8002632:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002636:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002638:	4611      	mov	r1, r2
 800263a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800263e:	4798      	blx	r3
 8002640:	e175      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_LOG_VERBOSITY_RESP)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	88db      	ldrh	r3, [r3, #6]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d11a      	bne.n	8002680 <gapcom_tf_id_listener+0x14c>
    {
        GAPSetLogVerbosityResp resp = GAPSetLogVerbosityResp_init_zero;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetLogVerbosityResp_fields, &resp);
 8002650:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002654:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002658:	498d      	ldr	r1, [pc, #564]	@ (8002890 <gapcom_tf_id_listener+0x35c>)
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fb78 	bl	8003d50 <pb_decode>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002666:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 815f 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 8002670:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002676:	4611      	mov	r1, r2
 8002678:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800267c:	4798      	blx	r3
 800267e:	e156      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_REQ)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	88db      	ldrh	r3, [r3, #6]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11a      	bne.n	80026be <gapcom_tf_id_listener+0x18a>
    {
        GAPSetGyroscopeReq req = GAPSetGyroscopeReq_init_zero;
 8002688:	2300      	movs	r3, #0
 800268a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeReq_fields, &req);
 800268e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002692:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002696:	497f      	ldr	r1, [pc, #508]	@ (8002894 <gapcom_tf_id_listener+0x360>)
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fb59 	bl	8003d50 <pb_decode>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80026a4:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8140 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 80026ae:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80026b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026b4:	4611      	mov	r1, r2
 80026b6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80026ba:	4798      	blx	r3
 80026bc:	e137      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_GYROSCOPE_RESP)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	88db      	ldrh	r3, [r3, #6]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d11a      	bne.n	80026fc <gapcom_tf_id_listener+0x1c8>
    {
        GAPSetGyroscopeResp resp = GAPSetGyroscopeResp_init_zero;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetGyroscopeResp_fields, &resp);
 80026cc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80026d0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026d4:	4970      	ldr	r1, [pc, #448]	@ (8002898 <gapcom_tf_id_listener+0x364>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fb3a 	bl	8003d50 <pb_decode>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80026e2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8121 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 80026ec:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80026f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026f2:	4611      	mov	r1, r2
 80026f4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80026f8:	4798      	blx	r3
 80026fa:	e118      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_REQ)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	88db      	ldrh	r3, [r3, #6]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d11d      	bne.n	8002740 <gapcom_tf_id_listener+0x20c>
    {
        GAPSetVersionReq req = GAPSetVersionReq_init_zero;
 8002704:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionReq_fields, &req);
 8002710:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002714:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002718:	4960      	ldr	r1, [pc, #384]	@ (800289c <gapcom_tf_id_listener+0x368>)
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fb18 	bl	8003d50 <pb_decode>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002726:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80ff 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 8002730:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002736:	4611      	mov	r1, r2
 8002738:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800273c:	4798      	blx	r3
 800273e:	e0f6      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SET_VERSION_RESP)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	88db      	ldrh	r3, [r3, #6]
 8002744:	2b07      	cmp	r3, #7
 8002746:	d11a      	bne.n	800277e <gapcom_tf_id_listener+0x24a>
    {
        GAPSetVersionResp resp = GAPSetVersionResp_init_zero;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSetVersionResp_fields, &resp);
 800274e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002752:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002756:	4952      	ldr	r1, [pc, #328]	@ (80028a0 <gapcom_tf_id_listener+0x36c>)
 8002758:	4618      	mov	r0, r3
 800275a:	f001 faf9 	bl	8003d50 <pb_decode>
 800275e:	4603      	mov	r3, r0
 8002760:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002764:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80e0 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 800276e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002774:	4611      	mov	r1, r2
 8002776:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800277a:	4798      	blx	r3
 800277c:	e0d7      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_REQ)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	88db      	ldrh	r3, [r3, #6]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11a      	bne.n	80027bc <gapcom_tf_id_listener+0x288>
    {
        GAPGetVersionReq req = GAPGetVersionReq_init_zero;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionReq_fields, &req);
 800278c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002790:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002794:	4943      	ldr	r1, [pc, #268]	@ (80028a4 <gapcom_tf_id_listener+0x370>)
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fada 	bl	8003d50 <pb_decode>
 800279c:	4603      	mov	r3, r0
 800279e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80027a2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80c1 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 80027ac:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80027b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027b2:	4611      	mov	r1, r2
 80027b4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80027b8:	4798      	blx	r3
 80027ba:	e0b8      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_GET_VERSION_RESP)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	88db      	ldrh	r3, [r3, #6]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d120      	bne.n	8002806 <gapcom_tf_id_listener+0x2d2>
    {
        GAPGetVersionResp resp = GAPGetVersionResp_init_zero;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80027ca:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPGetVersionResp_fields, &resp);
 80027d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80027da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80027de:	4932      	ldr	r1, [pc, #200]	@ (80028a8 <gapcom_tf_id_listener+0x374>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fab5 	bl	8003d50 <pb_decode>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80027ec:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 809c 	beq.w	800292e <gapcom_tf_id_listener+0x3fa>
 80027f6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80027fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027fc:	4611      	mov	r1, r2
 80027fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002802:	4798      	blx	r3
 8002804:	e093      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_REQ)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	88db      	ldrh	r3, [r3, #6]
 800280a:	2b0a      	cmp	r3, #10
 800280c:	d119      	bne.n	8002842 <gapcom_tf_id_listener+0x30e>
    {
        GAPSelftestReq req = GAPSelftestReq_init_zero;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestReq_fields, &req);
 8002814:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002818:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800281c:	4923      	ldr	r1, [pc, #140]	@ (80028ac <gapcom_tf_id_listener+0x378>)
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fa96 	bl	8003d50 <pb_decode>
 8002824:	4603      	mov	r3, r0
 8002826:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800282a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07d      	beq.n	800292e <gapcom_tf_id_listener+0x3fa>
 8002832:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002836:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002838:	4611      	mov	r1, r2
 800283a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800283e:	4798      	blx	r3
 8002840:	e075      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_SELFTEST_RESP)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	88db      	ldrh	r3, [r3, #6]
 8002846:	2b0b      	cmp	r3, #11
 8002848:	d134      	bne.n	80028b4 <gapcom_tf_id_listener+0x380>
    {
        GAPSelftestResp resp = GAPSelftestResp_init_zero;
 800284a:	f107 0320 	add.w	r3, r7, #32
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	711a      	strb	r2, [r3, #4]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPSelftestResp_fields, &resp);
 8002854:	f107 0220 	add.w	r2, r7, #32
 8002858:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800285c:	4914      	ldr	r1, [pc, #80]	@ (80028b0 <gapcom_tf_id_listener+0x37c>)
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fa76 	bl	8003d50 <pb_decode>
 8002864:	4603      	mov	r3, r0
 8002866:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800286a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800286e:	2b00      	cmp	r3, #0
 8002870:	d05d      	beq.n	800292e <gapcom_tf_id_listener+0x3fa>
 8002872:	f107 0220 	add.w	r2, r7, #32
 8002876:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002878:	4611      	mov	r1, r2
 800287a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800287e:	4798      	blx	r3
 8002880:	e055      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
 8002882:	bf00      	nop
 8002884:	080058d8 	.word	0x080058d8
 8002888:	080058fc 	.word	0x080058fc
 800288c:	08005920 	.word	0x08005920
 8002890:	08005944 	.word	0x08005944
 8002894:	08005968 	.word	0x08005968
 8002898:	0800598c 	.word	0x0800598c
 800289c:	080059b4 	.word	0x080059b4
 80028a0:	080059d8 	.word	0x080059d8
 80028a4:	080059f8 	.word	0x080059f8
 80028a8:	08005a24 	.word	0x08005a24
 80028ac:	08005a44 	.word	0x08005a44
 80028b0:	08005a78 	.word	0x08005a78
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_REQ)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	88db      	ldrh	r3, [r3, #6]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d118      	bne.n	80028ee <gapcom_tf_id_listener+0x3ba>
    {
        GAPPowerSaveModeReq req = GAPPowerSaveModeReq_init_zero;
 80028bc:	2300      	movs	r3, #0
 80028be:	773b      	strb	r3, [r7, #28]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeReq_fields, &req);
 80028c0:	f107 021c 	add.w	r2, r7, #28
 80028c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80028c8:	491b      	ldr	r1, [pc, #108]	@ (8002938 <gapcom_tf_id_listener+0x404>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fa40 	bl	8003d50 <pb_decode>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80028d6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d027      	beq.n	800292e <gapcom_tf_id_listener+0x3fa>
 80028de:	f107 021c 	add.w	r2, r7, #28
 80028e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e4:	4611      	mov	r1, r2
 80028e6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80028ea:	4798      	blx	r3
 80028ec:	e01f      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    }
    else if (tf_msg->type == GAPCOM_MSG_POWER_SAVE_MODE_RESP)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	88db      	ldrh	r3, [r3, #6]
 80028f2:	2b0d      	cmp	r3, #13
 80028f4:	d11a      	bne.n	800292c <gapcom_tf_id_listener+0x3f8>
    {
        GAPPowerSaveModeResp resp = GAPPowerSaveModeResp_init_zero;
 80028f6:	2300      	movs	r3, #0
 80028f8:	763b      	strb	r3, [r7, #24]
        GAPCOM_TF_ID_LISTENER_CASE(success, handle, callback, &stream, GAPPowerSaveModeResp_fields, &resp);
 80028fa:	f107 0218 	add.w	r2, r7, #24
 80028fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002902:	490e      	ldr	r1, [pc, #56]	@ (800293c <gapcom_tf_id_listener+0x408>)
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fa23 	bl	8003d50 <pb_decode>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002910:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <gapcom_tf_id_listener+0x3fa>
 8002918:	f107 0218 	add.w	r2, r7, #24
 800291c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800291e:	4611      	mov	r1, r2
 8002920:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002924:	4798      	blx	r3
 8002926:	e002      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
        goto end;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <gapcom_tf_id_listener+0x3fa>
    else
    {
        log_com("Unsupported protobuf message type %u; ignoring", tf_msg->type);
    }

end:
 800292c:	bf00      	nop
    return TF_STAY;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	378c      	adds	r7, #140	@ 0x8c
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	08005a9c 	.word	0x08005a9c
 800293c:	08005ac0 	.word	0x08005ac0

08002940 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6979      	ldr	r1, [r7, #20]
 8002968:	68b8      	ldr	r0, [r7, #8]
 800296a:	f002 fc14 	bl	8005196 <memcpy>
    }
    
    return true;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <pb_read+0x16>
        return true;
 800298a:	2301      	movs	r3, #1
 800298c:	e05f      	b.n	8002a4e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d123      	bne.n	80029dc <pb_read+0x64>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2f      	ldr	r2, [pc, #188]	@ (8002a58 <pb_read+0xe0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01e      	beq.n	80029dc <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800299e:	e011      	b.n	80029c4 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	2210      	movs	r2, #16
 80029a6:	4619      	mov	r1, r3
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ffe5 	bl	8002978 <pb_read>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <pb_read+0x46>
				return false;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e047      	b.n	8002a4e <pb_read+0xd6>
			
			count -= 16;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3b10      	subs	r3, #16
 80029c2:	607b      	str	r3, [r7, #4]
		while (count > 16)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d8ea      	bhi.n	80029a0 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4619      	mov	r1, r3
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff ffd0 	bl	8002978 <pb_read>
 80029d8:	4603      	mov	r3, r0
 80029da:	e038      	b.n	8002a4e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90b      	bls.n	80029fe <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <pb_read+0x7c>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	e000      	b.n	80029f6 <pb_read+0x7e>
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <pb_read+0xe4>)
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	60d3      	str	r3, [r2, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	e027      	b.n	8002a4e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	4798      	blx	r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <pb_read+0xac>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	e000      	b.n	8002a26 <pb_read+0xae>
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <pb_read+0xe8>)
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	60d3      	str	r3, [r2, #12]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e00f      	b.n	8002a4e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d903      	bls.n	8002a40 <pb_read+0xc8>
        stream->bytes_left = 0;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	e005      	b.n	8002a4c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]

    return true;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	08002941 	.word	0x08002941
 8002a5c:	080054c0 	.word	0x080054c0
 8002a60:	080054d0 	.word	0x080054d0

08002a64 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <pb_readbyte+0x20>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	e000      	b.n	8002a86 <pb_readbyte+0x22>
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <pb_readbyte+0x70>)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e01d      	b.n	8002aca <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <pb_readbyte+0x50>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	e000      	b.n	8002ab6 <pb_readbyte+0x52>
 8002ab4:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <pb_readbyte+0x74>)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	60d3      	str	r3, [r2, #12]
 8002aba:	2300      	movs	r3, #0
 8002abc:	e005      	b.n	8002aca <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
    
    return true;    
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	080054c0 	.word	0x080054c0
 8002ad8:	080054d0 	.word	0x080054d0

08002adc <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8002adc:	b490      	push	{r4, r7}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <pb_istream_from_buffer+0x38>)
 8002aea:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	461c      	mov	r4, r3
 8002b00:	f107 0318 	add.w	r3, r7, #24
 8002b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	3728      	adds	r7, #40	@ 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc90      	pop	{r4, r7}
 8002b12:	4770      	bx	lr
 8002b14:	08002941 	.word	0x08002941

08002b18 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8002b24:	f107 0315 	add.w	r3, r7, #21
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7ff ff9a 	bl	8002a64 <pb_readbyte>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e084      	b.n	8002c5e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8002b54:	7d7b      	ldrb	r3, [r7, #21]
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db02      	blt.n	8002b62 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8002b5c:	7d7b      	ldrb	r3, [r7, #21]
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	e079      	b.n	8002c56 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8002b62:	2307      	movs	r3, #7
 8002b64:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8002b66:	7d7b      	ldrb	r3, [r7, #21]
 8002b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8002b6e:	f107 0315 	add.w	r3, r7, #21
 8002b72:	4619      	mov	r1, r3
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ff75 	bl	8002a64 <pb_readbyte>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <pb_decode_varint32_eof+0x72>
                return false;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e069      	b.n	8002c5e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b1f      	cmp	r3, #31
 8002b8e:	d92f      	bls.n	8002bf0 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b94:	d801      	bhi.n	8002b9a <pb_decode_varint32_eof+0x82>
 8002b96:	23ff      	movs	r3, #255	@ 0xff
 8002b98:	e000      	b.n	8002b9c <pb_decode_varint32_eof+0x84>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8002b9e:	7d7b      	ldrb	r3, [r7, #21]
 8002ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da05      	bge.n	8002bba <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8002bae:	7d7b      	ldrb	r3, [r7, #21]
 8002bb0:	7dfa      	ldrb	r2, [r7, #23]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d101      	bne.n	8002bba <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <pb_decode_varint32_eof+0xa4>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75bb      	strb	r3, [r7, #22]
 8002bbe:	7dbb      	ldrb	r3, [r7, #22]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bca:	d805      	bhi.n	8002bd8 <pb_decode_varint32_eof+0xc0>
 8002bcc:	7dbb      	ldrb	r3, [r7, #22]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d037      	beq.n	8002c48 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <pb_decode_varint32_eof+0xce>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	e000      	b.n	8002be8 <pb_decode_varint32_eof+0xd0>
 8002be6:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <pb_decode_varint32_eof+0x150>)
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	60d3      	str	r3, [r2, #12]
 8002bec:	2300      	movs	r3, #0
 8002bee:	e036      	b.n	8002c5e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b1c      	cmp	r3, #28
 8002bf4:	d11f      	bne.n	8002c36 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8002bf6:	7d7b      	ldrb	r3, [r7, #21]
 8002bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <pb_decode_varint32_eof+0x10a>
 8002c00:	7d7b      	ldrb	r3, [r7, #21]
 8002c02:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8002c06:	2b78      	cmp	r3, #120	@ 0x78
 8002c08:	d00b      	beq.n	8002c22 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <pb_decode_varint32_eof+0x100>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	e000      	b.n	8002c1a <pb_decode_varint32_eof+0x102>
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <pb_decode_varint32_eof+0x150>)
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	60d3      	str	r3, [r2, #12]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e01d      	b.n	8002c5e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8002c22:	7d7b      	ldrb	r3, [r7, #21]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e008      	b.n	8002c48 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8002c36:	7d7b      	ldrb	r3, [r7, #21]
 8002c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	3307      	adds	r3, #7
 8002c4c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8002c4e:	7d7b      	ldrb	r3, [r7, #21]
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db8b      	blt.n	8002b6e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	601a      	str	r2, [r3, #0]
   return true;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	080054dc 	.word	0x080054dc

08002c6c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8002c76:	2200      	movs	r2, #0
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff4c 	bl	8002b18 <pb_decode_varint32_eof>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b08a      	sub	sp, #40	@ 0x28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8002ca8:	f107 0317 	add.w	r3, r7, #23
 8002cac:	4619      	mov	r1, r3
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fed8 	bl	8002a64 <pb_readbyte>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <pb_decode_varint+0x38>
            return false;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e041      	b.n	8002d48 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002cc8:	d910      	bls.n	8002cec <pb_decode_varint+0x60>
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <pb_decode_varint+0x56>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	e000      	b.n	8002ce4 <pb_decode_varint+0x58>
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d54 <pb_decode_varint+0xc8>)
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	60d3      	str	r3, [r2, #12]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e02d      	b.n	8002d48 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8002cfc:	f04f 0900 	mov.w	r9, #0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	f1a3 0120 	sub.w	r1, r3, #32
 8002d06:	f1c3 0220 	rsb	r2, r3, #32
 8002d0a:	fa09 f503 	lsl.w	r5, r9, r3
 8002d0e:	fa08 f101 	lsl.w	r1, r8, r1
 8002d12:	430d      	orrs	r5, r1
 8002d14:	fa28 f202 	lsr.w	r2, r8, r2
 8002d18:	4315      	orrs	r5, r2
 8002d1a:	fa08 f403 	lsl.w	r4, r8, r3
 8002d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d22:	ea42 0a04 	orr.w	sl, r2, r4
 8002d26:	ea43 0b05 	orr.w	fp, r3, r5
 8002d2a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	3307      	adds	r3, #7
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	dbb5      	blt.n	8002ca8 <pb_decode_varint+0x1c>
    
    *dest = result;
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d42:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3728      	adds	r7, #40	@ 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	080054dc 	.word	0x080054dc

08002d58 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8002d60:	f107 030f 	add.w	r3, r7, #15
 8002d64:	2201      	movs	r2, #1
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fe05 	bl	8002978 <pb_read>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <pb_skip_varint+0x26>
            return false;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e004      	b.n	8002d88 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	dbec      	blt.n	8002d60 <pb_skip_varint+0x8>
    return true;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff64 	bl	8002c6c <pb_decode_varint32>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f083 0301 	eor.w	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <pb_skip_string+0x24>
        return false;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e006      	b.n	8002dc2 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	2100      	movs	r1, #0
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fddc 	bl	8002978 <pb_read>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff fe90 	bl	8002b18 <pb_decode_varint32_eof>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <pb_decode_tag+0x3e>
    {
        return false;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e00b      	b.n	8002e20 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
    return true;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d826      	bhi.n	8002e88 <pb_skip_field+0x60>
 8002e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <pb_skip_field+0x18>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e59 	.word	0x08002e59
 8002e44:	08002e63 	.word	0x08002e63
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	08002e89 	.word	0x08002e89
 8002e50:	08002e89 	.word	0x08002e89
 8002e54:	08002e7b 	.word	0x08002e7b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff7d 	bl	8002d58 <pb_skip_varint>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	e01d      	b.n	8002e9e <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8002e62:	2208      	movs	r2, #8
 8002e64:	2100      	movs	r1, #0
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fd86 	bl	8002978 <pb_read>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	e016      	b.n	8002e9e <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff8d 	bl	8002d90 <pb_skip_string>
 8002e76:	4603      	mov	r3, r0
 8002e78:	e011      	b.n	8002e9e <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fd7a 	bl	8002978 <pb_read>
 8002e84:	4603      	mov	r3, r0
 8002e86:	e00a      	b.n	8002e9e <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <pb_skip_field+0x6e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	e000      	b.n	8002e98 <pb_skip_field+0x70>
 8002e96:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <pb_skip_field+0x80>)
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	60d3      	str	r3, [r2, #12]
 8002e9c:	2300      	movs	r3, #0
    }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	080054ec 	.word	0x080054ec

08002eac <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d03f      	beq.n	8002f48 <read_raw_value+0x9c>
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	dc47      	bgt.n	8002f5c <read_raw_value+0xb0>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <read_raw_value+0x2a>
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d02f      	beq.n	8002f34 <read_raw_value+0x88>
 8002ed4:	e042      	b.n	8002f5c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d20b      	bcs.n	8002f08 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <read_raw_value+0x52>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	e000      	b.n	8002f00 <read_raw_value+0x54>
 8002efe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <read_raw_value+0xd0>)
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	60d3      	str	r3, [r2, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	e034      	b.n	8002f72 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8002f08:	2201      	movs	r2, #1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fd33 	bl	8002978 <pb_read>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <read_raw_value+0x76>
                    return false;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e027      	b.n	8002f72 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dbd5      	blt.n	8002edc <read_raw_value+0x30>
            return true;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e01e      	b.n	8002f72 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2208      	movs	r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff fd1a 	bl	8002978 <pb_read>
 8002f44:	4603      	mov	r3, r0
 8002f46:	e014      	b.n	8002f72 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8002f4e:	2204      	movs	r2, #4
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fd10 	bl	8002978 <pb_read>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	e00a      	b.n	8002f72 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <read_raw_value+0xbe>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	e000      	b.n	8002f6c <read_raw_value+0xc0>
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <read_raw_value+0xd4>)
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	2300      	movs	r3, #0
    }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	080054dc 	.word	0x080054dc
 8002f80:	080054ec 	.word	0x080054ec

08002f84 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8002f8e:	f107 030c 	add.w	r3, r7, #12
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fe69 	bl	8002c6c <pb_decode_varint32>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <pb_make_string_substream+0x26>
        return false;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e020      	b.n	8002fec <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4614      	mov	r4, r2
 8002fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d20b      	bcs.n	8002fd8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <pb_make_string_substream+0x4a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	e000      	b.n	8002fd0 <pb_make_string_substream+0x4c>
 8002fce:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <pb_make_string_substream+0x70>)
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	60d3      	str	r3, [r2, #12]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e009      	b.n	8002fec <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
    return true;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	08005500 	.word	0x08005500

08002ff8 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	461a      	mov	r2, r3
 8003010:	2100      	movs	r1, #0
 8003012:	6838      	ldr	r0, [r7, #0]
 8003014:	f7ff fcb0 	bl	8002978 <pb_read>
 8003018:	4603      	mov	r3, r0
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <pb_close_string_substream+0x30>
            return false;
 8003024:	2300      	movs	r3, #0
 8003026:	e008      	b.n	800303a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003038:	2301      	movs	r3, #1
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	460b      	mov	r3, r1
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7d9b      	ldrb	r3, [r3, #22]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	2b0b      	cmp	r3, #11
 800305c:	f200 80d4 	bhi.w	8003208 <decode_basic_field+0x1c4>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <decode_basic_field+0x24>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	08003099 	.word	0x08003099
 800306c:	080030c9 	.word	0x080030c9
 8003070:	080030c9 	.word	0x080030c9
 8003074:	080030c9 	.word	0x080030c9
 8003078:	080030f9 	.word	0x080030f9
 800307c:	0800312d 	.word	0x0800312d
 8003080:	08003161 	.word	0x08003161
 8003084:	0800318b 	.word	0x0800318b
 8003088:	080031b5 	.word	0x080031b5
 800308c:	080031b5 	.word	0x080031b5
 8003090:	08003209 	.word	0x08003209
 8003094:	080031df 	.word	0x080031df
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00e      	beq.n	80030bc <decode_basic_field+0x78>
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	2bff      	cmp	r3, #255	@ 0xff
 80030a2:	d00b      	beq.n	80030bc <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <decode_basic_field+0x6e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	e000      	b.n	80030b4 <decode_basic_field+0x70>
 80030b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003228 <decode_basic_field+0x1e4>)
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	60d3      	str	r3, [r2, #12]
 80030b8:	2300      	movs	r3, #0
 80030ba:	e0b0      	b.n	800321e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fef6 	bl	8003eb0 <pb_dec_bool>
 80030c4:	4603      	mov	r3, r0
 80030c6:	e0aa      	b.n	800321e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80030c8:	7afb      	ldrb	r3, [r7, #11]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <decode_basic_field+0xa8>
 80030ce:	7afb      	ldrb	r3, [r7, #11]
 80030d0:	2bff      	cmp	r3, #255	@ 0xff
 80030d2:	d00b      	beq.n	80030ec <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <decode_basic_field+0x9e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	e000      	b.n	80030e4 <decode_basic_field+0xa0>
 80030e2:	4b51      	ldr	r3, [pc, #324]	@ (8003228 <decode_basic_field+0x1e4>)
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	60d3      	str	r3, [r2, #12]
 80030e8:	2300      	movs	r3, #0
 80030ea:	e098      	b.n	800321e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 feee 	bl	8003ed0 <pb_dec_varint>
 80030f4:	4603      	mov	r3, r0
 80030f6:	e092      	b.n	800321e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d00e      	beq.n	800311c <decode_basic_field+0xd8>
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	2bff      	cmp	r3, #255	@ 0xff
 8003102:	d00b      	beq.n	800311c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <decode_basic_field+0xce>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	e000      	b.n	8003114 <decode_basic_field+0xd0>
 8003112:	4b45      	ldr	r3, [pc, #276]	@ (8003228 <decode_basic_field+0x1e4>)
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	60d3      	str	r3, [r2, #12]
 8003118:	2300      	movs	r3, #0
 800311a:	e080      	b.n	800321e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4619      	mov	r1, r3
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fe8a 	bl	8003e3c <pb_decode_fixed32>
 8003128:	4603      	mov	r3, r0
 800312a:	e078      	b.n	800321e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d00e      	beq.n	8003150 <decode_basic_field+0x10c>
 8003132:	7afb      	ldrb	r3, [r7, #11]
 8003134:	2bff      	cmp	r3, #255	@ 0xff
 8003136:	d00b      	beq.n	8003150 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <decode_basic_field+0x102>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	e000      	b.n	8003148 <decode_basic_field+0x104>
 8003146:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <decode_basic_field+0x1e4>)
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	60d3      	str	r3, [r2, #12]
 800314c:	2300      	movs	r3, #0
 800314e:	e066      	b.n	800321e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fe8c 	bl	8003e74 <pb_decode_fixed64>
 800315c:	4603      	mov	r3, r0
 800315e:	e05e      	b.n	800321e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003160:	7afb      	ldrb	r3, [r7, #11]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d00b      	beq.n	800317e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <decode_basic_field+0x130>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	e000      	b.n	8003176 <decode_basic_field+0x132>
 8003174:	4b2c      	ldr	r3, [pc, #176]	@ (8003228 <decode_basic_field+0x1e4>)
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	60d3      	str	r3, [r2, #12]
 800317a:	2300      	movs	r3, #0
 800317c:	e04f      	b.n	800321e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 ffd1 	bl	8004128 <pb_dec_bytes>
 8003186:	4603      	mov	r3, r0
 8003188:	e049      	b.n	800321e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 800318a:	7afb      	ldrb	r3, [r7, #11]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d00b      	beq.n	80031a8 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <decode_basic_field+0x15a>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	e000      	b.n	80031a0 <decode_basic_field+0x15c>
 800319e:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <decode_basic_field+0x1e4>)
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	60d3      	str	r3, [r2, #12]
 80031a4:	2300      	movs	r3, #0
 80031a6:	e03a      	b.n	800321e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f001 f830 	bl	8004210 <pb_dec_string>
 80031b0:	4603      	mov	r3, r0
 80031b2:	e034      	b.n	800321e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d00b      	beq.n	80031d2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <decode_basic_field+0x184>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	e000      	b.n	80031ca <decode_basic_field+0x186>
 80031c8:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <decode_basic_field+0x1e4>)
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	60d3      	str	r3, [r2, #12]
 80031ce:	2300      	movs	r3, #0
 80031d0:	e025      	b.n	800321e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f001 f897 	bl	8004308 <pb_dec_submessage>
 80031da:	4603      	mov	r3, r0
 80031dc:	e01f      	b.n	800321e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d00b      	beq.n	80031fc <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <decode_basic_field+0x1ae>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	e000      	b.n	80031f4 <decode_basic_field+0x1b0>
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <decode_basic_field+0x1e4>)
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	60d3      	str	r3, [r2, #12]
 80031f8:	2300      	movs	r3, #0
 80031fa:	e010      	b.n	800321e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f001 f90c 	bl	800441c <pb_dec_fixed_length_bytes>
 8003204:	4603      	mov	r3, r0
 8003206:	e00a      	b.n	800321e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <decode_basic_field+0x1d2>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	e000      	b.n	8003218 <decode_basic_field+0x1d4>
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <decode_basic_field+0x1e8>)
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	60d3      	str	r3, [r2, #12]
 800321c:	2300      	movs	r3, #0
    }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	08005518 	.word	0x08005518
 800322c:	08005528 	.word	0x08005528

08003230 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b096      	sub	sp, #88	@ 0x58
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	460b      	mov	r3, r1
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7d9b      	ldrb	r3, [r3, #22]
 8003242:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003246:	2b30      	cmp	r3, #48	@ 0x30
 8003248:	f000 80c2 	beq.w	80033d0 <decode_static_field+0x1a0>
 800324c:	2b30      	cmp	r3, #48	@ 0x30
 800324e:	f200 811a 	bhi.w	8003486 <decode_static_field+0x256>
 8003252:	2b20      	cmp	r3, #32
 8003254:	d01f      	beq.n	8003296 <decode_static_field+0x66>
 8003256:	2b20      	cmp	r3, #32
 8003258:	f200 8115 	bhi.w	8003486 <decode_static_field+0x256>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <decode_static_field+0x36>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d008      	beq.n	8003276 <decode_static_field+0x46>
 8003264:	e10f      	b.n	8003486 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4619      	mov	r1, r3
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fee9 	bl	8003044 <decode_basic_field>
 8003272:	4603      	mov	r3, r0
 8003274:	e112      	b.n	800349c <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4619      	mov	r1, r3
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fed9 	bl	8003044 <decode_basic_field>
 8003292:	4603      	mov	r3, r0
 8003294:	e102      	b.n	800349c <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d16c      	bne.n	8003376 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7d9b      	ldrb	r3, [r3, #22]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d866      	bhi.n	8003376 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	8a52      	ldrh	r2, [r2, #18]
 80032bc:	4611      	mov	r1, r2
 80032be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	fb01 f202 	mul.w	r2, r1, r2
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80032cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032d0:	4619      	mov	r1, r3
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff fe56 	bl	8002f84 <pb_make_string_substream>
 80032d8:	4603      	mov	r3, r0
 80032da:	f083 0301 	eor.w	r3, r3, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01f      	beq.n	8003324 <decode_static_field+0xf4>
                    return false;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e0d9      	b.n	800349c <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 80032e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	21ff      	movs	r1, #255	@ 0xff
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fea7 	bl	8003044 <decode_basic_field>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f083 0301 	eor.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <decode_static_field+0xda>
                    {
                        status = false;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8003308:	e015      	b.n	8003336 <decode_static_field+0x106>
                    }
                    (*size)++;
 800330a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003314:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	8a52      	ldrh	r2, [r2, #18]
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <decode_static_field+0x106>
 800332a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8a9b      	ldrh	r3, [r3, #20]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3d8      	bcc.n	80032e8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8003336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <decode_static_field+0x11a>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	e000      	b.n	800334c <decode_static_field+0x11c>
 800334a:	4b56      	ldr	r3, [pc, #344]	@ (80034a4 <decode_static_field+0x274>)
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	2300      	movs	r3, #0
 8003352:	e0a3      	b.n	800349c <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8003354:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003358:	4619      	mov	r1, r3
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff fe4c 	bl	8002ff8 <pb_close_string_substream>
 8003360:	4603      	mov	r3, r0
 8003362:	f083 0301 	eor.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <decode_static_field+0x140>
                    return false;
 800336c:	2300      	movs	r3, #0
 800336e:	e095      	b.n	800349c <decode_static_field+0x26c>

                return status;
 8003370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003374:	e092      	b.n	800349c <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	8a52      	ldrh	r2, [r2, #18]
 8003384:	4611      	mov	r1, r2
 8003386:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	fb01 f202 	mul.w	r2, r1, r2
 800338e:	441a      	add	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8003394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	b291      	uxth	r1, r2
 800339c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800339e:	8011      	strh	r1, [r2, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	8a92      	ldrh	r2, [r2, #20]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d30b      	bcc.n	80033c0 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <decode_static_field+0x186>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	e000      	b.n	80033b8 <decode_static_field+0x188>
 80033b6:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <decode_static_field+0x274>)
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	60d3      	str	r3, [r2, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	e06d      	b.n	800349c <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7ff fe3c 	bl	8003044 <decode_basic_field>
 80033cc:	4603      	mov	r3, r0
 80033ce:	e065      	b.n	800349c <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7d9b      	ldrb	r3, [r3, #22]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d005      	beq.n	80033e8 <decode_static_field+0x1b8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7d9b      	ldrb	r3, [r3, #22]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d141      	bne.n	800346c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d03a      	beq.n	800346c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69d8      	ldr	r0, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8a5b      	ldrh	r3, [r3, #18]
 80033fe:	461a      	mov	r2, r3
 8003400:	2100      	movs	r1, #0
 8003402:	f001 fe3d 	bl	8005080 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d022      	beq.n	800346c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fa72 	bl	800491c <pb_field_iter_begin>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fa4d 	bl	80038e2 <pb_message_set_to_defaults>
 8003448:	4603      	mov	r3, r0
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <decode_static_field+0x232>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	e000      	b.n	8003464 <decode_static_field+0x234>
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <decode_static_field+0x278>)
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	60d3      	str	r3, [r2, #12]
 8003468:	2300      	movs	r3, #0
 800346a:	e017      	b.n	800349c <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	8a12      	ldrh	r2, [r2, #16]
 8003474:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8003476:	7afb      	ldrb	r3, [r7, #11]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fde1 	bl	8003044 <decode_basic_field>
 8003482:	4603      	mov	r3, r0
 8003484:	e00a      	b.n	800349c <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <decode_static_field+0x264>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	e000      	b.n	8003496 <decode_static_field+0x266>
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <decode_static_field+0x27c>)
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	60d3      	str	r3, [r2, #12]
 800349a:	2300      	movs	r3, #0
    }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3758      	adds	r7, #88	@ 0x58
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0800553c 	.word	0x0800553c
 80034a8:	0800554c 	.word	0x0800554c
 80034ac:	08005528 	.word	0x08005528

080034b0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	460b      	mov	r3, r1
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <decode_pointer_field+0x1c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	e000      	b.n	80034ce <decode_pointer_field+0x1e>
 80034cc:	4b04      	ldr	r3, [pc, #16]	@ (80034e0 <decode_pointer_field+0x30>)
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	60d3      	str	r3, [r2, #12]
 80034d2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	08005564 	.word	0x08005564

080034e4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b097      	sub	sp, #92	@ 0x5c
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	61f8      	str	r0, [r7, #28]
 80034ec:	460b      	mov	r3, r1
 80034ee:	617a      	str	r2, [r7, #20]
 80034f0:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 80034fc:	7efb      	ldrb	r3, [r7, #27]
 80034fe:	4619      	mov	r1, r3
 8003500:	69f8      	ldr	r0, [r7, #28]
 8003502:	f7ff fc91 	bl	8002e28 <pb_skip_field>
 8003506:	4603      	mov	r3, r0
 8003508:	e070      	b.n	80035ec <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800350a:	7efb      	ldrb	r3, [r7, #27]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d145      	bne.n	800359c <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003510:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003514:	4619      	mov	r1, r3
 8003516:	69f8      	ldr	r0, [r7, #28]
 8003518:	f7ff fd34 	bl	8002f84 <pb_make_string_substream>
 800351c:	4603      	mov	r3, r0
 800351e:	f083 0301 	eor.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <decode_callback_field+0x48>
            return false;
 8003528:	2300      	movs	r3, #0
 800352a:	e05f      	b.n	80035ec <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 800352c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800352e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	2100      	movs	r1, #0
 800353e:	4798      	blx	r3
 8003540:	4603      	mov	r3, r0
 8003542:	f083 0301 	eor.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <decode_callback_field+0x76>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	e005      	b.n	8003566 <decode_callback_field+0x82>
 800355a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <decode_callback_field+0x80>
 8003560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003562:	e000      	b.n	8003566 <decode_callback_field+0x82>
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <decode_callback_field+0x110>)
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	60d3      	str	r3, [r2, #12]
                return false;
 800356a:	2300      	movs	r3, #0
 800356c:	e03e      	b.n	80035ec <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 800356e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <decode_callback_field+0x98>
 8003574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003576:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003578:	429a      	cmp	r2, r3
 800357a:	d8d7      	bhi.n	800352c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 800357c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003580:	4619      	mov	r1, r3
 8003582:	69f8      	ldr	r0, [r7, #28]
 8003584:	f7ff fd38 	bl	8002ff8 <pb_close_string_substream>
 8003588:	4603      	mov	r3, r0
 800358a:	f083 0301 	eor.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <decode_callback_field+0xb4>
            return false;
 8003594:	2300      	movs	r3, #0
 8003596:	e029      	b.n	80035ec <decode_callback_field+0x108>

        return true;
 8003598:	2301      	movs	r3, #1
 800359a:	e027      	b.n	80035ec <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800359c:	230a      	movs	r3, #10
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80035a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80035a8:	7ef9      	ldrb	r1, [r7, #27]
 80035aa:	69f8      	ldr	r0, [r7, #28]
 80035ac:	f7ff fc7e 	bl	8002eac <read_raw_value>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <decode_callback_field+0xdc>
            return false;
 80035bc:	2300      	movs	r3, #0
 80035be:	e015      	b.n	80035ec <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 80035c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c2:	463b      	mov	r3, r7
 80035c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fa87 	bl	8002adc <pb_istream_from_buffer>
 80035ce:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80035d2:	463b      	mov	r3, r7
 80035d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	2100      	movs	r1, #0
 80035e8:	4798      	blx	r3
 80035ea:	4603      	mov	r3, r0
    }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	375c      	adds	r7, #92	@ 0x5c
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	08005578 	.word	0x08005578

080035f8 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	460b      	mov	r3, r1
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	7d9b      	ldrb	r3, [r3, #22]
 800360a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d00e      	beq.n	8003630 <decode_field+0x38>
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d81c      	bhi.n	8003650 <decode_field+0x58>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <decode_field+0x28>
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d010      	beq.n	8003640 <decode_field+0x48>
 800361e:	e017      	b.n	8003650 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003620:	7afb      	ldrb	r3, [r7, #11]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4619      	mov	r1, r3
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff fe02 	bl	8003230 <decode_static_field>
 800362c:	4603      	mov	r3, r0
 800362e:	e01a      	b.n	8003666 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003630:	7afb      	ldrb	r3, [r7, #11]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff ff3a 	bl	80034b0 <decode_pointer_field>
 800363c:	4603      	mov	r3, r0
 800363e:	e012      	b.n	8003666 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4619      	mov	r1, r3
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff ff4c 	bl	80034e4 <decode_callback_field>
 800364c:	4603      	mov	r3, r0
 800364e:	e00a      	b.n	8003666 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <decode_field+0x66>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	e000      	b.n	8003660 <decode_field+0x68>
 800365e:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <decode_field+0x78>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	60d3      	str	r3, [r2, #12]
 8003664:	2300      	movs	r3, #0
    }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	08005528 	.word	0x08005528

08003674 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	@ 0x38
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f001 f960 	bl	800494e <pb_field_iter_begin_extension>
 800368e:	4603      	mov	r3, r0
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <default_extension_decoder+0x34>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	e000      	b.n	80036aa <default_extension_decoder+0x36>
 80036a8:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <default_extension_decoder+0x70>)
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	60d3      	str	r3, [r2, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	e014      	b.n	80036dc <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80036b2:	8c3b      	ldrh	r3, [r7, #32]
 80036b4:	461a      	mov	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d102      	bne.n	80036c2 <default_extension_decoder+0x4e>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <default_extension_decoder+0x52>
        return true;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00a      	b.n	80036dc <default_extension_decoder+0x68>

    extension->found = true;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2201      	movs	r2, #1
 80036ca:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80036cc:	f107 0210 	add.w	r2, r7, #16
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	4619      	mov	r1, r3
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ff8f 	bl	80035f8 <decode_field>
 80036da:	4603      	mov	r3, r0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3738      	adds	r7, #56	@ 0x38
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	08005588 	.word	0x08005588

080036e8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 80036fe:	e022      	b.n	8003746 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681c      	ldr	r4, [r3, #0]
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	47a0      	blx	r4
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]
 800371e:	e007      	b.n	8003730 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff ffa4 	bl	8003674 <default_extension_decoder>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <decode_extension+0x58>
            return false;
 800373c:	2300      	movs	r3, #0
 800373e:	e00b      	b.n	8003758 <decode_extension+0x70>
        
        extension = extension->next;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <decode_extension+0x6e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d0d4      	beq.n	8003700 <decode_extension+0x18>
    }
    
    return true;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}

08003760 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7d9b      	ldrb	r3, [r3, #22]
 800376c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8003770:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2b0a      	cmp	r3, #10
 800377a:	d124      	bne.n	80037c6 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8003784:	e01b      	b.n	80037be <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f8de 	bl	800494e <pb_field_iter_begin_extension>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00f      	beq.n	80037b8 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8003798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379a:	2200      	movs	r2, #0
 800379c:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800379e:	f107 0308 	add.w	r3, r7, #8
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f89d 	bl	80038e2 <pb_message_set_to_defaults>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <pb_field_set_to_default+0x58>
                    return false;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e090      	b.n	80038da <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80037b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 80037be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e0      	bne.n	8003786 <pb_field_set_to_default+0x26>
 80037c4:	e088      	b.n	80038d8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80037c6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80037ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d166      	bne.n	80038a0 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80037d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80037dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d108      	bne.n	80037f6 <pb_field_set_to_default+0x96>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e012      	b.n	800381c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80037f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80037fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d005      	beq.n	800380e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8003802:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003806:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800380a:	2b30      	cmp	r3, #48	@ 0x30
 800380c:	d106      	bne.n	800381c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 800381c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003820:	2b00      	cmp	r3, #0
 8003822:	d059      	beq.n	80038d8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7d9b      	ldrb	r3, [r3, #22]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	2b08      	cmp	r3, #8
 800382e:	d005      	beq.n	800383c <pb_field_set_to_default+0xdc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7d9b      	ldrb	r3, [r3, #22]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	2b09      	cmp	r3, #9
 800383a:	d128      	bne.n	800388e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8003858:	2b00      	cmp	r3, #0
 800385a:	d018      	beq.n	800388e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	4618      	mov	r0, r3
 800386a:	f001 f857 	bl	800491c <pb_field_iter_begin>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d030      	beq.n	80038d6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8003874:	f107 0308 	add.w	r3, r7, #8
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f832 	bl	80038e2 <pb_message_set_to_defaults>
 800387e:	4603      	mov	r3, r0
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d025      	beq.n	80038d6 <pb_field_set_to_default+0x176>
                        return false;
 800388a:	2300      	movs	r3, #0
 800388c:	e025      	b.n	80038da <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69d8      	ldr	r0, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8a5b      	ldrh	r3, [r3, #18]
 8003896:	461a      	mov	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f001 fbf1 	bl	8005080 <memset>
 800389e:	e01b      	b.n	80038d8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80038a0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80038a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038a8:	2b80      	cmp	r3, #128	@ 0x80
 80038aa:	d115      	bne.n	80038d8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80038b4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80038b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d005      	beq.n	80038cc <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80038c0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80038c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80038c8:	2b30      	cmp	r3, #48	@ 0x30
 80038ca:	d105      	bne.n	80038d8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	2200      	movs	r2, #0
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	e000      	b.n	80038d8 <pb_field_set_to_default+0x178>
            {
 80038d6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80038d8:	2301      	movs	r3, #1
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3738      	adds	r7, #56	@ 0x38
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80038e2:	b590      	push	{r4, r7, lr}
 80038e4:	b08d      	sub	sp, #52	@ 0x34
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80038ea:	f107 0320 	add.w	r3, r7, #32
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 80038fc:	2300      	movs	r3, #0
 80038fe:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
 8003910:	463b      	mov	r3, r7
 8003912:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff f8e0 	bl	8002adc <pb_istream_from_buffer>
 800391c:	f107 0420 	add.w	r4, r7, #32
 8003920:	463b      	mov	r3, r7
 8003922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8003928:	f107 031a 	add.w	r3, r7, #26
 800392c:	f107 021c 	add.w	r2, r7, #28
 8003930:	f107 011b 	add.w	r1, r7, #27
 8003934:	f107 0020 	add.w	r0, r7, #32
 8003938:	f7ff fa47 	bl	8002dca <pb_decode_tag>
 800393c:	4603      	mov	r3, r0
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <pb_message_set_to_defaults+0x6a>
            return false;
 8003948:	2300      	movs	r3, #0
 800394a:	e043      	b.n	80039d4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f7ff ff07 	bl	8003760 <pb_field_set_to_default>
 8003952:	4603      	mov	r3, r0
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <pb_message_set_to_defaults+0x80>
            return false;
 800395e:	2300      	movs	r3, #0
 8003960:	e038      	b.n	80039d4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d02e      	beq.n	80039c6 <pb_message_set_to_defaults+0xe4>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	8a1b      	ldrh	r3, [r3, #16]
 800396c:	461a      	mov	r2, r3
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	429a      	cmp	r2, r3
 8003972:	d128      	bne.n	80039c6 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8003974:	7ef9      	ldrb	r1, [r7, #27]
 8003976:	f107 0320 	add.w	r3, r7, #32
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fe3b 	bl	80035f8 <decode_field>
 8003982:	4603      	mov	r3, r0
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <pb_message_set_to_defaults+0xb0>
                return false;
 800398e:	2300      	movs	r3, #0
 8003990:	e020      	b.n	80039d4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8003992:	f107 031a 	add.w	r3, r7, #26
 8003996:	f107 021c 	add.w	r2, r7, #28
 800399a:	f107 011b 	add.w	r1, r7, #27
 800399e:	f107 0020 	add.w	r0, r7, #32
 80039a2:	f7ff fa12 	bl	8002dca <pb_decode_tag>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f083 0301 	eor.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <pb_message_set_to_defaults+0xd4>
                return false;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e00e      	b.n	80039d4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f000 fff1 	bl	80049ae <pb_field_iter_next>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1bc      	bne.n	800394c <pb_message_set_to_defaults+0x6a>

    return true;
 80039d2:	2301      	movs	r3, #1
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3734      	adds	r7, #52	@ 0x34
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}

080039dc <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b09a      	sub	sp, #104	@ 0x68
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 80039f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039f6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8003a06:	2300      	movs	r3, #0
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a12:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8003a14:	f107 0318 	add.w	r3, r7, #24
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 ff7d 	bl	800491c <pb_field_iter_begin>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8102 	beq.w	8003c2e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 80fc 	bne.w	8003c2e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8003a36:	f107 0318 	add.w	r3, r7, #24
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff51 	bl	80038e2 <pb_message_set_to_defaults>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80f0 	beq.w	8003c2e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <pb_decode_inner+0x80>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	e000      	b.n	8003a5e <pb_decode_inner+0x82>
 8003a5c:	4b99      	ldr	r3, [pc, #612]	@ (8003cc4 <pb_decode_inner+0x2e8>)
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	60d3      	str	r3, [r2, #12]
 8003a62:	2300      	movs	r3, #0
 8003a64:	e16d      	b.n	8003d42 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8003a66:	f107 0312 	add.w	r3, r7, #18
 8003a6a:	f107 0214 	add.w	r2, r7, #20
 8003a6e:	f107 0113 	add.w	r1, r7, #19
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff f9a9 	bl	8002dca <pb_decode_tag>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f083 0301 	eor.w	r3, r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <pb_decode_inner+0xb4>
        {
            if (eof)
 8003a84:	7cbb      	ldrb	r3, [r7, #18]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80d7 	bne.w	8003c3a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e158      	b.n	8003d42 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d111      	bne.n	8003aba <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f040 80ce 	bne.w	8003c3e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <pb_decode_inner+0xd4>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	e000      	b.n	8003ab2 <pb_decode_inner+0xd6>
 8003ab0:	4b85      	ldr	r3, [pc, #532]	@ (8003cc8 <pb_decode_inner+0x2ec>)
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	60d3      	str	r3, [r2, #12]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e143      	b.n	8003d42 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	f107 0318 	add.w	r3, r7, #24
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 ff88 	bl	80049d8 <pb_field_iter_find>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <pb_decode_inner+0x104>
 8003ad4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	d13c      	bne.n	8003b5a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8003ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d112      	bne.n	8003b0c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8003ae6:	f107 0318 	add.w	r3, r7, #24
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 ffca 	bl	8004a84 <pb_field_iter_find_extension>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8003afc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003afe:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8003b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b0a:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d815      	bhi.n	8003b40 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	7cfa      	ldrb	r2, [r7, #19]
 8003b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff fde1 	bl	80036e8 <decode_extension>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f083 0301 	eor.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <pb_decode_inner+0x15a>
                    return false;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e105      	b.n	8003d42 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d173      	bne.n	8003c28 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	4619      	mov	r1, r3
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff f96f 	bl	8002e28 <pb_skip_field>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f083 0301 	eor.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d06a      	beq.n	8003c2c <pb_decode_inner+0x250>
                return false;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e0f3      	b.n	8003d42 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8003b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d12e      	bne.n	8003bc4 <pb_decode_inner+0x1e8>
 8003b66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b68:	f107 0318 	add.w	r3, r7, #24
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d128      	bne.n	8003bc4 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8003b72:	8c3b      	ldrh	r3, [r7, #32]
 8003b74:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d020      	beq.n	8003bbe <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8003b7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d011      	beq.n	8003bac <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8003b88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8003b8c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d00b      	beq.n	8003bac <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <pb_decode_inner+0x1c6>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	e000      	b.n	8003ba4 <pb_decode_inner+0x1c8>
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ccc <pb_decode_inner+0x2f0>)
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	60d3      	str	r3, [r2, #12]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e0ca      	b.n	8003d42 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8003bac:	8c3b      	ldrh	r3, [r7, #32]
 8003bae:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8003bb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003bba:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8003bbe:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8003bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8003bc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11c      	bne.n	8003c0a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8003bd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bd4:	d819      	bhi.n	8003c0a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8003bd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2201      	movs	r2, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8003be4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	3368      	adds	r3, #104	@ 0x68
 8003bee:	443b      	add	r3, r7
 8003bf0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003bf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	008b      	lsls	r3, r1, #2
 8003c02:	3368      	adds	r3, #104	@ 0x68
 8003c04:	443b      	add	r3, r7
 8003c06:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	f107 0218 	add.w	r2, r7, #24
 8003c10:	4619      	mov	r1, r3
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fcf0 	bl	80035f8 <decode_field>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f083 0301 	eor.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <pb_decode_inner+0x252>
            return false;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e08c      	b.n	8003d42 <pb_decode_inner+0x366>
                    continue;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <pb_decode_inner+0x252>
            continue;
 8003c2c:	bf00      	nop
    while (stream->bytes_left)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f47f af17 	bne.w	8003a66 <pb_decode_inner+0x8a>
 8003c38:	e002      	b.n	8003c40 <pb_decode_inner+0x264>
                break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <pb_decode_inner+0x264>
            break;
 8003c3e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8003c40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003c44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d011      	beq.n	8003c70 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8003c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8003c50:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d00b      	beq.n	8003c70 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <pb_decode_inner+0x28a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	e000      	b.n	8003c68 <pb_decode_inner+0x28c>
 8003c66:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <pb_decode_inner+0x2f0>)
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	60d3      	str	r3, [r2, #12]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e068      	b.n	8003d42 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	8a5b      	ldrh	r3, [r3, #18]
 8003c74:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8003c78:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05f      	beq.n	8003d40 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8003c80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003c84:	2b40      	cmp	r3, #64	@ 0x40
 8003c86:	d902      	bls.n	8003c8e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8003c88:	2340      	movs	r3, #64	@ 0x40
 8003c8a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003c94:	e023      	b.n	8003cde <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8003c96:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3368      	adds	r3, #104	@ 0x68
 8003c9e:	443b      	add	r3, r7
 8003ca0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003ca4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d014      	beq.n	8003cd4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <pb_decode_inner+0x2dc>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	e000      	b.n	8003cba <pb_decode_inner+0x2de>
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <pb_decode_inner+0x2f4>)
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	60d3      	str	r3, [r2, #12]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e03f      	b.n	8003d42 <pb_decode_inner+0x366>
 8003cc2:	bf00      	nop
 8003cc4:	0800554c 	.word	0x0800554c
 8003cc8:	0800559c 	.word	0x0800559c
 8003ccc:	080055a8 	.word	0x080055a8
 8003cd0:	080055cc 	.word	0x080055cc
            for (i = 0; i < (req_field_count >> 5); i++)
 8003cd4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003cde:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3d3      	bcc.n	8003c96 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8003cee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d022      	beq.n	8003d40 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8003cfa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	3368      	adds	r3, #104	@ 0x68
 8003d06:	443b      	add	r3, r7
 8003d08:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8003d0c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f1c3 0320 	rsb	r3, r3, #32
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d22:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d00b      	beq.n	8003d40 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <pb_decode_inner+0x35a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	e000      	b.n	8003d38 <pb_decode_inner+0x35c>
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <pb_decode_inner+0x370>)
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	60d3      	str	r3, [r2, #12]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3768      	adds	r7, #104	@ 0x68
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	080055cc 	.word	0x080055cc

08003d50 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff fe3a 	bl	80039dc <pb_decode_inner>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe ff70 	bl	8002c6c <pb_decode_varint32>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <pb_decode_bool+0x26>
        return false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e008      	b.n	8003dae <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf14      	ite	ne
 8003da2:	2301      	movne	r3, #1
 8003da4:	2300      	moveq	r3, #0
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
    return true;
 8003dac:	2301      	movs	r3, #1
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8003db6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fe ff5f 	bl	8002c8c <pb_decode_varint>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f083 0301 	eor.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <pb_decode_svarint+0x28>
        return false;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e029      	b.n	8003e32 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8003dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de2:	f002 0401 	and.w	r4, r2, #1
 8003de6:	2500      	movs	r5, #0
 8003de8:	ea54 0305 	orrs.w	r3, r4, r5
 8003dec:	d013      	beq.n	8003e16 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8003dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	0842      	lsrs	r2, r0, #1
 8003dfc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003e00:	084b      	lsrs	r3, r1, #1
 8003e02:	ea6f 0802 	mvn.w	r8, r2
 8003e06:	ea6f 0903 	mvn.w	r9, r3
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	e9c1 2300 	strd	r2, r3, [r1]
 8003e14:	e00c      	b.n	8003e30 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8003e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	0842      	lsrs	r2, r0, #1
 8003e24:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003e28:	084b      	lsrs	r3, r1, #1
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8003e30:	2301      	movs	r3, #1
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003e3c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fd92 	bl	8002978 <pb_read>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f083 0301 	eor.w	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <pb_decode_fixed32+0x28>
        return false;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e003      	b.n	8003e6c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8003e6a:	2301      	movs	r3, #1
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	2208      	movs	r2, #8
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fd76 	bl	8002978 <pb_read>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f083 0301 	eor.w	r3, r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <pb_decode_fixed64+0x28>
        return false;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e005      	b.n	8003ea8 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8003e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8003ea6:	2301      	movs	r3, #1
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff58 	bl	8003d76 <pb_decode_bool>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b094      	sub	sp, #80	@ 0x50
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003eda:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	7d9b      	ldrb	r3, [r3, #22]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d179      	bne.n	8003fdc <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8003ee8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003eec:	4619      	mov	r1, r3
 8003eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ef0:	f7fe fecc 	bl	8002c8c <pb_decode_varint>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <pb_dec_varint+0x34>
            return false;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e107      	b.n	8004114 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	8a5b      	ldrh	r3, [r3, #18]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10a      	bne.n	8003f22 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	69d9      	ldr	r1, [r3, #28]
 8003f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f14:	e9c1 2300 	strd	r2, r3, [r1]
 8003f18:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003f1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8003f20:	e046      	b.n	8003fb0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	8a5b      	ldrh	r3, [r3, #18]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d10e      	bne.n	8003f48 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8003f2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4602      	mov	r2, r0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	617a      	str	r2, [r7, #20]
 8003f3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f42:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8003f46:	e033      	b.n	8003fb0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	8a5b      	ldrh	r3, [r3, #18]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d10f      	bne.n	8003f70 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8003f50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	b282      	uxth	r2, r0
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2200      	movs	r2, #0
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	60fa      	str	r2, [r7, #12]
 8003f66:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f6a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8003f6e:	e01f      	b.n	8003fb0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	8a5b      	ldrh	r3, [r3, #18]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d10f      	bne.n	8003f98 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8003f78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	b2c2      	uxtb	r2, r0
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f92:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8003f96:	e00b      	b.n	8003fb0 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <pb_dec_varint+0xd6>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	e000      	b.n	8003fa8 <pb_dec_varint+0xd8>
 8003fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8004120 <pb_dec_varint+0x250>)
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003faa:	60d3      	str	r3, [r2, #12]
 8003fac:	2300      	movs	r3, #0
 8003fae:	e0b1      	b.n	8004114 <pb_dec_varint+0x244>

        if (clamped != value)
 8003fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fb4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	bf08      	it	eq
 8003fbc:	4290      	cmpeq	r0, r2
 8003fbe:	d00b      	beq.n	8003fd8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <pb_dec_varint+0xfe>
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	e000      	b.n	8003fd0 <pb_dec_varint+0x100>
 8003fce:	4b55      	ldr	r3, [pc, #340]	@ (8004124 <pb_dec_varint+0x254>)
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	60d3      	str	r3, [r2, #12]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e09d      	b.n	8004114 <pb_dec_varint+0x244>

        return true;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e09b      	b.n	8004114 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	7d9b      	ldrb	r3, [r3, #22]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d10d      	bne.n	8004004 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8003fe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fec:	4619      	mov	r1, r3
 8003fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ff0:	f7ff fee1 	bl	8003db6 <pb_decode_svarint>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f083 0301 	eor.w	r3, r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <pb_dec_varint+0x176>
                return false;
 8004000:	2300      	movs	r3, #0
 8004002:	e087      	b.n	8004114 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8004004:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004008:	4619      	mov	r1, r3
 800400a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800400c:	f7fe fe3e 	bl	8002c8c <pb_decode_varint>
 8004010:	4603      	mov	r3, r0
 8004012:	f083 0301 	eor.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <pb_dec_varint+0x150>
                return false;
 800401c:	2300      	movs	r3, #0
 800401e:	e079      	b.n	8004114 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	8a5b      	ldrh	r3, [r3, #18]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d104      	bne.n	8004032 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8004028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800402c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004030:	e009      	b.n	8004046 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004032:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004036:	4613      	mov	r3, r2
 8004038:	17da      	asrs	r2, r3, #31
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004042:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	8a5b      	ldrh	r3, [r3, #18]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d10a      	bne.n	8004064 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	69d9      	ldr	r1, [r3, #28]
 8004052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004056:	e9c1 2300 	strd	r2, r3, [r1]
 800405a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800405e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004062:	e042      	b.n	80040ea <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	8a5b      	ldrh	r3, [r3, #18]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d10c      	bne.n	8004086 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 800406c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4602      	mov	r2, r0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	17da      	asrs	r2, r3, #31
 800407c:	469a      	mov	sl, r3
 800407e:	4693      	mov	fp, r2
 8004080:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8004084:	e031      	b.n	80040ea <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	8a5b      	ldrh	r3, [r3, #18]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d10e      	bne.n	80040ac <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800408e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	b202      	sxth	r2, r0
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409e:	b21b      	sxth	r3, r3
 80040a0:	17da      	asrs	r2, r3, #31
 80040a2:	4698      	mov	r8, r3
 80040a4:	4691      	mov	r9, r2
 80040a6:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 80040aa:	e01e      	b.n	80040ea <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	8a5b      	ldrh	r3, [r3, #18]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10e      	bne.n	80040d2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80040b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	b242      	sxtb	r2, r0
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	f993 3000 	ldrsb.w	r3, [r3]
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	17da      	asrs	r2, r3, #31
 80040c8:	461c      	mov	r4, r3
 80040ca:	4615      	mov	r5, r2
 80040cc:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 80040d0:	e00b      	b.n	80040ea <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <pb_dec_varint+0x210>
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	e000      	b.n	80040e2 <pb_dec_varint+0x212>
 80040e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <pb_dec_varint+0x250>)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	60d3      	str	r3, [r2, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	e014      	b.n	8004114 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80040ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80040f2:	4299      	cmp	r1, r3
 80040f4:	bf08      	it	eq
 80040f6:	4290      	cmpeq	r0, r2
 80040f8:	d00b      	beq.n	8004112 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <pb_dec_varint+0x238>
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	e000      	b.n	800410a <pb_dec_varint+0x23a>
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <pb_dec_varint+0x254>)
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	60d3      	str	r3, [r2, #12]
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <pb_dec_varint+0x244>

        return true;
 8004112:	2301      	movs	r3, #1
    }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3750      	adds	r7, #80	@ 0x50
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411e:	bf00      	nop
 8004120:	080055e4 	.word	0x080055e4
 8004124:	080055f8 	.word	0x080055f8

08004128 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004132:	f107 030c 	add.w	r3, r7, #12
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fe fd97 	bl	8002c6c <pb_decode_varint32>
 800413e:	4603      	mov	r3, r0
 8004140:	f083 0301 	eor.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <pb_dec_bytes+0x26>
        return false;
 800414a:	2300      	movs	r3, #0
 800414c:	e055      	b.n	80041fa <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004154:	d30b      	bcc.n	800416e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <pb_dec_bytes+0x3c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	e000      	b.n	8004166 <pb_dec_bytes+0x3e>
 8004164:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <pb_dec_bytes+0xdc>)
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	60d3      	str	r3, [r2, #12]
 800416a:	2300      	movs	r3, #0
 800416c:	e045      	b.n	80041fa <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3302      	adds	r3, #2
 8004172:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	429a      	cmp	r2, r3
 800417a:	d20b      	bcs.n	8004194 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <pb_dec_bytes+0x62>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	e000      	b.n	800418c <pb_dec_bytes+0x64>
 800418a:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <pb_dec_bytes+0xe0>)
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	2300      	movs	r3, #0
 8004192:	e032      	b.n	80041fa <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	7d9b      	ldrb	r3, [r3, #22]
 8004198:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800419c:	2b80      	cmp	r3, #128	@ 0x80
 800419e:	d10b      	bne.n	80041b8 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <pb_dec_bytes+0x86>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	e000      	b.n	80041b0 <pb_dec_bytes+0x88>
 80041ae:	4b17      	ldr	r3, [pc, #92]	@ (800420c <pb_dec_bytes+0xe4>)
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60d3      	str	r3, [r2, #12]
 80041b4:	2300      	movs	r3, #0
 80041b6:	e020      	b.n	80041fa <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	8a5b      	ldrh	r3, [r3, #18]
 80041bc:	461a      	mov	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d90b      	bls.n	80041dc <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <pb_dec_bytes+0xaa>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	e000      	b.n	80041d4 <pb_dec_bytes+0xac>
 80041d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <pb_dec_bytes+0xdc>)
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	60d3      	str	r3, [r2, #12]
 80041d8:	2300      	movs	r3, #0
 80041da:	e00e      	b.n	80041fa <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	3302      	adds	r3, #2
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fe fbc0 	bl	8002978 <pb_read>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	0800560c 	.word	0x0800560c
 8004208:	0800561c 	.word	0x0800561c
 800420c:	08005564 	.word	0x08005564

08004210 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004220:	f107 030c 	add.w	r3, r7, #12
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fe fd20 	bl	8002c6c <pb_decode_varint32>
 800422c:	4603      	mov	r3, r0
 800422e:	f083 0301 	eor.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <pb_dec_string+0x2c>
        return false;
 8004238:	2300      	movs	r3, #0
 800423a:	e05a      	b.n	80042f2 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004242:	d10b      	bne.n	800425c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <pb_dec_string+0x42>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	e000      	b.n	8004254 <pb_dec_string+0x44>
 8004252:	4b2a      	ldr	r3, [pc, #168]	@ (80042fc <pb_dec_string+0xec>)
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	60d3      	str	r3, [r2, #12]
 8004258:	2300      	movs	r3, #0
 800425a:	e04a      	b.n	80042f2 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	429a      	cmp	r2, r3
 8004268:	d20b      	bcs.n	8004282 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <pb_dec_string+0x68>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	e000      	b.n	800427a <pb_dec_string+0x6a>
 8004278:	4b20      	ldr	r3, [pc, #128]	@ (80042fc <pb_dec_string+0xec>)
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	60d3      	str	r3, [r2, #12]
 800427e:	2300      	movs	r3, #0
 8004280:	e037      	b.n	80042f2 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	7d9b      	ldrb	r3, [r3, #22]
 8004286:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d10b      	bne.n	80042a6 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <pb_dec_string+0x8c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	e000      	b.n	800429e <pb_dec_string+0x8e>
 800429c:	4b18      	ldr	r3, [pc, #96]	@ (8004300 <pb_dec_string+0xf0>)
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	60d3      	str	r3, [r2, #12]
 80042a2:	2300      	movs	r3, #0
 80042a4:	e025      	b.n	80042f2 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	8a5b      	ldrh	r3, [r3, #18]
 80042aa:	461a      	mov	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d90b      	bls.n	80042ca <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <pb_dec_string+0xb0>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	e000      	b.n	80042c2 <pb_dec_string+0xb2>
 80042c0:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <pb_dec_string+0xf4>)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	60d3      	str	r3, [r2, #12]
 80042c6:	2300      	movs	r3, #0
 80042c8:	e013      	b.n	80042f2 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4413      	add	r3, r2
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fe fb4c 	bl	8002978 <pb_read>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <pb_dec_string+0xe0>
        return false;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 80042f0:	2301      	movs	r3, #1
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	0800561c 	.word	0x0800561c
 8004300:	08005564 	.word	0x08005564
 8004304:	0800562c 	.word	0x0800562c

08004308 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fe fe2d 	bl	8002f84 <pb_make_string_substream>
 800432a:	4603      	mov	r3, r0
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <pb_dec_submessage+0x32>
        return false;
 8004336:	2300      	movs	r3, #0
 8004338:	e069      	b.n	800440e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <pb_dec_submessage+0x48>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	e000      	b.n	8004352 <pb_dec_submessage+0x4a>
 8004350:	4b31      	ldr	r3, [pc, #196]	@ (8004418 <pb_dec_submessage+0x110>)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	60d3      	str	r3, [r2, #12]
 8004356:	2300      	movs	r3, #0
 8004358:	e059      	b.n	800440e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7d9b      	ldrb	r3, [r3, #22]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2b09      	cmp	r3, #9
 8004364:	d11c      	bne.n	80043a0 <pb_dec_submessage+0x98>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	3b08      	subs	r3, #8
 8004374:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	3204      	adds	r2, #4
 8004386:	f107 000c 	add.w	r0, r7, #12
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	4798      	blx	r3
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80043a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d022      	beq.n	80043ee <pb_dec_submessage+0xe6>
 80043a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043ac:	f083 0301 	eor.w	r3, r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01b      	beq.n	80043ee <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7d9b      	ldrb	r3, [r3, #22]
 80043be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	7d9b      	ldrb	r3, [r3, #22]
 80043ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d001      	beq.n	80043d6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80043d2:	2301      	movs	r3, #1
 80043d4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	f107 000c 	add.w	r0, r7, #12
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f7ff fafa 	bl	80039dc <pb_decode_inner>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 80043ee:	f107 030c 	add.w	r3, r7, #12
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fe fdff 	bl	8002ff8 <pb_close_string_substream>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f083 0301 	eor.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <pb_dec_submessage+0x102>
        return false;
 8004406:	2300      	movs	r3, #0
 8004408:	e001      	b.n	800440e <pb_dec_submessage+0x106>

    return status;
 800440a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	@ 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	0800563c 	.word	0x0800563c

0800441c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004426:	f107 030c 	add.w	r3, r7, #12
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fe fc1d 	bl	8002c6c <pb_decode_varint32>
 8004432:	4603      	mov	r3, r0
 8004434:	f083 0301 	eor.w	r3, r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <pb_dec_fixed_length_bytes+0x26>
        return false;
 800443e:	2300      	movs	r3, #0
 8004440:	e037      	b.n	80044b2 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d30b      	bcc.n	8004462 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <pb_dec_fixed_length_bytes+0x3c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	e000      	b.n	800445a <pb_dec_fixed_length_bytes+0x3e>
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <pb_dec_fixed_length_bytes+0xa0>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	60d3      	str	r3, [r2, #12]
 800445e:	2300      	movs	r3, #0
 8004460:	e027      	b.n	80044b2 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	69d8      	ldr	r0, [r3, #28]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	8a5b      	ldrh	r3, [r3, #18]
 8004470:	461a      	mov	r2, r3
 8004472:	2100      	movs	r1, #0
 8004474:	f000 fe04 	bl	8005080 <memset>
        return true;
 8004478:	2301      	movs	r3, #1
 800447a:	e01a      	b.n	80044b2 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	8a5b      	ldrh	r3, [r3, #18]
 8004480:	461a      	mov	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d00b      	beq.n	80044a0 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <pb_dec_fixed_length_bytes+0x7a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	e000      	b.n	8004498 <pb_dec_fixed_length_bytes+0x7c>
 8004496:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <pb_dec_fixed_length_bytes+0xa4>)
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	60d3      	str	r3, [r2, #12]
 800449c:	2300      	movs	r3, #0
 800449e:	e008      	b.n	80044b2 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	8a5b      	ldrh	r3, [r3, #18]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe fa64 	bl	8002978 <pb_read>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	0800560c 	.word	0x0800560c
 80044c0:	08005658 	.word	0x08005658

080044c4 <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 80044d6:	480f      	ldr	r0, [pc, #60]	@ (8004514 <TF_InitStatic+0x50>)
 80044d8:	f000 fcf2 	bl	8004ec0 <puts>
        return false;
 80044dc:	2300      	movs	r3, #0
 80044de:	e015      	b.n	800450c <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 80044ec:	f242 2260 	movw	r2, #8800	@ 0x2260
 80044f0:	2100      	movs	r1, #0
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fdc4 	bl	8005080 <memset>

    tf->usertag = usertag;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	721a      	strb	r2, [r3, #8]
    return true;
 800450a:	2301      	movs	r3, #1
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0800569c 	.word	0x0800569c

08004518 <TF_AddGenericListener>:
    return false;
}

/** Add a new Generic listener. Returns 1 on success. */
bool _TF_FN TF_AddGenericListener(TinyFrame *tf, TF_Listener cb)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
    TF_COUNT i;
    struct TF_GenericListener_ *lst;
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	e022      	b.n	800456e <TF_AddGenericListener+0x56>
        lst = &tf->generic_listeners[i];
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	f603 0392 	addw	r3, r3, #2194	@ 0x892
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
        // test for empty slot
        if (lst->fn == NULL) {
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d114      	bne.n	8004568 <TF_AddGenericListener+0x50>
            lst->fn = cb;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	601a      	str	r2, [r3, #0]
            if (i >= tf->count_generic_lst) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800454a:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	429a      	cmp	r2, r3
 8004552:	d307      	bcc.n	8004564 <TF_AddGenericListener+0x4c>
                tf->count_generic_lst = (TF_COUNT) (i + 1);
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	3301      	adds	r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004560:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
            }
            return true;
 8004564:	2301      	movs	r3, #1
 8004566:	e009      	b.n	800457c <TF_AddGenericListener+0x64>
    for (i = 0; i < TF_MAX_GEN_LST; i++) {
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	3301      	adds	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d9d9      	bls.n	8004528 <TF_AddGenericListener+0x10>
        }
    }

    TF_Error("Failed to add generic listener");
 8004574:	4803      	ldr	r0, [pc, #12]	@ (8004584 <TF_AddGenericListener+0x6c>)
 8004576:	f000 fca3 	bl	8004ec0 <puts>
    return false;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08005734 	.word	0x08005734

08004588 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8004588:	b480      	push	{r7}
 800458a:	b08f      	sub	sp, #60	@ 0x3c
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	891a      	ldrh	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	8a1b      	ldrh	r3, [r3, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d301      	bcc.n	80045a2 <load_descriptor_values+0x1a>
        return false;
 800459e:	2300      	movs	r3, #0
 80045a0:	e156      	b.n	8004850 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	895b      	ldrh	r3, [r3, #10]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d05a      	beq.n	800467e <load_descriptor_values+0xf6>
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	f200 8094 	bhi.w	80046f6 <load_descriptor_values+0x16e>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <load_descriptor_values+0x50>
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d01f      	beq.n	8004616 <load_descriptor_values+0x8e>
 80045d6:	e08e      	b.n	80046f6 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 80045de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	b2db      	uxtb	r3, r3
 8004602:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8004604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004606:	0f1b      	lsrs	r3, r3, #28
 8004608:	b29b      	uxth	r3, r3
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	825a      	strh	r2, [r3, #18]
            break;
 8004614:	e0b4      	b.n	8004780 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	895b      	ldrh	r3, [r3, #10]
 8004620:	3301      	adds	r3, #1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	b29b      	uxth	r3, r3
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	b29b      	uxth	r3, r3
 8004640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004644:	b29a      	uxth	r2, r3
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	0f1b      	lsrs	r3, r3, #28
 800464a:	b29b      	uxth	r3, r3
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	b29b      	uxth	r3, r3
 8004650:	4313      	orrs	r3, r2
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	0f1b      	lsrs	r3, r3, #28
 800465c:	b25b      	sxtb	r3, r3
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	b29b      	uxth	r3, r3
 800466a:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	b29b      	uxth	r3, r3
 8004672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	825a      	strh	r2, [r3, #18]
            break;
 800467c:	e080      	b.n	8004780 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	895b      	ldrh	r3, [r3, #10]
 8004688:	3301      	adds	r3, #1
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	895b      	ldrh	r3, [r3, #10]
 800469c:	3302      	adds	r3, #2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	895b      	ldrh	r3, [r3, #10]
 80046b0:	3303      	adds	r3, #3
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 80046ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	019b      	lsls	r3, r3, #6
 80046d8:	b29b      	uxth	r3, r3
 80046da:	4313      	orrs	r3, r2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	825a      	strh	r2, [r3, #18]
            break;
 80046f4:	e044      	b.n	8004780 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	895b      	ldrh	r3, [r3, #10]
 8004700:	3301      	adds	r3, #1
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	895b      	ldrh	r3, [r3, #10]
 8004714:	3302      	adds	r3, #2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	895b      	ldrh	r3, [r3, #10]
 8004728:	3303      	adds	r3, #3
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	895b      	ldrh	r3, [r3, #10]
 800473c:	3304      	adds	r3, #4
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	b29b      	uxth	r3, r3
 8004754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004758:	b29a      	uxth	r2, r3
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	b29b      	uxth	r3, r3
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	b29b      	uxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	825a      	strh	r2, [r3, #18]
            break;
 800477e:	bf00      	nop
        }
    }

    if (!iter->message)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	621a      	str	r2, [r3, #32]
 8004794:	e041      	b.n	800481a <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	619a      	str	r2, [r3, #24]

        if (size_offset)
 80047a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80047b2:	425b      	negs	r3, r3
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]
 80047ba:	e01a      	b.n	80047f2 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7d9b      	ldrb	r3, [r3, #22]
 80047c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d111      	bne.n	80047ec <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7d9b      	ldrb	r3, [r3, #22]
 80047cc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7d9b      	ldrb	r3, [r3, #22]
 80047d8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 80047dc:	2b80      	cmp	r3, #128	@ 0x80
 80047de:	d105      	bne.n	80047ec <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f103 0214 	add.w	r2, r3, #20
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]
 80047ea:	e002      	b.n	80047f2 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7d9b      	ldrb	r3, [r3, #22]
 80047f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047fa:	2b80      	cmp	r3, #128	@ 0x80
 80047fc:	d109      	bne.n	8004812 <load_descriptor_values+0x28a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	61da      	str	r2, [r3, #28]
 8004810:	e003      	b.n	800481a <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7d9b      	ldrb	r3, [r3, #22]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	2b08      	cmp	r3, #8
 8004824:	d005      	beq.n	8004832 <load_descriptor_values+0x2aa>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	7d9b      	ldrb	r3, [r3, #22]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	2b09      	cmp	r3, #9
 8004830:	d10a      	bne.n	8004848 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	89db      	ldrh	r3, [r3, #14]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	@ 0x24
 8004846:	e002      	b.n	800484e <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	373c      	adds	r7, #60	@ 0x3c
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    iter->index++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	891b      	ldrh	r3, [r3, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	891a      	ldrh	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	8a1b      	ldrh	r3, [r3, #16]
 800487a:	429a      	cmp	r2, r3
 800487c:	d30c      	bcc.n	8004898 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8004896:	e03b      	b.n	8004910 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	895b      	ldrh	r3, [r3, #10]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2201      	movs	r2, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	895a      	ldrh	r2, [r3, #10]
 80048c2:	893b      	ldrh	r3, [r7, #8]
 80048c4:	4413      	add	r3, r2
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	899b      	ldrh	r3, [r3, #12]
 80048d0:	7afa      	ldrb	r2, [r7, #11]
 80048d2:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	bf0c      	ite	eq
 80048da:	2201      	moveq	r2, #1
 80048dc:	2200      	movne	r2, #0
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	4413      	add	r3, r2
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	89da      	ldrh	r2, [r3, #14]
 80048ec:	7afb      	ldrb	r3, [r7, #11]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d004      	beq.n	8004900 <advance_iterator+0xa4>
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	2b09      	cmp	r3, #9
 80048fe:	d101      	bne.n	8004904 <advance_iterator+0xa8>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <advance_iterator+0xaa>
 8004904:	2300      	movs	r3, #0
 8004906:	b29b      	uxth	r3, r3
 8004908:	4413      	add	r3, r2
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	81da      	strh	r2, [r3, #14]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8004928:	2228      	movs	r2, #40	@ 0x28
 800492a:	2100      	movs	r1, #0
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fba7 	bl	8005080 <memset>

    iter->descriptor = desc;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fe22 	bl	8004588 <load_descriptor_values>
 8004944:	4603      	mov	r3, r0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004970:	2b80      	cmp	r3, #128	@ 0x80
 8004972:	d109      	bne.n	8004988 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	461a      	mov	r2, r3
 800497a:	6939      	ldr	r1, [r7, #16]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ffcd 	bl	800491c <pb_field_iter_begin>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
 8004986:	e008      	b.n	800499a <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	461a      	mov	r2, r3
 800498e:	6939      	ldr	r1, [r7, #16]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ffc3 	bl	800491c <pb_field_iter_begin>
 8004996:	4603      	mov	r3, r0
 8004998:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f103 020c 	add.w	r2, r3, #12
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]
    return status;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ff50 	bl	800485c <advance_iterator>
    (void)load_descriptor_values(iter);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fde3 	bl	8004588 <load_descriptor_values>
    return iter->index != 0;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	891b      	ldrh	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8a1b      	ldrh	r3, [r3, #16]
 80049e6:	461a      	mov	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80049ee:	2301      	movs	r3, #1
 80049f0:	e044      	b.n	8004a7c <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	8a9b      	ldrh	r3, [r3, #20]
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <pb_field_iter_find+0x2c>
    {
        return false;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e03b      	b.n	8004a7c <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	891b      	ldrh	r3, [r3, #8]
 8004a08:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8a1b      	ldrh	r3, [r3, #16]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d204      	bcs.n	8004a20 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	8a1a      	ldrh	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff1b 	bl	800485c <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	895b      	ldrh	r3, [r3, #10]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	089a      	lsrs	r2, r3, #2
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4053      	eors	r3, r2
 8004a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d110      	bne.n	8004a6a <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fd9d 	bl	8004588 <load_descriptor_values>

                if (iter->tag == tag &&
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8a1b      	ldrh	r3, [r3, #16]
 8004a52:	461a      	mov	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d107      	bne.n	8004a6a <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7d9b      	ldrb	r3, [r3, #22]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8004a62:	2b0a      	cmp	r3, #10
 8004a64:	d001      	beq.n	8004a6a <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e008      	b.n	8004a7c <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	891b      	ldrh	r3, [r3, #8]
 8004a6e:	89fa      	ldrh	r2, [r7, #14]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1d5      	bne.n	8004a20 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fd87 	bl	8004588 <load_descriptor_values>
        return false;
 8004a7a:	2300      	movs	r3, #0
    }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7d9b      	ldrb	r3, [r3, #22]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	2b0a      	cmp	r3, #10
 8004a96:	d101      	bne.n	8004a9c <pb_field_iter_find_extension+0x18>
    {
        return true;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e022      	b.n	8004ae2 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	891b      	ldrh	r3, [r3, #8]
 8004aa0:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff feda 	bl	800485c <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	895b      	ldrh	r3, [r3, #10]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	d104      	bne.n	8004ad0 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fd5e 	bl	8004588 <load_descriptor_values>
 8004acc:	4603      	mov	r3, r0
 8004ace:	e008      	b.n	8004ae2 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	891b      	ldrh	r3, [r3, #8]
 8004ad4:	89fa      	ldrh	r2, [r7, #14]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d1e3      	bne.n	8004aa2 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fd54 	bl	8004588 <load_descriptor_values>
        return false;
 8004ae0:	2300      	movs	r3, #0
    }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <calloc>:
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <calloc+0xc>)
 8004aee:	460a      	mov	r2, r1
 8004af0:	4601      	mov	r1, r0
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	f000 b802 	b.w	8004afc <_calloc_r>
 8004af8:	20000018 	.word	0x20000018

08004afc <_calloc_r>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	fba1 5402 	umull	r5, r4, r1, r2
 8004b02:	b934      	cbnz	r4, 8004b12 <_calloc_r+0x16>
 8004b04:	4629      	mov	r1, r5
 8004b06:	f000 f837 	bl	8004b78 <_malloc_r>
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	b928      	cbnz	r0, 8004b1a <_calloc_r+0x1e>
 8004b0e:	4630      	mov	r0, r6
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
 8004b12:	220c      	movs	r2, #12
 8004b14:	6002      	str	r2, [r0, #0]
 8004b16:	2600      	movs	r6, #0
 8004b18:	e7f9      	b.n	8004b0e <_calloc_r+0x12>
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f000 faaf 	bl	8005080 <memset>
 8004b22:	e7f4      	b.n	8004b0e <_calloc_r+0x12>

08004b24 <free>:
 8004b24:	4b02      	ldr	r3, [pc, #8]	@ (8004b30 <free+0xc>)
 8004b26:	4601      	mov	r1, r0
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	f000 bb43 	b.w	80051b4 <_free_r>
 8004b2e:	bf00      	nop
 8004b30:	20000018 	.word	0x20000018

08004b34 <sbrk_aligned>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	4e0f      	ldr	r6, [pc, #60]	@ (8004b74 <sbrk_aligned+0x40>)
 8004b38:	460c      	mov	r4, r1
 8004b3a:	6831      	ldr	r1, [r6, #0]
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	b911      	cbnz	r1, 8004b46 <sbrk_aligned+0x12>
 8004b40:	f000 fada 	bl	80050f8 <_sbrk_r>
 8004b44:	6030      	str	r0, [r6, #0]
 8004b46:	4621      	mov	r1, r4
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 fad5 	bl	80050f8 <_sbrk_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	d103      	bne.n	8004b5a <sbrk_aligned+0x26>
 8004b52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b56:	4620      	mov	r0, r4
 8004b58:	bd70      	pop	{r4, r5, r6, pc}
 8004b5a:	1cc4      	adds	r4, r0, #3
 8004b5c:	f024 0403 	bic.w	r4, r4, #3
 8004b60:	42a0      	cmp	r0, r4
 8004b62:	d0f8      	beq.n	8004b56 <sbrk_aligned+0x22>
 8004b64:	1a21      	subs	r1, r4, r0
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fac6 	bl	80050f8 <_sbrk_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d1f2      	bne.n	8004b56 <sbrk_aligned+0x22>
 8004b70:	e7ef      	b.n	8004b52 <sbrk_aligned+0x1e>
 8004b72:	bf00      	nop
 8004b74:	200000d4 	.word	0x200000d4

08004b78 <_malloc_r>:
 8004b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b7c:	1ccd      	adds	r5, r1, #3
 8004b7e:	f025 0503 	bic.w	r5, r5, #3
 8004b82:	3508      	adds	r5, #8
 8004b84:	2d0c      	cmp	r5, #12
 8004b86:	bf38      	it	cc
 8004b88:	250c      	movcc	r5, #12
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	db01      	blt.n	8004b94 <_malloc_r+0x1c>
 8004b90:	42a9      	cmp	r1, r5
 8004b92:	d904      	bls.n	8004b9e <_malloc_r+0x26>
 8004b94:	230c      	movs	r3, #12
 8004b96:	6033      	str	r3, [r6, #0]
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c74 <_malloc_r+0xfc>
 8004ba2:	f000 f869 	bl	8004c78 <__malloc_lock>
 8004ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8004baa:	461c      	mov	r4, r3
 8004bac:	bb44      	cbnz	r4, 8004c00 <_malloc_r+0x88>
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f7ff ffbf 	bl	8004b34 <sbrk_aligned>
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	4604      	mov	r4, r0
 8004bba:	d158      	bne.n	8004c6e <_malloc_r+0xf6>
 8004bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8004bc0:	4627      	mov	r7, r4
 8004bc2:	2f00      	cmp	r7, #0
 8004bc4:	d143      	bne.n	8004c4e <_malloc_r+0xd6>
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	d04b      	beq.n	8004c62 <_malloc_r+0xea>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	4639      	mov	r1, r7
 8004bce:	4630      	mov	r0, r6
 8004bd0:	eb04 0903 	add.w	r9, r4, r3
 8004bd4:	f000 fa90 	bl	80050f8 <_sbrk_r>
 8004bd8:	4581      	cmp	r9, r0
 8004bda:	d142      	bne.n	8004c62 <_malloc_r+0xea>
 8004bdc:	6821      	ldr	r1, [r4, #0]
 8004bde:	1a6d      	subs	r5, r5, r1
 8004be0:	4629      	mov	r1, r5
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7ff ffa6 	bl	8004b34 <sbrk_aligned>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d03a      	beq.n	8004c62 <_malloc_r+0xea>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	442b      	add	r3, r5
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	bb62      	cbnz	r2, 8004c54 <_malloc_r+0xdc>
 8004bfa:	f8c8 7000 	str.w	r7, [r8]
 8004bfe:	e00f      	b.n	8004c20 <_malloc_r+0xa8>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	1b52      	subs	r2, r2, r5
 8004c04:	d420      	bmi.n	8004c48 <_malloc_r+0xd0>
 8004c06:	2a0b      	cmp	r2, #11
 8004c08:	d917      	bls.n	8004c3a <_malloc_r+0xc2>
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	6025      	str	r5, [r4, #0]
 8004c10:	bf18      	it	ne
 8004c12:	6059      	strne	r1, [r3, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	bf08      	it	eq
 8004c18:	f8c8 1000 	streq.w	r1, [r8]
 8004c1c:	5162      	str	r2, [r4, r5]
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 f82f 	bl	8004c84 <__malloc_unlock>
 8004c26:	f104 000b 	add.w	r0, r4, #11
 8004c2a:	1d23      	adds	r3, r4, #4
 8004c2c:	f020 0007 	bic.w	r0, r0, #7
 8004c30:	1ac2      	subs	r2, r0, r3
 8004c32:	bf1c      	itt	ne
 8004c34:	1a1b      	subne	r3, r3, r0
 8004c36:	50a3      	strne	r3, [r4, r2]
 8004c38:	e7af      	b.n	8004b9a <_malloc_r+0x22>
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	bf0c      	ite	eq
 8004c40:	f8c8 2000 	streq.w	r2, [r8]
 8004c44:	605a      	strne	r2, [r3, #4]
 8004c46:	e7eb      	b.n	8004c20 <_malloc_r+0xa8>
 8004c48:	4623      	mov	r3, r4
 8004c4a:	6864      	ldr	r4, [r4, #4]
 8004c4c:	e7ae      	b.n	8004bac <_malloc_r+0x34>
 8004c4e:	463c      	mov	r4, r7
 8004c50:	687f      	ldr	r7, [r7, #4]
 8004c52:	e7b6      	b.n	8004bc2 <_malloc_r+0x4a>
 8004c54:	461a      	mov	r2, r3
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d1fb      	bne.n	8004c54 <_malloc_r+0xdc>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6053      	str	r3, [r2, #4]
 8004c60:	e7de      	b.n	8004c20 <_malloc_r+0xa8>
 8004c62:	230c      	movs	r3, #12
 8004c64:	6033      	str	r3, [r6, #0]
 8004c66:	4630      	mov	r0, r6
 8004c68:	f000 f80c 	bl	8004c84 <__malloc_unlock>
 8004c6c:	e794      	b.n	8004b98 <_malloc_r+0x20>
 8004c6e:	6005      	str	r5, [r0, #0]
 8004c70:	e7d6      	b.n	8004c20 <_malloc_r+0xa8>
 8004c72:	bf00      	nop
 8004c74:	200000d8 	.word	0x200000d8

08004c78 <__malloc_lock>:
 8004c78:	4801      	ldr	r0, [pc, #4]	@ (8004c80 <__malloc_lock+0x8>)
 8004c7a:	f000 ba8a 	b.w	8005192 <__retarget_lock_acquire_recursive>
 8004c7e:	bf00      	nop
 8004c80:	2000021c 	.word	0x2000021c

08004c84 <__malloc_unlock>:
 8004c84:	4801      	ldr	r0, [pc, #4]	@ (8004c8c <__malloc_unlock+0x8>)
 8004c86:	f000 ba85 	b.w	8005194 <__retarget_lock_release_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	2000021c 	.word	0x2000021c

08004c90 <std>:
 8004c90:	2300      	movs	r3, #0
 8004c92:	b510      	push	{r4, lr}
 8004c94:	4604      	mov	r4, r0
 8004c96:	e9c0 3300 	strd	r3, r3, [r0]
 8004c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c9e:	6083      	str	r3, [r0, #8]
 8004ca0:	8181      	strh	r1, [r0, #12]
 8004ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ca4:	81c2      	strh	r2, [r0, #14]
 8004ca6:	6183      	str	r3, [r0, #24]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	2208      	movs	r2, #8
 8004cac:	305c      	adds	r0, #92	@ 0x5c
 8004cae:	f000 f9e7 	bl	8005080 <memset>
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <std+0x58>)
 8004cb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <std+0x5c>)
 8004cb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <std+0x60>)
 8004cbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <std+0x64>)
 8004cc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <std+0x68>)
 8004cc4:	6224      	str	r4, [r4, #32]
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d006      	beq.n	8004cd8 <std+0x48>
 8004cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cce:	4294      	cmp	r4, r2
 8004cd0:	d002      	beq.n	8004cd8 <std+0x48>
 8004cd2:	33d0      	adds	r3, #208	@ 0xd0
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	d105      	bne.n	8004ce4 <std+0x54>
 8004cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce0:	f000 ba56 	b.w	8005190 <__retarget_lock_init_recursive>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08004ed1 	.word	0x08004ed1
 8004cec:	08004ef3 	.word	0x08004ef3
 8004cf0:	08004f2b 	.word	0x08004f2b
 8004cf4:	08004f4f 	.word	0x08004f4f
 8004cf8:	200000dc 	.word	0x200000dc

08004cfc <stdio_exit_handler>:
 8004cfc:	4a02      	ldr	r2, [pc, #8]	@ (8004d08 <stdio_exit_handler+0xc>)
 8004cfe:	4903      	ldr	r1, [pc, #12]	@ (8004d0c <stdio_exit_handler+0x10>)
 8004d00:	4803      	ldr	r0, [pc, #12]	@ (8004d10 <stdio_exit_handler+0x14>)
 8004d02:	f000 b869 	b.w	8004dd8 <_fwalk_sglue>
 8004d06:	bf00      	nop
 8004d08:	2000000c 	.word	0x2000000c
 8004d0c:	08005351 	.word	0x08005351
 8004d10:	2000001c 	.word	0x2000001c

08004d14 <cleanup_stdio>:
 8004d14:	6841      	ldr	r1, [r0, #4]
 8004d16:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <cleanup_stdio+0x34>)
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	d001      	beq.n	8004d24 <cleanup_stdio+0x10>
 8004d20:	f000 fb16 	bl	8005350 <_fflush_r>
 8004d24:	68a1      	ldr	r1, [r4, #8]
 8004d26:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <cleanup_stdio+0x38>)
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	d002      	beq.n	8004d32 <cleanup_stdio+0x1e>
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 fb0f 	bl	8005350 <_fflush_r>
 8004d32:	68e1      	ldr	r1, [r4, #12]
 8004d34:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <cleanup_stdio+0x3c>)
 8004d36:	4299      	cmp	r1, r3
 8004d38:	d004      	beq.n	8004d44 <cleanup_stdio+0x30>
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d40:	f000 bb06 	b.w	8005350 <_fflush_r>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	bf00      	nop
 8004d48:	200000dc 	.word	0x200000dc
 8004d4c:	20000144 	.word	0x20000144
 8004d50:	200001ac 	.word	0x200001ac

08004d54 <global_stdio_init.part.0>:
 8004d54:	b510      	push	{r4, lr}
 8004d56:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <global_stdio_init.part.0+0x30>)
 8004d58:	4c0b      	ldr	r4, [pc, #44]	@ (8004d88 <global_stdio_init.part.0+0x34>)
 8004d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d8c <global_stdio_init.part.0+0x38>)
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	2200      	movs	r2, #0
 8004d62:	2104      	movs	r1, #4
 8004d64:	f7ff ff94 	bl	8004c90 <std>
 8004d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2109      	movs	r1, #9
 8004d70:	f7ff ff8e 	bl	8004c90 <std>
 8004d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d78:	2202      	movs	r2, #2
 8004d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7e:	2112      	movs	r1, #18
 8004d80:	f7ff bf86 	b.w	8004c90 <std>
 8004d84:	20000214 	.word	0x20000214
 8004d88:	200000dc 	.word	0x200000dc
 8004d8c:	08004cfd 	.word	0x08004cfd

08004d90 <__sfp_lock_acquire>:
 8004d90:	4801      	ldr	r0, [pc, #4]	@ (8004d98 <__sfp_lock_acquire+0x8>)
 8004d92:	f000 b9fe 	b.w	8005192 <__retarget_lock_acquire_recursive>
 8004d96:	bf00      	nop
 8004d98:	2000021d 	.word	0x2000021d

08004d9c <__sfp_lock_release>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <__sfp_lock_release+0x8>)
 8004d9e:	f000 b9f9 	b.w	8005194 <__retarget_lock_release_recursive>
 8004da2:	bf00      	nop
 8004da4:	2000021d 	.word	0x2000021d

08004da8 <__sinit>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	f7ff fff0 	bl	8004d90 <__sfp_lock_acquire>
 8004db0:	6a23      	ldr	r3, [r4, #32]
 8004db2:	b11b      	cbz	r3, 8004dbc <__sinit+0x14>
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db8:	f7ff bff0 	b.w	8004d9c <__sfp_lock_release>
 8004dbc:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <__sinit+0x28>)
 8004dbe:	6223      	str	r3, [r4, #32]
 8004dc0:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <__sinit+0x2c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f5      	bne.n	8004db4 <__sinit+0xc>
 8004dc8:	f7ff ffc4 	bl	8004d54 <global_stdio_init.part.0>
 8004dcc:	e7f2      	b.n	8004db4 <__sinit+0xc>
 8004dce:	bf00      	nop
 8004dd0:	08004d15 	.word	0x08004d15
 8004dd4:	20000214 	.word	0x20000214

08004dd8 <_fwalk_sglue>:
 8004dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4607      	mov	r7, r0
 8004dde:	4688      	mov	r8, r1
 8004de0:	4614      	mov	r4, r2
 8004de2:	2600      	movs	r6, #0
 8004de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004de8:	f1b9 0901 	subs.w	r9, r9, #1
 8004dec:	d505      	bpl.n	8004dfa <_fwalk_sglue+0x22>
 8004dee:	6824      	ldr	r4, [r4, #0]
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	d1f7      	bne.n	8004de4 <_fwalk_sglue+0xc>
 8004df4:	4630      	mov	r0, r6
 8004df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	89ab      	ldrh	r3, [r5, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d907      	bls.n	8004e10 <_fwalk_sglue+0x38>
 8004e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e04:	3301      	adds	r3, #1
 8004e06:	d003      	beq.n	8004e10 <_fwalk_sglue+0x38>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	47c0      	blx	r8
 8004e0e:	4306      	orrs	r6, r0
 8004e10:	3568      	adds	r5, #104	@ 0x68
 8004e12:	e7e9      	b.n	8004de8 <_fwalk_sglue+0x10>

08004e14 <_puts_r>:
 8004e14:	6a03      	ldr	r3, [r0, #32]
 8004e16:	b570      	push	{r4, r5, r6, lr}
 8004e18:	6884      	ldr	r4, [r0, #8]
 8004e1a:	4605      	mov	r5, r0
 8004e1c:	460e      	mov	r6, r1
 8004e1e:	b90b      	cbnz	r3, 8004e24 <_puts_r+0x10>
 8004e20:	f7ff ffc2 	bl	8004da8 <__sinit>
 8004e24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e26:	07db      	lsls	r3, r3, #31
 8004e28:	d405      	bmi.n	8004e36 <_puts_r+0x22>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	0598      	lsls	r0, r3, #22
 8004e2e:	d402      	bmi.n	8004e36 <_puts_r+0x22>
 8004e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e32:	f000 f9ae 	bl	8005192 <__retarget_lock_acquire_recursive>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	0719      	lsls	r1, r3, #28
 8004e3a:	d502      	bpl.n	8004e42 <_puts_r+0x2e>
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d135      	bne.n	8004eae <_puts_r+0x9a>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 f8c5 	bl	8004fd4 <__swsetup_r>
 8004e4a:	b380      	cbz	r0, 8004eae <_puts_r+0x9a>
 8004e4c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e52:	07da      	lsls	r2, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_puts_r+0x4e>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	059b      	lsls	r3, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_puts_r+0x4e>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e5e:	f000 f999 	bl	8005194 <__retarget_lock_release_recursive>
 8004e62:	4628      	mov	r0, r5
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da04      	bge.n	8004e74 <_puts_r+0x60>
 8004e6a:	69a2      	ldr	r2, [r4, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dc17      	bgt.n	8004ea0 <_puts_r+0x8c>
 8004e70:	290a      	cmp	r1, #10
 8004e72:	d015      	beq.n	8004ea0 <_puts_r+0x8c>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	6022      	str	r2, [r4, #0]
 8004e7a:	7019      	strb	r1, [r3, #0]
 8004e7c:	68a3      	ldr	r3, [r4, #8]
 8004e7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d1ed      	bne.n	8004e66 <_puts_r+0x52>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da11      	bge.n	8004eb2 <_puts_r+0x9e>
 8004e8e:	4622      	mov	r2, r4
 8004e90:	210a      	movs	r1, #10
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f85f 	bl	8004f56 <__swbuf_r>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d0d7      	beq.n	8004e4c <_puts_r+0x38>
 8004e9c:	250a      	movs	r5, #10
 8004e9e:	e7d7      	b.n	8004e50 <_puts_r+0x3c>
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f857 	bl	8004f56 <__swbuf_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d1e7      	bne.n	8004e7c <_puts_r+0x68>
 8004eac:	e7ce      	b.n	8004e4c <_puts_r+0x38>
 8004eae:	3e01      	subs	r6, #1
 8004eb0:	e7e4      	b.n	8004e7c <_puts_r+0x68>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	220a      	movs	r2, #10
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e7ee      	b.n	8004e9c <_puts_r+0x88>
	...

08004ec0 <puts>:
 8004ec0:	4b02      	ldr	r3, [pc, #8]	@ (8004ecc <puts+0xc>)
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f7ff bfa5 	b.w	8004e14 <_puts_r>
 8004eca:	bf00      	nop
 8004ecc:	20000018 	.word	0x20000018

08004ed0 <__sread>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	f000 f8fc 	bl	80050d4 <_read_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	bfab      	itete	ge
 8004ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ee4:	181b      	addge	r3, r3, r0
 8004ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004eea:	bfac      	ite	ge
 8004eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004eee:	81a3      	strhlt	r3, [r4, #12]
 8004ef0:	bd10      	pop	{r4, pc}

08004ef2 <__swrite>:
 8004ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	898b      	ldrh	r3, [r1, #12]
 8004efa:	05db      	lsls	r3, r3, #23
 8004efc:	4605      	mov	r5, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4616      	mov	r6, r2
 8004f02:	d505      	bpl.n	8004f10 <__swrite+0x1e>
 8004f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f08:	2302      	movs	r3, #2
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f000 f8d0 	bl	80050b0 <_lseek_r>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	463b      	mov	r3, r7
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	f000 b8f7 	b.w	8005118 <_write_r>

08004f2a <__sseek>:
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f32:	f000 f8bd 	bl	80050b0 <_lseek_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	bf15      	itete	ne
 8004f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f46:	81a3      	strheq	r3, [r4, #12]
 8004f48:	bf18      	it	ne
 8004f4a:	81a3      	strhne	r3, [r4, #12]
 8004f4c:	bd10      	pop	{r4, pc}

08004f4e <__sclose>:
 8004f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f52:	f000 b89d 	b.w	8005090 <_close_r>

08004f56 <__swbuf_r>:
 8004f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f58:	460e      	mov	r6, r1
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	b118      	cbz	r0, 8004f68 <__swbuf_r+0x12>
 8004f60:	6a03      	ldr	r3, [r0, #32]
 8004f62:	b90b      	cbnz	r3, 8004f68 <__swbuf_r+0x12>
 8004f64:	f7ff ff20 	bl	8004da8 <__sinit>
 8004f68:	69a3      	ldr	r3, [r4, #24]
 8004f6a:	60a3      	str	r3, [r4, #8]
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	071a      	lsls	r2, r3, #28
 8004f70:	d501      	bpl.n	8004f76 <__swbuf_r+0x20>
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	b943      	cbnz	r3, 8004f88 <__swbuf_r+0x32>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f82b 	bl	8004fd4 <__swsetup_r>
 8004f7e:	b118      	cbz	r0, 8004f88 <__swbuf_r+0x32>
 8004f80:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004f84:	4638      	mov	r0, r7
 8004f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	6922      	ldr	r2, [r4, #16]
 8004f8c:	1a98      	subs	r0, r3, r2
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	b2f6      	uxtb	r6, r6
 8004f92:	4283      	cmp	r3, r0
 8004f94:	4637      	mov	r7, r6
 8004f96:	dc05      	bgt.n	8004fa4 <__swbuf_r+0x4e>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 f9d8 	bl	8005350 <_fflush_r>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d1ed      	bne.n	8004f80 <__swbuf_r+0x2a>
 8004fa4:	68a3      	ldr	r3, [r4, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60a3      	str	r3, [r4, #8]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	701e      	strb	r6, [r3, #0]
 8004fb2:	6962      	ldr	r2, [r4, #20]
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d004      	beq.n	8004fc4 <__swbuf_r+0x6e>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	07db      	lsls	r3, r3, #31
 8004fbe:	d5e1      	bpl.n	8004f84 <__swbuf_r+0x2e>
 8004fc0:	2e0a      	cmp	r6, #10
 8004fc2:	d1df      	bne.n	8004f84 <__swbuf_r+0x2e>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f9c2 	bl	8005350 <_fflush_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0d9      	beq.n	8004f84 <__swbuf_r+0x2e>
 8004fd0:	e7d6      	b.n	8004f80 <__swbuf_r+0x2a>
	...

08004fd4 <__swsetup_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4b29      	ldr	r3, [pc, #164]	@ (800507c <__swsetup_r+0xa8>)
 8004fd8:	4605      	mov	r5, r0
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	460c      	mov	r4, r1
 8004fde:	b118      	cbz	r0, 8004fe8 <__swsetup_r+0x14>
 8004fe0:	6a03      	ldr	r3, [r0, #32]
 8004fe2:	b90b      	cbnz	r3, 8004fe8 <__swsetup_r+0x14>
 8004fe4:	f7ff fee0 	bl	8004da8 <__sinit>
 8004fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fec:	0719      	lsls	r1, r3, #28
 8004fee:	d422      	bmi.n	8005036 <__swsetup_r+0x62>
 8004ff0:	06da      	lsls	r2, r3, #27
 8004ff2:	d407      	bmi.n	8005004 <__swsetup_r+0x30>
 8004ff4:	2209      	movs	r2, #9
 8004ff6:	602a      	str	r2, [r5, #0]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005002:	e033      	b.n	800506c <__swsetup_r+0x98>
 8005004:	0758      	lsls	r0, r3, #29
 8005006:	d512      	bpl.n	800502e <__swsetup_r+0x5a>
 8005008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800500a:	b141      	cbz	r1, 800501e <__swsetup_r+0x4a>
 800500c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005010:	4299      	cmp	r1, r3
 8005012:	d002      	beq.n	800501a <__swsetup_r+0x46>
 8005014:	4628      	mov	r0, r5
 8005016:	f000 f8cd 	bl	80051b4 <_free_r>
 800501a:	2300      	movs	r3, #0
 800501c:	6363      	str	r3, [r4, #52]	@ 0x34
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	2300      	movs	r3, #0
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	b94b      	cbnz	r3, 800504e <__swsetup_r+0x7a>
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005044:	d003      	beq.n	800504e <__swsetup_r+0x7a>
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 f9cf 	bl	80053ec <__smakebuf_r>
 800504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005052:	f013 0201 	ands.w	r2, r3, #1
 8005056:	d00a      	beq.n	800506e <__swsetup_r+0x9a>
 8005058:	2200      	movs	r2, #0
 800505a:	60a2      	str	r2, [r4, #8]
 800505c:	6962      	ldr	r2, [r4, #20]
 800505e:	4252      	negs	r2, r2
 8005060:	61a2      	str	r2, [r4, #24]
 8005062:	6922      	ldr	r2, [r4, #16]
 8005064:	b942      	cbnz	r2, 8005078 <__swsetup_r+0xa4>
 8005066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800506a:	d1c5      	bne.n	8004ff8 <__swsetup_r+0x24>
 800506c:	bd38      	pop	{r3, r4, r5, pc}
 800506e:	0799      	lsls	r1, r3, #30
 8005070:	bf58      	it	pl
 8005072:	6962      	ldrpl	r2, [r4, #20]
 8005074:	60a2      	str	r2, [r4, #8]
 8005076:	e7f4      	b.n	8005062 <__swsetup_r+0x8e>
 8005078:	2000      	movs	r0, #0
 800507a:	e7f7      	b.n	800506c <__swsetup_r+0x98>
 800507c:	20000018 	.word	0x20000018

08005080 <memset>:
 8005080:	4402      	add	r2, r0
 8005082:	4603      	mov	r3, r0
 8005084:	4293      	cmp	r3, r2
 8005086:	d100      	bne.n	800508a <memset+0xa>
 8005088:	4770      	bx	lr
 800508a:	f803 1b01 	strb.w	r1, [r3], #1
 800508e:	e7f9      	b.n	8005084 <memset+0x4>

08005090 <_close_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	@ (80050ac <_close_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fbdb 	bl	8000856 <_close>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_close_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_close_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000218 	.word	0x20000218

080050b0 <_lseek_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	@ (80050d0 <_lseek_r+0x20>)
 80050b4:	4604      	mov	r4, r0
 80050b6:	4608      	mov	r0, r1
 80050b8:	4611      	mov	r1, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	602a      	str	r2, [r5, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f7fb fbf0 	bl	80008a4 <_lseek>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_lseek_r+0x1e>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_lseek_r+0x1e>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20000218 	.word	0x20000218

080050d4 <_read_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d07      	ldr	r5, [pc, #28]	@ (80050f4 <_read_r+0x20>)
 80050d8:	4604      	mov	r4, r0
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	602a      	str	r2, [r5, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f7fb fb7e 	bl	80007e4 <_read>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_read_r+0x1e>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_read_r+0x1e>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20000218 	.word	0x20000218

080050f8 <_sbrk_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4d06      	ldr	r5, [pc, #24]	@ (8005114 <_sbrk_r+0x1c>)
 80050fc:	2300      	movs	r3, #0
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fb fbdc 	bl	80008c0 <_sbrk>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_sbrk_r+0x1a>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_sbrk_r+0x1a>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	20000218 	.word	0x20000218

08005118 <_write_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d07      	ldr	r5, [pc, #28]	@ (8005138 <_write_r+0x20>)
 800511c:	4604      	mov	r4, r0
 800511e:	4608      	mov	r0, r1
 8005120:	4611      	mov	r1, r2
 8005122:	2200      	movs	r2, #0
 8005124:	602a      	str	r2, [r5, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	f7fb fb79 	bl	800081e <_write>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_write_r+0x1e>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_write_r+0x1e>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	20000218 	.word	0x20000218

0800513c <__errno>:
 800513c:	4b01      	ldr	r3, [pc, #4]	@ (8005144 <__errno+0x8>)
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000018 	.word	0x20000018

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4d0d      	ldr	r5, [pc, #52]	@ (8005180 <__libc_init_array+0x38>)
 800514c:	4c0d      	ldr	r4, [pc, #52]	@ (8005184 <__libc_init_array+0x3c>)
 800514e:	1b64      	subs	r4, r4, r5
 8005150:	10a4      	asrs	r4, r4, #2
 8005152:	2600      	movs	r6, #0
 8005154:	42a6      	cmp	r6, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	4d0b      	ldr	r5, [pc, #44]	@ (8005188 <__libc_init_array+0x40>)
 800515a:	4c0c      	ldr	r4, [pc, #48]	@ (800518c <__libc_init_array+0x44>)
 800515c:	f000 f9a4 	bl	80054a8 <_init>
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	2600      	movs	r6, #0
 8005166:	42a6      	cmp	r6, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005170:	4798      	blx	r3
 8005172:	3601      	adds	r6, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	f855 3b04 	ldr.w	r3, [r5], #4
 800517a:	4798      	blx	r3
 800517c:	3601      	adds	r6, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	08005ae0 	.word	0x08005ae0
 8005184:	08005ae0 	.word	0x08005ae0
 8005188:	08005ae0 	.word	0x08005ae0
 800518c:	08005ae4 	.word	0x08005ae4

08005190 <__retarget_lock_init_recursive>:
 8005190:	4770      	bx	lr

08005192 <__retarget_lock_acquire_recursive>:
 8005192:	4770      	bx	lr

08005194 <__retarget_lock_release_recursive>:
 8005194:	4770      	bx	lr

08005196 <memcpy>:
 8005196:	440a      	add	r2, r1
 8005198:	4291      	cmp	r1, r2
 800519a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800519e:	d100      	bne.n	80051a2 <memcpy+0xc>
 80051a0:	4770      	bx	lr
 80051a2:	b510      	push	{r4, lr}
 80051a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ac:	4291      	cmp	r1, r2
 80051ae:	d1f9      	bne.n	80051a4 <memcpy+0xe>
 80051b0:	bd10      	pop	{r4, pc}
	...

080051b4 <_free_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4605      	mov	r5, r0
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d041      	beq.n	8005240 <_free_r+0x8c>
 80051bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c0:	1f0c      	subs	r4, r1, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfb8      	it	lt
 80051c6:	18e4      	addlt	r4, r4, r3
 80051c8:	f7ff fd56 	bl	8004c78 <__malloc_lock>
 80051cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005244 <_free_r+0x90>)
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	b933      	cbnz	r3, 80051e0 <_free_r+0x2c>
 80051d2:	6063      	str	r3, [r4, #4]
 80051d4:	6014      	str	r4, [r2, #0]
 80051d6:	4628      	mov	r0, r5
 80051d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051dc:	f7ff bd52 	b.w	8004c84 <__malloc_unlock>
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d908      	bls.n	80051f6 <_free_r+0x42>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	1821      	adds	r1, r4, r0
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf01      	itttt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	1809      	addeq	r1, r1, r0
 80051f2:	6021      	streq	r1, [r4, #0]
 80051f4:	e7ed      	b.n	80051d2 <_free_r+0x1e>
 80051f6:	461a      	mov	r2, r3
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b10b      	cbz	r3, 8005200 <_free_r+0x4c>
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d9fa      	bls.n	80051f6 <_free_r+0x42>
 8005200:	6811      	ldr	r1, [r2, #0]
 8005202:	1850      	adds	r0, r2, r1
 8005204:	42a0      	cmp	r0, r4
 8005206:	d10b      	bne.n	8005220 <_free_r+0x6c>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	4401      	add	r1, r0
 800520c:	1850      	adds	r0, r2, r1
 800520e:	4283      	cmp	r3, r0
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	d1e0      	bne.n	80051d6 <_free_r+0x22>
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	6053      	str	r3, [r2, #4]
 800521a:	4408      	add	r0, r1
 800521c:	6010      	str	r0, [r2, #0]
 800521e:	e7da      	b.n	80051d6 <_free_r+0x22>
 8005220:	d902      	bls.n	8005228 <_free_r+0x74>
 8005222:	230c      	movs	r3, #12
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	e7d6      	b.n	80051d6 <_free_r+0x22>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	1821      	adds	r1, r4, r0
 800522c:	428b      	cmp	r3, r1
 800522e:	bf04      	itt	eq
 8005230:	6819      	ldreq	r1, [r3, #0]
 8005232:	685b      	ldreq	r3, [r3, #4]
 8005234:	6063      	str	r3, [r4, #4]
 8005236:	bf04      	itt	eq
 8005238:	1809      	addeq	r1, r1, r0
 800523a:	6021      	streq	r1, [r4, #0]
 800523c:	6054      	str	r4, [r2, #4]
 800523e:	e7ca      	b.n	80051d6 <_free_r+0x22>
 8005240:	bd38      	pop	{r3, r4, r5, pc}
 8005242:	bf00      	nop
 8005244:	200000d8 	.word	0x200000d8

08005248 <__sflush_r>:
 8005248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	0716      	lsls	r6, r2, #28
 8005252:	4605      	mov	r5, r0
 8005254:	460c      	mov	r4, r1
 8005256:	d454      	bmi.n	8005302 <__sflush_r+0xba>
 8005258:	684b      	ldr	r3, [r1, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	dc02      	bgt.n	8005264 <__sflush_r+0x1c>
 800525e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	dd48      	ble.n	80052f6 <__sflush_r+0xae>
 8005264:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005266:	2e00      	cmp	r6, #0
 8005268:	d045      	beq.n	80052f6 <__sflush_r+0xae>
 800526a:	2300      	movs	r3, #0
 800526c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005270:	682f      	ldr	r7, [r5, #0]
 8005272:	6a21      	ldr	r1, [r4, #32]
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	d030      	beq.n	80052da <__sflush_r+0x92>
 8005278:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	0759      	lsls	r1, r3, #29
 800527e:	d505      	bpl.n	800528c <__sflush_r+0x44>
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	1ad2      	subs	r2, r2, r3
 8005284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005286:	b10b      	cbz	r3, 800528c <__sflush_r+0x44>
 8005288:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800528a:	1ad2      	subs	r2, r2, r3
 800528c:	2300      	movs	r3, #0
 800528e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	4628      	mov	r0, r5
 8005294:	47b0      	blx	r6
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	d106      	bne.n	80052aa <__sflush_r+0x62>
 800529c:	6829      	ldr	r1, [r5, #0]
 800529e:	291d      	cmp	r1, #29
 80052a0:	d82b      	bhi.n	80052fa <__sflush_r+0xb2>
 80052a2:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <__sflush_r+0x104>)
 80052a4:	40ca      	lsrs	r2, r1
 80052a6:	07d6      	lsls	r6, r2, #31
 80052a8:	d527      	bpl.n	80052fa <__sflush_r+0xb2>
 80052aa:	2200      	movs	r2, #0
 80052ac:	6062      	str	r2, [r4, #4]
 80052ae:	04d9      	lsls	r1, r3, #19
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	6022      	str	r2, [r4, #0]
 80052b4:	d504      	bpl.n	80052c0 <__sflush_r+0x78>
 80052b6:	1c42      	adds	r2, r0, #1
 80052b8:	d101      	bne.n	80052be <__sflush_r+0x76>
 80052ba:	682b      	ldr	r3, [r5, #0]
 80052bc:	b903      	cbnz	r3, 80052c0 <__sflush_r+0x78>
 80052be:	6560      	str	r0, [r4, #84]	@ 0x54
 80052c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052c2:	602f      	str	r7, [r5, #0]
 80052c4:	b1b9      	cbz	r1, 80052f6 <__sflush_r+0xae>
 80052c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052ca:	4299      	cmp	r1, r3
 80052cc:	d002      	beq.n	80052d4 <__sflush_r+0x8c>
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7ff ff70 	bl	80051b4 <_free_r>
 80052d4:	2300      	movs	r3, #0
 80052d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80052d8:	e00d      	b.n	80052f6 <__sflush_r+0xae>
 80052da:	2301      	movs	r3, #1
 80052dc:	4628      	mov	r0, r5
 80052de:	47b0      	blx	r6
 80052e0:	4602      	mov	r2, r0
 80052e2:	1c50      	adds	r0, r2, #1
 80052e4:	d1c9      	bne.n	800527a <__sflush_r+0x32>
 80052e6:	682b      	ldr	r3, [r5, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0c6      	beq.n	800527a <__sflush_r+0x32>
 80052ec:	2b1d      	cmp	r3, #29
 80052ee:	d001      	beq.n	80052f4 <__sflush_r+0xac>
 80052f0:	2b16      	cmp	r3, #22
 80052f2:	d11e      	bne.n	8005332 <__sflush_r+0xea>
 80052f4:	602f      	str	r7, [r5, #0]
 80052f6:	2000      	movs	r0, #0
 80052f8:	e022      	b.n	8005340 <__sflush_r+0xf8>
 80052fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052fe:	b21b      	sxth	r3, r3
 8005300:	e01b      	b.n	800533a <__sflush_r+0xf2>
 8005302:	690f      	ldr	r7, [r1, #16]
 8005304:	2f00      	cmp	r7, #0
 8005306:	d0f6      	beq.n	80052f6 <__sflush_r+0xae>
 8005308:	0793      	lsls	r3, r2, #30
 800530a:	680e      	ldr	r6, [r1, #0]
 800530c:	bf08      	it	eq
 800530e:	694b      	ldreq	r3, [r1, #20]
 8005310:	600f      	str	r7, [r1, #0]
 8005312:	bf18      	it	ne
 8005314:	2300      	movne	r3, #0
 8005316:	eba6 0807 	sub.w	r8, r6, r7
 800531a:	608b      	str	r3, [r1, #8]
 800531c:	f1b8 0f00 	cmp.w	r8, #0
 8005320:	dde9      	ble.n	80052f6 <__sflush_r+0xae>
 8005322:	6a21      	ldr	r1, [r4, #32]
 8005324:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005326:	4643      	mov	r3, r8
 8005328:	463a      	mov	r2, r7
 800532a:	4628      	mov	r0, r5
 800532c:	47b0      	blx	r6
 800532e:	2800      	cmp	r0, #0
 8005330:	dc08      	bgt.n	8005344 <__sflush_r+0xfc>
 8005332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005344:	4407      	add	r7, r0
 8005346:	eba8 0800 	sub.w	r8, r8, r0
 800534a:	e7e7      	b.n	800531c <__sflush_r+0xd4>
 800534c:	20400001 	.word	0x20400001

08005350 <_fflush_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	4605      	mov	r5, r0
 8005356:	460c      	mov	r4, r1
 8005358:	b913      	cbnz	r3, 8005360 <_fflush_r+0x10>
 800535a:	2500      	movs	r5, #0
 800535c:	4628      	mov	r0, r5
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	b118      	cbz	r0, 800536a <_fflush_r+0x1a>
 8005362:	6a03      	ldr	r3, [r0, #32]
 8005364:	b90b      	cbnz	r3, 800536a <_fflush_r+0x1a>
 8005366:	f7ff fd1f 	bl	8004da8 <__sinit>
 800536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f3      	beq.n	800535a <_fflush_r+0xa>
 8005372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005374:	07d0      	lsls	r0, r2, #31
 8005376:	d404      	bmi.n	8005382 <_fflush_r+0x32>
 8005378:	0599      	lsls	r1, r3, #22
 800537a:	d402      	bmi.n	8005382 <_fflush_r+0x32>
 800537c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800537e:	f7ff ff08 	bl	8005192 <__retarget_lock_acquire_recursive>
 8005382:	4628      	mov	r0, r5
 8005384:	4621      	mov	r1, r4
 8005386:	f7ff ff5f 	bl	8005248 <__sflush_r>
 800538a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800538c:	07da      	lsls	r2, r3, #31
 800538e:	4605      	mov	r5, r0
 8005390:	d4e4      	bmi.n	800535c <_fflush_r+0xc>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	d4e1      	bmi.n	800535c <_fflush_r+0xc>
 8005398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800539a:	f7ff fefb 	bl	8005194 <__retarget_lock_release_recursive>
 800539e:	e7dd      	b.n	800535c <_fflush_r+0xc>

080053a0 <__swhatbuf_r>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	460c      	mov	r4, r1
 80053a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a8:	2900      	cmp	r1, #0
 80053aa:	b096      	sub	sp, #88	@ 0x58
 80053ac:	4615      	mov	r5, r2
 80053ae:	461e      	mov	r6, r3
 80053b0:	da0d      	bge.n	80053ce <__swhatbuf_r+0x2e>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	bf14      	ite	ne
 80053be:	2340      	movne	r3, #64	@ 0x40
 80053c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053c4:	2000      	movs	r0, #0
 80053c6:	6031      	str	r1, [r6, #0]
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	b016      	add	sp, #88	@ 0x58
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	466a      	mov	r2, sp
 80053d0:	f000 f848 	bl	8005464 <_fstat_r>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	dbec      	blt.n	80053b2 <__swhatbuf_r+0x12>
 80053d8:	9901      	ldr	r1, [sp, #4]
 80053da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053e2:	4259      	negs	r1, r3
 80053e4:	4159      	adcs	r1, r3
 80053e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ea:	e7eb      	b.n	80053c4 <__swhatbuf_r+0x24>

080053ec <__smakebuf_r>:
 80053ec:	898b      	ldrh	r3, [r1, #12]
 80053ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f0:	079d      	lsls	r5, r3, #30
 80053f2:	4606      	mov	r6, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	d507      	bpl.n	8005408 <__smakebuf_r+0x1c>
 80053f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	2301      	movs	r3, #1
 8005402:	6163      	str	r3, [r4, #20]
 8005404:	b003      	add	sp, #12
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005408:	ab01      	add	r3, sp, #4
 800540a:	466a      	mov	r2, sp
 800540c:	f7ff ffc8 	bl	80053a0 <__swhatbuf_r>
 8005410:	9f00      	ldr	r7, [sp, #0]
 8005412:	4605      	mov	r5, r0
 8005414:	4639      	mov	r1, r7
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff fbae 	bl	8004b78 <_malloc_r>
 800541c:	b948      	cbnz	r0, 8005432 <__smakebuf_r+0x46>
 800541e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005422:	059a      	lsls	r2, r3, #22
 8005424:	d4ee      	bmi.n	8005404 <__smakebuf_r+0x18>
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	f043 0302 	orr.w	r3, r3, #2
 800542e:	81a3      	strh	r3, [r4, #12]
 8005430:	e7e2      	b.n	80053f8 <__smakebuf_r+0xc>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	6020      	str	r0, [r4, #0]
 8005436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005442:	b15b      	cbz	r3, 800545c <__smakebuf_r+0x70>
 8005444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005448:	4630      	mov	r0, r6
 800544a:	f000 f81d 	bl	8005488 <_isatty_r>
 800544e:	b128      	cbz	r0, 800545c <__smakebuf_r+0x70>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	431d      	orrs	r5, r3
 8005460:	81a5      	strh	r5, [r4, #12]
 8005462:	e7cf      	b.n	8005404 <__smakebuf_r+0x18>

08005464 <_fstat_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	@ (8005484 <_fstat_r+0x20>)
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f7fb f9fc 	bl	800086e <_fstat>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d102      	bne.n	8005480 <_fstat_r+0x1c>
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	b103      	cbz	r3, 8005480 <_fstat_r+0x1c>
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	20000218 	.word	0x20000218

08005488 <_isatty_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d06      	ldr	r5, [pc, #24]	@ (80054a4 <_isatty_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb f9fb 	bl	800088e <_isatty>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_isatty_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_isatty_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000218 	.word	0x20000218

080054a8 <_init>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr

080054b4 <_fini>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr
